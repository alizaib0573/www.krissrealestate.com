(function() {
    var AjaxMonitor, Bar, DocumentMonitor, ElementMonitor, ElementTracker, EventLagMonitor, Evented, Events, NoTargetError, Pace, RequestIntercept, SOURCE_KEYS, Scaler, SocketRequestTracker, XHRRequestTracker, animation, avgAmplitude, bar, cancelAnimation, cancelAnimationFrame, defaultOptions, extend, extendNative, getFromDOM, getIntercept, handlePushState, ignoreStack, init, now, options, requestAnimationFrame, result, runAnimation, scalers, shouldIgnoreURL, shouldTrack, source, sources, uniScaler, _WebSocket, _XDomainRequest, _XMLHttpRequest, _i, _intercept, _len, _pushState, _ref, _ref1, _replaceState,
        __slice = [].slice,
        __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        __indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    defaultOptions = {
        catchupTime: 100,
        initialRate: .03,
        minTime: 250,
        ghostTime: 100,
        maxProgressPerFrame: 20,
        easeFactor: 1.25,
        startOnPageLoad: true,
        restartOnPushState: true,
        restartOnRequestAfter: 500,
        target: 'body',
        elements: {
            checkInterval: 100,
            selectors: ['body']
        },
        eventLag: {
            minSamples: 10,
            sampleCount: 3,
            lagThreshold: 3
        },
        ajax: {
            trackMethods: ['GET'],
            trackWebSockets: true,
            ignoreURLs: []
        }
    };

    now = function() {
        var _ref;
        return (_ref = typeof performance !== "undefined" && performance !== null ? typeof performance.now === "function" ? performance.now() : void 0 : void 0) != null ? _ref : +(new Date);
    };

    requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

    cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

    if (requestAnimationFrame == null) {
        requestAnimationFrame = function(fn) {
            return setTimeout(fn, 50);
        };
        cancelAnimationFrame = function(id) {
            return clearTimeout(id);
        };
    }

    runAnimation = function(fn) {
        var last, tick;
        last = now();
        tick = function() {
            var diff;
            diff = now() - last;
            if (diff >= 33) {
                last = now();
                return fn(diff, function() {
                    return requestAnimationFrame(tick);
                });
            } else {
                return setTimeout(tick, 33 - diff);
            }
        };
        return tick();
    };

    result = function() {
        var args, key, obj;
        obj = arguments[0], key = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (typeof obj[key] === 'function') {
            return obj[key].apply(obj, args);
        } else {
            return obj[key];
        }
    };

    extend = function() {
        var key, out, source, sources, val, _i, _len;
        out = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        for (_i = 0, _len = sources.length; _i < _len; _i++) {
            source = sources[_i];
            if (source) {
                for (key in source) {
                    if (!__hasProp.call(source, key)) continue;
                    val = source[key];
                    if ((out[key] != null) && typeof out[key] === 'object' && (val != null) && typeof val === 'object') {
                        extend(out[key], val);
                    } else {
                        out[key] = val;
                    }
                }
            }
        }
        return out;
    };

    avgAmplitude = function(arr) {
        var count, sum, v, _i, _len;
        sum = count = 0;
        for (_i = 0, _len = arr.length; _i < _len; _i++) {
            v = arr[_i];
            sum += Math.abs(v);
            count++;
        }
        return sum / count;
    };

    getFromDOM = function(key, json) {
        var data, e, el;
        if (key == null) {
            key = 'options';
        }
        if (json == null) {
            json = true;
        }
        el = document.querySelector("[data-pace-" + key + "]");
        if (!el) {
            return;
        }
        data = el.getAttribute("data-pace-" + key);
        if (!json) {
            return data;
        }
        try {
            return JSON.parse(data);
        } catch (_error) {
            e = _error;
            return typeof console !== "undefined" && console !== null ? console.error("Error parsing inline pace options", e) : void 0;
        }
    };

    Evented = (function() {
        function Evented() {}

        Evented.prototype.on = function(event, handler, ctx, once) {
            var _base;
            if (once == null) {
                once = false;
            }
            if (this.bindings == null) {
                this.bindings = {};
            }
            if ((_base = this.bindings)[event] == null) {
                _base[event] = [];
            }
            return this.bindings[event].push({
                handler: handler,
                ctx: ctx,
                once: once
            });
        };

        Evented.prototype.once = function(event, handler, ctx) {
            return this.on(event, handler, ctx, true);
        };

        Evented.prototype.off = function(event, handler) {
            var i, _ref, _results;
            if (((_ref = this.bindings) != null ? _ref[event] : void 0) == null) {
                return;
            }
            if (handler == null) {
                return delete this.bindings[event];
            } else {
                i = 0;
                _results = [];
                while (i < this.bindings[event].length) {
                    if (this.bindings[event][i].handler === handler) {
                        _results.push(this.bindings[event].splice(i, 1));
                    } else {
                        _results.push(i++);
                    }
                }
                return _results;
            }
        };

        Evented.prototype.trigger = function() {
            var args, ctx, event, handler, i, once, _ref, _ref1, _results;
            event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            if ((_ref = this.bindings) != null ? _ref[event] : void 0) {
                i = 0;
                _results = [];
                while (i < this.bindings[event].length) {
                    _ref1 = this.bindings[event][i], handler = _ref1.handler, ctx = _ref1.ctx, once = _ref1.once;
                    handler.apply(ctx != null ? ctx : this, args);
                    if (once) {
                        _results.push(this.bindings[event].splice(i, 1));
                    } else {
                        _results.push(i++);
                    }
                }
                return _results;
            }
        };

        return Evented;

    })();

    Pace = window.Pace || {};

    window.Pace = Pace;

    extend(Pace, Evented.prototype);

    options = Pace.options = extend({}, defaultOptions, window.paceOptions, getFromDOM());

    _ref = ['ajax', 'document', 'eventLag', 'elements'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        if (options[source] === true) {
            options[source] = defaultOptions[source];
        }
    }

    NoTargetError = (function(_super) {
        __extends(NoTargetError, _super);

        function NoTargetError() {
            _ref1 = NoTargetError.__super__.constructor.apply(this, arguments);
            return _ref1;
        }

        return NoTargetError;

    })(Error);

    Bar = (function() {
        function Bar() {
            this.progress = 0;
        }

        Bar.prototype.getElement = function() {
            var targetElement;
            if (this.el == null) {
                targetElement = document.querySelector(options.target);
                if (!targetElement) {
                    throw new NoTargetError;
                }
                this.el = document.createElement('div');
                this.el.className = "pace pace-active";
                document.body.className = document.body.className.replace(/pace-done/g, '');
                document.body.className += ' pace-running';
                this.el.innerHTML = '<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>';
                if (targetElement.firstChild != null) {
                    targetElement.insertBefore(this.el, targetElement.firstChild);
                } else {
                    targetElement.appendChild(this.el);
                }
            }
            return this.el;
        };

        Bar.prototype.finish = function() {
            var el;
            el = this.getElement();
            el.className = el.className.replace('pace-active', '');
            el.className += ' pace-inactive';
            document.body.className = document.body.className.replace('pace-running', '');
            return document.body.className += ' pace-done';
        };

        Bar.prototype.update = function(prog) {
            this.progress = prog;
            return this.render();
        };

        Bar.prototype.destroy = function() {
            try {
                this.getElement().parentNode.removeChild(this.getElement());
            } catch (_error) {
                NoTargetError = _error;
            }
            return this.el = void 0;
        };

        Bar.prototype.render = function() {
            var el, key, progressStr, transform, _j, _len1, _ref2;
            if (document.querySelector(options.target) == null) {
                return false;
            }
            el = this.getElement();
            transform = "translate3d(" + this.progress + "%, 0, 0)";
            _ref2 = ['webkitTransform', 'msTransform', 'transform'];
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                key = _ref2[_j];
                el.children[0].style[key] = transform;
            }
            if (!this.lastRenderedProgress || this.lastRenderedProgress | 0 !== this.progress | 0) {
                el.children[0].setAttribute('data-progress-text', "" + (this.progress | 0) + "%");
                Pace.trigger('update', this.progress);
                if (this.progress >= 100) {
                    progressStr = '99';
                } else {
                    progressStr = this.progress < 10 ? "0" : "";
                    progressStr += this.progress | 0;
                }
                el.children[0].setAttribute('data-progress', "" + progressStr);
            }
            return this.lastRenderedProgress = this.progress;
        };

        Bar.prototype.done = function() {
            return this.progress >= 100;
        };

        return Bar;

    })();

    Events = (function() {
        function Events() {
            this.bindings = {};
        }

        Events.prototype.trigger = function(name, val) {
            var binding, _j, _len1, _ref2, _results;
            if (this.bindings[name] != null) {
                _ref2 = this.bindings[name];
                _results = [];
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                    binding = _ref2[_j];
                    _results.push(binding.call(this, val));
                }
                return _results;
            }
        };

        Events.prototype.on = function(name, fn) {
            var _base;
            if ((_base = this.bindings)[name] == null) {
                _base[name] = [];
            }
            return this.bindings[name].push(fn);
        };

        return Events;

    })();

    _XMLHttpRequest = window.XMLHttpRequest;

    _XDomainRequest = window.XDomainRequest;

    _WebSocket = window.WebSocket;

    extendNative = function(to, from) {
        var e, key, _results;
        _results = [];
        for (key in from.prototype) {
            try {
                if ((to[key] == null) && typeof from[key] !== 'function') {
                    if (typeof Object.defineProperty === 'function') {
                        _results.push(Object.defineProperty(to, key, {
                            get: function() {
                                return from.prototype[key];
                            },
                            configurable: true,
                            enumerable: true
                        }));
                    } else {
                        _results.push(to[key] = from.prototype[key]);
                    }
                } else {
                    _results.push(void 0);
                }
            } catch (_error) {
                e = _error;
            }
        }
        return _results;
    };

    ignoreStack = [];

    Pace.ignore = function() {
        var args, fn, ret;
        fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        ignoreStack.unshift('ignore');
        ret = fn.apply(null, args);
        ignoreStack.shift();
        return ret;
    };

    Pace.track = function() {
        var args, fn, ret;
        fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        ignoreStack.unshift('track');
        ret = fn.apply(null, args);
        ignoreStack.shift();
        return ret;
    };

    shouldTrack = function(method) {
        var _ref2;
        if (method == null) {
            method = 'GET';
        }
        if (ignoreStack[0] === 'track') {
            return 'force';
        }
        if (!ignoreStack.length && options.ajax) {
            if (method === 'socket' && options.ajax.trackWebSockets) {
                return true;
            } else if (_ref2 = method.toUpperCase(), __indexOf.call(options.ajax.trackMethods, _ref2) >= 0) {
                return true;
            }
        }
        return false;
    };

    RequestIntercept = (function(_super) {
        __extends(RequestIntercept, _super);

        function RequestIntercept() {
            var monitorXHR,
                _this = this;
            RequestIntercept.__super__.constructor.apply(this, arguments);
            monitorXHR = function(req) {
                var _open;
                _open = req.open;
                return req.open = function(type, url, async) {
                    if (shouldTrack(type)) {
                        _this.trigger('request', {
                            type: type,
                            url: url,
                            request: req
                        });
                    }
                    return _open.apply(req, arguments);
                };
            };
            window.XMLHttpRequest = function(flags) {
                var req;
                req = new _XMLHttpRequest(flags);
                monitorXHR(req);
                return req;
            };
            try {
                extendNative(window.XMLHttpRequest, _XMLHttpRequest);
            } catch (_error) {}
            if (_XDomainRequest != null) {
                window.XDomainRequest = function() {
                    var req;
                    req = new _XDomainRequest;
                    monitorXHR(req);
                    return req;
                };
                try {
                    extendNative(window.XDomainRequest, _XDomainRequest);
                } catch (_error) {}
            }
            if ((_WebSocket != null) && options.ajax.trackWebSockets) {
                window.WebSocket = function(url, protocols) {
                    var req;
                    if (protocols != null) {
                        req = new _WebSocket(url, protocols);
                    } else {
                        req = new _WebSocket(url);
                    }
                    if (shouldTrack('socket')) {
                        _this.trigger('request', {
                            type: 'socket',
                            url: url,
                            protocols: protocols,
                            request: req
                        });
                    }
                    return req;
                };
                try {
                    extendNative(window.WebSocket, _WebSocket);
                } catch (_error) {}
            }
        }

        return RequestIntercept;

    })(Events);

    _intercept = null;

    getIntercept = function() {
        if (_intercept == null) {
            _intercept = new RequestIntercept;
        }
        return _intercept;
    };

    shouldIgnoreURL = function(url) {
        var pattern, _j, _len1, _ref2;
        _ref2 = options.ajax.ignoreURLs;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            pattern = _ref2[_j];
            if (typeof pattern === 'string') {
                if (url.indexOf(pattern) !== -1) {
                    return true;
                }
            } else {
                if (pattern.test(url)) {
                    return true;
                }
            }
        }
        return false;
    };

    getIntercept().on('request', function(_arg) {
        var after, args, request, type, url;
        type = _arg.type, request = _arg.request, url = _arg.url;
        if (shouldIgnoreURL(url)) {
            return;
        }
        if (!Pace.running && (options.restartOnRequestAfter !== false || shouldTrack(type) === 'force')) {
            args = arguments;
            after = options.restartOnRequestAfter || 0;
            if (typeof after === 'boolean') {
                after = 0;
            }
            return setTimeout(function() {
                var stillActive, _j, _len1, _ref2, _ref3, _results;
                if (type === 'socket') {
                    stillActive = request.readyState < 2;
                } else {
                    stillActive = (0 < (_ref2 = request.readyState) && _ref2 < 4);
                }
                if (stillActive) {
                    Pace.restart();
                    _ref3 = Pace.sources;
                    _results = [];
                    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
                        source = _ref3[_j];
                        if (source instanceof AjaxMonitor) {
                            source.watch.apply(source, args);
                            break;
                        } else {
                            _results.push(void 0);
                        }
                    }
                    return _results;
                }
            }, after);
        }
    });

    AjaxMonitor = (function() {
        function AjaxMonitor() {
            var _this = this;
            this.elements = [];
            getIntercept().on('request', function() {
                return _this.watch.apply(_this, arguments);
            });
        }

        AjaxMonitor.prototype.watch = function(_arg) {
            var request, tracker, type, url;
            type = _arg.type, request = _arg.request, url = _arg.url;
            if (shouldIgnoreURL(url)) {
                return;
            }
            if (type === 'socket') {
                tracker = new SocketRequestTracker(request);
            } else {
                tracker = new XHRRequestTracker(request);
            }
            return this.elements.push(tracker);
        };

        return AjaxMonitor;

    })();

    XHRRequestTracker = (function() {
        function XHRRequestTracker(request) {
            var event, size, _j, _len1, _onreadystatechange, _ref2,
                _this = this;
            this.progress = 0;
            if (window.ProgressEvent != null) {
                size = null;
                request.addEventListener('progress', function(evt) {
                    if (evt.lengthComputable) {
                        return _this.progress = 100 * evt.loaded / evt.total;
                    } else {
                        return _this.progress = _this.progress + (100 - _this.progress) / 2;
                    }
                }, false);
                _ref2 = ['load', 'abort', 'timeout', 'error'];
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                    event = _ref2[_j];
                    request.addEventListener(event, function() {
                        return _this.progress = 100;
                    }, false);
                }
            } else {
                _onreadystatechange = request.onreadystatechange;
                request.onreadystatechange = function() {
                    var _ref3;
                    if ((_ref3 = request.readyState) === 0 || _ref3 === 4) {
                        _this.progress = 100;
                    } else if (request.readyState === 3) {
                        _this.progress = 50;
                    }
                    return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
                };
            }
        }

        return XHRRequestTracker;

    })();

    SocketRequestTracker = (function() {
        function SocketRequestTracker(request) {
            var event, _j, _len1, _ref2,
                _this = this;
            this.progress = 0;
            _ref2 = ['error', 'open'];
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                event = _ref2[_j];
                request.addEventListener(event, function() {
                    return _this.progress = 100;
                }, false);
            }
        }

        return SocketRequestTracker;

    })();

    ElementMonitor = (function() {
        function ElementMonitor(options) {
            var selector, _j, _len1, _ref2;
            if (options == null) {
                options = {};
            }
            this.elements = [];
            if (options.selectors == null) {
                options.selectors = [];
            }
            _ref2 = options.selectors;
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                selector = _ref2[_j];
                this.elements.push(new ElementTracker(selector));
            }
        }

        return ElementMonitor;

    })();

    ElementTracker = (function() {
        function ElementTracker(selector) {
            this.selector = selector;
            this.progress = 0;
            this.check();
        }

        ElementTracker.prototype.check = function() {
            var _this = this;
            if (document.querySelector(this.selector)) {
                return this.done();
            } else {
                return setTimeout((function() {
                    return _this.check();
                }), options.elements.checkInterval);
            }
        };

        ElementTracker.prototype.done = function() {
            return this.progress = 100;
        };

        return ElementTracker;

    })();

    DocumentMonitor = (function() {
        DocumentMonitor.prototype.states = {
            loading: 0,
            interactive: 50,
            complete: 100
        };

        function DocumentMonitor() {
            var _onreadystatechange, _ref2,
                _this = this;
            this.progress = (_ref2 = this.states[document.readyState]) != null ? _ref2 : 100;
            _onreadystatechange = document.onreadystatechange;
            document.onreadystatechange = function() {
                if (_this.states[document.readyState] != null) {
                    _this.progress = _this.states[document.readyState];
                }
                return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
            };
        }

        return DocumentMonitor;

    })();

    EventLagMonitor = (function() {
        function EventLagMonitor() {
            var avg, interval, last, points, samples,
                _this = this;
            this.progress = 0;
            avg = 0;
            samples = [];
            points = 0;
            last = now();
            interval = setInterval(function() {
                var diff;
                diff = now() - last - 50;
                last = now();
                samples.push(diff);
                if (samples.length > options.eventLag.sampleCount) {
                    samples.shift();
                }
                avg = avgAmplitude(samples);
                if (++points >= options.eventLag.minSamples && avg < options.eventLag.lagThreshold) {
                    _this.progress = 100;
                    return clearInterval(interval);
                } else {
                    return _this.progress = 100 * (3 / (avg + 3));
                }
            }, 50);
        }

        return EventLagMonitor;

    })();

    Scaler = (function() {
        function Scaler(source) {
            this.source = source;
            this.last = this.sinceLastUpdate = 0;
            this.rate = options.initialRate;
            this.catchup = 0;
            this.progress = this.lastProgress = 0;
            if (this.source != null) {
                this.progress = result(this.source, 'progress');
            }
        }

        Scaler.prototype.tick = function(frameTime, val) {
            var scaling;
            if (val == null) {
                val = result(this.source, 'progress');
            }
            if (val >= 100) {
                this.done = true;
            }
            if (val === this.last) {
                this.sinceLastUpdate += frameTime;
            } else {
                if (this.sinceLastUpdate) {
                    this.rate = (val - this.last) / this.sinceLastUpdate;
                }
                this.catchup = (val - this.progress) / options.catchupTime;
                this.sinceLastUpdate = 0;
                this.last = val;
            }
            if (val > this.progress) {
                this.progress += this.catchup * frameTime;
            }
            scaling = 1 - Math.pow(this.progress / 100, options.easeFactor);
            this.progress += scaling * this.rate * frameTime;
            this.progress = Math.min(this.lastProgress + options.maxProgressPerFrame, this.progress);
            this.progress = Math.max(0, this.progress);
            this.progress = Math.min(100, this.progress);
            this.lastProgress = this.progress;
            return this.progress;
        };

        return Scaler;

    })();

    sources = null;

    scalers = null;

    bar = null;

    uniScaler = null;

    animation = null;

    cancelAnimation = null;

    Pace.running = false;

    handlePushState = function() {
        if (options.restartOnPushState) {
            return Pace.restart();
        }
    };

    if (window.history.pushState != null) {
        _pushState = window.history.pushState;
        window.history.pushState = function() {
            handlePushState();
            return _pushState.apply(window.history, arguments);
        };
    }

    if (window.history.replaceState != null) {
        _replaceState = window.history.replaceState;
        window.history.replaceState = function() {
            handlePushState();
            return _replaceState.apply(window.history, arguments);
        };
    }

    SOURCE_KEYS = {
        ajax: AjaxMonitor,
        elements: ElementMonitor,
        document: DocumentMonitor,
        eventLag: EventLagMonitor
    };

    (init = function() {
        var type, _j, _k, _len1, _len2, _ref2, _ref3, _ref4;
        Pace.sources = sources = [];
        _ref2 = ['ajax', 'elements', 'document', 'eventLag'];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            type = _ref2[_j];
            if (options[type] !== false) {
                sources.push(new SOURCE_KEYS[type](options[type]));
            }
        }
        _ref4 = (_ref3 = options.extraSources) != null ? _ref3 : [];
        for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
            source = _ref4[_k];
            sources.push(new source(options));
        }
        Pace.bar = bar = new Bar;
        scalers = [];
        return uniScaler = new Scaler;
    })();

    Pace.stop = function() {
        Pace.trigger('stop');
        Pace.running = false;
        bar.destroy();
        cancelAnimation = true;
        if (animation != null) {
            if (typeof cancelAnimationFrame === "function") {
                cancelAnimationFrame(animation);
            }
            animation = null;
        }
        return init();
    };

    Pace.restart = function() {
        Pace.trigger('restart');
        Pace.stop();
        return Pace.start();
    };

    Pace.go = function() {
        var start;
        Pace.running = true;
        bar.render();
        start = now();
        cancelAnimation = false;
        return animation = runAnimation(function(frameTime, enqueueNextFrame) {
            var avg, count, done, element, elements, i, j, remaining, scaler, scalerList, sum, _j, _k, _len1, _len2, _ref2;
            remaining = 100 - bar.progress;
            count = sum = 0;
            done = true;
            for (i = _j = 0, _len1 = sources.length; _j < _len1; i = ++_j) {
                source = sources[i];
                scalerList = scalers[i] != null ? scalers[i] : scalers[i] = [];
                elements = (_ref2 = source.elements) != null ? _ref2 : [source];
                for (j = _k = 0, _len2 = elements.length; _k < _len2; j = ++_k) {
                    element = elements[j];
                    scaler = scalerList[j] != null ? scalerList[j] : scalerList[j] = new Scaler(element);
                    done &= scaler.done;
                    if (scaler.done) {
                        continue;
                    }
                    count++;
                    sum += scaler.tick(frameTime);
                }
            }
            avg = sum / count;
            bar.update(uniScaler.tick(frameTime, avg));
            if (bar.done() || done || cancelAnimation) {
                bar.update(100);
                Pace.trigger('done');
                return setTimeout(function() {
                    bar.finish();
                    Pace.running = false;
                    return Pace.trigger('hide');
                }, Math.max(options.ghostTime, Math.max(options.minTime - (now() - start), 0)));
            } else {
                return enqueueNextFrame();
            }
        });
    };

    Pace.start = function(_options) {
        extend(options, _options);
        Pace.running = true;
        try {
            bar.render();
        } catch (_error) {
            NoTargetError = _error;
        }
        if (!document.querySelector('.pace')) {
            return setTimeout(Pace.start, 50);
        } else {
            Pace.trigger('start');
            return Pace.go();
        }
    };

    if (typeof define === 'function' && define.amd) {
        define(['pace'], function() {
            return Pace;
        });
    } else if (typeof exports === 'object') {
        module.exports = Pace;
    } else {
        if (options.startOnPageLoad) {
            Pace.start();
        }
    }

}).call(this);

(typeof navigator !== "undefined") && (function(root, factory) {
    if (typeof define === "function" && define.amd) {
        define(function() {
            return factory(root);
        });
    } else if (typeof module === "object" && module.exports) {
        module.exports = factory(root);
    } else {
        root.lottie = factory(root);
        root.bodymovin = root.lottie;
    }
}((window || {}), function(window) {
    "use strict";
    var svgNS = "http://www.w3.org/2000/svg";

    var locationHref = '';

    var initialDefaultFrame = -999999;

    var subframeEnabled = true;
    var expressionsPlugin;
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    var cachedColors = {};
    var bm_rounder = Math.round;
    var bm_rnd;
    var bm_pow = Math.pow;
    var bm_sqrt = Math.sqrt;
    var bm_abs = Math.abs;
    var bm_floor = Math.floor;
    var bm_max = Math.max;
    var bm_min = Math.min;
    var blitter = 10;

    var BMMath = {};
    (function() {
        var propertyNames = Object.getOwnPropertyNames(Math);
        var i, len = propertyNames.length;
        for (i = 0; i < len; i += 1) {
            BMMath[propertyNames[i]] = Math[propertyNames[i]];
        }
    }());

    function ProjectInterface() {
        return {};
    }

    BMMath.random = Math.random;
    BMMath.abs = function(val) {
        var tOfVal = typeof val;
        if (tOfVal === 'object' && val.length) {
            var absArr = createSizedArray(val.length);
            var i, len = val.length;
            for (i = 0; i < len; i += 1) {
                absArr[i] = Math.abs(val[i]);
            }
            return absArr;
        }
        return Math.abs(val);

    };
    var defaultCurveSegments = 150;
    var degToRads = Math.PI / 180;
    var roundCorner = 0.5519;

    function roundValues(flag) {
        if (flag) {
            bm_rnd = Math.round;
        } else {
            bm_rnd = function(val) {
                return val;
            };
        }
    }
    roundValues(false);

    function styleDiv(element) {
        element.style.position = 'absolute';
        element.style.top = 0;
        element.style.left = 0;
        element.style.display = 'block';
        element.style.transformOrigin = element.style.webkitTransformOrigin = '0 0';
        element.style.backfaceVisibility = element.style.webkitBackfaceVisibility = 'visible';
        element.style.transformStyle = element.style.webkitTransformStyle = element.style.mozTransformStyle = "preserve-3d";
    }

    function BMEnterFrameEvent(n, c, t, d) {
        this.type = n;
        this.currentTime = c;
        this.totalTime = t;
        this.direction = d < 0 ? -1 : 1;
    }

    function BMCompleteEvent(n, d) {
        this.type = n;
        this.direction = d < 0 ? -1 : 1;
    }

    function BMCompleteLoopEvent(n, c, t, d) {
        this.type = n;
        this.currentLoop = t;
        this.totalLoops = c;
        this.direction = d < 0 ? -1 : 1;
    }

    function BMSegmentStartEvent(n, f, t) {
        this.type = n;
        this.firstFrame = f;
        this.totalFrames = t;
    }

    function BMDestroyEvent(n, t) {
        this.type = n;
        this.target = t;
    }

    function randomString(length, chars) {
        if (chars === undefined) {
            chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';
        }
        var i;
        var result = '';
        for (i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];
        return result;
    }

    function HSVtoRGB(h, s, v) {
        var r, g, b, i, f, p, q, t;
        i = Math.floor(h * 6);
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);
        switch (i % 6) {
            case 0:
                r = v;
                g = t;
                b = p;
                break;
            case 1:
                r = q;
                g = v;
                b = p;
                break;
            case 2:
                r = p;
                g = v;
                b = t;
                break;
            case 3:
                r = p;
                g = q;
                b = v;
                break;
            case 4:
                r = t;
                g = p;
                b = v;
                break;
            case 5:
                r = v;
                g = p;
                b = q;
                break;
        }
        return [r,
            g,
            b
        ];
    }

    function RGBtoHSV(r, g, b) {
        var max = Math.max(r, g, b),
            min = Math.min(r, g, b),
            d = max - min,
            h,
            s = (max === 0 ? 0 : d / max),
            v = max / 255;

        switch (max) {
            case min:
                h = 0;
                break;
            case r:
                h = (g - b) + d * (g < b ? 6 : 0);
                h /= 6 * d;
                break;
            case g:
                h = (b - r) + d * 2;
                h /= 6 * d;
                break;
            case b:
                h = (r - g) + d * 4;
                h /= 6 * d;
                break;
        }

        return [
            h,
            s,
            v
        ];
    }

    function addSaturationToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[1] += offset;
        if (hsv[1] > 1) {
            hsv[1] = 1;
        } else if (hsv[1] <= 0) {
            hsv[1] = 0;
        }
        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }

    function addBrightnessToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[2] += offset;
        if (hsv[2] > 1) {
            hsv[2] = 1;
        } else if (hsv[2] < 0) {
            hsv[2] = 0;
        }
        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }

    function addHueToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[0] += offset / 360;
        if (hsv[0] > 1) {
            hsv[0] -= 1;
        } else if (hsv[0] < 0) {
            hsv[0] += 1;
        }
        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }

    var rgbToHex = (function() {
        var colorMap = [];
        var i;
        var hex;
        for (i = 0; i < 256; i += 1) {
            hex = i.toString(16);
            colorMap[i] = hex.length == 1 ? '0' + hex : hex;
        }

        return function(r, g, b) {
            if (r < 0) {
                r = 0;
            }
            if (g < 0) {
                g = 0;
            }
            if (b < 0) {
                b = 0;
            }
            return '#' + colorMap[r] + colorMap[g] + colorMap[b];
        };
    }());

    function BaseEvent() {}
    BaseEvent.prototype = {
        triggerEvent: function(eventName, args) {
            if (this._cbs[eventName]) {
                var len = this._cbs[eventName].length;
                for (var i = 0; i < len; i++) {
                    this._cbs[eventName][i](args);
                }
            }
        },
        addEventListener: function(eventName, callback) {
            if (!this._cbs[eventName]) {
                this._cbs[eventName] = [];
            }
            this._cbs[eventName].push(callback);

            return function() {
                this.removeEventListener(eventName, callback);
            }.bind(this);
        },
        removeEventListener: function(eventName, callback) {
            if (!callback) {
                this._cbs[eventName] = null;
            } else if (this._cbs[eventName]) {
                var i = 0,
                    len = this._cbs[eventName].length;
                while (i < len) {
                    if (this._cbs[eventName][i] === callback) {
                        this._cbs[eventName].splice(i, 1);
                        i -= 1;
                        len -= 1;
                    }
                    i += 1;
                }
                if (!this._cbs[eventName].length) {
                    this._cbs[eventName] = null;
                }
            }
        }
    };
    var createTypedArray = (function() {
        function createRegularArray(type, len) {
            var i = 0,
                arr = [],
                value;
            switch (type) {
                case 'int16':
                case 'uint8c':
                    value = 1;
                    break;
                default:
                    value = 1.1;
                    break;
            }
            for (i = 0; i < len; i += 1) {
                arr.push(value);
            }
            return arr;
        }

        function createTypedArray(type, len) {
            if (type === 'float32') {
                return new Float32Array(len);
            } else if (type === 'int16') {
                return new Int16Array(len);
            } else if (type === 'uint8c') {
                return new Uint8ClampedArray(len);
            }
        }
        if (typeof Uint8ClampedArray === 'function' && typeof Float32Array === 'function') {
            return createTypedArray;
        } else {
            return createRegularArray;
        }
    }());

    function createSizedArray(len) {
        return Array.apply(null, {
            length: len
        });
    }

    function createNS(type) {
        //return {appendChild:function(){},setAttribute:function(){},style:{}}
        return document.createElementNS(svgNS, type);
    }

    function createTag(type) {
        //return {appendChild:function(){},setAttribute:function(){},style:{}}
        return document.createElement(type);
    }

    function DynamicPropertyContainer() {};
    DynamicPropertyContainer.prototype = {
        addDynamicProperty: function(prop) {
            if (this.dynamicProperties.indexOf(prop) === -1) {
                this.dynamicProperties.push(prop);
                this.container.addDynamicProperty(this);
                this._isAnimated = true;
            }
        },
        iterateDynamicProperties: function() {
            this._mdf = false;
            var i, len = this.dynamicProperties.length;
            for (i = 0; i < len; i += 1) {
                this.dynamicProperties[i].getValue();
                if (this.dynamicProperties[i]._mdf) {
                    this._mdf = true;
                }
            }
        },
        initDynamicPropertyContainer: function(container) {
            this.container = container;
            this.dynamicProperties = [];
            this._mdf = false;
            this._isAnimated = false;
        }
    }
    /*!
     Transformation Matrix v2.0
     (c) Epistemex 2014-2015
     www.epistemex.com
     By Ken Fyrstenberg
     Contributions by leeoniya.
     License: MIT, header required.
     */

    /**
     * 2D transformation matrix object initialized with identity matrix.
     *
     * The matrix can synchronize a canvas context by supplying the context
     * as an argument, or later apply current absolute transform to an
     * existing context.
     *
     * All values are handled as floating point values.
     *
     * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
     * @prop {number} a - scale x
     * @prop {number} b - shear y
     * @prop {number} c - shear x
     * @prop {number} d - scale y
     * @prop {number} e - translate x
     * @prop {number} f - translate y
     * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context
     * @constructor
     */

    var Matrix = (function() {

        var _cos = Math.cos;
        var _sin = Math.sin;
        var _tan = Math.tan;
        var _rnd = Math.round;

        function reset() {
            this.props[0] = 1;
            this.props[1] = 0;
            this.props[2] = 0;
            this.props[3] = 0;
            this.props[4] = 0;
            this.props[5] = 1;
            this.props[6] = 0;
            this.props[7] = 0;
            this.props[8] = 0;
            this.props[9] = 0;
            this.props[10] = 1;
            this.props[11] = 0;
            this.props[12] = 0;
            this.props[13] = 0;
            this.props[14] = 0;
            this.props[15] = 1;
            return this;
        }

        function rotate(angle) {
            if (angle === 0) {
                return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        }

        function rotateX(angle) {
            if (angle === 0) {
                return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);
        }

        function rotateY(angle) {
            if (angle === 0) {
                return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);
        }

        function rotateZ(angle) {
            if (angle === 0) {
                return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        }

        function shear(sx, sy) {
            return this._t(1, sy, sx, 1, 0, 0);
        }

        function skew(ax, ay) {
            return this.shear(_tan(ax), _tan(ay));
        }

        function skewFromAxis(ax, angle) {
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
                ._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
                ._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
            //return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);
        }

        function scale(sx, sy, sz) {
            sz = isNaN(sz) ? 1 : sz;
            if (sx == 1 && sy == 1 && sz == 1) {
                return this;
            }
            return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
        }

        function setTransform(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
            this.props[0] = a;
            this.props[1] = b;
            this.props[2] = c;
            this.props[3] = d;
            this.props[4] = e;
            this.props[5] = f;
            this.props[6] = g;
            this.props[7] = h;
            this.props[8] = i;
            this.props[9] = j;
            this.props[10] = k;
            this.props[11] = l;
            this.props[12] = m;
            this.props[13] = n;
            this.props[14] = o;
            this.props[15] = p;
            return this;
        }

        function translate(tx, ty, tz) {
            tz = tz || 0;
            if (tx !== 0 || ty !== 0 || tz !== 0) {
                return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
            }
            return this;
        }

        function transform(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2) {

            var _p = this.props;

            if (a2 === 1 && b2 === 0 && c2 === 0 && d2 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h2 === 0 && i2 === 0 && j2 === 0 && k2 === 1 && l2 === 0) {
                //NOTE: commenting this condition because TurboFan deoptimizes code when present
                //if(m2 !== 0 || n2 !== 0 || o2 !== 0){
                _p[12] = _p[12] * a2 + _p[15] * m2;
                _p[13] = _p[13] * f2 + _p[15] * n2;
                _p[14] = _p[14] * k2 + _p[15] * o2;
                _p[15] = _p[15] * p2;
                //}
                this._identityCalculated = false;
                return this;
            }

            var a1 = _p[0];
            var b1 = _p[1];
            var c1 = _p[2];
            var d1 = _p[3];
            var e1 = _p[4];
            var f1 = _p[5];
            var g1 = _p[6];
            var h1 = _p[7];
            var i1 = _p[8];
            var j1 = _p[9];
            var k1 = _p[10];
            var l1 = _p[11];
            var m1 = _p[12];
            var n1 = _p[13];
            var o1 = _p[14];
            var p1 = _p[15];

            /* matrix order (canvas compatible):
             * ace
             * bdf
             * 001
             */
            _p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;
            _p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2;
            _p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2;
            _p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2;

            _p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2;
            _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2;
            _p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2;
            _p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2;

            _p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2;
            _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2;
            _p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2;
            _p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2;

            _p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2;
            _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2;
            _p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2;
            _p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2;

            this._identityCalculated = false;
            return this;
        }

        function isIdentity() {
            if (!this._identityCalculated) {
                this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
                this._identityCalculated = true;
            }
            return this._identity;
        }

        function equals(matr) {
            var i = 0;
            while (i < 16) {
                if (matr.props[i] !== this.props[i]) {
                    return false;
                }
                i += 1;
            }
            return true;
        }

        function clone(matr) {
            var i;
            for (i = 0; i < 16; i += 1) {
                matr.props[i] = this.props[i];
            }
        }

        function cloneFromProps(props) {
            var i;
            for (i = 0; i < 16; i += 1) {
                this.props[i] = props[i];
            }
        }

        function applyToPoint(x, y, z) {

            return {
                x: x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
                y: x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
                z: x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
            };
            /*return {
             x: x * me.a + y * me.c + me.e,
             y: x * me.b + y * me.d + me.f
             };*/
        }

        function applyToX(x, y, z) {
            return x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];
        }

        function applyToY(x, y, z) {
            return x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];
        }

        function applyToZ(x, y, z) {
            return x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];
        }

        function inversePoint(pt) {
            var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
            var a = this.props[5] / determinant;
            var b = -this.props[1] / determinant;
            var c = -this.props[4] / determinant;
            var d = this.props[0] / determinant;
            var e = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;
            var f = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;
            return [pt[0] * a + pt[1] * c + e, pt[0] * b + pt[1] * d + f, 0];
        }

        function inversePoints(pts) {
            var i, len = pts.length,
                retPts = [];
            for (i = 0; i < len; i += 1) {
                retPts[i] = inversePoint(pts[i]);
            }
            return retPts;
        }

        function applyToTriplePoints(pt1, pt2, pt3) {
            var arr = createTypedArray('float32', 6);
            if (this.isIdentity()) {
                arr[0] = pt1[0];
                arr[1] = pt1[1];
                arr[2] = pt2[0];
                arr[3] = pt2[1];
                arr[4] = pt3[0];
                arr[5] = pt3[1];
            } else {
                var p0 = this.props[0],
                    p1 = this.props[1],
                    p4 = this.props[4],
                    p5 = this.props[5],
                    p12 = this.props[12],
                    p13 = this.props[13];
                arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
                arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
                arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
                arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
                arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
                arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
            }
            return arr;
        }

        function applyToPointArray(x, y, z) {
            var arr;
            if (this.isIdentity()) {
                arr = [x, y, z];
            } else {
                arr = [x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12], x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13], x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]];
            }
            return arr;
        }

        function applyToPointStringified(x, y) {
            if (this.isIdentity()) {
                return x + ',' + y;
            }
            var _p = this.props;
            return Math.round((x * _p[0] + y * _p[4] + _p[12]) * 100) / 100 + ',' + Math.round((x * _p[1] + y * _p[5] + _p[13]) * 100) / 100;
        }

        function toCSS() {
            //Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
            /*if(this.isIdentity()) {
                return '';
            }*/
            var i = 0;
            var props = this.props;
            var cssValue = 'matrix3d(';
            var v = 10000;
            while (i < 16) {
                cssValue += _rnd(props[i] * v) / v;
                cssValue += i === 15 ? ')' : ',';
                i += 1;
            }
            return cssValue;
        }

        function roundMatrixProperty(val) {
            var v = 10000;
            if ((val < 0.000001 && val > 0) || (val > -0.000001 && val < 0)) {
                return _rnd(val * v) / v;
            }
            return val;
        }

        function to2dCSS() {
            //Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
            /*if(this.isIdentity()) {
                return '';
            }*/
            var props = this.props;
            var _a = roundMatrixProperty(props[0]);
            var _b = roundMatrixProperty(props[1]);
            var _c = roundMatrixProperty(props[4]);
            var _d = roundMatrixProperty(props[5]);
            var _e = roundMatrixProperty(props[12]);
            var _f = roundMatrixProperty(props[13]);
            return "matrix(" + _a + ',' + _b + ',' + _c + ',' + _d + ',' + _e + ',' + _f + ")";
        }

        return function() {
            this.reset = reset;
            this.rotate = rotate;
            this.rotateX = rotateX;
            this.rotateY = rotateY;
            this.rotateZ = rotateZ;
            this.skew = skew;
            this.skewFromAxis = skewFromAxis;
            this.shear = shear;
            this.scale = scale;
            this.setTransform = setTransform;
            this.translate = translate;
            this.transform = transform;
            this.applyToPoint = applyToPoint;
            this.applyToX = applyToX;
            this.applyToY = applyToY;
            this.applyToZ = applyToZ;
            this.applyToPointArray = applyToPointArray;
            this.applyToTriplePoints = applyToTriplePoints;
            this.applyToPointStringified = applyToPointStringified;
            this.toCSS = toCSS;
            this.to2dCSS = to2dCSS;
            this.clone = clone;
            this.cloneFromProps = cloneFromProps;
            this.equals = equals;
            this.inversePoints = inversePoints;
            this.inversePoint = inversePoint;
            this._t = this.transform;
            this.isIdentity = isIdentity;
            this._identity = true;
            this._identityCalculated = false;

            this.props = createTypedArray('float32', 16);
            this.reset();
        };
    }());

    /*
     Copyright 2014 David Bau.

     Permission is hereby granted, free of charge, to any person obtaining
     a copy of this software and associated documentation files (the
     "Software"), to deal in the Software without restriction, including
     without limitation the rights to use, copy, modify, merge, publish,
     distribute, sublicense, and/or sell copies of the Software, and to
     permit persons to whom the Software is furnished to do so, subject to
     the following conditions:

     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

     */

    (function(pool, math) {
        //
        // The following constants are related to IEEE 754 limits.
        //
        var global = this,
            width = 256, // each RC4 output is 0 <= x < 256
            chunks = 6, // at least six RC4 outputs for each double
            digits = 52, // there are 52 significant digits in a double
            rngname = 'random', // rngname: name for Math.random and Math.seedrandom
            startdenom = math.pow(width, chunks),
            significance = math.pow(2, digits),
            overflow = significance * 2,
            mask = width - 1,
            nodecrypto; // node.js crypto module, initialized at the bottom.

        //
        // seedrandom()
        // This is the seedrandom function described above.
        //
        function seedrandom(seed, options, callback) {
            var key = [];
            options = (options === true) ? {
                entropy: true
            } : (options || {});

            // Flatten the seed string or build one from local entropy if needed.
            var shortseed = mixkey(flatten(
                options.entropy ? [seed, tostring(pool)] :
                (seed === null) ? autoseed() : seed, 3), key);

            // Use the seed to initialize an ARC4 generator.
            var arc4 = new ARC4(key);

            // This function returns a random double in [0, 1) that contains
            // randomness in every bit of the mantissa of the IEEE 754 value.
            var prng = function() {
                var n = arc4.g(chunks), // Start with a numerator n < 2 ^ 48
                    d = startdenom, //   and denominator d = 2 ^ 48.
                    x = 0; //   and no 'extra last byte'.
                while (n < significance) { // Fill up all significant digits by
                    n = (n + x) * width; //   shifting numerator and
                    d *= width; //   denominator and generating a
                    x = arc4.g(1); //   new least-significant-byte.
                }
                while (n >= overflow) { // To avoid rounding up, before adding
                    n /= 2; //   last byte, shift everything
                    d /= 2; //   right using integer math until
                    x >>>= 1; //   we have exactly the desired bits.
                }
                return (n + x) / d; // Form the number within [0, 1).
            };

            prng.int32 = function() {
                return arc4.g(4) | 0;
            };
            prng.quick = function() {
                return arc4.g(4) / 0x100000000;
            };
            prng.double = prng;

            // Mix the randomness into accumulated entropy.
            mixkey(tostring(arc4.S), pool);

            // Calling convention: what to return as a function of prng, seed, is_math.
            return (options.pass || callback ||
                function(prng, seed, is_math_call, state) {
                    if (state) {
                        // Load the arc4 state from the given state if it has an S array.
                        if (state.S) {
                            copy(state, arc4);
                        }
                        // Only provide the .state method if requested via options.state.
                        prng.state = function() {
                            return copy(arc4, {});
                        };
                    }

                    // If called as a method of Math (Math.seedrandom()), mutate
                    // Math.random because that is how seedrandom.js has worked since v1.0.
                    if (is_math_call) {
                        math[rngname] = prng;
                        return seed;
                    }

                    // Otherwise, it is a newer calling convention, so return the
                    // prng directly.
                    else return prng;
                })(
                prng,
                shortseed,
                'global' in options ? options.global : (this == math),
                options.state);
        }
        math['seed' + rngname] = seedrandom;

        //
        // ARC4
        //
        // An ARC4 implementation.  The constructor takes a key in the form of
        // an array of at most (width) integers that should be 0 <= x < (width).
        //
        // The g(count) method returns a pseudorandom integer that concatenates
        // the next (count) outputs from ARC4.  Its return value is a number x
        // that is in the range 0 <= x < (width ^ count).
        //
        function ARC4(key) {
            var t, keylen = key.length,
                me = this,
                i = 0,
                j = me.i = me.j = 0,
                s = me.S = [];

            // The empty key [] is treated as [0].
            if (!keylen) {
                key = [keylen++];
            }

            // Set up S using the standard key scheduling algorithm.
            while (i < width) {
                s[i] = i++;
            }
            for (i = 0; i < width; i++) {
                s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
                s[j] = t;
            }

            // The "g" method returns the next (count) outputs as one number.
            me.g = function(count) {
                // Using instance members instead of closure state nearly doubles speed.
                var t, r = 0,
                    i = me.i,
                    j = me.j,
                    s = me.S;
                while (count--) {
                    t = s[i = mask & (i + 1)];
                    r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
                }
                me.i = i;
                me.j = j;
                return r;
                // For robust unpredictability, the function call below automatically
                // discards an initial batch of values.  This is called RC4-drop[256].
                // See http://google.com/search?q=rsa+fluhrer+response&btnI
            };
        }

        //
        // copy()
        // Copies internal state of ARC4 to or from a plain object.
        //
        function copy(f, t) {
            t.i = f.i;
            t.j = f.j;
            t.S = f.S.slice();
            return t;
        }

        //
        // flatten()
        // Converts an object tree to nested arrays of strings.
        //
        function flatten(obj, depth) {
            var result = [],
                typ = (typeof obj),
                prop;
            if (depth && typ == 'object') {
                for (prop in obj) {
                    try {
                        result.push(flatten(obj[prop], depth - 1));
                    } catch (e) {}
                }
            }
            return (result.length ? result : typ == 'string' ? obj : obj + '\0');
        }

        //
        // mixkey()
        // Mixes a string seed into a key that is an array of integers, and
        // returns a shortened string seed that is equivalent to the result key.
        //
        function mixkey(seed, key) {
            var stringseed = seed + '',
                smear, j = 0;
            while (j < stringseed.length) {
                key[mask & j] =
                    mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
            }
            return tostring(key);
        }

        //
        // autoseed()
        // Returns an object for autoseeding, using window.crypto and Node crypto
        // module if available.
        //
        function autoseed() {
            try {
                if (nodecrypto) {
                    return tostring(nodecrypto.randomBytes(width));
                }
                var out = new Uint8Array(width);
                (global.crypto || global.msCrypto).getRandomValues(out);
                return tostring(out);
            } catch (e) {
                var browser = global.navigator,
                    plugins = browser && browser.plugins;
                return [+new Date(), global, plugins, global.screen, tostring(pool)];
            }
        }

        //
        // tostring()
        // Converts an array of charcodes to a string
        //
        function tostring(a) {
            return String.fromCharCode.apply(0, a);
        }

        //
        // When seedrandom.js is loaded, we immediately mix a few bits
        // from the built-in RNG into the entropy pool.  Because we do
        // not want to interfere with deterministic PRNG state later,
        // seedrandom will not call math.random on its own again after
        // initialization.
        //
        mixkey(math.random(), pool);

        //
        // Nodejs and AMD support: export the implementation as a module using
        // either convention.
        //

        // End anonymous scope, and pass initial values.
    })(
        [], // pool: entropy pool starts empty
        BMMath // math: package containing random, pow, and seedrandom
    );
    var BezierFactory = (function() {
        /**
         * BezierEasing - use bezier curve for transition easing function
         * by Gaëtan Renaudeau 2014 - 2015 – MIT License
         *
         * Credits: is based on Firefox's nsSMILKeySpline.cpp
         * Usage:
         * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])
         * spline.get(x) => returns the easing value | x must be in [0, 1] range
         *
         */

        var ob = {};
        ob.getBezierEasing = getBezierEasing;
        var beziers = {};

        function getBezierEasing(a, b, c, d, nm) {
            var str = nm || ('bez_' + a + '_' + b + '_' + c + '_' + d).replace(/\./g, 'p');
            if (beziers[str]) {
                return beziers[str];
            }
            var bezEasing = new BezierEasing([a, b, c, d]);
            beziers[str] = bezEasing;
            return bezEasing;
        }

        // These values are established by empiricism with tests (tradeoff: performance VS precision)
        var NEWTON_ITERATIONS = 4;
        var NEWTON_MIN_SLOPE = 0.001;
        var SUBDIVISION_PRECISION = 0.0000001;
        var SUBDIVISION_MAX_ITERATIONS = 10;

        var kSplineTableSize = 11;
        var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

        var float32ArraySupported = typeof Float32Array === "function";

        function A(aA1, aA2) {
            return 1.0 - 3.0 * aA2 + 3.0 * aA1;
        }

        function B(aA1, aA2) {
            return 3.0 * aA2 - 6.0 * aA1;
        }

        function C(aA1) {
            return 3.0 * aA1;
        }

        // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
        function calcBezier(aT, aA1, aA2) {
            return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
        }

        // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
        function getSlope(aT, aA1, aA2) {
            return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
        }

        function binarySubdivide(aX, aA, aB, mX1, mX2) {
            var currentX, currentT, i = 0;
            do {
                currentT = aA + (aB - aA) / 2.0;
                currentX = calcBezier(currentT, mX1, mX2) - aX;
                if (currentX > 0.0) {
                    aB = currentT;
                } else {
                    aA = currentT;
                }
            } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
            return currentT;
        }

        function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
            for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
                var currentSlope = getSlope(aGuessT, mX1, mX2);
                if (currentSlope === 0.0) return aGuessT;
                var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
                aGuessT -= currentX / currentSlope;
            }
            return aGuessT;
        }

        /**
         * points is an array of [ mX1, mY1, mX2, mY2 ]
         */
        function BezierEasing(points) {
            this._p = points;
            this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
            this._precomputed = false;

            this.get = this.get.bind(this);
        }

        BezierEasing.prototype = {

            get: function(x) {
                var mX1 = this._p[0],
                    mY1 = this._p[1],
                    mX2 = this._p[2],
                    mY2 = this._p[3];
                if (!this._precomputed) this._precompute();
                if (mX1 === mY1 && mX2 === mY2) return x; // linear
                // Because JavaScript number are imprecise, we should guarantee the extremes are right.
                if (x === 0) return 0;
                if (x === 1) return 1;
                return calcBezier(this._getTForX(x), mY1, mY2);
            },

            // Private part

            _precompute: function() {
                var mX1 = this._p[0],
                    mY1 = this._p[1],
                    mX2 = this._p[2],
                    mY2 = this._p[3];
                this._precomputed = true;
                if (mX1 !== mY1 || mX2 !== mY2)
                    this._calcSampleValues();
            },

            _calcSampleValues: function() {
                var mX1 = this._p[0],
                    mX2 = this._p[2];
                for (var i = 0; i < kSplineTableSize; ++i) {
                    this._mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
                }
            },

            /**
             * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
             */
            _getTForX: function(aX) {
                var mX1 = this._p[0],
                    mX2 = this._p[2],
                    mSampleValues = this._mSampleValues;

                var intervalStart = 0.0;
                var currentSample = 1;
                var lastSample = kSplineTableSize - 1;

                for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
                    intervalStart += kSampleStepSize;
                }
                --currentSample;

                // Interpolate to provide an initial guess for t
                var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
                var guessForT = intervalStart + dist * kSampleStepSize;

                var initialSlope = getSlope(guessForT, mX1, mX2);
                if (initialSlope >= NEWTON_MIN_SLOPE) {
                    return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
                } else if (initialSlope === 0.0) {
                    return guessForT;
                } else {
                    return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
                }
            }
        };

        return ob;

    }());
    (function() {
        var lastTime = 0;
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
            window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
        }
        if (!window.requestAnimationFrame)
            window.requestAnimationFrame = function(callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = setTimeout(function() {
                        callback(currTime + timeToCall);
                    },
                    timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };
        if (!window.cancelAnimationFrame)
            window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
    }());

    function extendPrototype(sources, destination) {
        var i, len = sources.length,
            sourcePrototype;
        for (i = 0; i < len; i += 1) {
            sourcePrototype = sources[i].prototype;
            for (var attr in sourcePrototype) {
                if (sourcePrototype.hasOwnProperty(attr)) destination.prototype[attr] = sourcePrototype[attr];
            }
        }
    }

    function getDescriptor(object, prop) {
        return Object.getOwnPropertyDescriptor(object, prop);
    }

    function createProxyFunction(prototype) {
        function ProxyFunction() {}
        ProxyFunction.prototype = prototype;
        return ProxyFunction;
    }

    function bezFunction() {

        var easingFunctions = [];
        var math = Math;

        function pointOnLine2D(x1, y1, x2, y2, x3, y3) {
            var det1 = (x1 * y2) + (y1 * x3) + (x2 * y3) - (x3 * y2) - (y3 * x1) - (x2 * y1);
            return det1 > -0.001 && det1 < 0.001;
        }

        function pointOnLine3D(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
            if (z1 === 0 && z2 === 0 && z3 === 0) {
                return pointOnLine2D(x1, y1, x2, y2, x3, y3);
            }
            var dist1 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) + Math.pow(z2 - z1, 2));
            var dist2 = Math.sqrt(Math.pow(x3 - x1, 2) + Math.pow(y3 - y1, 2) + Math.pow(z3 - z1, 2));
            var dist3 = Math.sqrt(Math.pow(x3 - x2, 2) + Math.pow(y3 - y2, 2) + Math.pow(z3 - z2, 2));
            var diffDist;
            if (dist1 > dist2) {
                if (dist1 > dist3) {
                    diffDist = dist1 - dist2 - dist3;
                } else {
                    diffDist = dist3 - dist2 - dist1;
                }
            } else if (dist3 > dist2) {
                diffDist = dist3 - dist2 - dist1;
            } else {
                diffDist = dist2 - dist1 - dist3;
            }
            return diffDist > -0.0001 && diffDist < 0.0001;
        }

        var getBezierLength = (function() {

            return function(pt1, pt2, pt3, pt4) {
                var curveSegments = defaultCurveSegments;
                var k;
                var i, len;
                var ptCoord, perc, addedLength = 0;
                var ptDistance;
                var point = [],
                    lastPoint = [];
                var lengthData = bezier_length_pool.newElement();
                len = pt3.length;
                for (k = 0; k < curveSegments; k += 1) {
                    perc = k / (curveSegments - 1);
                    ptDistance = 0;
                    for (i = 0; i < len; i += 1) {
                        ptCoord = bm_pow(1 - perc, 3) * pt1[i] + 3 * bm_pow(1 - perc, 2) * perc * pt3[i] + 3 * (1 - perc) * bm_pow(perc, 2) * pt4[i] + bm_pow(perc, 3) * pt2[i];
                        point[i] = ptCoord;
                        if (lastPoint[i] !== null) {
                            ptDistance += bm_pow(point[i] - lastPoint[i], 2);
                        }
                        lastPoint[i] = point[i];
                    }
                    if (ptDistance) {
                        ptDistance = bm_sqrt(ptDistance);
                        addedLength += ptDistance;
                    }
                    lengthData.percents[k] = perc;
                    lengthData.lengths[k] = addedLength;
                }
                lengthData.addedLength = addedLength;
                return lengthData;
            };
        }());

        function getSegmentsLength(shapeData) {
            var segmentsLength = segments_length_pool.newElement();
            var closed = shapeData.c;
            var pathV = shapeData.v;
            var pathO = shapeData.o;
            var pathI = shapeData.i;
            var i, len = shapeData._length;
            var lengths = segmentsLength.lengths;
            var totalLength = 0;
            for (i = 0; i < len - 1; i += 1) {
                lengths[i] = getBezierLength(pathV[i], pathV[i + 1], pathO[i], pathI[i + 1]);
                totalLength += lengths[i].addedLength;
            }
            if (closed && len) {
                lengths[i] = getBezierLength(pathV[i], pathV[0], pathO[i], pathI[0]);
                totalLength += lengths[i].addedLength;
            }
            segmentsLength.totalLength = totalLength;
            return segmentsLength;
        }

        function BezierData(length) {
            this.segmentLength = 0;
            this.points = new Array(length);
        }

        function PointData(partial, point) {
            this.partialLength = partial;
            this.point = point;
        }

        var buildBezierData = (function() {

            var storedData = {};

            return function(keyData) {
                var pt1 = keyData.s;
                var pt2 = keyData.e;
                var pt3 = keyData.to;
                var pt4 = keyData.ti;
                var bezierName = (pt1[0] + '_' + pt1[1] + '_' + pt2[0] + '_' + pt2[1] + '_' + pt3[0] + '_' + pt3[1] + '_' + pt4[0] + '_' + pt4[1]).replace(/\./g, 'p');
                if (storedData[bezierName]) {
                    keyData.bezierData = storedData[bezierName];
                    return;
                }
                var curveSegments = defaultCurveSegments;
                var k, i, len;
                var ptCoord, perc, addedLength = 0;
                var ptDistance;
                var point, lastPoint = null;
                if (pt1.length === 2 && (pt1[0] != pt2[0] || pt1[1] != pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {
                    curveSegments = 2;
                }
                var bezierData = new BezierData(curveSegments);
                len = pt3.length;
                for (k = 0; k < curveSegments; k += 1) {
                    point = createSizedArray(len);
                    perc = k / (curveSegments - 1);
                    ptDistance = 0;
                    for (i = 0; i < len; i += 1) {
                        ptCoord = bm_pow(1 - perc, 3) * pt1[i] + 3 * bm_pow(1 - perc, 2) * perc * (pt1[i] + pt3[i]) + 3 * (1 - perc) * bm_pow(perc, 2) * (pt2[i] + pt4[i]) + bm_pow(perc, 3) * pt2[i];
                        point[i] = ptCoord;
                        if (lastPoint !== null) {
                            ptDistance += bm_pow(point[i] - lastPoint[i], 2);
                        }
                    }
                    ptDistance = bm_sqrt(ptDistance);
                    addedLength += ptDistance;
                    bezierData.points[k] = new PointData(ptDistance, point);
                    lastPoint = point;
                }
                bezierData.segmentLength = addedLength;
                keyData.bezierData = bezierData;
                storedData[bezierName] = bezierData;
            };
        }());

        function getDistancePerc(perc, bezierData) {
            var percents = bezierData.percents;
            var lengths = bezierData.lengths;
            var len = percents.length;
            var initPos = bm_floor((len - 1) * perc);
            var lengthPos = perc * bezierData.addedLength;
            var lPerc = 0;
            if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {
                return percents[initPos];
            } else {
                var dir = lengths[initPos] > lengthPos ? -1 : 1;
                var flag = true;
                while (flag) {
                    if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {
                        lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);
                        flag = false;
                    } else {
                        initPos += dir;
                    }
                    if (initPos < 0 || initPos >= len - 1) {
                        //FIX for TypedArrays that don't store floating point values with enough accuracy
                        if (initPos === len - 1) {
                            return percents[initPos];
                        }
                        flag = false;
                    }
                }
                return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;
            }
        }

        function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
            var t1 = getDistancePerc(percent, bezierData);
            var u0 = 1;
            var u1 = 1 - t1;
            var ptX = Math.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1000) / 1000;
            var ptY = Math.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1000) / 1000;
            return [ptX, ptY];
        }

        function getSegmentArray() {

        }

        var bezier_segment_points = createTypedArray('float32', 8);

        function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {

            startPerc = startPerc < 0 ? 0 : startPerc > 1 ? 1 : startPerc;
            var t0 = getDistancePerc(startPerc, bezierData);
            endPerc = endPerc > 1 ? 1 : endPerc;
            var t1 = getDistancePerc(endPerc, bezierData);
            var i, len = pt1.length;
            var u0 = 1 - t0;
            var u1 = 1 - t1;
            var u0u0u0 = u0 * u0 * u0;
            var t0u0u0_3 = t0 * u0 * u0 * 3;
            var t0t0u0_3 = t0 * t0 * u0 * 3;
            var t0t0t0 = t0 * t0 * t0;
            //
            var u0u0u1 = u0 * u0 * u1;
            var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1;
            var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1;
            var t0t0t1 = t0 * t0 * t1;
            //
            var u0u1u1 = u0 * u1 * u1;
            var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1;
            var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1;
            var t0t1t1 = t0 * t1 * t1;
            //
            var u1u1u1 = u1 * u1 * u1;
            var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1;
            var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1;
            var t1t1t1 = t1 * t1 * t1;
            for (i = 0; i < len; i += 1) {
                bezier_segment_points[i * 4] = Math.round((u0u0u0 * pt1[i] + t0u0u0_3 * pt3[i] + t0t0u0_3 * pt4[i] + t0t0t0 * pt2[i]) * 1000) / 1000;
                bezier_segment_points[i * 4 + 1] = Math.round((u0u0u1 * pt1[i] + t0u0u1_3 * pt3[i] + t0t0u1_3 * pt4[i] + t0t0t1 * pt2[i]) * 1000) / 1000;
                bezier_segment_points[i * 4 + 2] = Math.round((u0u1u1 * pt1[i] + t0u1u1_3 * pt3[i] + t0t1u1_3 * pt4[i] + t0t1t1 * pt2[i]) * 1000) / 1000;
                bezier_segment_points[i * 4 + 3] = Math.round((u1u1u1 * pt1[i] + t1u1u1_3 * pt3[i] + t1t1u1_3 * pt4[i] + t1t1t1 * pt2[i]) * 1000) / 1000;
            }

            return bezier_segment_points;
        }

        return {
            getSegmentsLength: getSegmentsLength,
            getNewSegment: getNewSegment,
            getPointInSegment: getPointInSegment,
            buildBezierData: buildBezierData,
            pointOnLine2D: pointOnLine2D,
            pointOnLine3D: pointOnLine3D
        };
    }

    var bez = bezFunction();

    function dataFunctionManager() {

        //var tCanvasHelper = createTag('canvas').getContext('2d');

        function completeLayers(layers, comps, fontManager) {
            var layerData;
            var animArray, lastFrame;
            var i, len = layers.length;
            var j, jLen, k, kLen;
            for (i = 0; i < len; i += 1) {
                layerData = layers[i];
                if (!('ks' in layerData) || layerData.completed) {
                    continue;
                }
                layerData.completed = true;
                if (layerData.tt) {
                    layers[i - 1].td = layerData.tt;
                }
                animArray = [];
                lastFrame = -1;
                if (layerData.hasMask) {
                    var maskProps = layerData.masksProperties;
                    jLen = maskProps.length;
                    for (j = 0; j < jLen; j += 1) {
                        if (maskProps[j].pt.k.i) {
                            convertPathsToAbsoluteValues(maskProps[j].pt.k);
                        } else {
                            kLen = maskProps[j].pt.k.length;
                            for (k = 0; k < kLen; k += 1) {
                                if (maskProps[j].pt.k[k].s) {
                                    convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);
                                }
                                if (maskProps[j].pt.k[k].e) {
                                    convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);
                                }
                            }
                        }
                    }
                }
                if (layerData.ty === 0) {
                    layerData.layers = findCompLayers(layerData.refId, comps);
                    completeLayers(layerData.layers, comps, fontManager);
                } else if (layerData.ty === 4) {
                    completeShapes(layerData.shapes);
                } else if (layerData.ty == 5) {
                    completeText(layerData, fontManager);
                }
            }
        }

        function findCompLayers(id, comps) {
            var i = 0,
                len = comps.length;
            while (i < len) {
                if (comps[i].id === id) {
                    if (!comps[i].layers.__used) {
                        comps[i].layers.__used = true;
                        return comps[i].layers;
                    }
                    return JSON.parse(JSON.stringify(comps[i].layers));
                }
                i += 1;
            }
        }

        function completeShapes(arr) {
            var i, len = arr.length;
            var j, jLen;
            var hasPaths = false;
            for (i = len - 1; i >= 0; i -= 1) {
                if (arr[i].ty == 'sh') {
                    if (arr[i].ks.k.i) {
                        convertPathsToAbsoluteValues(arr[i].ks.k);
                    } else {
                        jLen = arr[i].ks.k.length;
                        for (j = 0; j < jLen; j += 1) {
                            if (arr[i].ks.k[j].s) {
                                convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);
                            }
                            if (arr[i].ks.k[j].e) {
                                convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);
                            }
                        }
                    }
                    hasPaths = true;
                } else if (arr[i].ty == 'gr') {
                    completeShapes(arr[i].it);
                }
            }
            /*if(hasPaths){
                //mx: distance
                //ss: sensitivity
                //dc: decay
                arr.splice(arr.length-1,0,{
                    "ty": "ms",
                    "mx":20,
                    "ss":10,
                     "dc":0.001,
                    "maxDist":200
                });
            }*/
        }

        function convertPathsToAbsoluteValues(path) {
            var i, len = path.i.length;
            for (i = 0; i < len; i += 1) {
                path.i[i][0] += path.v[i][0];
                path.i[i][1] += path.v[i][1];
                path.o[i][0] += path.v[i][0];
                path.o[i][1] += path.v[i][1];
            }
        }

        function checkVersion(minimum, animVersionString) {
            var animVersion = animVersionString ? animVersionString.split('.') : [100, 100, 100];
            if (minimum[0] > animVersion[0]) {
                return true;
            } else if (animVersion[0] > minimum[0]) {
                return false;
            }
            if (minimum[1] > animVersion[1]) {
                return true;
            } else if (animVersion[1] > minimum[1]) {
                return false;
            }
            if (minimum[2] > animVersion[2]) {
                return true;
            } else if (animVersion[2] > minimum[2]) {
                return false;
            }
        }

        var checkText = (function() {
            var minimumVersion = [4, 4, 14];

            function updateTextLayer(textLayer) {
                var documentData = textLayer.t.d;
                textLayer.t.d = {
                    k: [{
                        s: documentData,
                        t: 0
                    }]
                };
            }

            function iterateLayers(layers) {
                var i, len = layers.length;
                for (i = 0; i < len; i += 1) {
                    if (layers[i].ty === 5) {
                        updateTextLayer(layers[i]);
                    }
                }
            }

            return function(animationData) {
                if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                        var i, len = animationData.assets.length;
                        for (i = 0; i < len; i += 1) {
                            if (animationData.assets[i].layers) {
                                iterateLayers(animationData.assets[i].layers);

                            }
                        }
                    }
                }
            };
        }());

        var checkChars = (function() {
            var minimumVersion = [4, 7, 99];
            return function(animationData) {
                if (animationData.chars && !checkVersion(minimumVersion, animationData.v)) {
                    var i, len = animationData.chars.length,
                        j, jLen, k, kLen;
                    var pathData, paths;
                    for (i = 0; i < len; i += 1) {
                        if (animationData.chars[i].data && animationData.chars[i].data.shapes) {
                            paths = animationData.chars[i].data.shapes[0].it;
                            jLen = paths.length;

                            for (j = 0; j < jLen; j += 1) {
                                pathData = paths[j].ks.k;
                                if (!pathData.__converted) {
                                    convertPathsToAbsoluteValues(paths[j].ks.k);
                                    pathData.__converted = true;
                                }
                            }
                        }
                    }
                }
            };
        }());

        var checkColors = (function() {
            var minimumVersion = [4, 1, 9];

            function iterateShapes(shapes) {
                var i, len = shapes.length;
                var j, jLen;
                for (i = 0; i < len; i += 1) {
                    if (shapes[i].ty === 'gr') {
                        iterateShapes(shapes[i].it);
                    } else if (shapes[i].ty === 'fl' || shapes[i].ty === 'st') {
                        if (shapes[i].c.k && shapes[i].c.k[0].i) {
                            jLen = shapes[i].c.k.length;
                            for (j = 0; j < jLen; j += 1) {
                                if (shapes[i].c.k[j].s) {
                                    shapes[i].c.k[j].s[0] /= 255;
                                    shapes[i].c.k[j].s[1] /= 255;
                                    shapes[i].c.k[j].s[2] /= 255;
                                    shapes[i].c.k[j].s[3] /= 255;
                                }
                                if (shapes[i].c.k[j].e) {
                                    shapes[i].c.k[j].e[0] /= 255;
                                    shapes[i].c.k[j].e[1] /= 255;
                                    shapes[i].c.k[j].e[2] /= 255;
                                    shapes[i].c.k[j].e[3] /= 255;
                                }
                            }
                        } else {
                            shapes[i].c.k[0] /= 255;
                            shapes[i].c.k[1] /= 255;
                            shapes[i].c.k[2] /= 255;
                            shapes[i].c.k[3] /= 255;
                        }
                    }
                }
            }

            function iterateLayers(layers) {
                var i, len = layers.length;
                for (i = 0; i < len; i += 1) {
                    if (layers[i].ty === 4) {
                        iterateShapes(layers[i].shapes);
                    }
                }
            }

            return function(animationData) {
                if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                        var i, len = animationData.assets.length;
                        for (i = 0; i < len; i += 1) {
                            if (animationData.assets[i].layers) {
                                iterateLayers(animationData.assets[i].layers);

                            }
                        }
                    }
                }
            };
        }());

        var checkShapes = (function() {
            var minimumVersion = [4, 4, 18];



            function completeShapes(arr) {
                var i, len = arr.length;
                var j, jLen;
                var hasPaths = false;
                for (i = len - 1; i >= 0; i -= 1) {
                    if (arr[i].ty == 'sh') {
                        if (arr[i].ks.k.i) {
                            arr[i].ks.k.c = arr[i].closed;
                        } else {
                            jLen = arr[i].ks.k.length;
                            for (j = 0; j < jLen; j += 1) {
                                if (arr[i].ks.k[j].s) {
                                    arr[i].ks.k[j].s[0].c = arr[i].closed;
                                }
                                if (arr[i].ks.k[j].e) {
                                    arr[i].ks.k[j].e[0].c = arr[i].closed;
                                }
                            }
                        }
                        hasPaths = true;
                    } else if (arr[i].ty == 'gr') {
                        completeShapes(arr[i].it);
                    }
                }
            }

            function iterateLayers(layers) {
                var layerData;
                var i, len = layers.length;
                var j, jLen, k, kLen;
                for (i = 0; i < len; i += 1) {
                    layerData = layers[i];
                    if (layerData.hasMask) {
                        var maskProps = layerData.masksProperties;
                        jLen = maskProps.length;
                        for (j = 0; j < jLen; j += 1) {
                            if (maskProps[j].pt.k.i) {
                                maskProps[j].pt.k.c = maskProps[j].cl;
                            } else {
                                kLen = maskProps[j].pt.k.length;
                                for (k = 0; k < kLen; k += 1) {
                                    if (maskProps[j].pt.k[k].s) {
                                        maskProps[j].pt.k[k].s[0].c = maskProps[j].cl;
                                    }
                                    if (maskProps[j].pt.k[k].e) {
                                        maskProps[j].pt.k[k].e[0].c = maskProps[j].cl;
                                    }
                                }
                            }
                        }
                    }
                    if (layerData.ty === 4) {
                        completeShapes(layerData.shapes);
                    }
                }
            }

            return function(animationData) {
                if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                        var i, len = animationData.assets.length;
                        for (i = 0; i < len; i += 1) {
                            if (animationData.assets[i].layers) {
                                iterateLayers(animationData.assets[i].layers);

                            }
                        }
                    }
                }
            };
        }());

        function completeData(animationData, fontManager) {
            if (animationData.__complete) {
                return;
            }
            checkColors(animationData);
            checkText(animationData);
            checkChars(animationData);
            checkShapes(animationData);
            completeLayers(animationData.layers, animationData.assets, fontManager);
            animationData.__complete = true;
            //blitAnimation(animationData, animationData.assets, fontManager);
        }

        function completeText(data, fontManager) {
            if (data.t.a.length === 0 && !('m' in data.t.p)) {
                data.singleShape = true;
            }
        }

        var moduleOb = {};
        moduleOb.completeData = completeData;

        return moduleOb;
    }

    var dataManager = dataFunctionManager();
    var FontManager = (function() {

        var maxWaitingTime = 5000;
        var emptyChar = {
            w: 0,
            size: 0,
            shapes: []
        };
        var combinedCharacters = [];
        //Hindi characters
        combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);

        function setUpNode(font, family) {
            var parentNode = createTag('span');
            parentNode.style.fontFamily = family;
            var node = createTag('span');
            // Characters that vary significantly among different fonts
            node.innerHTML = 'giItT1WQy@!-/#';
            // Visible - so we can measure it - but not on the screen
            parentNode.style.position = 'absolute';
            parentNode.style.left = '-10000px';
            parentNode.style.top = '-10000px';
            // Large font size makes even subtle changes obvious
            parentNode.style.fontSize = '300px';
            // Reset any font properties
            parentNode.style.fontVariant = 'normal';
            parentNode.style.fontStyle = 'normal';
            parentNode.style.fontWeight = 'normal';
            parentNode.style.letterSpacing = '0';
            parentNode.appendChild(node);
            document.body.appendChild(parentNode);

            // Remember width with no applied web font
            var width = node.offsetWidth;
            node.style.fontFamily = font + ', ' + family;
            return {
                node: node,
                w: width,
                parent: parentNode
            };
        }

        function checkLoadedFonts() {
            var i, len = this.fonts.length;
            var node, w;
            var loadedCount = len;
            for (i = 0; i < len; i += 1) {
                if (this.fonts[i].loaded) {
                    loadedCount -= 1;
                    continue;
                }
                if (this.fonts[i].fOrigin === 't' || this.fonts[i].origin === 2) {
                    if (window.Typekit && window.Typekit.load && this.typekitLoaded === 0) {
                        this.typekitLoaded = 1;
                        try {
                            window.Typekit.load({
                                async: true,
                                active: function() {
                                    this.typekitLoaded = 2;
                                }.bind(this)
                            });
                        } catch (e) {}
                    }
                    if (this.typekitLoaded === 2) {
                        this.fonts[i].loaded = true;
                    }
                } else if (this.fonts[i].fOrigin === 'n' || this.fonts[i].origin === 0) {
                    this.fonts[i].loaded = true;
                } else {
                    node = this.fonts[i].monoCase.node;
                    w = this.fonts[i].monoCase.w;
                    if (node.offsetWidth !== w) {
                        loadedCount -= 1;
                        this.fonts[i].loaded = true;
                    } else {
                        node = this.fonts[i].sansCase.node;
                        w = this.fonts[i].sansCase.w;
                        if (node.offsetWidth !== w) {
                            loadedCount -= 1;
                            this.fonts[i].loaded = true;
                        }
                    }
                    if (this.fonts[i].loaded) {
                        this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);
                        this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);
                    }
                }
            }

            if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {
                setTimeout(checkLoadedFonts.bind(this), 20);
            } else {
                setTimeout(function() {
                    this.loaded = true;
                }.bind(this), 0);

            }
        }

        function createHelper(def, fontData) {
            var tHelper = createNS('text');
            tHelper.style.fontSize = '100px';
            //tHelper.style.fontFamily = fontData.fFamily;
            tHelper.setAttribute('font-family', fontData.fFamily);
            tHelper.setAttribute('font-style', fontData.fStyle);
            tHelper.setAttribute('font-weight', fontData.fWeight);
            tHelper.textContent = '1';
            if (fontData.fClass) {
                tHelper.style.fontFamily = 'inherit';
                tHelper.className = fontData.fClass;
            } else {
                tHelper.style.fontFamily = fontData.fFamily;
            }
            def.appendChild(tHelper);
            var tCanvasHelper = createTag('canvas').getContext('2d');
            tCanvasHelper.font = fontData.fWeight + ' ' + fontData.fStyle + ' 100px ' + fontData.fFamily;
            //tCanvasHelper.font = ' 100px '+ fontData.fFamily;
            return tHelper;
        }

        function addFonts(fontData, defs) {
            if (!fontData) {
                this.loaded = true;
                return;
            }
            if (this.chars) {
                this.loaded = true;
                this.fonts = fontData.list;
                return;
            }


            var fontArr = fontData.list;
            var i, len = fontArr.length;
            for (i = 0; i < len; i += 1) {
                fontArr[i].loaded = false;
                fontArr[i].monoCase = setUpNode(fontArr[i].fFamily, 'monospace');
                fontArr[i].sansCase = setUpNode(fontArr[i].fFamily, 'sans-serif');
                if (!fontArr[i].fPath) {
                    fontArr[i].loaded = true;
                } else if (fontArr[i].fOrigin === 'p' || fontArr[i].origin === 3) {
                    var s = createTag('style');
                    s.type = "text/css";
                    s.innerHTML = "@font-face {" + "font-family: " + fontArr[i].fFamily + "; font-style: normal; src: url('" + fontArr[i].fPath + "');}";
                    defs.appendChild(s);
                } else if (fontArr[i].fOrigin === 'g' || fontArr[i].origin === 1) {
                    var l = createTag('link');
                    l.type = "text/css";
                    l.rel = "stylesheet";
                    l.href = fontArr[i].fPath;
                    document.body.appendChild(l);
                } else if (fontArr[i].fOrigin === 't' || fontArr[i].origin === 2) {
                    var sc = createTag('script');
                    sc.setAttribute('src', fontArr[i].fPath);
                    defs.appendChild(sc);
                }
                fontArr[i].helper = createHelper(defs, fontArr[i]);
                fontArr[i].cache = {};
                this.fonts.push(fontArr[i]);
            }
            //On some cases the font even if it is loaded, it won't load correctly when measuring text on canvas.
            //Adding this timeout seems to fix it
            setTimeout(function() {
                checkLoadedFonts.bind(this)();
            }.bind(this), 100);
        }

        function addChars(chars) {
            if (!chars) {
                return;
            }
            if (!this.chars) {
                this.chars = [];
            }
            var i, len = chars.length;
            var j, jLen = this.chars.length,
                found;
            for (i = 0; i < len; i += 1) {
                j = 0;
                found = false;
                while (j < jLen) {
                    if (this.chars[j].style === chars[i].style && this.chars[j].fFamily === chars[i].fFamily && this.chars[j].ch === chars[i].ch) {
                        found = true;
                    }
                    j += 1;
                }
                if (!found) {
                    this.chars.push(chars[i]);
                    jLen += 1;
                }
            }
        }

        function getCharData(char, style, font) {
            var i = 0,
                len = this.chars.length;
            while (i < len) {
                if (this.chars[i].ch === char && this.chars[i].style === style && this.chars[i].fFamily === font) {
                    return this.chars[i];
                }
                i += 1;
            }
            if (console && console.warn) {
                console.warn('Missing character from exported characters list: ', char, style, font);
            }
            return emptyChar;
        }

        function measureText(char, fontName, size) {
            var fontData = this.getFontByName(fontName);
            var index = char.charCodeAt(0);
            if (!fontData.cache[index + 1]) {
                var tHelper = fontData.helper;
                //Canvas version
                //fontData.cache[index] = tHelper.measureText(char).width / 100;
                //SVG version
                //console.log(tHelper.getBBox().width)
                /*tHelper.textContent = '|' + char + '|';
                var doubleSize = tHelper.getComputedTextLength();
                tHelper.textContent = '||';
                var singleSize = tHelper.getComputedTextLength();
                fontData.cache[index + 1] = (doubleSize - singleSize)/100;*/

                tHelper.textContent = char;
                fontData.cache[index + 1] = (tHelper.getComputedTextLength()) / 100;
            }
            return fontData.cache[index + 1] * size;
        }

        function getFontByName(name) {
            var i = 0,
                len = this.fonts.length;
            while (i < len) {
                if (this.fonts[i].fName === name) {
                    return this.fonts[i];
                }
                i += 1;
            }
            return this.fonts[0];
        }

        function getCombinedCharacterCodes() {
            return combinedCharacters;
        }

        var Font = function() {
            this.fonts = [];
            this.chars = null;
            this.typekitLoaded = 0;
            this.loaded = false;
            this.initTime = Date.now();
        };
        //TODO: for now I'm adding these methods to the Class and not the prototype. Think of a better way to implement it. 
        Font.getCombinedCharacterCodes = getCombinedCharacterCodes;

        Font.prototype.addChars = addChars;
        Font.prototype.addFonts = addFonts;
        Font.prototype.getCharData = getCharData;
        Font.prototype.getFontByName = getFontByName;
        Font.prototype.measureText = measureText;

        return Font;

    }());
    var PropertyFactory = (function() {

        var initFrame = initialDefaultFrame;
        var math_abs = Math.abs;

        function interpolateValue(frameNum, caching) {
            var offsetTime = this.offsetTime;
            var newValue;
            if (this.propType === 'multidimensional') {
                newValue = createTypedArray('float32', this.pv.length);
            }
            var iterationIndex = caching.lastIndex;
            var i = iterationIndex;
            var len = this.keyframes.length - 1,
                flag = true;
            var keyData, nextKeyData;

            while (flag) {
                keyData = this.keyframes[i];
                nextKeyData = this.keyframes[i + 1];
                if (i == len - 1 && frameNum >= nextKeyData.t - offsetTime) {
                    if (keyData.h) {
                        keyData = nextKeyData;
                    }
                    iterationIndex = 0;
                    break;
                }
                if ((nextKeyData.t - offsetTime) > frameNum) {
                    iterationIndex = i;
                    break;
                }
                if (i < len - 1) {
                    i += 1;
                } else {
                    iterationIndex = 0;
                    flag = false;
                }
            }

            var k, kLen, perc, jLen, j, fnc;
            if (keyData.to) {

                if (!keyData.bezierData) {
                    bez.buildBezierData(keyData);
                }
                var bezierData = keyData.bezierData;
                if (frameNum >= nextKeyData.t - offsetTime || frameNum < keyData.t - offsetTime) {
                    var ind = frameNum >= nextKeyData.t - offsetTime ? bezierData.points.length - 1 : 0;
                    kLen = bezierData.points[ind].point.length;
                    for (k = 0; k < kLen; k += 1) {
                        newValue[k] = bezierData.points[ind].point[k];
                    }
                    caching._lastBezierData = null;
                } else {
                    if (keyData.__fnct) {
                        fnc = keyData.__fnct;
                    } else {
                        fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
                        keyData.__fnct = fnc;
                    }
                    perc = fnc((frameNum - (keyData.t - offsetTime)) / ((nextKeyData.t - offsetTime) - (keyData.t - offsetTime)));
                    var distanceInLine = bezierData.segmentLength * perc;

                    var segmentPerc;
                    var addedLength = (caching.lastFrame < frameNum && caching._lastBezierData === bezierData) ? caching._lastAddedLength : 0;
                    j = (caching.lastFrame < frameNum && caching._lastBezierData === bezierData) ? caching._lastPoint : 0;
                    flag = true;
                    jLen = bezierData.points.length;
                    while (flag) {
                        addedLength += bezierData.points[j].partialLength;
                        if (distanceInLine === 0 || perc === 0 || j == bezierData.points.length - 1) {
                            kLen = bezierData.points[j].point.length;
                            for (k = 0; k < kLen; k += 1) {
                                newValue[k] = bezierData.points[j].point[k];
                            }
                            break;
                        } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j + 1].partialLength) {
                            segmentPerc = (distanceInLine - addedLength) / (bezierData.points[j + 1].partialLength);
                            kLen = bezierData.points[j].point.length;
                            for (k = 0; k < kLen; k += 1) {
                                newValue[k] = bezierData.points[j].point[k] + (bezierData.points[j + 1].point[k] - bezierData.points[j].point[k]) * segmentPerc;
                            }
                            break;
                        }
                        if (j < jLen - 1) {
                            j += 1;
                        } else {
                            flag = false;
                        }
                    }
                    caching._lastPoint = j;
                    caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;
                    caching._lastBezierData = bezierData;
                }
            } else {
                var outX, outY, inX, inY, keyValue;
                len = keyData.s.length;
                if (this.sh && keyData.h !== 1) {
                    if (frameNum >= nextKeyData.t - offsetTime) {
                        newValue[0] = keyData.e[0];
                        newValue[1] = keyData.e[1];
                        newValue[2] = keyData.e[2];
                    } else if (frameNum <= keyData.t - offsetTime) {
                        newValue[0] = keyData.s[0];
                        newValue[1] = keyData.s[1];
                        newValue[2] = keyData.s[2];
                    } else {
                        var quatStart = createQuaternion(keyData.s);
                        var quatEnd = createQuaternion(keyData.e);
                        var time = (frameNum - (keyData.t - offsetTime)) / ((nextKeyData.t - offsetTime) - (keyData.t - offsetTime));
                        quaternionToEuler(newValue, slerp(quatStart, quatEnd, time));
                    }

                } else {
                    for (i = 0; i < len; i += 1) {
                        if (keyData.h !== 1) {
                            if (frameNum >= nextKeyData.t - offsetTime) {
                                perc = 1;
                            } else if (frameNum < keyData.t - offsetTime) {
                                perc = 0;
                            } else {
                                if (keyData.o.x.constructor === Array) {
                                    if (!keyData.__fnct) {
                                        keyData.__fnct = [];
                                    }
                                    if (!keyData.__fnct[i]) {
                                        outX = keyData.o.x[i] || keyData.o.x[0];
                                        outY = keyData.o.y[i] || keyData.o.y[0];
                                        inX = keyData.i.x[i] || keyData.i.x[0];
                                        inY = keyData.i.y[i] || keyData.i.y[0];
                                        fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                                        keyData.__fnct[i] = fnc;
                                    } else {
                                        fnc = keyData.__fnct[i];
                                    }
                                } else {
                                    if (!keyData.__fnct) {
                                        outX = keyData.o.x;
                                        outY = keyData.o.y;
                                        inX = keyData.i.x;
                                        inY = keyData.i.y;
                                        fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                                        keyData.__fnct = fnc;
                                    } else {
                                        fnc = keyData.__fnct;
                                    }
                                }
                                perc = fnc((frameNum - (keyData.t - offsetTime)) / ((nextKeyData.t - offsetTime) - (keyData.t - offsetTime)));
                            }
                        }

                        keyValue = keyData.h === 1 ? keyData.s[i] : keyData.s[i] + (keyData.e[i] - keyData.s[i]) * perc;

                        if (len === 1) {
                            newValue = keyValue;
                        } else {
                            newValue[i] = keyValue;
                        }
                    }
                }
            }
            caching.lastIndex = iterationIndex;
            return newValue;
        }

        //based on @Toji's https://github.com/toji/gl-matrix/
        function slerp(a, b, t) {
            var out = [];
            var ax = a[0],
                ay = a[1],
                az = a[2],
                aw = a[3],
                bx = b[0],
                by = b[1],
                bz = b[2],
                bw = b[3]

            var omega, cosom, sinom, scale0, scale1;

            cosom = ax * bx + ay * by + az * bz + aw * bw;
            if (cosom < 0.0) {
                cosom = -cosom;
                bx = -bx;
                by = -by;
                bz = -bz;
                bw = -bw;
            }
            if ((1.0 - cosom) > 0.000001) {
                omega = Math.acos(cosom);
                sinom = Math.sin(omega);
                scale0 = Math.sin((1.0 - t) * omega) / sinom;
                scale1 = Math.sin(t * omega) / sinom;
            } else {
                scale0 = 1.0 - t;
                scale1 = t;
            }
            out[0] = scale0 * ax + scale1 * bx;
            out[1] = scale0 * ay + scale1 * by;
            out[2] = scale0 * az + scale1 * bz;
            out[3] = scale0 * aw + scale1 * bw;

            return out;
        }

        function quaternionToEuler(out, quat) {
            var qx = quat[0];
            var qy = quat[1];
            var qz = quat[2];
            var qw = quat[3];
            var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz)
            var attitude = Math.asin(2 * qx * qy + 2 * qz * qw)
            var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);
            out[0] = heading / degToRads;
            out[1] = attitude / degToRads;
            out[2] = bank / degToRads;
        }

        function createQuaternion(values) {
            var heading = values[0] * degToRads;
            var attitude = values[1] * degToRads;
            var bank = values[2] * degToRads;
            var c1 = Math.cos(heading / 2);
            var c2 = Math.cos(attitude / 2);
            var c3 = Math.cos(bank / 2);
            var s1 = Math.sin(heading / 2);
            var s2 = Math.sin(attitude / 2);
            var s3 = Math.sin(bank / 2);
            var w = c1 * c2 * c3 - s1 * s2 * s3;
            var x = s1 * s2 * c3 + c1 * c2 * s3;
            var y = s1 * c2 * c3 + c1 * s2 * s3;
            var z = c1 * s2 * c3 - s1 * c2 * s3;

            return [x, y, z, w];
        }

        function getValueAtCurrentTime() {
            var frameNum = this.comp.renderedFrame - this.offsetTime;
            var initTime = this.keyframes[0].t - this.offsetTime;
            var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
            if (!(frameNum === this._caching.lastFrame || (this._caching.lastFrame !== initFrame && ((this._caching.lastFrame >= endTime && frameNum >= endTime) || (this._caching.lastFrame < initTime && frameNum < initTime))))) {
                this._caching.lastIndex = this._caching.lastFrame < frameNum ? this._caching.lastIndex : 0;
                var renderResult = this.interpolateValue(frameNum, this._caching);
                this.pv = renderResult;
            }
            this._caching.lastFrame = frameNum;
            return this.pv;
        }

        function setVValue(val) {
            var multipliedValue;
            if (this.propType === 'unidimensional') {
                multipliedValue = val * this.mult;
                if (math_abs(this.v - multipliedValue) > 0.00001) {
                    this.v = multipliedValue;
                    this._mdf = true;
                }
            } else {
                var i = 0,
                    len = this.v.length;
                while (i < len) {
                    multipliedValue = val[i] * this.mult;
                    if (math_abs(this.v[i] - multipliedValue) > 0.00001) {
                        this.v[i] = multipliedValue;
                        this._mdf = true;
                    }
                    i += 1;
                }
            }
        }

        function processEffectsSequence() {
            if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
                return;
            }
            if (this.lock) {
                this.setVValue(this.pv);
                return;
            }
            this.lock = true;
            this._mdf = this._isFirstFrame;
            var multipliedValue;
            var i, len = this.effectsSequence.length;
            var finalValue = this.kf ? this.pv : this.data.k;
            for (i = 0; i < len; i += 1) {
                finalValue = this.effectsSequence[i](finalValue);
            }
            this.setVValue(finalValue);
            this._isFirstFrame = false;
            this.lock = false;
            this.frameId = this.elem.globalData.frameId;
        }

        function addEffect(effectFunction) {
            this.effectsSequence.push(effectFunction);
            this.container.addDynamicProperty(this);
        }

        function ValueProperty(elem, data, mult, container) {
            this.propType = 'unidimensional';
            this.mult = mult || 1;
            this.data = data;
            this.v = mult ? data.k * mult : data.k;
            this.pv = data.k;
            this._mdf = false;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.k = false;
            this.kf = false;
            this.vel = 0;
            this.effectsSequence = [];
            this._isFirstFrame = true;
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.addEffect = addEffect;
        }

        function MultiDimensionalProperty(elem, data, mult, container) {
            this.propType = 'multidimensional';
            this.mult = mult || 1;
            this.data = data;
            this._mdf = false;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.k = false;
            this.kf = false;
            this.frameId = -1;
            var i, len = data.k.length;
            this.v = createTypedArray('float32', len);
            this.pv = createTypedArray('float32', len);
            var arr = createTypedArray('float32', len);
            this.vel = createTypedArray('float32', len);
            for (i = 0; i < len; i += 1) {
                this.v[i] = data.k[i] * this.mult;
                this.pv[i] = data.k[i];
            }
            this._isFirstFrame = true;
            this.effectsSequence = [];
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.addEffect = addEffect;
        }

        function KeyframedValueProperty(elem, data, mult, container) {
            this.propType = 'unidimensional';
            this.keyframes = data.k;
            this.offsetTime = elem.data.st;
            this.frameId = -1;
            this._caching = {
                lastFrame: initFrame,
                lastIndex: 0,
                value: 0
            };
            this.k = true;
            this.kf = true;
            this.data = data;
            this.mult = mult || 1;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.v = initFrame;
            this.pv = initFrame;
            this._isFirstFrame = true;
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.interpolateValue = interpolateValue;
            this.effectsSequence = [getValueAtCurrentTime.bind(this)];
            this.addEffect = addEffect;
        }

        function KeyframedMultidimensionalProperty(elem, data, mult, container) {
            this.propType = 'multidimensional';
            var i, len = data.k.length;
            var s, e, to, ti;
            for (i = 0; i < len - 1; i += 1) {
                if (data.k[i].to && data.k[i].s && data.k[i].e) {
                    s = data.k[i].s;
                    e = data.k[i].e;
                    to = data.k[i].to;
                    ti = data.k[i].ti;
                    if ((s.length === 2 && !(s[0] === e[0] && s[1] === e[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], s[0] + to[0], s[1] + to[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], e[0] + ti[0], e[1] + ti[1])) || (s.length === 3 && !(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], s[0] + to[0], s[1] + to[1], s[2] + to[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], e[0] + ti[0], e[1] + ti[1], e[2] + ti[2]))) {
                        data.k[i].to = null;
                        data.k[i].ti = null;
                    }
                    if (s[0] === e[0] && s[1] === e[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {
                        if (s.length === 2 || (s[2] === e[2] && to[2] === 0 && ti[2] === 0)) {
                            data.k[i].to = null;
                            data.k[i].ti = null;
                        }
                    }
                }
            }
            this.effectsSequence = [getValueAtCurrentTime.bind(this)];
            this.keyframes = data.k;
            this.offsetTime = elem.data.st;
            this.k = true;
            this.kf = true;
            this._isFirstFrame = true;
            this.mult = mult || 1;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.interpolateValue = interpolateValue;
            this.frameId = -1;
            var arrLen = data.k[0].s.length;
            this.v = createTypedArray('float32', arrLen);
            this.pv = createTypedArray('float32', arrLen);
            for (i = 0; i < arrLen; i += 1) {
                this.v[i] = initFrame;
                this.pv[i] = initFrame;
            }
            this._caching = {
                lastFrame: initFrame,
                lastIndex: 0,
                value: createTypedArray('float32', arrLen)
            };
            this.addEffect = addEffect;
        }

        function getProp(elem, data, type, mult, container) {
            var p;
            if (data.a === 0) {
                if (type === 0) {
                    p = new ValueProperty(elem, data, mult, container);
                } else {
                    p = new MultiDimensionalProperty(elem, data, mult, container);
                }
            } else if (data.a === 1) {
                if (type === 0) {
                    p = new KeyframedValueProperty(elem, data, mult, container);
                } else {
                    p = new KeyframedMultidimensionalProperty(elem, data, mult, container);
                }
            } else if (!data.k.length) {
                p = new ValueProperty(elem, data, mult, container);
            } else if (typeof(data.k[0]) === 'number') {
                p = new MultiDimensionalProperty(elem, data, mult, container);
            } else {
                switch (type) {
                    case 0:
                        p = new KeyframedValueProperty(elem, data, mult, container);
                        break;
                    case 1:
                        p = new KeyframedMultidimensionalProperty(elem, data, mult, container);
                        break;
                }
            }
            if (p.effectsSequence.length) {
                container.addDynamicProperty(p);
            }
            return p;
        }

        var ob = {
            getProp: getProp
        };
        return ob;
    }());
    var TransformPropertyFactory = (function() {

        function applyToMatrix(mat) {
            var _mdf = this._mdf;
            this.iterateDynamicProperties();
            this._mdf = this._mdf || _mdf;
            if (this.a) {
                mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
            }
            if (this.s) {
                mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
            }
            if (this.sk) {
                mat.skewFromAxis(-this.sk.v, this.sa.v);
            }
            if (this.r) {
                mat.rotate(-this.r.v);
            } else {
                mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
            }
            if (this.data.p.s) {
                if (this.data.p.z) {
                    mat.translate(this.px.v, this.py.v, -this.pz.v);
                } else {
                    mat.translate(this.px.v, this.py.v, 0);
                }
            } else {
                mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
            }
        }

        function processKeys(forceRender) {
            if (this.elem.globalData.frameId === this.frameId) {
                return;
            }
            if (this._isDirty) {
                this.precalculateMatrix();
                this._isDirty = false;
            }

            this.iterateDynamicProperties();

            if (this._mdf || forceRender) {
                this.v.cloneFromProps(this.pre.props);
                if (this.appliedTransformations < 1) {
                    this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
                }
                if (this.appliedTransformations < 2) {
                    this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
                }
                if (this.sk && this.appliedTransformations < 3) {
                    this.v.skewFromAxis(-this.sk.v, this.sa.v);
                }
                if (this.r && this.appliedTransformations < 4) {
                    this.v.rotate(-this.r.v);
                } else if (!this.r && this.appliedTransformations < 4) {
                    this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
                }
                if (this.autoOriented) {
                    var v1, v2, frameRate = this.elem.globalData.frameRate;
                    if (this.p && this.p.keyframes && this.p.getValueAtTime) {
                        if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {
                            v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);
                            v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
                        } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
                            v1 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t / frameRate), 0);
                            v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.01) / frameRate, 0);
                        } else {
                            v1 = this.p.pv;
                            v2 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
                        }
                    } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
                        v1 = [];
                        v2 = [];
                        var px = this.px,
                            py = this.py,
                            frameRate;
                        if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {
                            v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate, 0);
                            v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);
                            v2[0] = px.getValueAtTime((px.keyframes[0].t) / frameRate, 0);
                            v2[1] = py.getValueAtTime((py.keyframes[0].t) / frameRate, 0);
                        } else if (px._caching.lastFrame + px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
                            v1[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t / frameRate), 0);
                            v1[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t / frameRate), 0);
                            v2[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate, 0);
                            v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);
                        } else {
                            v1 = [px.pv, py.pv];
                            v2[0] = px.getValueAtTime((px._caching.lastFrame + px.offsetTime - 0.01) / frameRate, px.offsetTime);
                            v2[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);
                        }
                    }
                    this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
                }
                if (this.data.p.s) {
                    if (this.data.p.z) {
                        this.v.translate(this.px.v, this.py.v, -this.pz.v);
                    } else {
                        this.v.translate(this.px.v, this.py.v, 0);
                    }
                } else {
                    this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
                }
            }
            this.frameId = this.elem.globalData.frameId;
        }

        function precalculateMatrix() {
            if (!this.a.k) {
                this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
                this.appliedTransformations = 1;
            } else {
                return;
            }
            if (!this.s.effectsSequence.length) {
                this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
                this.appliedTransformations = 2;
            } else {
                return;
            }
            if (this.sk) {
                if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
                    this.pre.skewFromAxis(-this.sk.v, this.sa.v);
                    this.appliedTransformations = 3;
                } else {
                    return;
                }
            }
            if (this.r) {
                if (!this.r.effectsSequence.length) {
                    this.pre.rotate(-this.r.v);
                    this.appliedTransformations = 4;
                } else {
                    return;
                }
            } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
                this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
                this.appliedTransformations = 4;
            }
        }

        function autoOrient() {
            //
            //var prevP = this.getValueAtTime();
        }

        function addDynamicProperty(prop) {
            this._addDynamicProperty(prop);
            this.elem.addDynamicProperty(prop);
            this._isDirty = true;
        }

        function TransformProperty(elem, data, container) {
            this.elem = elem;
            this.frameId = -1;
            this.propType = 'transform';
            this.data = data;
            this.v = new Matrix();
            //Precalculated matrix with non animated properties
            this.pre = new Matrix();
            this.appliedTransformations = 0;
            this.initDynamicPropertyContainer(container || elem);
            if (data.p.s) {
                this.px = PropertyFactory.getProp(elem, data.p.x, 0, 0, this);
                this.py = PropertyFactory.getProp(elem, data.p.y, 0, 0, this);
                if (data.p.z) {
                    this.pz = PropertyFactory.getProp(elem, data.p.z, 0, 0, this);
                }
            } else {
                this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
            }
            if (data.r) {
                this.r = PropertyFactory.getProp(elem, data.r, 0, degToRads, this);
            } else if (data.rx) {
                this.rx = PropertyFactory.getProp(elem, data.rx, 0, degToRads, this);
                this.ry = PropertyFactory.getProp(elem, data.ry, 0, degToRads, this);
                this.rz = PropertyFactory.getProp(elem, data.rz, 0, degToRads, this);
                if (data.or.k[0].ti) {
                    var i, len = data.or.k.length;
                    for (i = 0; i < len; i += 1) {
                        data.or.k[i].to = data.or.k[i].ti = null;
                    }
                }
                this.or = PropertyFactory.getProp(elem, data.or, 1, degToRads, this);
                //sh Indicates it needs to be capped between -180 and 180
                this.or.sh = true;
            }
            if (data.sk) {
                this.sk = PropertyFactory.getProp(elem, data.sk, 0, degToRads, this);
                this.sa = PropertyFactory.getProp(elem, data.sa, 0, degToRads, this);
            }
            if (data.a) {
                this.a = PropertyFactory.getProp(elem, data.a, 1, 0, this);
            }
            if (data.s) {
                this.s = PropertyFactory.getProp(elem, data.s, 1, 0.01, this);
            }
            // Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.
            if (data.o) {
                this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, elem);
            } else {
                this.o = {
                    _mdf: false,
                    v: 1
                };
            }
            this._isDirty = true;
            if (!this.dynamicProperties.length) {
                this.getValue(true);
            }
        }

        TransformProperty.prototype = {
            applyToMatrix: applyToMatrix,
            getValue: processKeys,
            precalculateMatrix: precalculateMatrix,
            autoOrient: autoOrient
        }

        extendPrototype([DynamicPropertyContainer], TransformProperty);
        TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
        TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;

        function getTransformProperty(elem, data, container) {
            return new TransformProperty(elem, data, container);
        }

        return {
            getTransformProperty: getTransformProperty
        };

    }());

    function ShapePath() {
        this.c = false;
        this._length = 0;
        this._maxLength = 8;
        this.v = createSizedArray(this._maxLength);
        this.o = createSizedArray(this._maxLength);
        this.i = createSizedArray(this._maxLength);
    }

    ShapePath.prototype.setPathData = function(closed, len) {
        this.c = closed;
        this.setLength(len);
        var i = 0;
        while (i < len) {
            this.v[i] = point_pool.newElement();
            this.o[i] = point_pool.newElement();
            this.i[i] = point_pool.newElement();
            i += 1;
        }
    };

    ShapePath.prototype.setLength = function(len) {
        while (this._maxLength < len) {
            this.doubleArrayLength();
        }
        this._length = len;
    };

    ShapePath.prototype.doubleArrayLength = function() {
        this.v = this.v.concat(createSizedArray(this._maxLength));
        this.i = this.i.concat(createSizedArray(this._maxLength));
        this.o = this.o.concat(createSizedArray(this._maxLength));
        this._maxLength *= 2;
    };

    ShapePath.prototype.setXYAt = function(x, y, type, pos, replace) {
        var arr;
        this._length = Math.max(this._length, pos + 1);
        if (this._length >= this._maxLength) {
            this.doubleArrayLength();
        }
        switch (type) {
            case 'v':
                arr = this.v;
                break;
            case 'i':
                arr = this.i;
                break;
            case 'o':
                arr = this.o;
                break;
        }
        if (!arr[pos] || (arr[pos] && !replace)) {
            arr[pos] = point_pool.newElement();
        }
        arr[pos][0] = x;
        arr[pos][1] = y;
    };

    ShapePath.prototype.setTripleAt = function(vX, vY, oX, oY, iX, iY, pos, replace) {
        this.setXYAt(vX, vY, 'v', pos, replace);
        this.setXYAt(oX, oY, 'o', pos, replace);
        this.setXYAt(iX, iY, 'i', pos, replace);
    };

    ShapePath.prototype.reverse = function() {
        var newPath = new ShapePath();
        newPath.setPathData(this.c, this._length);
        var vertices = this.v,
            outPoints = this.o,
            inPoints = this.i;
        var init = 0;
        if (this.c) {
            newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
            init = 1;
        }
        var cnt = this._length - 1;
        var len = this._length;

        var i;
        for (i = init; i < len; i += 1) {
            newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i, false);
            cnt -= 1;
        }
        return newPath;
    };
    var ShapePropertyFactory = (function() {

        var initFrame = -999999;

        function interpolateShape(frameNum, previousValue, caching) {
            var iterationIndex = caching.lastIndex;
            var keyPropS, keyPropE, isHold, j, k, jLen, kLen, perc, vertexValue;
            var kf = this.keyframes;
            if (frameNum < kf[0].t - this.offsetTime) {
                keyPropS = kf[0].s[0];
                isHold = true;
                iterationIndex = 0;
            } else if (frameNum >= kf[kf.length - 1].t - this.offsetTime) {
                if (kf[kf.length - 2].h === 1) {
                    keyPropS = kf[kf.length - 1].s[0];
                } else {
                    keyPropS = kf[kf.length - 2].e[0];
                }
                isHold = true;
            } else {
                var i = iterationIndex;
                var len = kf.length - 1,
                    flag = true,
                    keyData, nextKeyData;
                while (flag) {
                    keyData = kf[i];
                    nextKeyData = kf[i + 1];
                    if ((nextKeyData.t - this.offsetTime) > frameNum) {
                        break;
                    }
                    if (i < len - 1) {
                        i += 1;
                    } else {
                        flag = false;
                    }
                }
                isHold = keyData.h === 1;
                iterationIndex = i;
                if (!isHold) {
                    if (frameNum >= nextKeyData.t - this.offsetTime) {
                        perc = 1;
                    } else if (frameNum < keyData.t - this.offsetTime) {
                        perc = 0;
                    } else {
                        var fnc;
                        if (keyData.__fnct) {
                            fnc = keyData.__fnct;
                        } else {
                            fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;
                            keyData.__fnct = fnc;
                        }
                        perc = fnc((frameNum - (keyData.t - this.offsetTime)) / ((nextKeyData.t - this.offsetTime) - (keyData.t - this.offsetTime)));
                    }
                    keyPropE = keyData.e[0];
                }
                keyPropS = keyData.s[0];
            }
            jLen = previousValue._length;
            kLen = keyPropS.i[0].length;
            caching.lastIndex = iterationIndex;

            for (j = 0; j < jLen; j += 1) {
                for (k = 0; k < kLen; k += 1) {
                    vertexValue = isHold ? keyPropS.i[j][k] : keyPropS.i[j][k] + (keyPropE.i[j][k] - keyPropS.i[j][k]) * perc;
                    previousValue.i[j][k] = vertexValue;
                    vertexValue = isHold ? keyPropS.o[j][k] : keyPropS.o[j][k] + (keyPropE.o[j][k] - keyPropS.o[j][k]) * perc;
                    previousValue.o[j][k] = vertexValue;
                    vertexValue = isHold ? keyPropS.v[j][k] : keyPropS.v[j][k] + (keyPropE.v[j][k] - keyPropS.v[j][k]) * perc;
                    previousValue.v[j][k] = vertexValue;
                }
            }
        }

        function interpolateShapeCurrentTime() {
            var frameNum = this.comp.renderedFrame - this.offsetTime;
            var initTime = this.keyframes[0].t - this.offsetTime;
            var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
            var lastFrame = this._caching.lastFrame;
            if (!(lastFrame !== initFrame && ((lastFrame < initTime && frameNum < initTime) || (lastFrame > endTime && frameNum > endTime)))) {
                ////
                this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
                this.interpolateShape(frameNum, this.pv, this._caching);
                ////
            }
            this._caching.lastFrame = frameNum;
            return this.pv;
        }

        function resetShape() {
            this.paths = this.localShapeCollection;
        }

        function shapesEqual(shape1, shape2) {
            if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
                return false;
            }
            var i, len = shape1._length;
            for (i = 0; i < len; i += 1) {
                if (shape1.v[i][0] !== shape2.v[i][0] || shape1.v[i][1] !== shape2.v[i][1] || shape1.o[i][0] !== shape2.o[i][0] || shape1.o[i][1] !== shape2.o[i][1] || shape1.i[i][0] !== shape2.i[i][0] || shape1.i[i][1] !== shape2.i[i][1]) {
                    return false;
                }
            }
            return true;
        }

        function processEffectsSequence() {
            if (this.lock || this.elem.globalData.frameId === this.frameId) {
                return;
            }
            this.lock = true;
            this.frameId = this.elem.globalData.frameId;
            this._mdf = false;
            var finalValue = this.kf ? this.pv : this.data.ks ? this.data.ks.k : this.data.pt.k;
            var i, len = this.effectsSequence.length;
            for (i = 0; i < len; i += 1) {
                finalValue = this.effectsSequence[i](finalValue);
            }
            if (!shapesEqual(this.v, finalValue)) {
                this.v = shape_pool.clone(finalValue);
                this.localShapeCollection.releaseShapes();
                this.localShapeCollection.addShape(this.v);
                this._mdf = true;
                this.paths = this.localShapeCollection;
            }
            this.lock = false;
        };

        function ShapeProperty(elem, data, type) {
            this.propType = 'shape';
            this.comp = elem.comp;
            this.container = elem;
            this.elem = elem;
            this.data = data;
            this.k = false;
            this.kf = false;
            this._mdf = false;
            var pathData = type === 3 ? data.pt.k : data.ks.k;
            this.v = shape_pool.clone(pathData);
            this.pv = shape_pool.clone(this.v);
            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
            this.paths = this.localShapeCollection;
            this.paths.addShape(this.v);
            this.reset = resetShape;
            this.effectsSequence = [];
        }

        function addEffect(effectFunction) {
            this.effectsSequence.push(effectFunction);
            this.container.addDynamicProperty(this);
        }

        ShapeProperty.prototype.interpolateShape = interpolateShape;
        ShapeProperty.prototype.getValue = processEffectsSequence;
        ShapeProperty.prototype.getValue = processEffectsSequence;
        ShapeProperty.prototype.addEffect = addEffect;

        function KeyframedShapeProperty(elem, data, type) {
            this.propType = 'shape';
            this.comp = elem.comp;
            this.elem = elem;
            this.container = elem;
            this.offsetTime = elem.data.st;
            this.keyframes = type === 3 ? data.pt.k : data.ks.k;
            this.k = true;
            this.kf = true;
            var i, len = this.keyframes[0].s[0].i.length;
            var jLen = this.keyframes[0].s[0].i[0].length;
            this.v = shape_pool.newElement();
            this.v.setPathData(this.keyframes[0].s[0].c, len);
            this.pv = shape_pool.clone(this.v);
            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
            this.paths = this.localShapeCollection;
            this.paths.addShape(this.v);
            this.lastFrame = initFrame;
            this.reset = resetShape;
            this._caching = {
                lastFrame: initFrame,
                lastIndex: 0
            };
            this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
        }
        KeyframedShapeProperty.prototype.getValue = processEffectsSequence;
        KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
        KeyframedShapeProperty.prototype.addEffect = addEffect;

        var EllShapeProperty = (function() {

            var cPoint = roundCorner;

            function EllShapeProperty(elem, data) {
                /*this.v = {
                    v: createSizedArray(4),
                    i: createSizedArray(4),
                    o: createSizedArray(4),
                    c: true
                };*/
                this.v = shape_pool.newElement();
                this.v.setPathData(true, 4);
                this.localShapeCollection = shapeCollection_pool.newShapeCollection();
                this.paths = this.localShapeCollection;
                this.localShapeCollection.addShape(this.v);
                this.d = data.d;
                this.elem = elem;
                this.comp = elem.comp;
                this.frameId = -1;
                this.initDynamicPropertyContainer(elem);
                this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
                this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);
                if (this.dynamicProperties.length) {
                    this.k = true;
                } else {
                    this.k = false;
                    this.convertEllToPath();
                }
            };

            EllShapeProperty.prototype = {
                reset: resetShape,
                getValue: function() {
                    if (this.elem.globalData.frameId === this.frameId) {
                        return;
                    }
                    this.frameId = this.elem.globalData.frameId;
                    this.iterateDynamicProperties();

                    if (this._mdf) {
                        this.convertEllToPath();
                    }
                },
                convertEllToPath: function() {
                    var p0 = this.p.v[0],
                        p1 = this.p.v[1],
                        s0 = this.s.v[0] / 2,
                        s1 = this.s.v[1] / 2;
                    var _cw = this.d !== 3;
                    var _v = this.v;
                    _v.v[0][0] = p0;
                    _v.v[0][1] = p1 - s1;
                    _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
                    _v.v[1][1] = p1;
                    _v.v[2][0] = p0;
                    _v.v[2][1] = p1 + s1;
                    _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
                    _v.v[3][1] = p1;
                    _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                    _v.i[0][1] = p1 - s1;
                    _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
                    _v.i[1][1] = p1 - s1 * cPoint;
                    _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                    _v.i[2][1] = p1 + s1;
                    _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
                    _v.i[3][1] = p1 + s1 * cPoint;
                    _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                    _v.o[0][1] = p1 - s1;
                    _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
                    _v.o[1][1] = p1 + s1 * cPoint;
                    _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                    _v.o[2][1] = p1 + s1;
                    _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
                    _v.o[3][1] = p1 - s1 * cPoint;
                }
            }

            extendPrototype([DynamicPropertyContainer], EllShapeProperty);

            return EllShapeProperty;
        }());

        var StarShapeProperty = (function() {

            function StarShapeProperty(elem, data) {
                this.v = shape_pool.newElement();
                this.v.setPathData(true, 0);
                this.elem = elem;
                this.comp = elem.comp;
                this.data = data;
                this.frameId = -1;
                this.d = data.d;
                this.initDynamicPropertyContainer(elem);
                if (data.sy === 1) {
                    this.ir = PropertyFactory.getProp(elem, data.ir, 0, 0, this);
                    this.is = PropertyFactory.getProp(elem, data.is, 0, 0.01, this);
                    this.convertToPath = this.convertStarToPath;
                } else {
                    this.convertToPath = this.convertPolygonToPath;
                }
                this.pt = PropertyFactory.getProp(elem, data.pt, 0, 0, this);
                this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
                this.r = PropertyFactory.getProp(elem, data.r, 0, degToRads, this);
                this.or = PropertyFactory.getProp(elem, data.or, 0, 0, this);
                this.os = PropertyFactory.getProp(elem, data.os, 0, 0.01, this);
                this.localShapeCollection = shapeCollection_pool.newShapeCollection();
                this.localShapeCollection.addShape(this.v);
                this.paths = this.localShapeCollection;
                if (this.dynamicProperties.length) {
                    this.k = true;
                } else {
                    this.k = false;
                    this.convertToPath();
                }
            };

            StarShapeProperty.prototype = {
                reset: resetShape,
                getValue: function() {
                    if (this.elem.globalData.frameId === this.frameId) {
                        return;
                    }
                    this.frameId = this.elem.globalData.frameId;
                    this.iterateDynamicProperties();
                    if (this._mdf) {
                        this.convertToPath();
                    }
                },
                convertStarToPath: function() {
                    var numPts = Math.floor(this.pt.v) * 2;
                    var angle = Math.PI * 2 / numPts;
                    /*this.v.v.length = numPts;
                    this.v.i.length = numPts;
                    this.v.o.length = numPts;*/
                    var longFlag = true;
                    var longRad = this.or.v;
                    var shortRad = this.ir.v;
                    var longRound = this.os.v;
                    var shortRound = this.is.v;
                    var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);
                    var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);
                    var i, rad, roundness, perimSegment, currentAng = -Math.PI / 2;
                    currentAng += this.r.v;
                    var dir = this.data.d === 3 ? -1 : 1;
                    this.v._length = 0;
                    for (i = 0; i < numPts; i += 1) {
                        rad = longFlag ? longRad : shortRad;
                        roundness = longFlag ? longRound : shortRound;
                        perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
                        var x = rad * Math.cos(currentAng);
                        var y = rad * Math.sin(currentAng);
                        var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
                        var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
                        x += +this.p.v[0];
                        y += +this.p.v[1];
                        this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);

                        /*this.v.v[i] = [x,y];
                        this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];
                        this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];
                        this.v._length = numPts;*/
                        longFlag = !longFlag;
                        currentAng += angle * dir;
                    }
                },
                convertPolygonToPath: function() {
                    var numPts = Math.floor(this.pt.v);
                    var angle = Math.PI * 2 / numPts;
                    var rad = this.or.v;
                    var roundness = this.os.v;
                    var perimSegment = 2 * Math.PI * rad / (numPts * 4);
                    var i, currentAng = -Math.PI / 2;
                    var dir = this.data.d === 3 ? -1 : 1;
                    currentAng += this.r.v;
                    this.v._length = 0;
                    for (i = 0; i < numPts; i += 1) {
                        var x = rad * Math.cos(currentAng);
                        var y = rad * Math.sin(currentAng);
                        var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
                        var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
                        x += +this.p.v[0];
                        y += +this.p.v[1];
                        this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);
                        currentAng += angle * dir;
                    }
                    this.paths.length = 0;
                    this.paths[0] = this.v;
                }

            }
            extendPrototype([DynamicPropertyContainer], StarShapeProperty);

            return StarShapeProperty;
        }());

        var RectShapeProperty = (function() {

            function RectShapeProperty(elem, data) {
                this.v = shape_pool.newElement();
                this.v.c = true;
                this.localShapeCollection = shapeCollection_pool.newShapeCollection();
                this.localShapeCollection.addShape(this.v);
                this.paths = this.localShapeCollection;
                this.elem = elem;
                this.comp = elem.comp;
                this.frameId = -1;
                this.d = data.d;
                this.initDynamicPropertyContainer(elem);
                this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
                this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);
                this.r = PropertyFactory.getProp(elem, data.r, 0, 0, this);
                if (this.dynamicProperties.length) {
                    this.k = true;
                } else {
                    this.k = false;
                    this.convertRectToPath();
                }
            };

            RectShapeProperty.prototype = {
                convertRectToPath: function() {
                    var p0 = this.p.v[0],
                        p1 = this.p.v[1],
                        v0 = this.s.v[0] / 2,
                        v1 = this.s.v[1] / 2;
                    var round = bm_min(v0, v1, this.r.v);
                    var cPoint = round * (1 - roundCorner);
                    this.v._length = 0;

                    if (this.d === 2 || this.d === 1) {
                        this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, 0, true);
                        this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round, 1, true);
                        if (round !== 0) {
                            this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);
                            this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round, p1 + v1, 3, true);
                            this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, 4, true);
                            this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round, 5, true);
                            this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);
                            this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round, p1 - v1, 7, true);
                        } else {
                            this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);
                            this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);
                        }
                    } else {
                        this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round, 0, true);
                        if (round !== 0) {
                            this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);
                            this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round, p1 - v1, 2, true);
                            this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, 3, true);
                            this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round, 4, true);
                            this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);
                            this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round, p1 + v1, 6, true);
                            this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, 7, true);
                        } else {
                            this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);
                            this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);
                            this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);

                        }
                    }
                },
                getValue: function(frameNum) {
                    if (this.elem.globalData.frameId === this.frameId) {
                        return;
                    }
                    this.frameId = this.elem.globalData.frameId;
                    this.iterateDynamicProperties();
                    if (this._mdf) {
                        this.convertRectToPath();
                    }

                },
                reset: resetShape
            }
            extendPrototype([DynamicPropertyContainer], RectShapeProperty);

            return RectShapeProperty;
        }());

        function getShapeProp(elem, data, type) {
            var prop;
            if (type === 3 || type === 4) {
                var dataProp = type === 3 ? data.pt : data.ks;
                var keys = dataProp.k;
                if (dataProp.a === 1 || keys.length) {
                    prop = new KeyframedShapeProperty(elem, data, type);
                } else {
                    prop = new ShapeProperty(elem, data, type);
                }
            } else if (type === 5) {
                prop = new RectShapeProperty(elem, data);
            } else if (type === 6) {
                prop = new EllShapeProperty(elem, data);
            } else if (type === 7) {
                prop = new StarShapeProperty(elem, data);
            }
            if (prop.k) {
                elem.addDynamicProperty(prop);
            }
            return prop;
        }

        function getConstructorFunction() {
            return ShapeProperty;
        }

        function getKeyframedConstructorFunction() {
            return KeyframedShapeProperty;
        }

        var ob = {};
        ob.getShapeProp = getShapeProp;
        ob.getConstructorFunction = getConstructorFunction;
        ob.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
        return ob;
    }());
    var ShapeModifiers = (function() {
        var ob = {};
        var modifiers = {};
        ob.registerModifier = registerModifier;
        ob.getModifier = getModifier;

        function registerModifier(nm, factory) {
            if (!modifiers[nm]) {
                modifiers[nm] = factory;
            }
        }

        function getModifier(nm, elem, data) {
            return new modifiers[nm](elem, data);
        }

        return ob;
    }());

    function ShapeModifier() {}
    ShapeModifier.prototype.initModifierProperties = function() {};
    ShapeModifier.prototype.addShapeToModifier = function() {};
    ShapeModifier.prototype.addShape = function(data) {
        if (!this.closed) {
            var shapeData = {
                shape: data.sh,
                data: data,
                localShapeCollection: shapeCollection_pool.newShapeCollection()
            };
            this.shapes.push(shapeData);
            this.addShapeToModifier(shapeData);
            if (this._isAnimated) {
                data.setAsAnimated();
            }
        }
    };
    ShapeModifier.prototype.init = function(elem, data) {
        this.shapes = [];
        this.elem = elem;
        this.initDynamicPropertyContainer(elem);
        this.initModifierProperties(elem, data);
        this.frameId = initialDefaultFrame;
        this.closed = false;
        this.k = false;
        if (this.dynamicProperties.length) {
            this.k = true;
        } else {
            this.getValue(true);
        }
    };
    ShapeModifier.prototype.processKeys = function() {
        if (this.elem.globalData.frameId === this.frameId) {
            return;
        }
        this.frameId = this.elem.globalData.frameId;
        this.iterateDynamicProperties();
    };

    extendPrototype([DynamicPropertyContainer], ShapeModifier);

    function TrimModifier() {}
    extendPrototype([ShapeModifier], TrimModifier);
    TrimModifier.prototype.initModifierProperties = function(elem, data) {
        this.s = PropertyFactory.getProp(elem, data.s, 0, 0.01, this);
        this.e = PropertyFactory.getProp(elem, data.e, 0, 0.01, this);
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0, this);
        this.sValue = 0;
        this.eValue = 0;
        this.getValue = this.processKeys;
        this.m = data.m;
        this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
    };

    TrimModifier.prototype.addShapeToModifier = function(shapeData) {
        shapeData.pathsData = [];
    };

    TrimModifier.prototype.calculateShapeEdges = function(s, e, shapeLength, addedLength, totalModifierLength) {
        var segments = [];
        if (e <= 1) {
            segments.push({
                s: s,
                e: e
            });
        } else if (s >= 1) {
            segments.push({
                s: s - 1,
                e: e - 1
            });
        } else {
            segments.push({
                s: s,
                e: 1
            });
            segments.push({
                s: 0,
                e: e - 1
            });
        }
        var shapeSegments = [];
        var i, len = segments.length,
            segmentOb;
        for (i = 0; i < len; i += 1) {
            segmentOb = segments[i];
            if (segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength) {

            } else {
                var shapeS, shapeE;
                if (segmentOb.s * totalModifierLength <= addedLength) {
                    shapeS = 0;
                } else {
                    shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
                }
                if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
                    shapeE = 1;
                } else {
                    shapeE = ((segmentOb.e * totalModifierLength - addedLength) / shapeLength);
                }
                shapeSegments.push([shapeS, shapeE]);
            }
        }
        if (!shapeSegments.length) {
            shapeSegments.push([0, 0]);
        }
        return shapeSegments;
    };

    TrimModifier.prototype.releasePathsData = function(pathsData) {
        var i, len = pathsData.length;
        for (i = 0; i < len; i += 1) {
            segments_length_pool.release(pathsData[i]);
        }
        pathsData.length = 0;
        return pathsData;
    };

    TrimModifier.prototype.processShapes = function(_isFirstFrame) {
        var s, e;
        if (this._mdf || _isFirstFrame) {
            var o = (this.o.v % 360) / 360;
            if (o < 0) {
                o += 1;
            }
            s = this.s.v + o;
            e = this.e.v + o;
            if (s === e) {

            }
            if (s > e) {
                var _s = s;
                s = e;
                e = _s;
            }
            s = Math.round(s * 1000) / 1000;
            e = Math.round(e * 1000) / 1000;
            this.sValue = s;
            this.eValue = e;
        } else {
            s = this.sValue;
            e = this.eValue;
        }
        var shapePaths;
        var i, len = this.shapes.length,
            j, jLen;
        var pathsData, pathData, totalShapeLength, totalModifierLength = 0;

        if (e === s) {
            for (i = 0; i < len; i += 1) {
                this.shapes[i].localShapeCollection.releaseShapes();
                this.shapes[i].shape._mdf = true;
                this.shapes[i].shape.paths = this.shapes[i].localShapeCollection;
            }
        } else if (!((e === 1 && s === 0) || (e === 0 && s === 1))) {
            var segments = [],
                shapeData, localShapeCollection;
            for (i = 0; i < len; i += 1) {
                shapeData = this.shapes[i];
                // if shape hasn't changed and trim properties haven't changed, cached previous path can be used
                if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
                    shapeData.shape.paths = shapeData.localShapeCollection;
                } else {
                    shapePaths = shapeData.shape.paths;
                    jLen = shapePaths._length;
                    totalShapeLength = 0;
                    if (!shapeData.shape._mdf && shapeData.pathsData.length) {
                        totalShapeLength = shapeData.totalShapeLength;
                    } else {
                        pathsData = this.releasePathsData(shapeData.pathsData);
                        for (j = 0; j < jLen; j += 1) {
                            pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
                            pathsData.push(pathData);
                            totalShapeLength += pathData.totalLength;
                        }
                        shapeData.totalShapeLength = totalShapeLength;
                        shapeData.pathsData = pathsData;
                    }

                    totalModifierLength += totalShapeLength;
                    shapeData.shape._mdf = true;
                }
            }
            var shapeS = s,
                shapeE = e,
                addedLength = 0,
                edges;
            for (i = len - 1; i >= 0; i -= 1) {
                shapeData = this.shapes[i];
                if (shapeData.shape._mdf) {
                    localShapeCollection = shapeData.localShapeCollection;
                    localShapeCollection.releaseShapes();
                    //if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group
                    if (this.m === 2 && len > 1) {
                        edges = this.calculateShapeEdges(s, e, shapeData.totalShapeLength, addedLength, totalModifierLength);
                        addedLength += shapeData.totalShapeLength;
                    } else {
                        edges = [
                            [shapeS, shapeE]
                        ];
                    }
                    jLen = edges.length;
                    for (j = 0; j < jLen; j += 1) {
                        shapeS = edges[j][0];
                        shapeE = edges[j][1];
                        segments.length = 0;
                        if (shapeE <= 1) {
                            segments.push({
                                s: shapeData.totalShapeLength * shapeS,
                                e: shapeData.totalShapeLength * shapeE
                            });
                        } else if (shapeS >= 1) {
                            segments.push({
                                s: shapeData.totalShapeLength * (shapeS - 1),
                                e: shapeData.totalShapeLength * (shapeE - 1)
                            });
                        } else {
                            segments.push({
                                s: shapeData.totalShapeLength * shapeS,
                                e: shapeData.totalShapeLength
                            });
                            segments.push({
                                s: 0,
                                e: shapeData.totalShapeLength * (shapeE - 1)
                            });
                        }
                        var newShapesData = this.addShapes(shapeData, segments[0]);
                        if (segments[0].s !== segments[0].e) {
                            if (segments.length > 1) {
                                if (shapeData.shape.v.c) {
                                    var lastShape = newShapesData.pop();
                                    this.addPaths(newShapesData, localShapeCollection);
                                    newShapesData = this.addShapes(shapeData, segments[1], lastShape);
                                } else {
                                    this.addPaths(newShapesData, localShapeCollection);
                                    newShapesData = this.addShapes(shapeData, segments[1]);
                                }
                            }
                            this.addPaths(newShapesData, localShapeCollection);
                        }

                    }
                    shapeData.shape.paths = localShapeCollection;
                }
            }
        } else if (this._mdf) {
            for (i = 0; i < len; i += 1) {
                //Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.
                //Don't remove this even if it's losing cached info.
                this.shapes[i].pathsData.length = 0;
                this.shapes[i].shape._mdf = true;
            }
        }
    };

    TrimModifier.prototype.addPaths = function(newPaths, localShapeCollection) {
        var i, len = newPaths.length;
        for (i = 0; i < len; i += 1) {
            localShapeCollection.addShape(newPaths[i]);
        }
    };

    TrimModifier.prototype.addSegment = function(pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
        shapePath.setXYAt(pt2[0], pt2[1], 'o', pos);
        shapePath.setXYAt(pt3[0], pt3[1], 'i', pos + 1);
        if (newShape) {
            shapePath.setXYAt(pt1[0], pt1[1], 'v', pos);
        }
        shapePath.setXYAt(pt4[0], pt4[1], 'v', pos + 1);
    };

    TrimModifier.prototype.addSegmentFromArray = function(points, shapePath, pos, newShape) {
        shapePath.setXYAt(points[1], points[5], 'o', pos);
        shapePath.setXYAt(points[2], points[6], 'i', pos + 1);
        if (newShape) {
            shapePath.setXYAt(points[0], points[4], 'v', pos);
        }
        shapePath.setXYAt(points[3], points[7], 'v', pos + 1);
    };

    TrimModifier.prototype.addShapes = function(shapeData, shapeSegment, shapePath) {
        var pathsData = shapeData.pathsData;
        var shapePaths = shapeData.shape.paths.shapes;
        var i, len = shapeData.shape.paths._length,
            j, jLen;
        var addedLength = 0;
        var currentLengthData, segmentCount;
        var lengths;
        var segment;
        var shapes = [];
        var initPos;
        var newShape = true;
        if (!shapePath) {
            shapePath = shape_pool.newElement();
            segmentCount = 0;
            initPos = 0;
        } else {
            segmentCount = shapePath._length;
            initPos = shapePath._length;
        }
        shapes.push(shapePath);
        for (i = 0; i < len; i += 1) {
            lengths = pathsData[i].lengths;
            shapePath.c = shapePaths[i].c;
            jLen = shapePaths[i].c ? lengths.length : lengths.length + 1;
            for (j = 1; j < jLen; j += 1) {
                currentLengthData = lengths[j - 1];
                if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
                    addedLength += currentLengthData.addedLength;
                    shapePath.c = false;
                } else if (addedLength > shapeSegment.e) {
                    shapePath.c = false;
                    break;
                } else {
                    if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
                        this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[j], shapePaths[i].v[j], shapePath, segmentCount, newShape);
                        newShape = false;
                    } else {
                        segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[j], shapePaths[i].o[j - 1], shapePaths[i].i[j], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j - 1]);
                        this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                        // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
                        newShape = false;
                        shapePath.c = false;
                    }
                    addedLength += currentLengthData.addedLength;
                    segmentCount += 1;
                }
            }
            if (shapePaths[i].c && lengths.length) {
                currentLengthData = lengths[j - 1];
                if (addedLength <= shapeSegment.e) {
                    var segmentLength = lengths[j - 1].addedLength;
                    if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
                        this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[0], shapePaths[i].v[0], shapePath, segmentCount, newShape);
                        newShape = false;
                    } else {
                        segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[0], shapePaths[i].o[j - 1], shapePaths[i].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);
                        this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                        // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
                        newShape = false;
                        shapePath.c = false;
                    }
                } else {
                    shapePath.c = false;
                }
                addedLength += currentLengthData.addedLength;
                segmentCount += 1;
            }
            if (shapePath._length) {
                shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], 'i', initPos);
                shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], 'o', shapePath._length - 1);
            }
            if (addedLength > shapeSegment.e) {
                break;
            }
            if (i < len - 1) {
                shapePath = shape_pool.newElement();
                newShape = true;
                shapes.push(shapePath);
                segmentCount = 0;
            }
        }
        return shapes;
    };


    ShapeModifiers.registerModifier('tm', TrimModifier);

    function RoundCornersModifier() {}
    extendPrototype([ShapeModifier], RoundCornersModifier);
    RoundCornersModifier.prototype.initModifierProperties = function(elem, data) {
        this.getValue = this.processKeys;
        this.rd = PropertyFactory.getProp(elem, data.r, 0, null, this);
        this._isAnimated = !!this.rd.effectsSequence.length;
    };

    RoundCornersModifier.prototype.processPath = function(path, round) {
        var cloned_path = shape_pool.newElement();
        cloned_path.c = path.c;
        var i, len = path._length;
        var currentV, currentI, currentO, closerV, newV, newO, newI, distance, newPosPerc, index = 0;
        var vX, vY, oX, oY, iX, iY;
        for (i = 0; i < len; i += 1) {
            currentV = path.v[i];
            currentO = path.o[i];
            currentI = path.i[i];
            if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {
                if ((i === 0 || i === len - 1) && !path.c) {
                    cloned_path.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index);
                    /*cloned_path.v[index] = currentV;
                    cloned_path.o[index] = currentO;
                    cloned_path.i[index] = currentI;*/
                    index += 1;
                } else {
                    if (i === 0) {
                        closerV = path.v[len - 1];
                    } else {
                        closerV = path.v[i - 1];
                    }
                    distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
                    newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
                    vX = iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
                    vY = iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
                    oX = vX - (vX - currentV[0]) * roundCorner;
                    oY = vY - (vY - currentV[1]) * roundCorner;
                    cloned_path.setTripleAt(vX, vY, oX, oY, iX, iY, index);
                    index += 1;

                    if (i === len - 1) {
                        closerV = path.v[0];
                    } else {
                        closerV = path.v[i + 1];
                    }
                    distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
                    newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
                    vX = oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
                    vY = oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
                    iX = vX - (vX - currentV[0]) * roundCorner;
                    iY = vY - (vY - currentV[1]) * roundCorner;
                    cloned_path.setTripleAt(vX, vY, oX, oY, iX, iY, index);
                    index += 1;
                }
            } else {
                cloned_path.setTripleAt(path.v[i][0], path.v[i][1], path.o[i][0], path.o[i][1], path.i[i][0], path.i[i][1], index);
                index += 1;
            }
        }
        return cloned_path;
    };

    RoundCornersModifier.prototype.processShapes = function(_isFirstFrame) {
        var shapePaths;
        var i, len = this.shapes.length;
        var j, jLen;
        var rd = this.rd.v;

        if (rd !== 0) {
            var shapeData, newPaths, localShapeCollection;
            for (i = 0; i < len; i += 1) {
                shapeData = this.shapes[i];
                newPaths = shapeData.shape.paths;
                localShapeCollection = shapeData.localShapeCollection;
                if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                    localShapeCollection.releaseShapes();
                    shapeData.shape._mdf = true;
                    shapePaths = shapeData.shape.paths.shapes;
                    jLen = shapeData.shape.paths._length;
                    for (j = 0; j < jLen; j += 1) {
                        localShapeCollection.addShape(this.processPath(shapePaths[j], rd));
                    }
                }
                shapeData.shape.paths = shapeData.localShapeCollection;
            }

        }
        if (!this.dynamicProperties.length) {
            this._mdf = false;
        }
    };

    ShapeModifiers.registerModifier('rd', RoundCornersModifier);

    function RepeaterModifier() {}
    extendPrototype([ShapeModifier], RepeaterModifier);

    RepeaterModifier.prototype.initModifierProperties = function(elem, data) {
        this.getValue = this.processKeys;
        this.c = PropertyFactory.getProp(elem, data.c, 0, null, this);
        this.o = PropertyFactory.getProp(elem, data.o, 0, null, this);
        this.tr = TransformPropertyFactory.getTransformProperty(elem, data.tr, this);
        this.data = data;
        if (!this.dynamicProperties.length) {
            this.getValue(true);
        }
        this._isAnimated = !!this.dynamicProperties.length;
        this.pMatrix = new Matrix();
        this.rMatrix = new Matrix();
        this.sMatrix = new Matrix();
        this.tMatrix = new Matrix();
        this.matrix = new Matrix();
    };

    RepeaterModifier.prototype.applyTransforms = function(pMatrix, rMatrix, sMatrix, transform, perc, inv) {
        var dir = inv ? -1 : 1;
        var scaleX = transform.s.v[0] + (1 - transform.s.v[0]) * (1 - perc);
        var scaleY = transform.s.v[1] + (1 - transform.s.v[1]) * (1 - perc);
        pMatrix.translate(transform.p.v[0] * dir * perc, transform.p.v[1] * dir * perc, transform.p.v[2]);
        rMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
        rMatrix.rotate(-transform.r.v * dir * perc);
        rMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
        sMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
        sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
        sMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
    };

    RepeaterModifier.prototype.init = function(elem, arr, pos, elemsData) {
        this.elem = elem;
        this.arr = arr;
        this.pos = pos;
        this.elemsData = elemsData;
        this._currentCopies = 0;
        this._elements = [];
        this._groups = [];
        this.frameId = -1;
        this.initDynamicPropertyContainer(elem);
        this.initModifierProperties(elem, arr[pos]);
        var cont = 0;
        while (pos > 0) {
            pos -= 1;
            //this._elements.unshift(arr.splice(pos,1)[0]);
            this._elements.unshift(arr[pos]);
            cont += 1;
        }
        if (this.dynamicProperties.length) {
            this.k = true;
        } else {
            this.getValue(true);
        }
    };

    RepeaterModifier.prototype.resetElements = function(elements) {
        var i, len = elements.length;
        for (i = 0; i < len; i += 1) {
            elements[i]._processed = false;
            if (elements[i].ty === 'gr') {
                this.resetElements(elements[i].it);
            }
        }
    };

    RepeaterModifier.prototype.cloneElements = function(elements) {
        var i, len = elements.length;
        var newElements = JSON.parse(JSON.stringify(elements));
        this.resetElements(newElements);
        return newElements;
    };

    RepeaterModifier.prototype.changeGroupRender = function(elements, renderFlag) {
        var i, len = elements.length;
        for (i = 0; i < len; i += 1) {
            elements[i]._render = renderFlag;
            if (elements[i].ty === 'gr') {
                this.changeGroupRender(elements[i].it, renderFlag);
            }
        }
    };

    RepeaterModifier.prototype.processShapes = function(_isFirstFrame) {
        var items, itemsTransform, i, dir, cont;
        if (this._mdf || _isFirstFrame) {
            var copies = Math.ceil(this.c.v);
            if (this._groups.length < copies) {
                while (this._groups.length < copies) {
                    var group = {
                        it: this.cloneElements(this._elements),
                        ty: 'gr'
                    };
                    group.it.push({
                        "a": {
                            "a": 0,
                            "ix": 1,
                            "k": [0, 0]
                        },
                        "nm": "Transform",
                        "o": {
                            "a": 0,
                            "ix": 7,
                            "k": 100
                        },
                        "p": {
                            "a": 0,
                            "ix": 2,
                            "k": [0, 0]
                        },
                        "r": {
                            "a": 1,
                            "ix": 6,
                            "k": [{
                                s: 0,
                                e: 0,
                                t: 0
                            }, {
                                s: 0,
                                e: 0,
                                t: 1
                            }]
                        },
                        "s": {
                            "a": 0,
                            "ix": 3,
                            "k": [100, 100]
                        },
                        "sa": {
                            "a": 0,
                            "ix": 5,
                            "k": 0
                        },
                        "sk": {
                            "a": 0,
                            "ix": 4,
                            "k": 0
                        },
                        "ty": "tr"
                    });

                    this.arr.splice(0, 0, group);
                    this._groups.splice(0, 0, group);
                    this._currentCopies += 1;
                }
                this.elem.reloadShapes();
            }
            cont = 0;
            var renderFlag;
            for (i = 0; i <= this._groups.length - 1; i += 1) {
                renderFlag = cont < copies;
                this._groups[i]._render = renderFlag;
                this.changeGroupRender(this._groups[i].it, renderFlag);
                cont += 1;
            }

            this._currentCopies = copies;
            ////

            var offset = this.o.v;
            var offsetModulo = offset % 1;
            var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
            var k;
            var tMat = this.tr.v.props;
            var pProps = this.pMatrix.props;
            var rProps = this.rMatrix.props;
            var sProps = this.sMatrix.props;
            this.pMatrix.reset();
            this.rMatrix.reset();
            this.sMatrix.reset();
            this.tMatrix.reset();
            this.matrix.reset();
            var iteration = 0;

            if (offset > 0) {
                while (iteration < roundOffset) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                    iteration += 1;
                }
                if (offsetModulo) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
                    iteration += offsetModulo;
                }
            } else if (offset < 0) {
                while (iteration > roundOffset) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
                    iteration -= 1;
                }
                if (offsetModulo) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);
                    iteration -= offsetModulo;
                }
            }
            i = this.data.m === 1 ? 0 : this._currentCopies - 1;
            dir = this.data.m === 1 ? 1 : -1;
            cont = this._currentCopies;
            var j, jLen;
            while (cont) {
                items = this.elemsData[i].it;
                itemsTransform = items[items.length - 1].transform.mProps.v.props;
                jLen = itemsTransform.length;
                items[items.length - 1].transform.mProps._mdf = true;
                items[items.length - 1].transform.op._mdf = true;
                if (iteration !== 0) {
                    if ((i !== 0 && dir === 1) || (i !== this._currentCopies - 1 && dir === -1)) {
                        this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                    }
                    this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);
                    this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);
                    this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);

                    for (j = 0; j < jLen; j += 1) {
                        itemsTransform[j] = this.matrix.props[j];
                    }
                    this.matrix.reset();
                } else {
                    this.matrix.reset();
                    for (j = 0; j < jLen; j += 1) {
                        itemsTransform[j] = this.matrix.props[j];
                    }
                }
                iteration += 1;
                cont -= 1;
                i += dir;
            }
        } else {
            cont = this._currentCopies;
            i = 0;
            dir = 1;
            while (cont) {
                items = this.elemsData[i].it;
                itemsTransform = items[items.length - 1].transform.mProps.v.props;
                items[items.length - 1].transform.mProps._mdf = false;
                items[items.length - 1].transform.op._mdf = false;
                cont -= 1;
                i += dir;
            }
        }
    };

    RepeaterModifier.prototype.addShape = function() {};

    ShapeModifiers.registerModifier('rp', RepeaterModifier);

    function ShapeCollection() {
        this._length = 0;
        this._maxLength = 4;
        this.shapes = createSizedArray(this._maxLength);
    }

    ShapeCollection.prototype.addShape = function(shapeData) {
        if (this._length === this._maxLength) {
            this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
            this._maxLength *= 2;
        }
        this.shapes[this._length] = shapeData;
        this._length += 1;
    };

    ShapeCollection.prototype.releaseShapes = function() {
        var i;
        for (i = 0; i < this._length; i += 1) {
            shape_pool.release(this.shapes[i]);
        }
        this._length = 0;
    };

    function DashProperty(elem, data, renderer, container) {
        this.elem = elem;
        this.frameId = -1;
        this.dataProps = createSizedArray(data.length);
        this.renderer = renderer;
        this.k = false;
        this.dashStr = '';
        this.dashArray = createTypedArray('float32', data.length ? data.length - 1 : 0);
        this.dashoffset = createTypedArray('float32', 1);
        this.initDynamicPropertyContainer(container);
        var i, len = data.length || 0,
            prop;
        for (i = 0; i < len; i += 1) {
            prop = PropertyFactory.getProp(elem, data[i].v, 0, 0, this);
            this.k = prop.k || this.k;
            this.dataProps[i] = {
                n: data[i].n,
                p: prop
            };
        }
        if (!this.k) {
            this.getValue(true);
        }
        this._isAnimated = this.k;
    }

    DashProperty.prototype.getValue = function(forceRender) {
        if (this.elem.globalData.frameId === this.frameId && !forceRender) {
            return;
        }
        this.frameId = this.elem.globalData.frameId;
        this.iterateDynamicProperties();
        this._mdf = this._mdf || forceRender;
        if (this._mdf) {
            var i = 0,
                len = this.dataProps.length;
            if (this.renderer === 'svg') {
                this.dashStr = '';
            }
            for (i = 0; i < len; i += 1) {
                if (this.dataProps[i].n != 'o') {
                    if (this.renderer === 'svg') {
                        this.dashStr += ' ' + this.dataProps[i].p.v;
                    } else {
                        this.dashArray[i] = this.dataProps[i].p.v;
                    }
                } else {
                    this.dashoffset[0] = this.dataProps[i].p.v;
                }
            }
        }
    };
    extendPrototype([DynamicPropertyContainer], DashProperty);

    function GradientProperty(elem, data) {
        this.data = data;
        this.c = createTypedArray('uint8c', data.p * 4);
        var cLength = data.k.k[0].s ? (data.k.k[0].s.length - data.p * 4) : data.k.k.length - data.p * 4;
        this.o = createTypedArray('float32', cLength);
        this._cmdf = false;
        this._omdf = false;
        this._collapsable = this.checkCollapsable();
        this._hasOpacity = cLength;
        this.initDynamicPropertyContainer(elem);
        this.prop = PropertyFactory.getProp(elem, data.k, 1, null, this);
        this.k = this.prop.k;
        this.getValue(true);
    }

    GradientProperty.prototype.comparePoints = function(values, points) {
        var i = 0,
            len = this.o.length / 2,
            diff;
        while (i < len) {
            diff = Math.abs(values[i * 4] - values[points * 4 + i * 2]);
            if (diff > 0.01) {
                return false;
            }
            i += 1;
        }
        return true;
    };

    GradientProperty.prototype.checkCollapsable = function() {
        if (this.o.length / 2 !== this.c.length / 4) {
            return false;
        }
        if (this.data.k.k[0].s) {
            var i = 0,
                len = this.data.k.k.length;
            while (i < len) {
                if (!this.comparePoints(this.data.k.k[i].s, this.data.p)) {
                    return false;
                }
                i += 1;
            }
        } else if (!this.comparePoints(this.data.k.k, this.data.p)) {
            return false;
        }
        return true;
    };

    GradientProperty.prototype.getValue = function(forceRender) {
        this.prop.getValue();
        this._mdf = false;
        this._cmdf = false;
        this._omdf = false;
        if (this.prop._mdf || forceRender) {
            var i, len = this.data.p * 4;
            var mult, val;
            for (i = 0; i < len; i += 1) {
                mult = i % 4 === 0 ? 100 : 255;
                val = Math.round(this.prop.v[i] * mult);
                if (this.c[i] !== val) {
                    this.c[i] = val;
                    this._cmdf = !forceRender;
                }
            }
            if (this.o.length) {
                len = this.prop.v.length;
                for (i = this.data.p * 4; i < len; i += 1) {
                    mult = i % 2 === 0 ? 100 : 1;
                    val = i % 2 === 0 ? Math.round(this.prop.v[i] * 100) : this.prop.v[i];
                    if (this.o[i - this.data.p * 4] !== val) {
                        this.o[i - this.data.p * 4] = val;
                        this._omdf = !forceRender;
                    }
                }
            }
            this._mdf = !forceRender;
        }
    };

    extendPrototype([DynamicPropertyContainer], GradientProperty);
    var buildShapeString = function(pathNodes, length, closed, mat) {
        if (length === 0) {
            return '';
        }
        var _o = pathNodes.o;
        var _i = pathNodes.i;
        var _v = pathNodes.v;
        var i, shapeString = " M" + mat.applyToPointStringified(_v[0][0], _v[0][1]);
        for (i = 1; i < length; i += 1) {
            shapeString += " C" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + " " + mat.applyToPointStringified(_i[i][0], _i[i][1]) + " " + mat.applyToPointStringified(_v[i][0], _v[i][1]);
        }
        if (closed && length) {
            shapeString += " C" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + " " + mat.applyToPointStringified(_i[0][0], _i[0][1]) + " " + mat.applyToPointStringified(_v[0][0], _v[0][1]);
            shapeString += 'z';
        }
        return shapeString;
    }
    var ImagePreloader = (function() {

        function imageLoaded() {
            this.loadedAssets += 1;
            if (this.loadedAssets === this.totalImages) {
                if (this.imagesLoadedCb) {
                    this.imagesLoadedCb(null);
                }
            }
        }

        function getAssetsPath(assetData) {
            var path = '';
            if (assetData.e) {
                path = assetData.p;
            } else if (this.assetsPath) {
                var imagePath = assetData.p;
                if (imagePath.indexOf('images/') !== -1) {
                    imagePath = imagePath.split('/')[1];
                }
                path = this.assetsPath + imagePath;
            } else {
                path = this.path;
                path += assetData.u ? assetData.u : '';
                path += assetData.p;
            }
            return path;
        }

        function loadImage(path) {
            var img = createTag('img');
            img.addEventListener('load', imageLoaded.bind(this), false);
            img.addEventListener('error', imageLoaded.bind(this), false);
            img.src = path;
        }

        function loadAssets(assets, cb) {
            this.imagesLoadedCb = cb;
            this.totalAssets = assets.length;
            var i;
            for (i = 0; i < this.totalAssets; i += 1) {
                if (!assets[i].layers) {
                    loadImage.bind(this)(getAssetsPath.bind(this)(assets[i]));
                    this.totalImages += 1;
                }
            }
        }

        function setPath(path) {
            this.path = path || '';
        }

        function setAssetsPath(path) {
            this.assetsPath = path || '';
        }

        function destroy() {
            this.imagesLoadedCb = null;
        }

        return function ImagePreloader() {
            this.loadAssets = loadAssets;
            this.setAssetsPath = setAssetsPath;
            this.setPath = setPath;
            this.destroy = destroy;
            this.assetsPath = '';
            this.path = '';
            this.totalAssets = 0;
            this.totalImages = 0;
            this.loadedAssets = 0;
            this.imagesLoadedCb = null;
        };
    }());
    var featureSupport = (function() {
        var ob = {
            maskType: true
        };
        if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
            ob.maskType = false;
        }
        return ob;
    }());
    var filtersFactory = (function() {
        var ob = {};
        ob.createFilter = createFilter;
        ob.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;

        function createFilter(filId) {
            var fil = createNS('filter');
            fil.setAttribute('id', filId);
            fil.setAttribute('filterUnits', 'objectBoundingBox');
            fil.setAttribute('x', '0%');
            fil.setAttribute('y', '0%');
            fil.setAttribute('width', '100%');
            fil.setAttribute('height', '100%');
            return fil;
        }

        function createAlphaToLuminanceFilter() {
            var feColorMatrix = createNS('feColorMatrix');
            feColorMatrix.setAttribute('type', 'matrix');
            feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
            feColorMatrix.setAttribute('values', '0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1');
            return feColorMatrix;
        }

        return ob;
    }());
    var assetLoader = (function() {

        function formatResponse(xhr) {
            if (xhr.response && typeof xhr.response === 'object') {
                return xhr.response;
            } else if (xhr.response && typeof xhr.response === 'string') {
                return JSON.parse(xhr.response);
            } else if (xhr.responseText) {
                return JSON.parse(xhr.response);
            }
        }

        function loadAsset(path, callback, errorCallback) {
            var response;
            var xhr = new XMLHttpRequest();
            xhr.open('GET', path, true);
            // set responseType after calling open or IE will break.
            xhr.responseType = "json";
            xhr.send();
            xhr.onreadystatechange = function() {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        response = formatResponse(xhr);
                        callback(response);
                    } else {
                        try {
                            response = formatResponse(xhr);
                            callback(response);
                        } catch (err) {
                            if (errorCallback) {
                                errorCallback(err);
                            }
                        }
                    }
                }
            };
        }
        return {
            load: loadAsset
        }
    }())

    function TextAnimatorProperty(textData, renderType, elem) {
        this._isFirstFrame = true;
        this._hasMaskedPath = false;
        this._frameId = -1;
        this._textData = textData;
        this._renderType = renderType;
        this._elem = elem;
        this._animatorsData = createSizedArray(this._textData.a.length);
        this._pathData = {};
        this._moreOptions = {
            alignment: {}
        };
        this.renderedLetters = [];
        this.lettersChangedFlag = false;
        this.initDynamicPropertyContainer(elem);

    }

    TextAnimatorProperty.prototype.searchProperties = function() {
        var i, len = this._textData.a.length,
            animatorProps;
        var getProp = PropertyFactory.getProp;
        for (i = 0; i < len; i += 1) {
            animatorProps = this._textData.a[i];
            this._animatorsData[i] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
        }
        if (this._textData.p && 'm' in this._textData.p) {
            this._pathData = {
                f: getProp(this._elem, this._textData.p.f, 0, 0, this),
                l: getProp(this._elem, this._textData.p.l, 0, 0, this),
                r: this._textData.p.r,
                m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
            };
            this._hasMaskedPath = true;
        } else {
            this._hasMaskedPath = false;
        }
        this._moreOptions.alignment = getProp(this._elem, this._textData.m.a, 1, 0, this);
    };

    TextAnimatorProperty.prototype.getMeasures = function(documentData, lettersChangedFlag) {
        this.lettersChangedFlag = lettersChangedFlag;
        if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
            return;
        }
        this._isFirstFrame = false;
        var alignment = this._moreOptions.alignment.v;
        var animators = this._animatorsData;
        var textData = this._textData;
        var matrixHelper = this.mHelper;
        var renderType = this._renderType;
        var renderedLettersCount = this.renderedLetters.length;
        var data = this.data;
        var xPos, yPos;
        var i, len;
        var letters = documentData.l,
            pathInfo, currentLength, currentPoint, segmentLength, flag, pointInd, segmentInd, prevPoint, points, segments, partialLength, totalLength, perc, tanAngle, mask;
        if (this._hasMaskedPath) {
            mask = this._pathData.m;
            if (!this._pathData.n || this._pathData._mdf) {
                var paths = mask.v;
                if (this._pathData.r) {
                    paths = paths.reverse();
                }
                // TODO: release bezier data cached from previous pathInfo: this._pathData.pi
                pathInfo = {
                    tLength: 0,
                    segments: []
                };
                len = paths._length - 1;
                var pathData;
                totalLength = 0;
                for (i = 0; i < len; i += 1) {
                    pathData = {
                        s: paths.v[i],
                        e: paths.v[i + 1],
                        to: [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]],
                        ti: [paths.i[i + 1][0] - paths.v[i + 1][0], paths.i[i + 1][1] - paths.v[i + 1][1]]
                    };
                    bez.buildBezierData(pathData);
                    pathInfo.tLength += pathData.bezierData.segmentLength;
                    pathInfo.segments.push(pathData);
                    totalLength += pathData.bezierData.segmentLength;
                }
                i = len;
                if (mask.v.c) {
                    pathData = {
                        s: paths.v[i],
                        e: paths.v[0],
                        to: [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]],
                        ti: [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]
                    };
                    bez.buildBezierData(pathData);
                    pathInfo.tLength += pathData.bezierData.segmentLength;
                    pathInfo.segments.push(pathData);
                    totalLength += pathData.bezierData.segmentLength;
                }
                this._pathData.pi = pathInfo;
            }
            pathInfo = this._pathData.pi;

            currentLength = this._pathData.f.v;
            segmentInd = 0;
            pointInd = 1;
            segmentLength = 0;
            flag = true;
            segments = pathInfo.segments;
            if (currentLength < 0 && mask.v.c) {
                if (pathInfo.tLength < Math.abs(currentLength)) {
                    currentLength = -Math.abs(currentLength) % pathInfo.tLength;
                }
                segmentInd = segments.length - 1;
                points = segments[segmentInd].bezierData.points;
                pointInd = points.length - 1;
                while (currentLength < 0) {
                    currentLength += points[pointInd].partialLength;
                    pointInd -= 1;
                    if (pointInd < 0) {
                        segmentInd -= 1;
                        points = segments[segmentInd].bezierData.points;
                        pointInd = points.length - 1;
                    }
                }

            }
            points = segments[segmentInd].bezierData.points;
            prevPoint = points[pointInd - 1];
            currentPoint = points[pointInd];
            partialLength = currentPoint.partialLength;
        }


        len = letters.length;
        xPos = 0;
        yPos = 0;
        var yOff = documentData.finalSize * 1.2 * 0.714;
        var firstLine = true;
        var animatorProps, animatorSelector;
        var j, jLen;
        var letterValue;

        jLen = animators.length;
        var lastLetter;

        var mult, ind = -1,
            offf, xPathPos, yPathPos;
        var initPathPos = currentLength,
            initSegmentInd = segmentInd,
            initPointInd = pointInd,
            currentLine = -1;
        var elemOpacity;
        var sc, sw, fc, k;
        var lineLength = 0;
        var letterSw, letterSc, letterFc, letterM = '',
            letterP = this.defaultPropsArray,
            letterO;

        //
        if (documentData.j === 2 || documentData.j === 1) {
            var animatorJustifyOffset = 0;
            var animatorFirstCharOffset = 0;
            var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
            var lastIndex = 0;
            var isNewLine = true;

            for (i = 0; i < len; i += 1) {
                if (letters[i].n) {
                    if (animatorJustifyOffset) {
                        animatorJustifyOffset += animatorFirstCharOffset;
                    }
                    while (lastIndex < i) {
                        letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
                        lastIndex += 1;
                    }
                    animatorJustifyOffset = 0;
                    isNewLine = true;
                } else {
                    for (j = 0; j < jLen; j += 1) {
                        animatorProps = animators[j].a;
                        if (animatorProps.t.propType) {
                            if (isNewLine && documentData.j === 2) {
                                animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
                            }
                            animatorSelector = animators[j].s;
                            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                            if (mult.length) {
                                animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;
                            } else {
                                animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;
                            }
                        }
                    }
                    isNewLine = false;
                }
            }
            if (animatorJustifyOffset) {
                animatorJustifyOffset += animatorFirstCharOffset;
            }
            while (lastIndex < i) {
                letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
                lastIndex += 1;
            }
        }
        //

        for (i = 0; i < len; i += 1) {

            matrixHelper.reset();
            elemOpacity = 1;
            if (letters[i].n) {
                xPos = 0;
                yPos += documentData.yOffset;
                yPos += firstLine ? 1 : 0;
                currentLength = initPathPos;
                firstLine = false;
                lineLength = 0;
                if (this._hasMaskedPath) {
                    segmentInd = initSegmentInd;
                    pointInd = initPointInd;
                    points = segments[segmentInd].bezierData.points;
                    prevPoint = points[pointInd - 1];
                    currentPoint = points[pointInd];
                    partialLength = currentPoint.partialLength;
                    segmentLength = 0;
                }
                letterO = letterSw = letterFc = letterM = '';
                letterP = this.defaultPropsArray;
            } else {
                if (this._hasMaskedPath) {
                    if (currentLine !== letters[i].line) {
                        switch (documentData.j) {
                            case 1:
                                currentLength += totalLength - documentData.lineWidths[letters[i].line];
                                break;
                            case 2:
                                currentLength += (totalLength - documentData.lineWidths[letters[i].line]) / 2;
                                break;
                        }
                        currentLine = letters[i].line;
                    }
                    if (ind !== letters[i].ind) {
                        if (letters[ind]) {
                            currentLength += letters[ind].extra;
                        }
                        currentLength += letters[i].an / 2;
                        ind = letters[i].ind;
                    }
                    currentLength += alignment[0] * letters[i].an / 200;
                    var animatorOffset = 0;
                    for (j = 0; j < jLen; j += 1) {
                        animatorProps = animators[j].a;
                        if (animatorProps.p.propType) {
                            animatorSelector = animators[j].s;
                            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                            if (mult.length) {
                                animatorOffset += animatorProps.p.v[0] * mult[0];
                            } else {
                                animatorOffset += animatorProps.p.v[0] * mult;
                            }

                        }
                        if (animatorProps.a.propType) {
                            animatorSelector = animators[j].s;
                            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                            if (mult.length) {
                                animatorOffset += animatorProps.a.v[0] * mult[0];
                            } else {
                                animatorOffset += animatorProps.a.v[0] * mult;
                            }

                        }
                    }
                    flag = true;
                    while (flag) {
                        if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
                            perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
                            xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
                            yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
                            matrixHelper.translate(-alignment[0] * letters[i].an / 200, -(alignment[1] * yOff / 100));
                            flag = false;
                        } else if (points) {
                            segmentLength += currentPoint.partialLength;
                            pointInd += 1;
                            if (pointInd >= points.length) {
                                pointInd = 0;
                                segmentInd += 1;
                                if (!segments[segmentInd]) {
                                    if (mask.v.c) {
                                        pointInd = 0;
                                        segmentInd = 0;
                                        points = segments[segmentInd].bezierData.points;
                                    } else {
                                        segmentLength -= currentPoint.partialLength;
                                        points = null;
                                    }
                                } else {
                                    points = segments[segmentInd].bezierData.points;
                                }
                            }
                            if (points) {
                                prevPoint = currentPoint;
                                currentPoint = points[pointInd];
                                partialLength = currentPoint.partialLength;
                            }
                        }
                    }
                    offf = letters[i].an / 2 - letters[i].add;
                    matrixHelper.translate(-offf, 0, 0);
                } else {
                    offf = letters[i].an / 2 - letters[i].add;
                    matrixHelper.translate(-offf, 0, 0);

                    // Grouping alignment
                    matrixHelper.translate(-alignment[0] * letters[i].an / 200, -alignment[1] * yOff / 100, 0);
                }

                lineLength += letters[i].l / 2;
                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.t.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                        //This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean "isNewLine"
                        if (xPos !== 0 || documentData.j !== 0) {
                            if (this._hasMaskedPath) {
                                if (mult.length) {
                                    currentLength += animatorProps.t.v * mult[0];
                                } else {
                                    currentLength += animatorProps.t.v * mult;
                                }
                            } else {
                                if (mult.length) {
                                    xPos += animatorProps.t.v * mult[0];
                                } else {
                                    xPos += animatorProps.t.v * mult;
                                }
                            }
                        }
                    }
                }
                lineLength += letters[i].l / 2;
                if (documentData.strokeWidthAnim) {
                    sw = documentData.sw || 0;
                }
                if (documentData.strokeColorAnim) {
                    if (documentData.sc) {
                        sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
                    } else {
                        sc = [0, 0, 0];
                    }
                }
                if (documentData.fillColorAnim && documentData.fc) {
                    fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
                }
                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.a.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

                        if (mult.length) {
                            matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);
                        } else {
                            matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);
                        }
                    }
                }
                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.s.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                        if (mult.length) {
                            matrixHelper.scale(1 + ((animatorProps.s.v[0] - 1) * mult[0]), 1 + ((animatorProps.s.v[1] - 1) * mult[1]), 1);
                        } else {
                            matrixHelper.scale(1 + ((animatorProps.s.v[0] - 1) * mult), 1 + ((animatorProps.s.v[1] - 1) * mult), 1);
                        }
                    }
                }
                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    animatorSelector = animators[j].s;
                    mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                    if (animatorProps.sk.propType) {
                        if (mult.length) {
                            matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
                        } else {
                            matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
                        }
                    }
                    if (animatorProps.r.propType) {
                        if (mult.length) {
                            matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
                        } else {
                            matrixHelper.rotateZ(-animatorProps.r.v * mult);
                        }
                    }
                    if (animatorProps.ry.propType) {

                        if (mult.length) {
                            matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
                        } else {
                            matrixHelper.rotateY(animatorProps.ry.v * mult);
                        }
                    }
                    if (animatorProps.rx.propType) {
                        if (mult.length) {
                            matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
                        } else {
                            matrixHelper.rotateX(animatorProps.rx.v * mult);
                        }
                    }
                    if (animatorProps.o.propType) {
                        if (mult.length) {
                            elemOpacity += ((animatorProps.o.v) * mult[0] - elemOpacity) * mult[0];
                        } else {
                            elemOpacity += ((animatorProps.o.v) * mult - elemOpacity) * mult;
                        }
                    }
                    if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
                        if (mult.length) {
                            sw += animatorProps.sw.v * mult[0];
                        } else {
                            sw += animatorProps.sw.v * mult;
                        }
                    }
                    if (documentData.strokeColorAnim && animatorProps.sc.propType) {
                        for (k = 0; k < 3; k += 1) {
                            if (mult.length) {
                                sc[k] = sc[k] + (animatorProps.sc.v[k] - sc[k]) * mult[0];
                            } else {
                                sc[k] = sc[k] + (animatorProps.sc.v[k] - sc[k]) * mult;
                            }
                        }
                    }
                    if (documentData.fillColorAnim && documentData.fc) {
                        if (animatorProps.fc.propType) {
                            for (k = 0; k < 3; k += 1) {
                                if (mult.length) {
                                    fc[k] = fc[k] + (animatorProps.fc.v[k] - fc[k]) * mult[0];
                                } else {
                                    fc[k] = fc[k] + (animatorProps.fc.v[k] - fc[k]) * mult;
                                }
                            }
                        }
                        if (animatorProps.fh.propType) {
                            if (mult.length) {
                                fc = addHueToRGB(fc, animatorProps.fh.v * mult[0]);
                            } else {
                                fc = addHueToRGB(fc, animatorProps.fh.v * mult);
                            }
                        }
                        if (animatorProps.fs.propType) {
                            if (mult.length) {
                                fc = addSaturationToRGB(fc, animatorProps.fs.v * mult[0]);
                            } else {
                                fc = addSaturationToRGB(fc, animatorProps.fs.v * mult);
                            }
                        }
                        if (animatorProps.fb.propType) {
                            if (mult.length) {
                                fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult[0]);
                            } else {
                                fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult);
                            }
                        }
                    }
                }

                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;

                    if (animatorProps.p.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                        if (this._hasMaskedPath) {
                            if (mult.length) {
                                matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
                            } else {
                                matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                            }
                        } else {
                            if (mult.length) {
                                matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
                            } else {
                                matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);

                            }
                        }
                    }
                }
                if (documentData.strokeWidthAnim) {
                    letterSw = sw < 0 ? 0 : sw;
                }
                if (documentData.strokeColorAnim) {
                    letterSc = 'rgb(' + Math.round(sc[0] * 255) + ',' + Math.round(sc[1] * 255) + ',' + Math.round(sc[2] * 255) + ')';
                }
                if (documentData.fillColorAnim && documentData.fc) {
                    letterFc = 'rgb(' + Math.round(fc[0] * 255) + ',' + Math.round(fc[1] * 255) + ',' + Math.round(fc[2] * 255) + ')';
                }

                if (this._hasMaskedPath) {
                    matrixHelper.translate(0, -documentData.ls);

                    matrixHelper.translate(0, alignment[1] * yOff / 100 + yPos, 0);
                    if (textData.p.p) {
                        tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
                        var rot = Math.atan(tanAngle) * 180 / Math.PI;
                        if (currentPoint.point[0] < prevPoint.point[0]) {
                            rot += 180;
                        }
                        matrixHelper.rotate(-rot * Math.PI / 180);
                    }
                    matrixHelper.translate(xPathPos, yPathPos, 0);
                    currentLength -= alignment[0] * letters[i].an / 200;
                    if (letters[i + 1] && ind !== letters[i + 1].ind) {
                        currentLength += letters[i].an / 2;
                        currentLength += documentData.tr / 1000 * documentData.finalSize;
                    }
                } else {

                    matrixHelper.translate(xPos, yPos, 0);

                    if (documentData.ps) {
                        //matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);
                        matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
                    }
                    switch (documentData.j) {
                        case 1:
                            matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]), 0, 0);
                            break;
                        case 2:
                            matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]) / 2, 0, 0);
                            break;
                    }
                    matrixHelper.translate(0, -documentData.ls);
                    matrixHelper.translate(offf, 0, 0);
                    matrixHelper.translate(alignment[0] * letters[i].an / 200, alignment[1] * yOff / 100, 0);
                    xPos += letters[i].l + documentData.tr / 1000 * documentData.finalSize;
                }
                if (renderType === 'html') {
                    letterM = matrixHelper.toCSS();
                } else if (renderType === 'svg') {
                    letterM = matrixHelper.to2dCSS();
                } else {
                    letterP = [matrixHelper.props[0], matrixHelper.props[1], matrixHelper.props[2], matrixHelper.props[3], matrixHelper.props[4], matrixHelper.props[5], matrixHelper.props[6], matrixHelper.props[7], matrixHelper.props[8], matrixHelper.props[9], matrixHelper.props[10], matrixHelper.props[11], matrixHelper.props[12], matrixHelper.props[13], matrixHelper.props[14], matrixHelper.props[15]];
                }
                letterO = elemOpacity;
            }

            if (renderedLettersCount <= i) {
                letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);
                this.renderedLetters.push(letterValue);
                renderedLettersCount += 1;
                this.lettersChangedFlag = true;
            } else {
                letterValue = this.renderedLetters[i];
                this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
            }
        }
    };

    TextAnimatorProperty.prototype.getValue = function() {
        if (this._elem.globalData.frameId === this._frameId) {
            return;
        }
        this._frameId = this._elem.globalData.frameId;
        this.iterateDynamicProperties();
    };

    TextAnimatorProperty.prototype.mHelper = new Matrix();
    TextAnimatorProperty.prototype.defaultPropsArray = [];
    extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);

    function TextAnimatorDataProperty(elem, animatorProps, container) {
        var defaultData = {
            propType: false
        };
        var getProp = PropertyFactory.getProp;
        var textAnimator_animatables = animatorProps.a;
        this.a = {
            r: textAnimator_animatables.r ? getProp(elem, textAnimator_animatables.r, 0, degToRads, container) : defaultData,
            rx: textAnimator_animatables.rx ? getProp(elem, textAnimator_animatables.rx, 0, degToRads, container) : defaultData,
            ry: textAnimator_animatables.ry ? getProp(elem, textAnimator_animatables.ry, 0, degToRads, container) : defaultData,
            sk: textAnimator_animatables.sk ? getProp(elem, textAnimator_animatables.sk, 0, degToRads, container) : defaultData,
            sa: textAnimator_animatables.sa ? getProp(elem, textAnimator_animatables.sa, 0, degToRads, container) : defaultData,
            s: textAnimator_animatables.s ? getProp(elem, textAnimator_animatables.s, 1, 0.01, container) : defaultData,
            a: textAnimator_animatables.a ? getProp(elem, textAnimator_animatables.a, 1, 0, container) : defaultData,
            o: textAnimator_animatables.o ? getProp(elem, textAnimator_animatables.o, 0, 0.01, container) : defaultData,
            p: textAnimator_animatables.p ? getProp(elem, textAnimator_animatables.p, 1, 0, container) : defaultData,
            sw: textAnimator_animatables.sw ? getProp(elem, textAnimator_animatables.sw, 0, 0, container) : defaultData,
            sc: textAnimator_animatables.sc ? getProp(elem, textAnimator_animatables.sc, 1, 0, container) : defaultData,
            fc: textAnimator_animatables.fc ? getProp(elem, textAnimator_animatables.fc, 1, 0, container) : defaultData,
            fh: textAnimator_animatables.fh ? getProp(elem, textAnimator_animatables.fh, 0, 0, container) : defaultData,
            fs: textAnimator_animatables.fs ? getProp(elem, textAnimator_animatables.fs, 0, 0.01, container) : defaultData,
            fb: textAnimator_animatables.fb ? getProp(elem, textAnimator_animatables.fb, 0, 0.01, container) : defaultData,
            t: textAnimator_animatables.t ? getProp(elem, textAnimator_animatables.t, 0, 0, container) : defaultData
        };

        this.s = TextSelectorProp.getTextSelectorProp(elem, animatorProps.s, container);
        this.s.t = animatorProps.s.t;
    }

    function LetterProps(o, sw, sc, fc, m, p) {
        this.o = o;
        this.sw = sw;
        this.sc = sc;
        this.fc = fc;
        this.m = m;
        this.p = p;
        this._mdf = {
            o: true,
            sw: !!sw,
            sc: !!sc,
            fc: !!fc,
            m: true,
            p: true
        };
    }

    LetterProps.prototype.update = function(o, sw, sc, fc, m, p) {
        this._mdf.o = false;
        this._mdf.sw = false;
        this._mdf.sc = false;
        this._mdf.fc = false;
        this._mdf.m = false;
        this._mdf.p = false;
        var updated = false;

        if (this.o !== o) {
            this.o = o;
            this._mdf.o = true;
            updated = true;
        }
        if (this.sw !== sw) {
            this.sw = sw;
            this._mdf.sw = true;
            updated = true;
        }
        if (this.sc !== sc) {
            this.sc = sc;
            this._mdf.sc = true;
            updated = true;
        }
        if (this.fc !== fc) {
            this.fc = fc;
            this._mdf.fc = true;
            updated = true;
        }
        if (this.m !== m) {
            this.m = m;
            this._mdf.m = true;
            updated = true;
        }
        if (p.length && (this.p[0] !== p[0] || this.p[1] !== p[1] || this.p[4] !== p[4] || this.p[5] !== p[5] || this.p[12] !== p[12] || this.p[13] !== p[13])) {
            this.p = p;
            this._mdf.p = true;
            updated = true;
        }
        return updated;
    };

    function TextProperty(elem, data) {
        this._frameId = initialDefaultFrame;
        this.pv = '';
        this.v = '';
        this.kf = false;
        this._isFirstFrame = true;
        this._mdf = false;
        this.data = data;
        this.elem = elem;
        this.comp = this.elem.comp;
        this.keysIndex = 0;
        this.canResize = false;
        this.minimumFontSize = 1;
        this.effectsSequence = [];
        this.currentData = {
            ascent: 0,
            boxWidth: this.defaultBoxWidth,
            f: '',
            fStyle: '',
            fWeight: '',
            fc: '',
            j: '',
            justifyOffset: '',
            l: [],
            lh: 0,
            lineWidths: [],
            ls: '',
            of: '',
            s: '',
            sc: '',
            sw: 0,
            t: 0,
            tr: 0,
            sz: 0,
            ps: null,
            fillColorAnim: false,
            strokeColorAnim: false,
            strokeWidthAnim: false,
            yOffset: 0,
            finalSize: 0,
            finalText: [],
            finalLineHeight: 0,
            __complete: false

        };
        this.copyData(this.currentData, this.data.d.k[0].s);

        if (!this.searchProperty()) {
            this.completeTextData(this.currentData);
        }
    }

    TextProperty.prototype.defaultBoxWidth = [0, 0];

    TextProperty.prototype.copyData = function(obj, data) {
        for (var s in data) {
            if (data.hasOwnProperty(s)) {
                obj[s] = data[s];
            }
        }
        return obj;
    }

    TextProperty.prototype.setCurrentData = function(data) {
        if (!data.__complete) {
            this.completeTextData(data);
        }
        this.currentData = data;
        this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
        this._mdf = true;
    };

    TextProperty.prototype.searchProperty = function() {
        return this.searchKeyframes();
    };

    TextProperty.prototype.searchKeyframes = function() {
        this.kf = this.data.d.k.length > 1;
        if (this.kf) {
            this.addEffect(this.getKeyframeValue.bind(this));
        }
        return this.kf;
    }

    TextProperty.prototype.addEffect = function(effectFunction) {
        this.effectsSequence.push(effectFunction);
        this.elem.addDynamicProperty(this);
    };

    TextProperty.prototype.getValue = function(_finalValue) {
        if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
            return;
        }
        var currentValue = this.currentData;
        var currentIndex = this.keysIndex;
        if (this.lock) {
            this.setCurrentData(this.currentData, currentTextValue);
            return;
        }
        this.lock = true;
        this._mdf = false;
        var multipliedValue;
        var i, len = this.effectsSequence.length;
        var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;
        for (i = 0; i < len; i += 1) {
            //Checking if index changed to prevent creating a new object every time the expression updates.
            if (currentIndex !== this.keysIndex) {
                finalValue = this.effectsSequence[i](finalValue, finalValue.t);
            } else {
                finalValue = this.effectsSequence[i](this.currentData, finalValue.t);
            }
        }
        if (currentValue !== finalValue) {
            this.setCurrentData(finalValue);
        }
        this.pv = this.v = this.currentData;
        this.lock = false;
        this.frameId = this.elem.globalData.frameId;
    }

    TextProperty.prototype.getKeyframeValue = function() {
        var textKeys = this.data.d.k,
            textDocumentData;
        var frameNum = this.elem.comp.renderedFrame;
        var i = 0,
            len = textKeys.length;
        while (i <= len - 1) {
            textDocumentData = textKeys[i].s;
            if (i === len - 1 || textKeys[i + 1].t > frameNum) {
                break;
            }
            i += 1;
        }
        if (this.keysIndex !== i) {
            this.keysIndex = i;
        }
        return this.data.d.k[this.keysIndex].s;
    };

    TextProperty.prototype.buildFinalText = function(text) {
        var combinedCharacters = FontManager.getCombinedCharacterCodes();
        var charactersArray = [];
        var i = 0,
            len = text.length;
        while (i < len) {
            if (combinedCharacters.indexOf(text.charCodeAt(i)) !== -1) {
                charactersArray[charactersArray.length - 1] += text.charAt(i);
            } else {
                charactersArray.push(text.charAt(i));
            }
            i += 1;
        }
        return charactersArray;
    }

    TextProperty.prototype.completeTextData = function(documentData) {
        documentData.__complete = true;
        var fontManager = this.elem.globalData.fontManager;
        var data = this.data;
        var letters = [];
        var i, len;
        var newLineFlag, index = 0,
            val;
        var anchorGrouping = data.m.g;
        var currentSize = 0,
            currentPos = 0,
            currentLine = 0,
            lineWidths = [];
        var lineWidth = 0;
        var maxLineWidth = 0;
        var j, jLen;
        var fontData = fontManager.getFontByName(documentData.f);
        var charData, cLength = 0;
        var styles = fontData.fStyle ? fontData.fStyle.split(' ') : [];

        var fWeight = 'normal',
            fStyle = 'normal';
        len = styles.length;
        var styleName;
        for (i = 0; i < len; i += 1) {
            styleName = styles[i].toLowerCase();
            switch (styleName) {
                case 'italic':
                    fStyle = 'italic';
                    break;
                case 'bold':
                    fWeight = '700';
                    break;
                case 'black':
                    fWeight = '900';
                    break;
                case 'medium':
                    fWeight = '500';
                    break;
                case 'regular':
                case 'normal':
                    fWeight = '400';
                    break;
                case 'light':
                case 'thin':
                    fWeight = '200';
                    break;
            }
        }
        documentData.fWeight = fontData.fWeight || fWeight;
        documentData.fStyle = fStyle;
        len = documentData.t.length;
        documentData.finalSize = documentData.s;
        documentData.finalText = this.buildFinalText(documentData.t);
        documentData.finalLineHeight = documentData.lh;
        var trackingOffset = documentData.tr / 1000 * documentData.finalSize;
        if (documentData.sz) {
            var flag = true;
            var boxWidth = documentData.sz[0];
            var boxHeight = documentData.sz[1];
            var currentHeight, finalText;
            while (flag) {
                finalText = this.buildFinalText(documentData.t);
                currentHeight = 0;
                lineWidth = 0;
                len = finalText.length;
                trackingOffset = documentData.tr / 1000 * documentData.finalSize;
                var lastSpaceIndex = -1;
                for (i = 0; i < len; i += 1) {
                    newLineFlag = false;
                    if (finalText[i] === ' ') {
                        lastSpaceIndex = i;
                    } else if (finalText[i].charCodeAt(0) === 13) {
                        lineWidth = 0;
                        newLineFlag = true;
                        currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                    }
                    if (fontManager.chars) {
                        charData = fontManager.getCharData(finalText[i], fontData.fStyle, fontData.fFamily);
                        cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
                    } else {
                        //tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;
                        cLength = fontManager.measureText(finalText[i], documentData.f, documentData.finalSize);
                    }
                    if (lineWidth + cLength > boxWidth && finalText[i] !== ' ') {
                        if (lastSpaceIndex === -1) {
                            len += 1;
                        } else {
                            i = lastSpaceIndex;
                        }
                        currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                        finalText.splice(i, lastSpaceIndex === i ? 1 : 0, "\r");
                        //finalText = finalText.substr(0,i) + "\r" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);
                        lastSpaceIndex = -1;
                        lineWidth = 0;
                    } else {
                        lineWidth += cLength;
                        lineWidth += trackingOffset;
                    }
                }
                currentHeight += fontData.ascent * documentData.finalSize / 100;
                if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
                    documentData.finalSize -= 1;
                    documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
                } else {
                    documentData.finalText = finalText;
                    len = documentData.finalText.length;
                    flag = false;
                }
            }

        }
        lineWidth = -trackingOffset;
        cLength = 0;
        var uncollapsedSpaces = 0;
        var currentChar;
        for (i = 0; i < len; i += 1) {
            newLineFlag = false;
            currentChar = documentData.finalText[i];
            if (currentChar === ' ') {
                val = '\u00A0';
            } else if (currentChar.charCodeAt(0) === 13) {
                uncollapsedSpaces = 0;
                lineWidths.push(lineWidth);
                maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
                lineWidth = -2 * trackingOffset;
                val = '';
                newLineFlag = true;
                currentLine += 1;
            } else {
                val = documentData.finalText[i];
            }
            if (fontManager.chars) {
                charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
                cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
            } else {
                //var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);
                //tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;
                cLength = fontManager.measureText(val, documentData.f, documentData.finalSize);
            }

            //
            if (currentChar === ' ') {
                uncollapsedSpaces += cLength + trackingOffset;
            } else {
                lineWidth += cLength + trackingOffset + uncollapsedSpaces;
                uncollapsedSpaces = 0;
            }
            letters.push({
                l: cLength,
                an: cLength,
                add: currentSize,
                n: newLineFlag,
                anIndexes: [],
                val: val,
                line: currentLine,
                animatorJustifyOffset: 0
            });
            if (anchorGrouping == 2) {
                currentSize += cLength;
                if (val === '' || val === '\u00A0' || i === len - 1) {
                    if (val === '' || val === '\u00A0') {
                        currentSize -= cLength;
                    }
                    while (currentPos <= i) {
                        letters[currentPos].an = currentSize;
                        letters[currentPos].ind = index;
                        letters[currentPos].extra = cLength;
                        currentPos += 1;
                    }
                    index += 1;
                    currentSize = 0;
                }
            } else if (anchorGrouping == 3) {
                currentSize += cLength;
                if (val === '' || i === len - 1) {
                    if (val === '') {
                        currentSize -= cLength;
                    }
                    while (currentPos <= i) {
                        letters[currentPos].an = currentSize;
                        letters[currentPos].ind = index;
                        letters[currentPos].extra = cLength;
                        currentPos += 1;
                    }
                    currentSize = 0;
                    index += 1;
                }
            } else {
                letters[index].ind = index;
                letters[index].extra = 0;
                index += 1;
            }
        }
        documentData.l = letters;
        maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
        lineWidths.push(lineWidth);
        if (documentData.sz) {
            documentData.boxWidth = documentData.sz[0];
            documentData.justifyOffset = 0;
        } else {
            documentData.boxWidth = maxLineWidth;
            switch (documentData.j) {
                case 1:
                    documentData.justifyOffset = -documentData.boxWidth;
                    break;
                case 2:
                    documentData.justifyOffset = -documentData.boxWidth / 2;
                    break;
                default:
                    documentData.justifyOffset = 0;
            }
        }
        documentData.lineWidths = lineWidths;

        var animators = data.a,
            animatorData, letterData;
        jLen = animators.length;
        var based, ind, indexes = [];
        for (j = 0; j < jLen; j += 1) {
            animatorData = animators[j];
            if (animatorData.a.sc) {
                documentData.strokeColorAnim = true;
            }
            if (animatorData.a.sw) {
                documentData.strokeWidthAnim = true;
            }
            if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {
                documentData.fillColorAnim = true;
            }
            ind = 0;
            based = animatorData.s.b;
            for (i = 0; i < len; i += 1) {
                letterData = letters[i];
                letterData.anIndexes[j] = ind;
                if ((based == 1 && letterData.val !== '') || (based == 2 && letterData.val !== '' && letterData.val !== '\u00A0') || (based == 3 && (letterData.n || letterData.val == '\u00A0' || i == len - 1)) || (based == 4 && (letterData.n || i == len - 1))) {
                    if (animatorData.s.rn === 1) {
                        indexes.push(ind);
                    }
                    ind += 1;
                }
            }
            data.a[j].s.totalChars = ind;
            var currentInd = -1,
                newInd;
            if (animatorData.s.rn === 1) {
                for (i = 0; i < len; i += 1) {
                    letterData = letters[i];
                    if (currentInd != letterData.anIndexes[j]) {
                        currentInd = letterData.anIndexes[j];
                        newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];
                    }
                    letterData.anIndexes[j] = newInd;
                }
            }
        }
        documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;
        documentData.ls = documentData.ls || 0;
        documentData.ascent = fontData.ascent * documentData.finalSize / 100;
    };

    TextProperty.prototype.updateDocumentData = function(newData, index) {
        index = index === undefined ? this.keysIndex : index;
        var dData = this.copyData({}, this.data.d.k[index].s);
        dData = this.copyData(dData, newData);
        this.data.d.k[index].s = dData;
        this.recalculate(index);
    };

    TextProperty.prototype.recalculate = function(index) {
        var dData = this.data.d.k[index].s;
        dData.__complete = false;
        this.keysIndex = 0;
        this._isFirstFrame = true;
        this.getValue(dData);
    }

    TextProperty.prototype.canResizeFont = function(_canResize) {
        this.canResize = _canResize;
        this.recalculate(this.keysIndex);
    };

    TextProperty.prototype.setMinimumFontSize = function(_fontValue) {
        this.minimumFontSize = Math.floor(_fontValue) || 1;
        this.recalculate(this.keysIndex);
    };

    var TextSelectorProp = (function() {
        var max = Math.max;
        var min = Math.min;
        var floor = Math.floor;

        function TextSelectorProp(elem, data) {
            this._currentTextLength = -1;
            this.k = false;
            this.data = data;
            this.elem = elem;
            this.comp = elem.comp;
            this.finalS = 0;
            this.finalE = 0;
            this.initDynamicPropertyContainer(elem);
            this.s = PropertyFactory.getProp(elem, data.s || {
                k: 0
            }, 0, 0, this);
            if ('e' in data) {
                this.e = PropertyFactory.getProp(elem, data.e, 0, 0, this);
            } else {
                this.e = {
                    v: 100
                };
            }
            this.o = PropertyFactory.getProp(elem, data.o || {
                k: 0
            }, 0, 0, this);
            this.xe = PropertyFactory.getProp(elem, data.xe || {
                k: 0
            }, 0, 0, this);
            this.ne = PropertyFactory.getProp(elem, data.ne || {
                k: 0
            }, 0, 0, this);
            this.a = PropertyFactory.getProp(elem, data.a, 0, 0.01, this);
            if (!this.dynamicProperties.length) {
                this.getValue();
            }
        }

        TextSelectorProp.prototype = {
            getMult: function(ind) {
                if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
                    this.getValue();
                }
                //var easer = bez.getEasingCurve(this.ne.v/100,0,1-this.xe.v/100,1);
                var easer = BezierFactory.getBezierEasing(this.ne.v / 100, 0, 1 - this.xe.v / 100, 1).get;
                var mult = 0;
                var s = this.finalS;
                var e = this.finalE;
                var type = this.data.sh;
                if (type == 2) {
                    if (e === s) {
                        mult = ind >= e ? 1 : 0;
                    } else {
                        mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                    }
                    mult = easer(mult);
                } else if (type == 3) {
                    if (e === s) {
                        mult = ind >= e ? 0 : 1;
                    } else {
                        mult = 1 - max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                    }

                    mult = easer(mult);
                } else if (type == 4) {
                    if (e === s) {
                        mult = 0;
                    } else {
                        mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                        if (mult < 0.5) {
                            mult *= 2;
                        } else {
                            mult = 1 - 2 * (mult - 0.5);
                        }
                    }
                    mult = easer(mult);
                } else if (type == 5) {
                    if (e === s) {
                        mult = 0;
                    } else {
                        var tot = e - s;
                        /*ind += 0.5;
                        mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind;*/
                        ind = min(max(0, ind + 0.5 - s), e - s);
                        var x = -tot / 2 + ind;
                        var a = tot / 2;
                        mult = Math.sqrt(1 - (x * x) / (a * a));
                    }
                    mult = easer(mult);
                } else if (type == 6) {
                    if (e === s) {
                        mult = 0;
                    } else {
                        ind = min(max(0, ind + 0.5 - s), e - s);
                        mult = (1 + (Math.cos((Math.PI + Math.PI * 2 * (ind) / (e - s))))) / 2;
                        /*
                         ind = Math.min(Math.max(s,ind),e-1);
                         mult = (1+(Math.cos((Math.PI+Math.PI*2*(ind-s)/(e-1-s)))))/2;
                         mult = Math.max(mult,(1/(e-1-s))/(e-1-s));*/
                    }
                    mult = easer(mult);
                } else {
                    if (ind >= floor(s)) {
                        if (ind - s < 0) {
                            mult = 1 - (s - ind);
                        } else {
                            mult = max(0, min(e - ind, 1));
                        }
                    }
                    mult = easer(mult);
                }
                return mult * this.a.v;
            },
            getValue: function(newCharsFlag) {
                this.iterateDynamicProperties();
                this._mdf = newCharsFlag || this._mdf;
                this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
                if (newCharsFlag && this.data.r === 2) {
                    this.e.v = this._currentTextLength;
                }
                var divisor = this.data.r === 2 ? 1 : 100 / this._currentTextLength;
                var o = this.o.v / divisor;
                var s = this.s.v / divisor + o;
                var e = (this.e.v / divisor) + o;
                if (s > e) {
                    var _s = s;
                    s = e;
                    e = _s;
                }
                this.finalS = s;
                this.finalE = e;
            }
        }
        extendPrototype([DynamicPropertyContainer], TextSelectorProp);

        function getTextSelectorProp(elem, data, arr) {
            return new TextSelectorProp(elem, data, arr);
        }

        return {
            getTextSelectorProp: getTextSelectorProp
        };
    }());


    var pool_factory = (function() {
        return function(initialLength, _create, _release, _clone) {

            var _length = 0;
            var _maxLength = initialLength;
            var pool = createSizedArray(_maxLength);

            var ob = {
                newElement: newElement,
                release: release
            };

            function newElement() {
                var element;
                if (_length) {
                    _length -= 1;
                    element = pool[_length];
                } else {
                    element = _create();
                }
                return element;
            }

            function release(element) {
                if (_length === _maxLength) {
                    pool = pooling.double(pool);
                    _maxLength = _maxLength * 2;
                }
                if (_release) {
                    _release(element);
                }
                pool[_length] = element;
                _length += 1;
            }

            function clone() {
                var clonedElement = newElement();
                return _clone(clonedElement);
            }

            return ob;
        };
    }());

    var pooling = (function() {

        function double(arr) {
            return arr.concat(createSizedArray(arr.length));
        }

        return {
            double: double
        };
    }());
    var point_pool = (function() {

        function create() {
            return createTypedArray('float32', 2);
        }
        return pool_factory(8, create);
    }());
    var shape_pool = (function() {

        function create() {
            return new ShapePath();
        }

        function release(shapePath) {
            var len = shapePath._length,
                i;
            for (i = 0; i < len; i += 1) {
                point_pool.release(shapePath.v[i]);
                point_pool.release(shapePath.i[i]);
                point_pool.release(shapePath.o[i]);
                shapePath.v[i] = null;
                shapePath.i[i] = null;
                shapePath.o[i] = null;
            }
            shapePath._length = 0;
            shapePath.c = false;
        }

        function clone(shape) {
            var cloned = factory.newElement();
            var i, len = shape._length === undefined ? shape.v.length : shape._length;
            cloned.setLength(len);
            cloned.c = shape.c;
            var pt;

            for (i = 0; i < len; i += 1) {
                cloned.setTripleAt(shape.v[i][0], shape.v[i][1], shape.o[i][0], shape.o[i][1], shape.i[i][0], shape.i[i][1], i);
            }
            return cloned;
        }

        var factory = pool_factory(4, create, release);
        factory.clone = clone;

        return factory;
    }());
    var shapeCollection_pool = (function() {
        var ob = {
            newShapeCollection: newShapeCollection,
            release: release
        };

        var _length = 0;
        var _maxLength = 4;
        var pool = createSizedArray(_maxLength);

        function newShapeCollection() {
            var shapeCollection;
            if (_length) {
                _length -= 1;
                shapeCollection = pool[_length];
            } else {
                shapeCollection = new ShapeCollection();
            }
            return shapeCollection;
        }

        function release(shapeCollection) {
            var i, len = shapeCollection._length;
            for (i = 0; i < len; i += 1) {
                shape_pool.release(shapeCollection.shapes[i]);
            }
            shapeCollection._length = 0;

            if (_length === _maxLength) {
                pool = pooling.double(pool);
                _maxLength = _maxLength * 2;
            }
            pool[_length] = shapeCollection;
            _length += 1;
        }

        return ob;
    }());
    var segments_length_pool = (function() {

        function create() {
            return {
                lengths: [],
                totalLength: 0
            };
        }

        function release(element) {
            var i, len = element.lengths.length;
            for (i = 0; i < len; i += 1) {
                bezier_length_pool.release(element.lengths[i]);
            }
            element.lengths.length = 0;
        }

        return pool_factory(8, create, release);
    }());
    var bezier_length_pool = (function() {

        function create() {
            return {
                addedLength: 0,
                percents: createTypedArray('float32', defaultCurveSegments),
                lengths: createTypedArray('float32', defaultCurveSegments),
            };
        }
        return pool_factory(8, create);
    }());

    function BaseRenderer() {}
    BaseRenderer.prototype.checkLayers = function(num) {
        var i, len = this.layers.length,
            data;
        this.completeLayers = true;
        for (i = len - 1; i >= 0; i--) {
            if (!this.elements[i]) {
                data = this.layers[i];
                if (data.ip - data.st <= (num - this.layers[i].st) && data.op - data.st > (num - this.layers[i].st)) {
                    this.buildItem(i);
                }
            }
            this.completeLayers = this.elements[i] ? this.completeLayers : false;
        }
        this.checkPendingElements();
    };

    BaseRenderer.prototype.createItem = function(layer) {
        switch (layer.ty) {
            case 2:
                return this.createImage(layer);
            case 0:
                return this.createComp(layer);
            case 1:
                return this.createSolid(layer);
            case 3:
                return this.createNull(layer);
            case 4:
                return this.createShape(layer);
            case 5:
                return this.createText(layer);
            case 13:
                return this.createCamera(layer);
        }
        return this.createNull(layer);
    };

    BaseRenderer.prototype.createCamera = function() {
        throw new Error('You\'re using a 3d camera. Try the html renderer.');
    };

    BaseRenderer.prototype.buildAllItems = function() {
        var i, len = this.layers.length;
        for (i = 0; i < len; i += 1) {
            this.buildItem(i);
        }
        this.checkPendingElements();
    };

    BaseRenderer.prototype.includeLayers = function(newLayers) {
        this.completeLayers = false;
        var i, len = newLayers.length;
        var j, jLen = this.layers.length;
        for (i = 0; i < len; i += 1) {
            j = 0;
            while (j < jLen) {
                if (this.layers[j].id == newLayers[i].id) {
                    this.layers[j] = newLayers[i];
                    break;
                }
                j += 1;
            }
        }
    };

    BaseRenderer.prototype.setProjectInterface = function(pInterface) {
        this.globalData.projectInterface = pInterface;
    };

    BaseRenderer.prototype.initItems = function() {
        if (!this.globalData.progressiveLoad) {
            this.buildAllItems();
        }
    };
    BaseRenderer.prototype.buildElementParenting = function(element, parentName, hierarchy) {
        var elements = this.elements;
        var layers = this.layers;
        var i = 0,
            len = layers.length;
        while (i < len) {
            if (layers[i].ind == parentName) {
                if (!elements[i] || elements[i] === true) {
                    this.buildItem(i);
                    this.addPendingElement(element);
                } else {
                    hierarchy.push(elements[i]);
                    elements[i].setAsParent();
                    if (layers[i].parent !== undefined) {
                        this.buildElementParenting(element, layers[i].parent, hierarchy);
                    } else {
                        element.setHierarchy(hierarchy);
                    }
                }
            }
            i += 1;
        }
    };

    BaseRenderer.prototype.addPendingElement = function(element) {
        this.pendingElements.push(element);
    };

    BaseRenderer.prototype.searchExtraCompositions = function(assets) {
        var i, len = assets.length;
        for (i = 0; i < len; i += 1) {
            if (assets[i].xt) {
                var comp = this.createComp(assets[i]);
                comp.initExpressions();
                this.globalData.projectInterface.registerComposition(comp);
            }
        }
    };

    BaseRenderer.prototype.setupGlobalData = function(animData, fontsContainer) {
        this.globalData.fontManager = new FontManager();
        this.globalData.fontManager.addChars(animData.chars);
        this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
        this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
        this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
        this.globalData.elementLoaded = this.animationItem.elementLoaded.bind(this.animationItem);
        this.globalData.addPendingElement = this.animationItem.addPendingElement.bind(this.animationItem);
        this.globalData.frameId = 0;
        this.globalData.frameRate = animData.fr;
        this.globalData.nm = animData.nm;
        this.globalData.compSize = {
            w: animData.w,
            h: animData.h
        }
    }

    function SVGRenderer(animationItem, config) {
        this.animationItem = animationItem;
        this.layers = null;
        this.renderedFrame = -1;
        this.svgElement = createNS('svg');
        var defs = createNS('defs');
        this.svgElement.appendChild(defs);
        var maskElement = createNS('g');
        this.svgElement.appendChild(maskElement);
        this.layerElement = maskElement;
        this.renderConfig = {
            preserveAspectRatio: (config && config.preserveAspectRatio) || 'xMidYMid meet',
            imagePreserveAspectRatio: (config && config.imagePreserveAspectRatio) || 'xMidYMid slice',
            progressiveLoad: (config && config.progressiveLoad) || false,
            hideOnTransparent: (config && config.hideOnTransparent === false) ? false : true,
            viewBoxOnly: (config && config.viewBoxOnly) || false,
            viewBoxSize: (config && config.viewBoxSize) || false,
            className: (config && config.className) || ''
        };
        this.globalData = {
            _mdf: false,
            frameNum: -1,
            defs: defs,
            renderConfig: this.renderConfig
        };
        this.elements = [];
        this.pendingElements = [];
        this.destroyed = false;

    }

    extendPrototype([BaseRenderer], SVGRenderer);

    SVGRenderer.prototype.createNull = function(data) {
        return new NullElement(data, this.globalData, this);
    };

    SVGRenderer.prototype.createShape = function(data) {
        return new SVGShapeElement(data, this.globalData, this);
    };

    SVGRenderer.prototype.createText = function(data) {
        return new SVGTextElement(data, this.globalData, this);

    };

    SVGRenderer.prototype.createImage = function(data) {
        return new IImageElement(data, this.globalData, this);
    };

    SVGRenderer.prototype.createComp = function(data) {
        return new SVGCompElement(data, this.globalData, this);

    };

    SVGRenderer.prototype.createSolid = function(data) {
        return new ISolidElement(data, this.globalData, this);
    };

    SVGRenderer.prototype.configAnimation = function(animData) {
        this.svgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
        if (this.renderConfig.viewBoxSize) {
            this.svgElement.setAttribute('viewBox', this.renderConfig.viewBoxSize);
        } else {
            this.svgElement.setAttribute('viewBox', '0 0 ' + animData.w + ' ' + animData.h);
        }

        if (!this.renderConfig.viewBoxOnly) {
            this.svgElement.setAttribute('width', animData.w);
            this.svgElement.setAttribute('height', animData.h);
            this.svgElement.style.width = '100%';
            this.svgElement.style.height = '100%';
            this.svgElement.style.transform = 'translate3d(0,0,0)';
        }
        if (this.renderConfig.className) {
            this.svgElement.setAttribute('class', this.renderConfig.className);
        }
        this.svgElement.setAttribute('preserveAspectRatio', this.renderConfig.preserveAspectRatio);
        //this.layerElement.style.transform = 'translate3d(0,0,0)';
        //this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = "0px 0px 0px";
        this.animationItem.wrapper.appendChild(this.svgElement);
        //Mask animation
        var defs = this.globalData.defs;

        this.setupGlobalData(animData, defs);
        this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
        this.data = animData;

        var maskElement = createNS('clipPath');
        var rect = createNS('rect');
        rect.setAttribute('width', animData.w);
        rect.setAttribute('height', animData.h);
        rect.setAttribute('x', 0);
        rect.setAttribute('y', 0);
        var maskId = 'animationMask_' + randomString(10);
        maskElement.setAttribute('id', maskId);
        maskElement.appendChild(rect);
        this.layerElement.setAttribute("clip-path", "url(" + locationHref + "#" + maskId + ")");

        defs.appendChild(maskElement);
        this.layers = animData.layers;
        this.elements = createSizedArray(animData.layers.length);
    };


    SVGRenderer.prototype.destroy = function() {
        this.animationItem.wrapper.innerHTML = '';
        this.layerElement = null;
        this.globalData.defs = null;
        var i, len = this.layers ? this.layers.length : 0;
        for (i = 0; i < len; i++) {
            if (this.elements[i]) {
                this.elements[i].destroy();
            }
        }
        this.elements.length = 0;
        this.destroyed = true;
        this.animationItem = null;
    };

    SVGRenderer.prototype.updateContainerSize = function() {};

    SVGRenderer.prototype.buildItem = function(pos) {
        var elements = this.elements;
        if (elements[pos] || this.layers[pos].ty == 99) {
            return;
        }
        elements[pos] = true;
        var element = this.createItem(this.layers[pos]);

        elements[pos] = element;
        if (expressionsPlugin) {
            if (this.layers[pos].ty === 0) {
                this.globalData.projectInterface.registerComposition(element);
            }
            element.initExpressions();
        }
        this.appendElementInPos(element, pos);
        if (this.layers[pos].tt) {
            if (!this.elements[pos - 1] || this.elements[pos - 1] === true) {
                this.buildItem(pos - 1);
                this.addPendingElement(element);
            } else {
                element.setMatte(elements[pos - 1].layerId);
            }
        }
    };

    SVGRenderer.prototype.checkPendingElements = function() {
        while (this.pendingElements.length) {
            var element = this.pendingElements.pop();
            element.checkParenting();
            if (element.data.tt) {
                var i = 0,
                    len = this.elements.length;
                while (i < len) {
                    if (this.elements[i] === element) {
                        element.setMatte(this.elements[i - 1].layerId);
                        break;
                    }
                    i += 1;
                }
            }
        }
    };

    SVGRenderer.prototype.renderFrame = function(num) {
        if (this.renderedFrame === num || this.destroyed) {
            return;
        }
        if (num === null) {
            num = this.renderedFrame;
        } else {
            this.renderedFrame = num;
        }
        // console.log('-------');
        // console.log('FRAME ',num);
        this.globalData.frameNum = num;
        this.globalData.frameId += 1;
        this.globalData.projectInterface.currentFrame = num;
        this.globalData._mdf = false;
        var i, len = this.layers.length;
        if (!this.completeLayers) {
            this.checkLayers(num);
        }
        for (i = len - 1; i >= 0; i--) {
            if (this.completeLayers || this.elements[i]) {
                this.elements[i].prepareFrame(num - this.layers[i].st);
            }
        }
        if (this.globalData._mdf) {
            for (i = 0; i < len; i += 1) {
                if (this.completeLayers || this.elements[i]) {
                    this.elements[i].renderFrame();
                }
            }
        }
    };

    SVGRenderer.prototype.appendElementInPos = function(element, pos) {
        var newElement = element.getBaseElement();
        if (!newElement) {
            return;
        }
        var i = 0;
        var nextElement;
        while (i < pos) {
            if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement()) {
                nextElement = this.elements[i].getBaseElement();
            }
            i += 1;
        }
        if (nextElement) {
            this.layerElement.insertBefore(newElement, nextElement);
        } else {
            this.layerElement.appendChild(newElement);
        }
    };

    SVGRenderer.prototype.hide = function() {
        this.layerElement.style.display = 'none';
    };

    SVGRenderer.prototype.show = function() {
        this.layerElement.style.display = 'block';
    };

    function MaskElement(data, element, globalData) {
        this.data = data;
        this.element = element;
        this.globalData = globalData;
        this.storedData = [];
        this.masksProperties = this.data.masksProperties || [];
        this.maskElement = null;
        var defs = this.globalData.defs;
        var i, len = this.masksProperties ? this.masksProperties.length : 0;
        this.viewData = createSizedArray(len);
        this.solidPath = '';


        var path, properties = this.masksProperties;
        var count = 0;
        var currentMasks = [];
        var j, jLen;
        var layerId = randomString(10);
        var rect, expansor, feMorph, x;
        var maskType = 'clipPath',
            maskRef = 'clip-path';
        for (i = 0; i < len; i++) {

            if ((properties[i].mode !== 'a' && properties[i].mode !== 'n') || properties[i].inv || properties[i].o.k !== 100) {
                maskType = 'mask';
                maskRef = 'mask';
            }

            if ((properties[i].mode == 's' || properties[i].mode == 'i') && count === 0) {
                rect = createNS('rect');
                rect.setAttribute('fill', '#ffffff');
                rect.setAttribute('width', this.element.comp.data.w || 0);
                rect.setAttribute('height', this.element.comp.data.h || 0);
                currentMasks.push(rect);
            } else {
                rect = null;
            }

            path = createNS('path');
            if (properties[i].mode == 'n') {
                // TODO move this to a factory or to a constructor
                this.viewData[i] = {
                    op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
                    prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
                    elem: path,
                    lastPath: ''
                };
                defs.appendChild(path);
                continue;
            }
            count += 1;

            path.setAttribute('fill', properties[i].mode === 's' ? '#000000' : '#ffffff');
            path.setAttribute('clip-rule', 'nonzero');
            var filterID;

            if (properties[i].x.k !== 0) {
                maskType = 'mask';
                maskRef = 'mask';
                x = PropertyFactory.getProp(this.element, properties[i].x, 0, null, this.element);
                filterID = 'fi_' + randomString(10);
                expansor = createNS('filter');
                expansor.setAttribute('id', filterID);
                feMorph = createNS('feMorphology');
                feMorph.setAttribute('operator', 'dilate');
                feMorph.setAttribute('in', 'SourceGraphic');
                feMorph.setAttribute('radius', '0');
                expansor.appendChild(feMorph);
                defs.appendChild(expansor);
                path.setAttribute('stroke', properties[i].mode === 's' ? '#000000' : '#ffffff');
            } else {
                feMorph = null;
                x = null;
            }

            // TODO move this to a factory or to a constructor
            this.storedData[i] = {
                elem: path,
                x: x,
                expan: feMorph,
                lastPath: '',
                lastOperator: '',
                filterId: filterID,
                lastRadius: 0
            };
            if (properties[i].mode == 'i') {
                jLen = currentMasks.length;
                var g = createNS('g');
                for (j = 0; j < jLen; j += 1) {
                    g.appendChild(currentMasks[j]);
                }
                var mask = createNS('mask');
                mask.setAttribute('mask-type', 'alpha');
                mask.setAttribute('id', layerId + '_' + count);
                mask.appendChild(path);
                defs.appendChild(mask);
                g.setAttribute('mask', 'url(' + locationHref + '#' + layerId + '_' + count + ')');

                currentMasks.length = 0;
                currentMasks.push(g);
            } else {
                currentMasks.push(path);
            }
            if (properties[i].inv && !this.solidPath) {
                this.solidPath = this.createLayerSolidPath();
            }
            // TODO move this to a factory or to a constructor
            this.viewData[i] = {
                elem: path,
                lastPath: '',
                op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
                prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
                invRect: rect
            };
            if (!this.viewData[i].prop.k) {
                this.drawPath(properties[i], this.viewData[i].prop.v, this.viewData[i]);
            }
        }

        this.maskElement = createNS(maskType);

        len = currentMasks.length;
        for (i = 0; i < len; i += 1) {
            this.maskElement.appendChild(currentMasks[i]);
        }

        if (count > 0) {
            this.maskElement.setAttribute('id', layerId);
            this.element.maskedElement.setAttribute(maskRef, "url(" + locationHref + "#" + layerId + ")");
            defs.appendChild(this.maskElement);
        }
        if (this.viewData.length) {
            this.element.addRenderableComponent(this);
        }

    }

    MaskElement.prototype.getMaskProperty = function(pos) {
        return this.viewData[pos].prop;
    };

    MaskElement.prototype.renderFrame = function(isFirstFrame) {
        var finalMat = this.element.finalTransform.mat;
        var i, len = this.masksProperties.length;
        for (i = 0; i < len; i++) {
            if (this.viewData[i].prop._mdf || isFirstFrame) {
                this.drawPath(this.masksProperties[i], this.viewData[i].prop.v, this.viewData[i]);
            }
            if (this.viewData[i].op._mdf || isFirstFrame) {
                this.viewData[i].elem.setAttribute('fill-opacity', this.viewData[i].op.v);
            }
            if (this.masksProperties[i].mode !== 'n') {
                if (this.viewData[i].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {
                    this.viewData[i].invRect.setAttribute('x', -finalMat.props[12]);
                    this.viewData[i].invRect.setAttribute('y', -finalMat.props[13]);
                }
                if (this.storedData[i].x && (this.storedData[i].x._mdf || isFirstFrame)) {
                    var feMorph = this.storedData[i].expan;
                    if (this.storedData[i].x.v < 0) {
                        if (this.storedData[i].lastOperator !== 'erode') {
                            this.storedData[i].lastOperator = 'erode';
                            this.storedData[i].elem.setAttribute('filter', 'url(' + locationHref + '#' + this.storedData[i].filterId + ')');
                        }
                        feMorph.setAttribute('radius', -this.storedData[i].x.v);
                    } else {
                        if (this.storedData[i].lastOperator !== 'dilate') {
                            this.storedData[i].lastOperator = 'dilate';
                            this.storedData[i].elem.setAttribute('filter', null);
                        }
                        this.storedData[i].elem.setAttribute('stroke-width', this.storedData[i].x.v * 2);

                    }
                }
            }
        }
    };

    MaskElement.prototype.getMaskelement = function() {
        return this.maskElement;
    };

    MaskElement.prototype.createLayerSolidPath = function() {
        var path = 'M0,0 ';
        path += ' h' + this.globalData.compSize.w;
        path += ' v' + this.globalData.compSize.h;
        path += ' h-' + this.globalData.compSize.w;
        path += ' v-' + this.globalData.compSize.h + ' ';
        return path;
    };

    MaskElement.prototype.drawPath = function(pathData, pathNodes, viewData) {
        var pathString = " M" + pathNodes.v[0][0] + ',' + pathNodes.v[0][1];
        var i, len;
        len = pathNodes._length;
        for (i = 1; i < len; i += 1) {
            //pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
            pathString += " C" + pathNodes.o[i - 1][0] + ',' + pathNodes.o[i - 1][1] + " " + pathNodes.i[i][0] + ',' + pathNodes.i[i][1] + " " + pathNodes.v[i][0] + ',' + pathNodes.v[i][1];
        }
        //pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];
        if (pathNodes.c && len > 1) {
            pathString += " C" + pathNodes.o[i - 1][0] + ',' + pathNodes.o[i - 1][1] + " " + pathNodes.i[0][0] + ',' + pathNodes.i[0][1] + " " + pathNodes.v[0][0] + ',' + pathNodes.v[0][1];
        }
        //pathNodes.__renderedString = pathString;


        if (viewData.lastPath !== pathString) {
            var pathShapeValue = '';
            if (viewData.elem) {
                if (pathNodes.c) {
                    pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
                }
                viewData.elem.setAttribute('d', pathShapeValue);
            }
            viewData.lastPath = pathString;
        }
    };

    MaskElement.prototype.destroy = function() {
        this.element = null;
        this.globalData = null;
        this.maskElement = null;
        this.data = null;
        this.masksProperties = null;
    };

    /**
     * @file 
     * Handles AE's layer parenting property.
     *
     */

    function HierarchyElement() {}

    HierarchyElement.prototype = {
        /**
         * @function 
         * Initializes hierarchy properties
         *
         */
        initHierarchy: function() {
            //element's parent list
            this.hierarchy = [];
            //if element is parent of another layer _isParent will be true
            this._isParent = false;
            this.checkParenting();
        },
        /**
         * @function 
         * Sets layer's hierarchy.
         * @param {array} hierarch
         * layer's parent list
         *
         */
        setHierarchy: function(hierarchy) {
            this.hierarchy = hierarchy;
        },
        /**
         * @function 
         * Sets layer as parent.
         *
         */
        setAsParent: function() {
            this._isParent = true;
        },
        /**
         * @function 
         * Searches layer's parenting chain
         *
         */
        checkParenting: function() {
            if (this.data.parent !== undefined) {
                this.comp.buildElementParenting(this, this.data.parent, []);
            }
        }
    };
    /**
     * @file 
     * Handles element's layer frame update.
     * Checks layer in point and out point
     *
     */

    function FrameElement() {}

    FrameElement.prototype = {
        /**
         * @function 
         * Initializes frame related properties.
         *
         */
        initFrame: function() {
            //set to true when inpoint is rendered
            this._isFirstFrame = false;
            //list of animated properties
            this.dynamicProperties = [];
            // If layer has been modified in current tick this will be true
            this._mdf = false;
        },
        /**
         * @function 
         * Calculates all dynamic values
         *
         * @param {number} num
         * current frame number in Layer's time
         * @param {boolean} isVisible
         * if layers is currently in range
         * 
         */
        prepareProperties: function(num, isVisible) {
            var i, len = this.dynamicProperties.length;
            for (i = 0; i < len; i += 1) {
                if (isVisible || (this._isParent && this.dynamicProperties[i].propType === 'transform')) {
                    this.dynamicProperties[i].getValue();
                    if (this.dynamicProperties[i]._mdf) {
                        this.globalData._mdf = true;
                        this._mdf = true;
                    }
                }
            }
        },
        addDynamicProperty: function(prop) {
            if (this.dynamicProperties.indexOf(prop) === -1) {
                this.dynamicProperties.push(prop);
            }
        }
    };

    function TransformElement() {}

    TransformElement.prototype = {
        initTransform: function() {
            this.finalTransform = {
                mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {
                    o: 0
                },
                _matMdf: false,
                _opMdf: false,
                mat: new Matrix()
            };
            if (this.data.ao) {
                this.finalTransform.mProp.autoOriented = true;
            }

            //TODO: check TYPE 11: Guided elements
            if (this.data.ty !== 11) {
                //this.createElements();
            }
        },
        renderTransform: function() {

            this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
            this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;

            if (this.hierarchy) {
                var mat;
                var finalMat = this.finalTransform.mat;
                var i = 0,
                    len = this.hierarchy.length;
                //Checking if any of the transformation matrices in the hierarchy chain has changed.
                if (!this.finalTransform._matMdf) {
                    while (i < len) {
                        if (this.hierarchy[i].finalTransform.mProp._mdf) {
                            this.finalTransform._matMdf = true;
                            break;
                        }
                        i += 1;
                    }
                }

                if (this.finalTransform._matMdf) {
                    mat = this.finalTransform.mProp.v.props;
                    finalMat.cloneFromProps(mat);
                    for (i = 0; i < len; i += 1) {
                        mat = this.hierarchy[i].finalTransform.mProp.v.props;
                        finalMat.transform(mat[0], mat[1], mat[2], mat[3], mat[4], mat[5], mat[6], mat[7], mat[8], mat[9], mat[10], mat[11], mat[12], mat[13], mat[14], mat[15]);
                    }
                }
            }
        },
        globalToLocal: function(pt) {
            var transforms = [];
            transforms.push(this.finalTransform);
            var flag = true;
            var comp = this.comp;
            while (flag) {
                if (comp.finalTransform) {
                    if (comp.data.hasMask) {
                        transforms.splice(0, 0, comp.finalTransform);
                    }
                    comp = comp.comp;
                } else {
                    flag = false;
                }
            }
            var i, len = transforms.length,
                ptNew;
            for (i = 0; i < len; i += 1) {
                ptNew = transforms[i].mat.applyToPointArray(0, 0, 0);
                //ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);
                pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
            }
            return pt;
        },
        mHelper: new Matrix()
    };

    function RenderableElement() {

    }

    RenderableElement.prototype = {
        initRenderable: function() {
            //layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange
            this.isInRange = false;
            //layer's display state
            this.hidden = false;
            // If layer's transparency equals 0, it can be hidden
            this.isTransparent = false;
            //list of animated components
            this.renderableComponents = [];
        },
        addRenderableComponent: function(component) {
            if (this.renderableComponents.indexOf(component) === -1) {
                this.renderableComponents.push(component);
            }
        },
        removeRenderableComponent: function(component) {
            if (this.renderableComponents.indexOf(component) !== -1) {
                this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
            }
        },
        prepareRenderableFrame: function(num) {
            this.checkLayerLimits(num);
        },
        checkTransparency: function() {
            if (this.finalTransform.mProp.o.v <= 0) {
                if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {
                    this.isTransparent = true;
                    this.hide();
                }
            } else if (this.isTransparent) {
                this.isTransparent = false;
                this.show();
            }
        },
        /**
         * @function 
         * Initializes frame related properties.
         *
         * @param {number} num
         * current frame number in Layer's time
         * 
         */
        checkLayerLimits: function(num) {
            if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {
                if (this.isInRange !== true) {
                    this.globalData._mdf = true;
                    this._mdf = true;
                    this.isInRange = true;
                    this.show();
                }
            } else {
                if (this.isInRange !== false) {
                    this.globalData._mdf = true;
                    this.isInRange = false;
                    this.hide();
                }
            }
        },
        renderRenderable: function() {
            var i, len = this.renderableComponents.length;
            for (i = 0; i < len; i += 1) {
                this.renderableComponents[i].renderFrame(this._isFirstFrame);
            }
            /*this.maskManager.renderFrame(this.finalTransform.mat);
            this.renderableEffectsManager.renderFrame(this._isFirstFrame);*/
        },
        sourceRectAtTime: function() {
            return {
                top: 0,
                left: 0,
                width: 100,
                height: 100
            };
        },
        getLayerSize: function() {
            if (this.data.ty === 5) {
                return {
                    w: this.data.textData.width,
                    h: this.data.textData.height
                };
            } else {
                return {
                    w: this.data.width,
                    h: this.data.height
                };
            }
        }
    };

    function RenderableDOMElement() {}

    (function() {
        var _prototype = {
            initElement: function(data, globalData, comp) {
                this.initFrame();
                this.initBaseData(data, globalData, comp);
                this.initTransform(data, globalData, comp);
                this.initHierarchy();
                this.initRenderable();
                this.initRendererElement();
                this.createContainerElements();
                this.addMasks();
                this.createContent();
                this.hide();
            },
            hide: function() {
                if (!this.hidden && (!this.isInRange || this.isTransparent)) {
                    var elem = this.baseElement || this.layerElement;
                    elem.style.display = 'none';
                    this.hidden = true;
                }
            },
            show: function() {
                if (this.isInRange && !this.isTransparent) {
                    if (!this.data.hd) {
                        var elem = this.baseElement || this.layerElement;
                        elem.style.display = 'block';
                    }
                    this.hidden = false;
                    this._isFirstFrame = true;
                }
            },
            renderFrame: function() {
                //If it is exported as hidden (data.hd === true) no need to render
                //If it is not visible no need to render
                if (this.data.hd || this.hidden) {
                    return;
                }
                this.renderTransform();
                this.renderRenderable();
                this.renderElement();
                this.renderInnerContent();
                if (this._isFirstFrame) {
                    this._isFirstFrame = false;
                }
            },
            renderInnerContent: function() {},
            prepareFrame: function(num) {
                this._mdf = false;
                this.prepareRenderableFrame(num);
                this.prepareProperties(num, this.isInRange);
                this.checkTransparency();
            },
            destroy: function() {
                this.innerElem = null;
                this.destroyBaseElement();
            }
        };
        extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
    }());

    function ProcessedElement(element, position) {
        this.elem = element;
        this.pos = position;
    }

    function SVGStyleData(data, level) {
        this.data = data;
        this.type = data.ty;
        this.d = '';
        this.lvl = level;
        this._mdf = false;
        this.closed = false;
        this.pElem = createNS('path');
        this.msElem = null;
    }

    SVGStyleData.prototype.reset = function() {
        this.d = '';
        this._mdf = false;
    };

    function SVGShapeData(transformers, level, shape) {
        this.caches = [];
        this.styles = [];
        this.transformers = transformers;
        this.lStr = '';
        this.sh = shape;
        this.lvl = level;
        //TODO find if there are some cases where _isAnimated can be false. 
        // For now, since shapes add up with other shapes. They have to be calculated every time.
        // One way of finding out is checking if all styles associated to this shape depend only of this shape
        this._isAnimated = !!shape.k;
        // TODO: commenting this for now since all shapes are animated
        var i = 0,
            len = transformers.length;
        while (i < len) {
            if (transformers[i].mProps.dynamicProperties.length) {
                this._isAnimated = true;
                break;
            }
            i += 1;
        }
    }

    SVGShapeData.prototype.setAsAnimated = function() {
        this._isAnimated = true;
    }

    function SVGTransformData(mProps, op, container) {
        this.transform = {
            mProps: mProps,
            op: op,
            container: container
        };
        this.elements = [];
        this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
    }

    function SVGStrokeStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
        this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
        this.d = new DashProperty(elem, data.d || {}, 'svg', this);
        this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
        this.style = styleOb;
        this._isAnimated = !!this._isAnimated;
    }

    extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);

    function SVGFillStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
        this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
        this.style = styleOb;
    }

    extendPrototype([DynamicPropertyContainer], SVGFillStyleData);

    function SVGGradientFillStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.initGradientData(elem, data, styleOb);
    }

    SVGGradientFillStyleData.prototype.initGradientData = function(elem, data, styleOb) {
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
        this.s = PropertyFactory.getProp(elem, data.s, 1, null, this);
        this.e = PropertyFactory.getProp(elem, data.e, 1, null, this);
        this.h = PropertyFactory.getProp(elem, data.h || {
            k: 0
        }, 0, 0.01, this);
        this.a = PropertyFactory.getProp(elem, data.a || {
            k: 0
        }, 0, degToRads, this);
        this.g = new GradientProperty(elem, data.g);
        this.style = styleOb;
        this.stops = [];
        this.setGradientData(styleOb.pElem, data);
        this.setGradientOpacity(data, styleOb);
        this._isAnimated = !!this._isAnimated;

    };

    SVGGradientFillStyleData.prototype.setGradientData = function(pathElement, data) {

        var gradientId = 'gr_' + randomString(10);
        var gfill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
        gfill.setAttribute('id', gradientId);
        gfill.setAttribute('spreadMethod', 'pad');
        gfill.setAttribute('gradientUnits', 'userSpaceOnUse');
        var stops = [];
        var stop, j, jLen;
        jLen = data.g.p * 4;
        for (j = 0; j < jLen; j += 4) {
            stop = createNS('stop');
            gfill.appendChild(stop);
            stops.push(stop);
        }
        pathElement.setAttribute(data.ty === 'gf' ? 'fill' : 'stroke', 'url(#' + gradientId + ')');

        this.gf = gfill;
        this.cst = stops;
    };

    SVGGradientFillStyleData.prototype.setGradientOpacity = function(data, styleOb) {
        if (this.g._hasOpacity && !this.g._collapsable) {
            var stop, j, jLen;
            var mask = createNS("mask");
            var maskElement = createNS('path');
            mask.appendChild(maskElement);
            var opacityId = 'op_' + randomString(10);
            var maskId = 'mk_' + randomString(10);
            mask.setAttribute('id', maskId);
            var opFill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
            opFill.setAttribute('id', opacityId);
            opFill.setAttribute('spreadMethod', 'pad');
            opFill.setAttribute('gradientUnits', 'userSpaceOnUse');
            jLen = data.g.k.k[0].s ? data.g.k.k[0].s.length : data.g.k.k.length;
            var stops = this.stops;
            for (j = data.g.p * 4; j < jLen; j += 2) {
                stop = createNS('stop');
                stop.setAttribute('stop-color', 'rgb(255,255,255)');
                opFill.appendChild(stop);
                stops.push(stop);
            }
            maskElement.setAttribute(data.ty === 'gf' ? 'fill' : 'stroke', 'url(#' + opacityId + ')');
            this.of = opFill;
            this.ms = mask;
            this.ost = stops;
            this.maskId = maskId;
            styleOb.msElem = maskElement;
        }
    };

    extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);

    function SVGGradientStrokeStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
        this.d = new DashProperty(elem, data.d || {}, 'svg', this);
        this.initGradientData(elem, data, styleOb);
        this._isAnimated = !!this._isAnimated;
    }

    extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);

    function ShapeGroupData() {
        this.it = [];
        this.prevViewData = [];
        this.gr = createNS('g');
    }
    var SVGElementsRenderer = (function() {
        var _identityMatrix = new Matrix();
        var _matrixHelper = new Matrix();

        var ob = {
            createRenderFunction: createRenderFunction
        }

        function createRenderFunction(data) {
            var ty = data.ty;
            switch (data.ty) {
                case 'fl':
                    return renderFill;
                case 'gf':
                    return renderGradient;
                case 'gs':
                    return renderGradientStroke;
                case 'st':
                    return renderStroke;
                case 'sh':
                case 'el':
                case 'rc':
                case 'sr':
                    return renderPath;
                case 'tr':
                    return renderContentTransform;
            }
        }

        function renderContentTransform(styleData, itemData, isFirstFrame) {
            if (isFirstFrame || itemData.transform.op._mdf) {
                itemData.transform.container.setAttribute('opacity', itemData.transform.op.v);
            }
            if (isFirstFrame || itemData.transform.mProps._mdf) {
                itemData.transform.container.setAttribute('transform', itemData.transform.mProps.v.to2dCSS());
            }
        }

        function renderPath(styleData, itemData, isFirstFrame) {
            var j, jLen, pathStringTransformed, redraw, pathNodes, l, lLen = itemData.styles.length;
            var lvl = itemData.lvl;
            var paths, mat, props, iterations, k;
            for (l = 0; l < lLen; l += 1) {
                redraw = itemData.sh._mdf || isFirstFrame;
                if (itemData.styles[l].lvl < lvl) {
                    mat = _matrixHelper.reset();
                    iterations = lvl - itemData.styles[l].lvl;
                    k = itemData.transformers.length - 1;
                    while (!redraw && iterations > 0) {
                        redraw = itemData.transformers[k].mProps._mdf || redraw;
                        iterations--;
                        k--;
                    }
                    if (redraw) {
                        iterations = lvl - itemData.styles[l].lvl;
                        k = itemData.transformers.length - 1;
                        while (iterations > 0) {
                            props = itemData.transformers[k].mProps.v.props;
                            mat.transform(props[0], props[1], props[2], props[3], props[4], props[5], props[6], props[7], props[8], props[9], props[10], props[11], props[12], props[13], props[14], props[15]);
                            iterations--;
                            k--;
                        }
                    }
                } else {
                    mat = _identityMatrix;
                }
                paths = itemData.sh.paths;
                jLen = paths._length;
                if (redraw) {
                    pathStringTransformed = '';
                    for (j = 0; j < jLen; j += 1) {
                        pathNodes = paths.shapes[j];
                        if (pathNodes && pathNodes._length) {
                            pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
                        }
                    }
                    itemData.caches[l] = pathStringTransformed;
                } else {
                    pathStringTransformed = itemData.caches[l];
                }
                itemData.styles[l].d += pathStringTransformed;
                itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;
            }
        }

        function renderFill(styleData, itemData, isFirstFrame) {
            var styleElem = itemData.style;

            if (itemData.c._mdf || isFirstFrame) {
                styleElem.pElem.setAttribute('fill', 'rgb(' + bm_floor(itemData.c.v[0]) + ',' + bm_floor(itemData.c.v[1]) + ',' + bm_floor(itemData.c.v[2]) + ')');
            }
            if (itemData.o._mdf || isFirstFrame) {
                styleElem.pElem.setAttribute('fill-opacity', itemData.o.v);
            }
        };

        function renderGradientStroke(styleData, itemData, isFirstFrame) {
            renderGradient(styleData, itemData, isFirstFrame);
            renderStroke(styleData, itemData, isFirstFrame);
        }

        function renderGradient(styleData, itemData, isFirstFrame) {
            var gfill = itemData.gf;
            var hasOpacity = itemData.g._hasOpacity;
            var pt1 = itemData.s.v,
                pt2 = itemData.e.v;

            if (itemData.o._mdf || isFirstFrame) {
                var attr = styleData.ty === 'gf' ? 'fill-opacity' : 'stroke-opacity';
                itemData.style.pElem.setAttribute(attr, itemData.o.v);
            }
            if (itemData.s._mdf || isFirstFrame) {
                var attr1 = styleData.t === 1 ? 'x1' : 'cx';
                var attr2 = attr1 === 'x1' ? 'y1' : 'cy';
                gfill.setAttribute(attr1, pt1[0]);
                gfill.setAttribute(attr2, pt1[1]);
                if (hasOpacity && !itemData.g._collapsable) {
                    itemData.of.setAttribute(attr1, pt1[0]);
                    itemData.of.setAttribute(attr2, pt1[1]);
                }
            }
            var stops, i, len, stop;
            if (itemData.g._cmdf || isFirstFrame) {
                stops = itemData.cst;
                var cValues = itemData.g.c;
                len = stops.length;
                for (i = 0; i < len; i += 1) {
                    stop = stops[i];
                    stop.setAttribute('offset', cValues[i * 4] + '%');
                    stop.setAttribute('stop-color', 'rgb(' + cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ',' + cValues[i * 4 + 3] + ')');
                }
            }
            if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
                var oValues = itemData.g.o;
                if (itemData.g._collapsable) {
                    stops = itemData.cst;
                } else {
                    stops = itemData.ost;
                }
                len = stops.length;
                for (i = 0; i < len; i += 1) {
                    stop = stops[i];
                    if (!itemData.g._collapsable) {
                        stop.setAttribute('offset', oValues[i * 2] + '%');
                    }
                    stop.setAttribute('stop-opacity', oValues[i * 2 + 1]);
                }
            }
            if (styleData.t === 1) {
                if (itemData.e._mdf || isFirstFrame) {
                    gfill.setAttribute('x2', pt2[0]);
                    gfill.setAttribute('y2', pt2[1]);
                    if (hasOpacity && !itemData.g._collapsable) {
                        itemData.of.setAttribute('x2', pt2[0]);
                        itemData.of.setAttribute('y2', pt2[1]);
                    }
                }
            } else {
                var rad;
                if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
                    rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                    gfill.setAttribute('r', rad);
                    if (hasOpacity && !itemData.g._collapsable) {
                        itemData.of.setAttribute('r', rad);
                    }
                }
                if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
                    if (!rad) {
                        rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                    }
                    var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);

                    var percent = itemData.h.v >= 1 ? 0.99 : itemData.h.v <= -1 ? -0.99 : itemData.h.v;
                    var dist = rad * percent;
                    var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
                    var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
                    gfill.setAttribute('fx', x);
                    gfill.setAttribute('fy', y);
                    if (hasOpacity && !itemData.g._collapsable) {
                        itemData.of.setAttribute('fx', x);
                        itemData.of.setAttribute('fy', y);
                    }
                }
                //gfill.setAttribute('fy','200');
            }
        };

        function renderStroke(styleData, itemData, isFirstFrame) {
            var styleElem = itemData.style;
            var d = itemData.d;
            if (d && (d._mdf || isFirstFrame) && d.dashStr) {
                styleElem.pElem.setAttribute('stroke-dasharray', d.dashStr);
                styleElem.pElem.setAttribute('stroke-dashoffset', d.dashoffset[0]);
            }
            if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
                styleElem.pElem.setAttribute('stroke', 'rgb(' + bm_floor(itemData.c.v[0]) + ',' + bm_floor(itemData.c.v[1]) + ',' + bm_floor(itemData.c.v[2]) + ')');
            }
            if (itemData.o._mdf || isFirstFrame) {
                styleElem.pElem.setAttribute('stroke-opacity', itemData.o.v);
            }
            if (itemData.w._mdf || isFirstFrame) {
                styleElem.pElem.setAttribute('stroke-width', itemData.w.v);
                if (styleElem.msElem) {
                    styleElem.msElem.setAttribute('stroke-width', itemData.w.v);
                }
            }
        };

        return ob;
    }())

    function BaseElement() {}

    BaseElement.prototype = {
        checkMasks: function() {
            if (!this.data.hasMask) {
                return false;
            }
            var i = 0,
                len = this.data.masksProperties.length;
            while (i < len) {
                if ((this.data.masksProperties[i].mode !== 'n' && this.data.masksProperties[i].cl !== false)) {
                    return true;
                }
                i += 1;
            }
            return false;
        },
        initExpressions: function() {
            this.layerInterface = LayerExpressionInterface(this);
            if (this.data.hasMask && this.maskManager) {
                this.layerInterface.registerMaskInterface(this.maskManager);
            }
            var effectsInterface = EffectsExpressionInterface.createEffectsInterface(this, this.layerInterface);
            this.layerInterface.registerEffectsInterface(effectsInterface);

            if (this.data.ty === 0 || this.data.xt) {
                this.compInterface = CompExpressionInterface(this);
            } else if (this.data.ty === 4) {
                this.layerInterface.shapeInterface = ShapeExpressionInterface(this.shapesData, this.itemsData, this.layerInterface);
                this.layerInterface.content = this.layerInterface.shapeInterface;
            } else if (this.data.ty === 5) {
                this.layerInterface.textInterface = TextExpressionInterface(this);
                this.layerInterface.text = this.layerInterface.textInterface;
            }
        },
        blendModeEnums: {
            1: 'multiply',
            2: 'screen',
            3: 'overlay',
            4: 'darken',
            5: 'lighten',
            6: 'color-dodge',
            7: 'color-burn',
            8: 'hard-light',
            9: 'soft-light',
            10: 'difference',
            11: 'exclusion',
            12: 'hue',
            13: 'saturation',
            14: 'color',
            15: 'luminosity'
        },
        getBlendMode: function() {
            return this.blendModeEnums[this.data.bm] || '';
        },
        setBlendMode: function() {
            var blendModeValue = this.getBlendMode();
            var elem = this.baseElement || this.layerElement;

            elem.style['mix-blend-mode'] = blendModeValue;
        },
        initBaseData: function(data, globalData, comp) {
            this.globalData = globalData;
            this.comp = comp;
            this.data = data;
            this.layerId = 'ly_' + randomString(10);

            //Stretch factor for old animations missing this property.
            if (!this.data.sr) {
                this.data.sr = 1;
            }
            // effects manager
            this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);

        },
        getType: function() {
            return this.type;
        }
    }

    function NullElement(data, globalData, comp) {
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.initFrame();
        this.initTransform(data, globalData, comp);
        this.initHierarchy();
    }

    NullElement.prototype.prepareFrame = function(num) {
        this.prepareProperties(num, true);
    };

    NullElement.prototype.renderFrame = function() {};

    NullElement.prototype.getBaseElement = function() {
        return null;
    };

    NullElement.prototype.destroy = function() {};

    NullElement.prototype.sourceRectAtTime = function() {};

    NullElement.prototype.hide = function() {};

    extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement);

    function SVGBaseElement() {}

    SVGBaseElement.prototype = {
        initRendererElement: function() {
            this.layerElement = createNS('g');
        },
        createContainerElements: function() {
            this.matteElement = createNS('g');
            this.transformedElement = this.layerElement;
            this.maskedElement = this.layerElement;
            this._sizeChanged = false;
            var layerElementParent = null;
            //If this layer acts as a mask for the following layer
            var filId, fil, gg;
            if (this.data.td) {
                if (this.data.td == 3 || this.data.td == 1) {
                    var masker = createNS('mask');
                    masker.setAttribute('id', this.layerId);
                    masker.setAttribute('mask-type', this.data.td == 3 ? 'luminance' : 'alpha');
                    masker.appendChild(this.layerElement);
                    layerElementParent = masker;
                    this.globalData.defs.appendChild(masker);
                    // This is only for IE and Edge when mask if of type alpha
                    if (!featureSupport.maskType && this.data.td == 1) {
                        masker.setAttribute('mask-type', 'luminance');
                        filId = randomString(10);
                        fil = filtersFactory.createFilter(filId);
                        this.globalData.defs.appendChild(fil);
                        fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                        gg = createNS('g');
                        gg.appendChild(this.layerElement);
                        layerElementParent = gg;
                        masker.appendChild(gg);
                        gg.setAttribute('filter', 'url(' + locationHref + '#' + filId + ')');
                    }
                } else if (this.data.td == 2) {
                    var maskGroup = createNS('mask');
                    maskGroup.setAttribute('id', this.layerId);
                    maskGroup.setAttribute('mask-type', 'alpha');
                    var maskGrouper = createNS('g');
                    maskGroup.appendChild(maskGrouper);
                    filId = randomString(10);
                    fil = filtersFactory.createFilter(filId);
                    ////

                    var feColorMatrix = createNS('feColorMatrix');
                    feColorMatrix.setAttribute('type', 'matrix');
                    feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
                    feColorMatrix.setAttribute('values', '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 -1 1');
                    fil.appendChild(feColorMatrix);

                    ////
                    /*var feCTr = createNS('feComponentTransfer');
                    feCTr.setAttribute('in','SourceGraphic');
                    fil.appendChild(feCTr);
                    var feFunc = createNS('feFuncA');
                    feFunc.setAttribute('type','table');
                    feFunc.setAttribute('tableValues','1.0 0.0');
                    feCTr.appendChild(feFunc);*/
                    this.globalData.defs.appendChild(fil);
                    var alphaRect = createNS('rect');
                    alphaRect.setAttribute('width', this.comp.data.w);
                    alphaRect.setAttribute('height', this.comp.data.h);
                    alphaRect.setAttribute('x', '0');
                    alphaRect.setAttribute('y', '0');
                    alphaRect.setAttribute('fill', '#ffffff');
                    alphaRect.setAttribute('opacity', '0');
                    maskGrouper.setAttribute('filter', 'url(' + locationHref + '#' + filId + ')');
                    maskGrouper.appendChild(alphaRect);
                    maskGrouper.appendChild(this.layerElement);
                    layerElementParent = maskGrouper;
                    if (!featureSupport.maskType) {
                        maskGroup.setAttribute('mask-type', 'luminance');
                        fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                        gg = createNS('g');
                        maskGrouper.appendChild(alphaRect);
                        gg.appendChild(this.layerElement);
                        layerElementParent = gg;
                        maskGrouper.appendChild(gg);
                    }
                    this.globalData.defs.appendChild(maskGroup);
                }
            } else if (this.data.tt) {
                this.matteElement.appendChild(this.layerElement);
                layerElementParent = this.matteElement;
                this.baseElement = this.matteElement;
            } else {
                this.baseElement = this.layerElement;
            }
            if (this.data.ln) {
                this.layerElement.setAttribute('id', this.data.ln);
            }
            if (this.data.cl) {
                this.layerElement.setAttribute('class', this.data.cl);
            }
            //Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped
            if (this.data.ty === 0 && !this.data.hd) {
                var cp = createNS('clipPath');
                var pt = createNS('path');
                pt.setAttribute('d', 'M0,0 L' + this.data.w + ',0' + ' L' + this.data.w + ',' + this.data.h + ' L0,' + this.data.h + 'z');
                var clipId = 'cp_' + randomString(8);
                cp.setAttribute('id', clipId);
                cp.appendChild(pt);
                this.globalData.defs.appendChild(cp);

                if (this.checkMasks()) {
                    var cpGroup = createNS('g');
                    cpGroup.setAttribute('clip-path', 'url(' + locationHref + '#' + clipId + ')');
                    cpGroup.appendChild(this.layerElement);
                    this.transformedElement = cpGroup;
                    if (layerElementParent) {
                        layerElementParent.appendChild(this.transformedElement);
                    } else {
                        this.baseElement = this.transformedElement;
                    }
                } else {
                    this.layerElement.setAttribute('clip-path', 'url(' + locationHref + '#' + clipId + ')');
                }

            }
            if (this.data.bm !== 0) {
                this.setBlendMode();
            }
            this.renderableEffectsManager = new SVGEffects(this);

        },
        renderElement: function() {
            if (this.finalTransform._matMdf) {
                this.transformedElement.setAttribute('transform', this.finalTransform.mat.to2dCSS());
            }
            if (this.finalTransform._opMdf) {
                this.transformedElement.setAttribute('opacity', this.finalTransform.mProp.o.v);
            }
        },
        destroyBaseElement: function() {
            this.layerElement = null;
            this.matteElement = null;
            this.maskManager.destroy();
        },
        getBaseElement: function() {
            if (this.data.hd) {
                return null;
            }
            return this.baseElement;
        },
        addMasks: function() {
            this.maskManager = new MaskElement(this.data, this, this.globalData);
        },
        setMatte: function(id) {
            if (!this.matteElement) {
                return;
            }
            this.matteElement.setAttribute("mask", "url(" + locationHref + "#" + id + ")");
        }
    };

    function IShapeElement() {}

    IShapeElement.prototype = {
        addShapeToModifiers: function(data) {
            var i, len = this.shapeModifiers.length;
            for (i = 0; i < len; i += 1) {
                this.shapeModifiers[i].addShape(data);
            }
        },
        isShapeInAnimatedModifiers: function(data) {
            var i = 0,
                len = this.shapeModifiers.length;
            while (i < len) {
                if (this.shapeModifiers[i].isAnimatedWithShape(data)) {
                    return true;
                }
            }
            return false;
        },
        renderModifiers: function() {
            if (!this.shapeModifiers.length) {
                return;
            }
            var i, len = this.shapes.length;
            for (i = 0; i < len; i += 1) {
                this.shapes[i].sh.reset();
            }

            len = this.shapeModifiers.length;
            for (i = len - 1; i >= 0; i -= 1) {
                this.shapeModifiers[i].processShapes(this._isFirstFrame);
            }
        },
        lcEnum: {
            '1': 'butt',
            '2': 'round',
            '3': 'square'
        },
        ljEnum: {
            '1': 'miter',
            '2': 'round',
            '3': 'bevel'
        },
        searchProcessedElement: function(elem) {
            var elements = this.processedElements;
            var i = 0,
                len = elements.length;
            while (i < len) {
                if (elements[i].elem === elem) {
                    return elements[i].pos;
                }
                i += 1;
            }
            return 0;
        },
        addProcessedElement: function(elem, pos) {
            var elements = this.processedElements;
            var i = elements.length;
            while (i) {
                i -= 1;
                if (elements[i].elem === elem) {
                    elements[i].pos = pos;
                    return;
                }
            }
            elements.push(new ProcessedElement(elem, pos));
        },
        prepareFrame: function(num) {
            this.prepareRenderableFrame(num);
            this.prepareProperties(num, this.isInRange);
        }
    };

    function ITextElement() {}

    ITextElement.prototype.initElement = function(data, globalData, comp) {
        this.lettersChangedFlag = true;
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.textProperty = new TextProperty(this, data.t, this.dynamicProperties);
        this.textAnimator = new TextAnimatorProperty(data.t, this.renderType, this);
        this.initTransform(data, globalData, comp);
        this.initHierarchy();
        this.initRenderable();
        this.initRendererElement();
        this.createContainerElements();
        this.addMasks();
        this.createContent();
        this.hide();
        this.textAnimator.searchProperties(this.dynamicProperties);
    };

    ITextElement.prototype.prepareFrame = function(num) {
        this._mdf = false;
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);
        if (this.textProperty._mdf || this.textProperty._isFirstFrame) {
            this.buildNewText();
            this.textProperty._isFirstFrame = false;
            this.textProperty._mdf = false;
        }
    };

    ITextElement.prototype.createPathShape = function(matrixHelper, shapes) {
        var j, jLen = shapes.length;
        var k, kLen, pathNodes;
        var shapeStr = '';
        for (j = 0; j < jLen; j += 1) {
            pathNodes = shapes[j].ks.k;
            shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
        }
        return shapeStr;
    };

    ITextElement.prototype.updateDocumentData = function(newData, index) {
        this.textProperty.updateDocumentData(newData, index);
    };

    ITextElement.prototype.canResizeFont = function(_canResize) {
        this.textProperty.canResizeFont(_canResize);
    };

    ITextElement.prototype.setMinimumFontSize = function(_fontSize) {
        this.textProperty.setMinimumFontSize(_fontSize);
    };

    ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData, matrixHelper, lineNumber, xPos, yPos) {
        if (documentData.ps) {
            matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
        }
        matrixHelper.translate(0, -documentData.ls, 0);
        switch (documentData.j) {
            case 1:
                matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);
                break;
            case 2:
                matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);
                break;
        }
        matrixHelper.translate(xPos, yPos, 0);
    };


    ITextElement.prototype.buildColor = function(colorData) {
        return 'rgb(' + Math.round(colorData[0] * 255) + ',' + Math.round(colorData[1] * 255) + ',' + Math.round(colorData[2] * 255) + ')';
    };

    ITextElement.prototype.emptyProp = new LetterProps();

    ITextElement.prototype.destroy = function() {

    };

    function ICompElement() {}

    extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);

    ICompElement.prototype.initElement = function(data, globalData, comp) {
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.initTransform(data, globalData, comp);
        this.initRenderable();
        this.initHierarchy();
        this.initRendererElement();
        this.createContainerElements();
        this.addMasks();
        if (this.data.xt || !globalData.progressiveLoad) {
            this.buildAllItems();
        }
        this.hide();
    };

    /*ICompElement.prototype.hide = function(){
        if(!this.hidden){
            this.hideElement();
            var i,len = this.elements.length;
            for( i = 0; i < len; i+=1 ){
                if(this.elements[i]){
                    this.elements[i].hide();
                }
            }
        }
    };*/

    ICompElement.prototype.prepareFrame = function(num) {
        this._mdf = false;
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);
        if (!this.isInRange && !this.data.xt) {
            return;
        }

        if (!this.tm._placeholder) {
            var timeRemapped = this.tm.v;
            if (timeRemapped === this.data.op) {
                timeRemapped = this.data.op - 1;
            }
            this.renderedFrame = timeRemapped;
        } else {
            this.renderedFrame = num / this.data.sr;
        }
        var i, len = this.elements.length;
        if (!this.completeLayers) {
            this.checkLayers(this.renderedFrame);
        }
        //This iteration needs to be backwards because of how expressions connect between each other
        for (i = len - 1; i >= 0; i -= 1) {
            if (this.completeLayers || this.elements[i]) {
                this.elements[i].prepareFrame(this.renderedFrame - this.layers[i].st);
                if (this.elements[i]._mdf) {
                    this._mdf = true;
                }
            }
        }
    };

    ICompElement.prototype.renderInnerContent = function() {
        var i, len = this.layers.length;
        for (i = 0; i < len; i += 1) {
            if (this.completeLayers || this.elements[i]) {
                this.elements[i].renderFrame();
            }
        }
    };

    ICompElement.prototype.setElements = function(elems) {
        this.elements = elems;
    };

    ICompElement.prototype.getElements = function() {
        return this.elements;
    };

    ICompElement.prototype.destroyElements = function() {
        var i, len = this.layers.length;
        for (i = 0; i < len; i += 1) {
            if (this.elements[i]) {
                this.elements[i].destroy();
            }
        }
    };

    ICompElement.prototype.destroy = function() {
        this.destroyElements();
        this.destroyBaseElement();
    };

    function IImageElement(data, globalData, comp) {
        this.assetData = globalData.getAssetData(data.refId);
        this.initElement(data, globalData, comp);
    }

    extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement);

    IImageElement.prototype.createContent = function() {

        var assetPath = this.globalData.getAssetsPath(this.assetData);

        this.innerElem = createNS('image');
        this.innerElem.setAttribute('width', this.assetData.w + "px");
        this.innerElem.setAttribute('height', this.assetData.h + "px");
        this.innerElem.setAttribute('preserveAspectRatio', this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
        this.innerElem.setAttributeNS('http://www.w3.org/1999/xlink', 'href', assetPath);

        this.layerElement.appendChild(this.innerElem);
    };

    function ISolidElement(data, globalData, comp) {
        this.initElement(data, globalData, comp);
    }
    extendPrototype([IImageElement], ISolidElement);

    ISolidElement.prototype.createContent = function() {

        var rect = createNS('rect');
        ////rect.style.width = this.data.sw;
        ////rect.style.height = this.data.sh;
        ////rect.style.fill = this.data.sc;
        rect.setAttribute('width', this.data.sw);
        rect.setAttribute('height', this.data.sh);
        rect.setAttribute('fill', this.data.sc);
        this.layerElement.appendChild(rect);
    };

    function SVGCompElement(data, globalData, comp) {
        this.layers = data.layers;
        this.supports3d = true;
        this.completeLayers = false;
        this.pendingElements = [];
        this.elements = this.layers ? createSizedArray(this.layers.length) : [];
        //this.layerElement = createNS('g');
        this.initElement(data, globalData, comp);
        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
            _placeholder: true
        };
    }

    extendPrototype([SVGRenderer, ICompElement, SVGBaseElement], SVGCompElement);

    function SVGTextElement(data, globalData, comp) {
        this.textSpans = [];
        this.renderType = 'svg';
        this.initElement(data, globalData, comp);
    }

    extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextElement);

    SVGTextElement.prototype.createContent = function() {

        if (this.data.singleShape && !this.globalData.fontManager.chars) {
            this.textContainer = createNS('text');
        }
    };

    SVGTextElement.prototype.buildTextContents = function(textArray) {
        var i = 0,
            len = textArray.length;
        var textContents = [],
            currentTextContent = '';
        while (i < len) {
            if (textArray[i] === String.fromCharCode(13)) {
                textContents.push(currentTextContent);
                currentTextContent = '';
            } else {
                currentTextContent += textArray[i];
            }
            i += 1;
        }
        textContents.push(currentTextContent);
        return textContents;
    }

    SVGTextElement.prototype.buildNewText = function() {
        var i, len;

        var documentData = this.textProperty.currentData;
        this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
        if (documentData.fc) {
            this.layerElement.setAttribute('fill', this.buildColor(documentData.fc));
        } else {
            this.layerElement.setAttribute('fill', 'rgba(0,0,0,0)');
        }
        if (documentData.sc) {
            this.layerElement.setAttribute('stroke', this.buildColor(documentData.sc));
            this.layerElement.setAttribute('stroke-width', documentData.sw);
        }
        this.layerElement.setAttribute('font-size', documentData.finalSize);
        var fontData = this.globalData.fontManager.getFontByName(documentData.f);
        if (fontData.fClass) {
            this.layerElement.setAttribute('class', fontData.fClass);
        } else {
            this.layerElement.setAttribute('font-family', fontData.fFamily);
            var fWeight = documentData.fWeight,
                fStyle = documentData.fStyle;
            this.layerElement.setAttribute('font-style', fStyle);
            this.layerElement.setAttribute('font-weight', fWeight);
        }

        var letters = documentData.l || [];
        var usesGlyphs = this.globalData.fontManager.chars;
        len = letters.length;

        var tSpan;
        var matrixHelper = this.mHelper;
        var shapes, shapeStr = '',
            singleShape = this.data.singleShape;
        var xPos = 0,
            yPos = 0,
            firstLine = true;
        var trackingOffset = documentData.tr / 1000 * documentData.finalSize;
        if (singleShape && !usesGlyphs && !documentData.sz) {
            var tElement = this.textContainer;
            var justify = 'start';
            switch (documentData.j) {
                case 1:
                    justify = 'end';
                    break;
                case 2:
                    justify = 'middle';
                    break;
            }
            tElement.setAttribute('text-anchor', justify);
            tElement.setAttribute('letter-spacing', trackingOffset);
            var textContent = this.buildTextContents(documentData.finalText);
            len = textContent.length;
            yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
            for (i = 0; i < len; i += 1) {
                tSpan = this.textSpans[i] || createNS('tspan');
                tSpan.textContent = textContent[i];
                tSpan.setAttribute('x', 0);
                tSpan.setAttribute('y', yPos);
                tSpan.style.display = 'inherit';
                tElement.appendChild(tSpan);
                this.textSpans[i] = tSpan;
                yPos += documentData.finalLineHeight;
            }

            this.layerElement.appendChild(tElement);
        } else {
            var cachedSpansLength = this.textSpans.length;
            var shapeData, charData;
            for (i = 0; i < len; i += 1) {
                if (!usesGlyphs || !singleShape || i === 0) {
                    tSpan = cachedSpansLength > i ? this.textSpans[i] : createNS(usesGlyphs ? 'path' : 'text');
                    if (cachedSpansLength <= i) {
                        tSpan.setAttribute('stroke-linecap', 'butt');
                        tSpan.setAttribute('stroke-linejoin', 'round');
                        tSpan.setAttribute('stroke-miterlimit', '4');
                        this.textSpans[i] = tSpan;
                        this.layerElement.appendChild(tSpan);
                    }
                    tSpan.style.display = 'inherit';
                }

                matrixHelper.reset();
                matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
                if (singleShape) {
                    if (letters[i].n) {
                        xPos = -trackingOffset;
                        yPos += documentData.yOffset;
                        yPos += firstLine ? 1 : 0;
                        firstLine = false;
                    }
                    this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
                    xPos += letters[i].l || 0;
                    //xPos += letters[i].val === ' ' ? 0 : trackingOffset;
                    xPos += trackingOffset;
                }
                if (usesGlyphs) {
                    charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
                    shapeData = charData && charData.data || {};
                    shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
                    if (!singleShape) {
                        tSpan.setAttribute('d', this.createPathShape(matrixHelper, shapes));
                    } else {
                        shapeStr += this.createPathShape(matrixHelper, shapes);
                    }
                } else {
                    if (singleShape) {
                        tSpan.setAttribute("transform", "translate(" + matrixHelper.props[12] + "," + matrixHelper.props[13] + ")");
                    }
                    tSpan.textContent = letters[i].val;
                    tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
                }
                //
            }
            if (singleShape && tSpan) {
                tSpan.setAttribute('d', shapeStr);
            }
        }
        while (i < this.textSpans.length) {
            this.textSpans[i].style.display = 'none';
            i += 1;
        }

        this._sizeChanged = true;
    };

    SVGTextElement.prototype.sourceRectAtTime = function(time) {
        this.prepareFrame(this.comp.renderedFrame - this.data.st);
        this.renderInnerContent();
        if (this._sizeChanged) {
            this._sizeChanged = false;
            var textBox = this.layerElement.getBBox();
            this.bbox = {
                top: textBox.y,
                left: textBox.x,
                width: textBox.width,
                height: textBox.height
            };
        }
        return this.bbox;
    };

    SVGTextElement.prototype.renderInnerContent = function() {

        if (!this.data.singleShape) {
            this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
            if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
                this._sizeChanged = true;
                var i, len;
                var renderedLetters = this.textAnimator.renderedLetters;

                var letters = this.textProperty.currentData.l;

                len = letters.length;
                var renderedLetter, textSpan;
                for (i = 0; i < len; i += 1) {
                    if (letters[i].n) {
                        continue;
                    }
                    renderedLetter = renderedLetters[i];
                    textSpan = this.textSpans[i];
                    if (renderedLetter._mdf.m) {
                        textSpan.setAttribute('transform', renderedLetter.m);
                    }
                    if (renderedLetter._mdf.o) {
                        textSpan.setAttribute('opacity', renderedLetter.o);
                    }
                    if (renderedLetter._mdf.sw) {
                        textSpan.setAttribute('stroke-width', renderedLetter.sw);
                    }
                    if (renderedLetter._mdf.sc) {
                        textSpan.setAttribute('stroke', renderedLetter.sc);
                    }
                    if (renderedLetter._mdf.fc) {
                        textSpan.setAttribute('fill', renderedLetter.fc);
                    }
                }
            }
        }
    };

    function SVGShapeElement(data, globalData, comp) {
        //List of drawable elements
        this.shapes = [];
        // Full shape data
        this.shapesData = data.shapes;
        //List of styles that will be applied to shapes
        this.stylesList = [];
        //List of modifiers that will be applied to shapes
        this.shapeModifiers = [];
        //List of items in shape tree
        this.itemsData = [];
        //List of items in previous shape tree
        this.processedElements = [];
        // List of animated components
        this.animatedContents = [];
        this.initElement(data, globalData, comp);
        //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
        // List of elements that have been created
        this.prevViewData = [];
        //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
    }

    extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement);

    SVGShapeElement.prototype.initSecondaryElement = function() {};

    SVGShapeElement.prototype.identityMatrix = new Matrix();

    SVGShapeElement.prototype.buildExpressionInterface = function() {};

    SVGShapeElement.prototype.createContent = function() {
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
        this.filterUniqueShapes();
    };

    /*
    This method searches for multiple shapes that affect a single element and one of them is animated
    */
    SVGShapeElement.prototype.filterUniqueShapes = function() {
        var i, len = this.shapes.length,
            shape;
        var j, jLen = this.stylesList.length;
        var style, count = 0;
        var tempShapes = [];
        var areAnimated = false;
        for (j = 0; j < jLen; j += 1) {
            style = this.stylesList[j];
            areAnimated = false;
            tempShapes.length = 0;
            for (i = 0; i < len; i += 1) {
                shape = this.shapes[i];
                if (shape.styles.indexOf(style) !== -1) {
                    tempShapes.push(shape);
                    areAnimated = shape._isAnimated || areAnimated;
                }
            }
            if (tempShapes.length > 1 && areAnimated) {
                this.setShapesAsAnimated(tempShapes);
            }
        }
    }

    SVGShapeElement.prototype.setShapesAsAnimated = function(shapes) {
        var i, len = shapes.length;
        for (i = 0; i < len; i += 1) {
            shapes[i].setAsAnimated();
        }
    }

    SVGShapeElement.prototype.createStyleElement = function(data, level) {
        //TODO: prevent drawing of hidden styles
        var elementData;
        var styleOb = new SVGStyleData(data, level);

        var pathElement = styleOb.pElem;
        if (data.ty === 'st') {
            elementData = new SVGStrokeStyleData(this, data, styleOb);
        } else if (data.ty === 'fl') {
            elementData = new SVGFillStyleData(this, data, styleOb);
        } else if (data.ty === 'gf' || data.ty === 'gs') {
            var gradientConstructor = data.ty === 'gf' ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
            elementData = new gradientConstructor(this, data, styleOb);
            this.globalData.defs.appendChild(elementData.gf);
            if (elementData.maskId) {
                this.globalData.defs.appendChild(elementData.ms);
                this.globalData.defs.appendChild(elementData.of);
                pathElement.setAttribute('mask', 'url(#' + elementData.maskId + ')');
            }
        }

        if (data.ty === 'st' || data.ty === 'gs') {
            pathElement.setAttribute('stroke-linecap', this.lcEnum[data.lc] || 'round');
            pathElement.setAttribute('stroke-linejoin', this.ljEnum[data.lj] || 'round');
            pathElement.setAttribute('fill-opacity', '0');
            if (data.lj === 1) {
                pathElement.setAttribute('stroke-miterlimit', data.ml);
            }
        }

        if (data.r === 2) {
            pathElement.setAttribute('fill-rule', 'evenodd');
        }

        if (data.ln) {
            pathElement.setAttribute('id', data.ln);
        }
        if (data.cl) {
            pathElement.setAttribute('class', data.cl);
        }
        this.stylesList.push(styleOb);
        this.addToAnimatedContents(data, elementData);
        return elementData;
    };

    SVGShapeElement.prototype.createGroupElement = function(data) {
        var elementData = new ShapeGroupData();
        if (data.ln) {
            elementData.gr.setAttribute('id', data.ln);
        }
        return elementData;
    };

    SVGShapeElement.prototype.createTransformElement = function(data, container) {
        var transformProperty = TransformPropertyFactory.getTransformProperty(this, data, this);
        var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);
        this.addToAnimatedContents(data, elementData);
        return elementData;
    };

    SVGShapeElement.prototype.createShapeElement = function(data, ownTransformers, level) {
        var ty = 4;
        if (data.ty === 'rc') {
            ty = 5;
        } else if (data.ty === 'el') {
            ty = 6;
        } else if (data.ty === 'sr') {
            ty = 7;
        }
        var shapeProperty = ShapePropertyFactory.getShapeProp(this, data, ty, this);
        var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
        this.shapes.push(elementData);
        this.addShapeToModifiers(elementData);
        this.addToAnimatedContents(data, elementData);
        return elementData;
    };

    SVGShapeElement.prototype.addToAnimatedContents = function(data, element) {
        var i = 0,
            len = this.animatedContents.length;
        while (i < len) {
            if (this.animatedContents[i].element === element) {
                return;
            }
            i += 1;
        }
        this.animatedContents.push({
            fn: SVGElementsRenderer.createRenderFunction(data),
            element: element,
            data: data
        });
    };

    SVGShapeElement.prototype.setElementStyles = function(elementData) {
        var arr = elementData.styles;
        var j, jLen = this.stylesList.length;
        for (j = 0; j < jLen; j += 1) {
            if (!this.stylesList[j].closed) {
                arr.push(this.stylesList[j]);
            }
        }
    };

    SVGShapeElement.prototype.reloadShapes = function() {
        this._isFirstFrame = true;
        var i, len = this.itemsData.length;
        for (i = 0; i < len; i += 1) {
            this.prevViewData[i] = this.itemsData[i];
        }
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
        this.filterUniqueShapes();
        len = this.dynamicProperties.length;
        for (i = 0; i < len; i += 1) {
            this.dynamicProperties[i].getValue();
        }
        this.renderModifiers();
    };

    SVGShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, container, level, transformers, render) {
        var ownTransformers = [].concat(transformers);
        var i, len = arr.length - 1;
        var j, jLen;
        var ownStyles = [],
            ownModifiers = [],
            styleOb, currentTransform, modifier, processedPos;
        for (i = len; i >= 0; i -= 1) {
            processedPos = this.searchProcessedElement(arr[i]);
            if (!processedPos) {
                arr[i]._render = render;
            } else {
                itemsData[i] = prevViewData[processedPos - 1];
            }
            if (arr[i].ty == 'fl' || arr[i].ty == 'st' || arr[i].ty == 'gf' || arr[i].ty == 'gs') {
                if (!processedPos) {
                    itemsData[i] = this.createStyleElement(arr[i], level);
                } else {
                    itemsData[i].style.closed = false;
                }
                if (arr[i]._render) {
                    container.appendChild(itemsData[i].style.pElem);
                }
                ownStyles.push(itemsData[i].style);
            } else if (arr[i].ty == 'gr') {
                if (!processedPos) {
                    itemsData[i] = this.createGroupElement(arr[i]);
                } else {
                    jLen = itemsData[i].it.length;
                    for (j = 0; j < jLen; j += 1) {
                        itemsData[i].prevViewData[j] = itemsData[i].it[j];
                    }
                }
                this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, itemsData[i].gr, level + 1, ownTransformers, render);
                if (arr[i]._render) {
                    container.appendChild(itemsData[i].gr);
                }
            } else if (arr[i].ty == 'tr') {
                if (!processedPos) {
                    itemsData[i] = this.createTransformElement(arr[i], container);
                }
                currentTransform = itemsData[i].transform;
                ownTransformers.push(currentTransform);
            } else if (arr[i].ty == 'sh' || arr[i].ty == 'rc' || arr[i].ty == 'el' || arr[i].ty == 'sr') {
                if (!processedPos) {
                    itemsData[i] = this.createShapeElement(arr[i], ownTransformers, level);
                }
                this.setElementStyles(itemsData[i]);

            } else if (arr[i].ty == 'tm' || arr[i].ty == 'rd' || arr[i].ty == 'ms') {
                if (!processedPos) {
                    modifier = ShapeModifiers.getModifier(arr[i].ty);
                    modifier.init(this, arr[i]);
                    itemsData[i] = modifier;
                    this.shapeModifiers.push(modifier);
                } else {
                    modifier = itemsData[i];
                    modifier.closed = false;
                }
                ownModifiers.push(modifier);
            } else if (arr[i].ty == 'rp') {
                if (!processedPos) {
                    modifier = ShapeModifiers.getModifier(arr[i].ty);
                    itemsData[i] = modifier;
                    modifier.init(this, arr, i, itemsData);
                    this.shapeModifiers.push(modifier);
                    render = false;
                } else {
                    modifier = itemsData[i];
                    modifier.closed = true;
                }
                ownModifiers.push(modifier);
            }
            this.addProcessedElement(arr[i], i + 1);
        }
        len = ownStyles.length;
        for (i = 0; i < len; i += 1) {
            ownStyles[i].closed = true;
        }
        len = ownModifiers.length;
        for (i = 0; i < len; i += 1) {
            ownModifiers[i].closed = true;
        }
    };

    SVGShapeElement.prototype.renderInnerContent = function() {
        this.renderModifiers();
        var i, len = this.stylesList.length;
        for (i = 0; i < len; i += 1) {
            this.stylesList[i].reset();
        }
        this.renderShape();

        for (i = 0; i < len; i += 1) {
            if (this.stylesList[i]._mdf || this._isFirstFrame) {
                if (this.stylesList[i].msElem) {
                    this.stylesList[i].msElem.setAttribute('d', this.stylesList[i].d);
                    //Adding M0 0 fixes same mask bug on all browsers
                    this.stylesList[i].d = 'M0 0' + this.stylesList[i].d;
                }
                this.stylesList[i].pElem.setAttribute('d', this.stylesList[i].d || 'M0 0');
            }
        }
    };

    SVGShapeElement.prototype.renderShape = function() {
        var i, len = this.animatedContents.length;
        var animatedContent;
        for (i = 0; i < len; i += 1) {
            animatedContent = this.animatedContents[i];
            if (this._isFirstFrame || animatedContent.element._isAnimated) {
                animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
            }
        }
    }

    SVGShapeElement.prototype.destroy = function() {
        this.destroyBaseElement();
        this.shapesData = null;
        this.itemsData = null;
    };

    function SVGTintFilter(filter, filterManager) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'linearRGB');
        feColorMatrix.setAttribute('values', '0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
        feColorMatrix.setAttribute('result', 'f1');
        filter.appendChild(feColorMatrix);
        feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
        feColorMatrix.setAttribute('values', '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
        feColorMatrix.setAttribute('result', 'f2');
        filter.appendChild(feColorMatrix);
        this.matrixFilter = feColorMatrix;
        if (filterManager.effectElements[2].p.v !== 100 || filterManager.effectElements[2].p.k) {
            var feMerge = createNS('feMerge');
            filter.appendChild(feMerge);
            var feMergeNode;
            feMergeNode = createNS('feMergeNode');
            feMergeNode.setAttribute('in', 'SourceGraphic');
            feMerge.appendChild(feMergeNode);
            feMergeNode = createNS('feMergeNode');
            feMergeNode.setAttribute('in', 'f2');
            feMerge.appendChild(feMergeNode);
        }
    }

    SVGTintFilter.prototype.renderFrame = function(forceRender) {
        if (forceRender || this.filterManager._mdf) {
            var colorBlack = this.filterManager.effectElements[0].p.v;
            var colorWhite = this.filterManager.effectElements[1].p.v;
            var opacity = this.filterManager.effectElements[2].p.v / 100;
            this.matrixFilter.setAttribute('values', (colorWhite[0] - colorBlack[0]) + ' 0 0 0 ' + colorBlack[0] + ' ' + (colorWhite[1] - colorBlack[1]) + ' 0 0 0 ' + colorBlack[1] + ' ' + (colorWhite[2] - colorBlack[2]) + ' 0 0 0 ' + colorBlack[2] + ' 0 0 0 ' + opacity + ' 0');
        }
    };

    function SVGFillFilter(filter, filterManager) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
        feColorMatrix.setAttribute('values', '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
        filter.appendChild(feColorMatrix);
        this.matrixFilter = feColorMatrix;
    }
    SVGFillFilter.prototype.renderFrame = function(forceRender) {
        if (forceRender || this.filterManager._mdf) {
            var color = this.filterManager.effectElements[2].p.v;
            var opacity = this.filterManager.effectElements[6].p.v;
            this.matrixFilter.setAttribute('values', '0 0 0 0 ' + color[0] + ' 0 0 0 0 ' + color[1] + ' 0 0 0 0 ' + color[2] + ' 0 0 0 ' + opacity + ' 0');
        }
    };

    function SVGStrokeEffect(elem, filterManager) {
        this.initialized = false;
        this.filterManager = filterManager;
        this.elem = elem;
        this.paths = [];
    }

    SVGStrokeEffect.prototype.initialize = function() {

        var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
        var path, groupPath, i, len;
        if (this.filterManager.effectElements[1].p.v === 1) {
            len = this.elem.maskManager.masksProperties.length;
            i = 0;
        } else {
            i = this.filterManager.effectElements[0].p.v - 1;
            len = i + 1;
        }
        groupPath = createNS('g');
        groupPath.setAttribute('fill', 'none');
        groupPath.setAttribute('stroke-linecap', 'round');
        groupPath.setAttribute('stroke-dashoffset', 1);
        for (i; i < len; i += 1) {
            path = createNS('path');
            groupPath.appendChild(path);
            this.paths.push({
                p: path,
                m: i
            });
        }
        if (this.filterManager.effectElements[10].p.v === 3) {
            var mask = createNS('mask');
            var id = 'stms_' + randomString(10);
            mask.setAttribute('id', id);
            mask.setAttribute('mask-type', 'alpha');
            mask.appendChild(groupPath);
            this.elem.globalData.defs.appendChild(mask);
            var g = createNS('g');
            g.setAttribute('mask', 'url(' + locationHref + '#' + id + ')');
            if (elemChildren[0]) {
                g.appendChild(elemChildren[0]);
            }
            this.elem.layerElement.appendChild(g);
            this.masker = mask;
            groupPath.setAttribute('stroke', '#fff');
        } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
            if (this.filterManager.effectElements[10].p.v === 2) {
                elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
                while (elemChildren.length) {
                    this.elem.layerElement.removeChild(elemChildren[0]);
                }
            }
            this.elem.layerElement.appendChild(groupPath);
            this.elem.layerElement.removeAttribute('mask');
            groupPath.setAttribute('stroke', '#fff');
        }
        this.initialized = true;
        this.pathMasker = groupPath;
    };

    SVGStrokeEffect.prototype.renderFrame = function(forceRender) {
        if (!this.initialized) {
            this.initialize();
        }
        var i, len = this.paths.length;
        var mask, path;
        for (i = 0; i < len; i += 1) {
            if (this.paths[i].m === -1) {
                continue;
            }
            mask = this.elem.maskManager.viewData[this.paths[i].m];
            path = this.paths[i].p;
            if (forceRender || this.filterManager._mdf || mask.prop._mdf) {
                path.setAttribute('d', mask.lastPath);
            }
            if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask.prop._mdf) {
                var dasharrayValue;
                if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {
                    var s = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) / 100;
                    var e = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) / 100;
                    var l = path.getTotalLength();
                    dasharrayValue = '0 0 0 ' + l * s + ' ';
                    var lineLength = l * (e - s);
                    var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v / 100;
                    var units = Math.floor(lineLength / segment);
                    var j;
                    for (j = 0; j < units; j += 1) {
                        dasharrayValue += '1 ' + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v / 100 + ' ';
                    }
                    dasharrayValue += '0 ' + l * 10 + ' 0 0';
                } else {
                    dasharrayValue = '1 ' + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v / 100;
                }
                path.setAttribute('stroke-dasharray', dasharrayValue);
            }
        }
        if (forceRender || this.filterManager.effectElements[4].p._mdf) {
            this.pathMasker.setAttribute('stroke-width', this.filterManager.effectElements[4].p.v * 2);
        }

        if (forceRender || this.filterManager.effectElements[6].p._mdf) {
            this.pathMasker.setAttribute('opacity', this.filterManager.effectElements[6].p.v);
        }
        if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
            if (forceRender || this.filterManager.effectElements[3].p._mdf) {
                var color = this.filterManager.effectElements[3].p.v;
                this.pathMasker.setAttribute('stroke', 'rgb(' + bm_floor(color[0] * 255) + ',' + bm_floor(color[1] * 255) + ',' + bm_floor(color[2] * 255) + ')');
            }
        }
    };

    function SVGTritoneFilter(filter, filterManager) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'linearRGB');
        feColorMatrix.setAttribute('values', '0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
        feColorMatrix.setAttribute('result', 'f1');
        filter.appendChild(feColorMatrix);
        var feComponentTransfer = createNS('feComponentTransfer');
        feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
        filter.appendChild(feComponentTransfer);
        this.matrixFilter = feComponentTransfer;
        var feFuncR = createNS('feFuncR');
        feFuncR.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFuncR);
        this.feFuncR = feFuncR;
        var feFuncG = createNS('feFuncG');
        feFuncG.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFuncG);
        this.feFuncG = feFuncG;
        var feFuncB = createNS('feFuncB');
        feFuncB.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFuncB);
        this.feFuncB = feFuncB;
    }

    SVGTritoneFilter.prototype.renderFrame = function(forceRender) {
        if (forceRender || this.filterManager._mdf) {
            var color1 = this.filterManager.effectElements[0].p.v;
            var color2 = this.filterManager.effectElements[1].p.v;
            var color3 = this.filterManager.effectElements[2].p.v;
            var tableR = color3[0] + ' ' + color2[0] + ' ' + color1[0];
            var tableG = color3[1] + ' ' + color2[1] + ' ' + color1[1];
            var tableB = color3[2] + ' ' + color2[2] + ' ' + color1[2];
            this.feFuncR.setAttribute('tableValues', tableR);
            this.feFuncG.setAttribute('tableValues', tableG);
            this.feFuncB.setAttribute('tableValues', tableB);
            //var opacity = this.filterManager.effectElements[2].p.v/100;
            //this.matrixFilter.setAttribute('values',(colorWhite[0]- colorBlack[0])+' 0 0 0 '+ colorBlack[0] +' '+ (colorWhite[1]- colorBlack[1]) +' 0 0 0 '+ colorBlack[1] +' '+ (colorWhite[2]- colorBlack[2]) +' 0 0 0 '+ colorBlack[2] +' 0 0 0 ' + opacity + ' 0');
        }
    };

    function SVGProLevelsFilter(filter, filterManager) {
        this.filterManager = filterManager;
        var effectElements = this.filterManager.effectElements;
        var feComponentTransfer = createNS('feComponentTransfer');
        var feFuncR, feFuncG, feFuncB;

        if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {
            this.feFuncR = this.createFeFunc('feFuncR', feComponentTransfer);
        }
        if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {
            this.feFuncG = this.createFeFunc('feFuncG', feComponentTransfer);
        }
        if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {
            this.feFuncB = this.createFeFunc('feFuncB', feComponentTransfer);
        }
        if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {
            this.feFuncA = this.createFeFunc('feFuncA', feComponentTransfer);
        }

        if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {
            feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
            filter.appendChild(feComponentTransfer);
            feComponentTransfer = createNS('feComponentTransfer');
        }

        if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {

            feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
            filter.appendChild(feComponentTransfer);
            this.feFuncRComposed = this.createFeFunc('feFuncR', feComponentTransfer);
            this.feFuncGComposed = this.createFeFunc('feFuncG', feComponentTransfer);
            this.feFuncBComposed = this.createFeFunc('feFuncB', feComponentTransfer);
        }
    }

    SVGProLevelsFilter.prototype.createFeFunc = function(type, feComponentTransfer) {
        var feFunc = createNS(type);
        feFunc.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFunc);
        return feFunc;
    };

    SVGProLevelsFilter.prototype.getTableValue = function(inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
        var cnt = 0;
        var segments = 256;
        var perc;
        var min = Math.min(inputBlack, inputWhite);
        var max = Math.max(inputBlack, inputWhite);
        var table = Array.call(null, {
            length: segments
        });
        var colorValue;
        var pos = 0;
        var outputDelta = outputWhite - outputBlack;
        var inputDelta = inputWhite - inputBlack;
        while (cnt <= 256) {
            perc = cnt / 256;
            if (perc <= min) {
                colorValue = inputDelta < 0 ? outputWhite : outputBlack;
            } else if (perc >= max) {
                colorValue = inputDelta < 0 ? outputBlack : outputWhite;
            } else {
                colorValue = (outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma));
            }
            table[pos++] = colorValue;
            cnt += 256 / (segments - 1);
        }
        return table.join(' ');
    };

    SVGProLevelsFilter.prototype.renderFrame = function(forceRender) {
        if (forceRender || this.filterManager._mdf) {
            var val, cnt, perc, bezier;
            var effectElements = this.filterManager.effectElements;
            if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {
                val = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);
                this.feFuncRComposed.setAttribute('tableValues', val);
                this.feFuncGComposed.setAttribute('tableValues', val);
                this.feFuncBComposed.setAttribute('tableValues', val);
            }


            if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {
                val = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);
                this.feFuncR.setAttribute('tableValues', val);
            }

            if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {
                val = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);
                this.feFuncG.setAttribute('tableValues', val);
            }

            if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {
                val = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);
                this.feFuncB.setAttribute('tableValues', val);
            }

            if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {
                val = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);
                this.feFuncA.setAttribute('tableValues', val);
            }

        }
    };

    function SVGDropShadowEffect(filter, filterManager) {
        filter.setAttribute('x', '-100%');
        filter.setAttribute('y', '-100%');
        filter.setAttribute('width', '400%');
        filter.setAttribute('height', '400%');
        this.filterManager = filterManager;

        var feGaussianBlur = createNS('feGaussianBlur');
        feGaussianBlur.setAttribute('in', 'SourceAlpha');
        feGaussianBlur.setAttribute('result', 'drop_shadow_1');
        feGaussianBlur.setAttribute('stdDeviation', '0');
        this.feGaussianBlur = feGaussianBlur;
        filter.appendChild(feGaussianBlur);

        var feOffset = createNS('feOffset');
        feOffset.setAttribute('dx', '25');
        feOffset.setAttribute('dy', '0');
        feOffset.setAttribute('in', 'drop_shadow_1');
        feOffset.setAttribute('result', 'drop_shadow_2');
        this.feOffset = feOffset;
        filter.appendChild(feOffset);
        var feFlood = createNS('feFlood');
        feFlood.setAttribute('flood-color', '#00ff00');
        feFlood.setAttribute('flood-opacity', '1');
        feFlood.setAttribute('result', 'drop_shadow_3');
        this.feFlood = feFlood;
        filter.appendChild(feFlood);

        var feComposite = createNS('feComposite');
        feComposite.setAttribute('in', 'drop_shadow_3');
        feComposite.setAttribute('in2', 'drop_shadow_2');
        feComposite.setAttribute('operator', 'in');
        feComposite.setAttribute('result', 'drop_shadow_4');
        filter.appendChild(feComposite);


        var feMerge = createNS('feMerge');
        filter.appendChild(feMerge);
        var feMergeNode;
        feMergeNode = createNS('feMergeNode');
        feMerge.appendChild(feMergeNode);
        feMergeNode = createNS('feMergeNode');
        feMergeNode.setAttribute('in', 'SourceGraphic');
        this.feMergeNode = feMergeNode;
        this.feMerge = feMerge;
        this.originalNodeAdded = false;
        feMerge.appendChild(feMergeNode);
    }

    SVGDropShadowEffect.prototype.renderFrame = function(forceRender) {
        if (forceRender || this.filterManager._mdf) {
            if (forceRender || this.filterManager.effectElements[4].p._mdf) {
                this.feGaussianBlur.setAttribute('stdDeviation', this.filterManager.effectElements[4].p.v / 4);
            }
            if (forceRender || this.filterManager.effectElements[0].p._mdf) {
                var col = this.filterManager.effectElements[0].p.v;
                this.feFlood.setAttribute('flood-color', rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));
            }
            if (forceRender || this.filterManager.effectElements[1].p._mdf) {
                this.feFlood.setAttribute('flood-opacity', this.filterManager.effectElements[1].p.v / 255);
            }
            if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
                var distance = this.filterManager.effectElements[3].p.v;
                var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
                var x = distance * Math.cos(angle);
                var y = distance * Math.sin(angle);
                this.feOffset.setAttribute('dx', x);
                this.feOffset.setAttribute('dy', y);
            }
            /*if(forceRender || this.filterManager.effectElements[5].p._mdf){
                if(this.filterManager.effectElements[5].p.v === 1 && this.originalNodeAdded) {
                    this.feMerge.removeChild(this.feMergeNode);
                    this.originalNodeAdded = false;
                } else if(this.filterManager.effectElements[5].p.v === 0 && !this.originalNodeAdded) {
                    this.feMerge.appendChild(this.feMergeNode);
                    this.originalNodeAdded = true;
                }
            }*/
        }
    };
    var _svgMatteSymbols = [];
    var _svgMatteMaskCounter = 0;

    function SVGMatte3Effect(filterElem, filterManager, elem) {
        this.initialized = false;
        this.filterManager = filterManager;
        this.filterElem = filterElem;
        this.elem = elem;
        elem.matteElement = createNS('g');
        elem.matteElement.appendChild(elem.layerElement);
        elem.matteElement.appendChild(elem.transformedElement);
        elem.baseElement = elem.matteElement;
    }

    SVGMatte3Effect.prototype.findSymbol = function(mask) {
        var i = 0,
            len = _svgMatteSymbols.length;
        while (i < len) {
            if (_svgMatteSymbols[i] === mask) {
                return _svgMatteSymbols[i];
            }
            i += 1;
        }
        return null;
    };

    SVGMatte3Effect.prototype.replaceInParent = function(mask, symbolId) {
        var parentNode = mask.layerElement.parentNode;
        if (!parentNode) {
            return;
        }
        var children = parentNode.children;
        var i = 0,
            len = children.length;
        while (i < len) {
            if (children[i] === mask.layerElement) {
                break;
            }
            i += 1;
        }
        var nextChild;
        if (i <= len - 2) {
            nextChild = children[i + 1];
        }
        var useElem = createNS('use');
        useElem.setAttribute('href', '#' + symbolId);
        if (nextChild) {
            parentNode.insertBefore(useElem, nextChild);
        } else {
            parentNode.appendChild(useElem);
        }
    };

    SVGMatte3Effect.prototype.setElementAsMask = function(elem, mask) {
        if (!this.findSymbol(mask)) {
            var symbolId = 'matte_' + randomString(5) + '_' + _svgMatteMaskCounter++;
            var masker = createNS('mask');
            masker.setAttribute('id', mask.layerId);
            masker.setAttribute('mask-type', 'alpha');
            _svgMatteSymbols.push(mask);
            var defs = elem.globalData.defs;
            defs.appendChild(masker);
            var symbol = createNS('symbol');
            symbol.setAttribute('id', symbolId);
            this.replaceInParent(mask, symbolId);
            symbol.appendChild(mask.layerElement);
            defs.appendChild(symbol);
            var useElem = createNS('use');
            useElem.setAttribute('href', '#' + symbolId);
            masker.appendChild(useElem);
            mask.data.hd = false;
            mask.show();
        }
        elem.setMatte(mask.layerId);
    };

    SVGMatte3Effect.prototype.initialize = function() {
        var ind = this.filterManager.effectElements[0].p.v;
        var i = 0,
            len = this.elem.comp.elements.length;
        while (i < len) {
            if (this.elem.comp.elements[i].data.ind === ind) {
                this.setElementAsMask(this.elem, this.elem.comp.elements[i]);
            }
            i += 1;
        }
        this.initialized = true;
    };

    SVGMatte3Effect.prototype.renderFrame = function() {
        if (!this.initialized) {
            this.initialize();
        }
    };

    function SVGEffects(elem) {
        var i, len = elem.data.ef ? elem.data.ef.length : 0;
        var filId = randomString(10);
        var fil = filtersFactory.createFilter(filId);
        var count = 0;
        this.filters = [];
        var filterManager;
        for (i = 0; i < len; i += 1) {
            filterManager = null;
            if (elem.data.ef[i].ty === 20) {
                count += 1;
                filterManager = new SVGTintFilter(fil, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 21) {
                count += 1;
                filterManager = new SVGFillFilter(fil, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 22) {
                filterManager = new SVGStrokeEffect(elem, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 23) {
                count += 1;
                filterManager = new SVGTritoneFilter(fil, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 24) {
                count += 1;
                filterManager = new SVGProLevelsFilter(fil, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 25) {
                count += 1;
                filterManager = new SVGDropShadowEffect(fil, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 28) {
                //count += 1;
                filterManager = new SVGMatte3Effect(fil, elem.effectsManager.effectElements[i], elem);
            }
            if (filterManager) {
                this.filters.push(filterManager);
            }
        }
        if (count) {
            elem.globalData.defs.appendChild(fil);
            elem.layerElement.setAttribute('filter', 'url(' + locationHref + '#' + filId + ')');
        }
        if (this.filters.length) {
            elem.addRenderableComponent(this);
        }
    }

    SVGEffects.prototype.renderFrame = function(_isFirstFrame) {
        var i, len = this.filters.length;
        for (i = 0; i < len; i += 1) {
            this.filters[i].renderFrame(_isFirstFrame);
        }
    };
    var animationManager = (function() {
        var moduleOb = {};
        var registeredAnimations = [];
        var initTime = 0;
        var len = 0;
        var playingAnimationsNum = 0;
        var _stopped = true;
        var _isFrozen = false;

        function removeElement(ev) {
            var i = 0;
            var animItem = ev.target;
            while (i < len) {
                if (registeredAnimations[i].animation === animItem) {
                    registeredAnimations.splice(i, 1);
                    i -= 1;
                    len -= 1;
                    if (!animItem.isPaused) {
                        subtractPlayingCount();
                    }
                }
                i += 1;
            }
        }

        function registerAnimation(element, animationData) {
            if (!element) {
                return null;
            }
            var i = 0;
            while (i < len) {
                if (registeredAnimations[i].elem == element && registeredAnimations[i].elem !== null) {
                    return registeredAnimations[i].animation;
                }
                i += 1;
            }
            var animItem = new AnimationItem();
            setupAnimation(animItem, element);
            animItem.setData(element, animationData);
            return animItem;
        }

        function getRegisteredAnimations() {
            var i, len = registeredAnimations.length;
            var animations = [];
            for (i = 0; i < len; i += 1) {
                animations.push(registeredAnimations[i].animation);
            }
            return animations;
        }

        function addPlayingCount() {
            playingAnimationsNum += 1;
            activate();
        }

        function subtractPlayingCount() {
            playingAnimationsNum -= 1;
        }

        function setupAnimation(animItem, element) {
            animItem.addEventListener('destroy', removeElement);
            animItem.addEventListener('_active', addPlayingCount);
            animItem.addEventListener('_idle', subtractPlayingCount);
            registeredAnimations.push({
                elem: element,
                animation: animItem
            });
            len += 1;
        }

        function loadAnimation(params) {
            var animItem = new AnimationItem();
            setupAnimation(animItem, null);
            animItem.setParams(params);
            return animItem;
        }


        function setSpeed(val, animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.setSpeed(val, animation);
            }
        }

        function setDirection(val, animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.setDirection(val, animation);
            }
        }

        function play(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.play(animation);
            }
        }

        function resume(nowTime) {
            var elapsedTime = nowTime - initTime;
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.advanceTime(elapsedTime);
            }
            initTime = nowTime;
            if (playingAnimationsNum && !_isFrozen) {
                window.requestAnimationFrame(resume);
            } else {
                _stopped = true;
            }
        }

        function first(nowTime) {
            initTime = nowTime;
            window.requestAnimationFrame(resume);
        }

        function pause(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.pause(animation);
            }
        }

        function goToAndStop(value, isFrame, animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.goToAndStop(value, isFrame, animation);
            }
        }

        function stop(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.stop(animation);
            }
        }

        function togglePause(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.togglePause(animation);
            }
        }

        function destroy(animation) {
            var i;
            for (i = (len - 1); i >= 0; i -= 1) {
                registeredAnimations[i].animation.destroy(animation);
            }
        }

        function searchAnimations(animationData, standalone, renderer) {
            var animElements = [].concat([].slice.call(document.getElementsByClassName('lottie')), [].slice.call(document.getElementsByClassName('bodymovin')));
            var i, len = animElements.length;
            for (i = 0; i < len; i += 1) {
                if (renderer) {
                    animElements[i].setAttribute('data-bm-type', renderer);
                }
                registerAnimation(animElements[i], animationData);
            }
            if (standalone && len === 0) {
                if (!renderer) {
                    renderer = 'svg';
                }
                var body = document.getElementsByTagName('body')[0];
                body.innerHTML = '';
                var div = createTag('div');
                div.style.width = '100%';
                div.style.height = '100%';
                div.setAttribute('data-bm-type', renderer);
                body.appendChild(div);
                registerAnimation(div, animationData);
            }
        }

        function resize() {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.resize();
            }
        }

        function activate() {
            if (!_isFrozen && playingAnimationsNum) {
                if (_stopped) {
                    window.requestAnimationFrame(first);
                    _stopped = false;
                }
            }
        }

        function freeze() {
            _isFrozen = true;
        }

        function unfreeze() {
            _isFrozen = false;
            activate();
        }

        moduleOb.registerAnimation = registerAnimation;
        moduleOb.loadAnimation = loadAnimation;
        moduleOb.setSpeed = setSpeed;
        moduleOb.setDirection = setDirection;
        moduleOb.play = play;
        moduleOb.pause = pause;
        moduleOb.stop = stop;
        moduleOb.togglePause = togglePause;
        moduleOb.searchAnimations = searchAnimations;
        moduleOb.resize = resize;
        //moduleOb.start = start;
        moduleOb.goToAndStop = goToAndStop;
        moduleOb.destroy = destroy;
        moduleOb.freeze = freeze;
        moduleOb.unfreeze = unfreeze;
        moduleOb.getRegisteredAnimations = getRegisteredAnimations;
        return moduleOb;
    }());

    var AnimationItem = function() {
        this._cbs = [];
        this.name = '';
        this.path = '';
        this.isLoaded = false;
        this.currentFrame = 0;
        this.currentRawFrame = 0;
        this.totalFrames = 0;
        this.frameRate = 0;
        this.frameMult = 0;
        this.playSpeed = 1;
        this.playDirection = 1;
        this.pendingElements = 0;
        this.playCount = 0;
        this.animationData = {};
        this.assets = [];
        this.isPaused = true;
        this.autoplay = false;
        this.loop = true;
        this.renderer = null;
        this.animationID = randomString(10);
        this.assetsPath = '';
        this.timeCompleted = 0;
        this.segmentPos = 0;
        this.subframeEnabled = subframeEnabled;
        this.segments = [];
        this._idle = true;
        this._completedLoop = false;
        this.projectInterface = ProjectInterface();
    };

    extendPrototype([BaseEvent], AnimationItem);

    AnimationItem.prototype.setParams = function(params) {
        if (params.context) {
            this.context = params.context;
        }
        if (params.wrapper || params.container) {
            this.wrapper = params.wrapper || params.container;
        }
        var animType = params.animType ? params.animType : params.renderer ? params.renderer : 'svg';
        switch (animType) {
            case 'canvas':
                this.renderer = new CanvasRenderer(this, params.rendererSettings);
                break;
            case 'svg':
                this.renderer = new SVGRenderer(this, params.rendererSettings);
                break;
            default:
                this.renderer = new HybridRenderer(this, params.rendererSettings);
                break;
        }
        this.renderer.setProjectInterface(this.projectInterface);
        this.animType = animType;

        if (params.loop === '' || params.loop === null) {} else if (params.loop === false) {
            this.loop = false;
        } else if (params.loop === true) {
            this.loop = true;
        } else {
            this.loop = parseInt(params.loop);
        }
        this.autoplay = 'autoplay' in params ? params.autoplay : true;
        this.name = params.name ? params.name : '';
        this.autoloadSegments = params.hasOwnProperty('autoloadSegments') ? params.autoloadSegments : true;
        this.assetsPath = params.assetsPath;
        if (params.animationData) {
            this.configAnimation(params.animationData);
        } else if (params.path) {
            if (params.path.substr(-4) != 'json') {
                if (params.path.substr(-1, 1) != '/') {
                    params.path += '/';
                }
                params.path += 'data.json';
            }

            if (params.path.lastIndexOf('\\') != -1) {
                this.path = params.path.substr(0, params.path.lastIndexOf('\\') + 1);
            } else {
                this.path = params.path.substr(0, params.path.lastIndexOf('/') + 1);
            }
            this.fileName = params.path.substr(params.path.lastIndexOf('/') + 1);
            this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf('.json'));

            assetLoader.load(params.path, this.configAnimation.bind(this), function() {
                this.trigger('data_failed');
            }.bind(this));
        }
    };

    AnimationItem.prototype.setData = function(wrapper, animationData) {
        var params = {
            wrapper: wrapper,
            animationData: animationData ? (typeof animationData === "object") ? animationData : JSON.parse(animationData) : null
        };
        var wrapperAttributes = wrapper.attributes;

        params.path = wrapperAttributes.getNamedItem('data-animation-path') ? wrapperAttributes.getNamedItem('data-animation-path').value : wrapperAttributes.getNamedItem('data-bm-path') ? wrapperAttributes.getNamedItem('data-bm-path').value : wrapperAttributes.getNamedItem('bm-path') ? wrapperAttributes.getNamedItem('bm-path').value : '';
        params.animType = wrapperAttributes.getNamedItem('data-anim-type') ? wrapperAttributes.getNamedItem('data-anim-type').value : wrapperAttributes.getNamedItem('data-bm-type') ? wrapperAttributes.getNamedItem('data-bm-type').value : wrapperAttributes.getNamedItem('bm-type') ? wrapperAttributes.getNamedItem('bm-type').value : wrapperAttributes.getNamedItem('data-bm-renderer') ? wrapperAttributes.getNamedItem('data-bm-renderer').value : wrapperAttributes.getNamedItem('bm-renderer') ? wrapperAttributes.getNamedItem('bm-renderer').value : 'canvas';

        var loop = wrapperAttributes.getNamedItem('data-anim-loop') ? wrapperAttributes.getNamedItem('data-anim-loop').value : wrapperAttributes.getNamedItem('data-bm-loop') ? wrapperAttributes.getNamedItem('data-bm-loop').value : wrapperAttributes.getNamedItem('bm-loop') ? wrapperAttributes.getNamedItem('bm-loop').value : '';
        if (loop === '') {} else if (loop === 'false') {
            params.loop = false;
        } else if (loop === 'true') {
            params.loop = true;
        } else {
            params.loop = parseInt(loop);
        }
        var autoplay = wrapperAttributes.getNamedItem('data-anim-autoplay') ? wrapperAttributes.getNamedItem('data-anim-autoplay').value : wrapperAttributes.getNamedItem('data-bm-autoplay') ? wrapperAttributes.getNamedItem('data-bm-autoplay').value : wrapperAttributes.getNamedItem('bm-autoplay') ? wrapperAttributes.getNamedItem('bm-autoplay').value : true;
        params.autoplay = autoplay !== "false";

        params.name = wrapperAttributes.getNamedItem('data-name') ? wrapperAttributes.getNamedItem('data-name').value : wrapperAttributes.getNamedItem('data-bm-name') ? wrapperAttributes.getNamedItem('data-bm-name').value : wrapperAttributes.getNamedItem('bm-name') ? wrapperAttributes.getNamedItem('bm-name').value : '';
        var prerender = wrapperAttributes.getNamedItem('data-anim-prerender') ? wrapperAttributes.getNamedItem('data-anim-prerender').value : wrapperAttributes.getNamedItem('data-bm-prerender') ? wrapperAttributes.getNamedItem('data-bm-prerender').value : wrapperAttributes.getNamedItem('bm-prerender') ? wrapperAttributes.getNamedItem('bm-prerender').value : '';

        if (prerender === 'false') {
            params.prerender = false;
        }
        this.setParams(params);
    };

    AnimationItem.prototype.includeLayers = function(data) {
        if (data.op > this.animationData.op) {
            this.animationData.op = data.op;
            this.totalFrames = Math.floor(data.op - this.animationData.ip);
        }
        var layers = this.animationData.layers;
        var i, len = layers.length;
        var newLayers = data.layers;
        var j, jLen = newLayers.length;
        for (j = 0; j < jLen; j += 1) {
            i = 0;
            while (i < len) {
                if (layers[i].id == newLayers[j].id) {
                    layers[i] = newLayers[j];
                    break;
                }
                i += 1;
            }
        }
        if (data.chars || data.fonts) {
            this.renderer.globalData.fontManager.addChars(data.chars);
            this.renderer.globalData.fontManager.addFonts(data.fonts, this.renderer.globalData.defs);
        }
        if (data.assets) {
            len = data.assets.length;
            for (i = 0; i < len; i += 1) {
                this.animationData.assets.push(data.assets[i]);
            }
        }
        this.animationData.__complete = false;
        dataManager.completeData(this.animationData, this.renderer.globalData.fontManager);
        this.renderer.includeLayers(data.layers);
        if (expressionsPlugin) {
            expressionsPlugin.initExpressions(this);
        }
        this.loadNextSegment();
    };

    AnimationItem.prototype.loadNextSegment = function() {
        var segments = this.animationData.segments;
        if (!segments || segments.length === 0 || !this.autoloadSegments) {
            this.trigger('data_ready');
            this.timeCompleted = this.totalFrames;
            return;
        }
        var segment = segments.shift();
        this.timeCompleted = segment.time * this.frameRate;
        var segmentPath = this.path + this.fileName + '_' + this.segmentPos + '.json';
        this.segmentPos += 1;
        assetLoader.load(segmentPath, this.includeLayers.bind(this), function() {
            this.trigger('data_failed');
        }.bind(this));
    };

    AnimationItem.prototype.loadSegments = function() {
        var segments = this.animationData.segments;
        if (!segments) {
            this.timeCompleted = this.totalFrames;
        }
        this.loadNextSegment();
    };

    AnimationItem.prototype.preloadImages = function() {
        this.imagePreloader = new ImagePreloader();
        this.imagePreloader.setAssetsPath(this.assetsPath);
        this.imagePreloader.setPath(this.path);
        this.imagePreloader.loadAssets(this.animationData.assets, function(err) {
            if (!err) {
                this.trigger('loaded_images');
            }
        }.bind(this));
    }

    AnimationItem.prototype.configAnimation = function(animData) {
        if (!this.renderer) {
            return;
        }
        this.animationData = animData;
        this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
        this.renderer.configAnimation(animData);
        if (!animData.assets) {
            animData.assets = [];
        }
        this.renderer.searchExtraCompositions(animData.assets);

        this.assets = this.animationData.assets;
        this.frameRate = this.animationData.fr;
        this.firstFrame = Math.round(this.animationData.ip);
        this.frameMult = this.animationData.fr / 1000;
        this.trigger('config_ready');
        this.preloadImages();
        this.loadSegments();
        this.updaFrameModifier();
        this.waitForFontsLoaded();
    };

    AnimationItem.prototype.completeData = function() {
        dataManager.completeData(this.animationData, this.renderer.globalData.fontManager);
        this.checkLoaded();
    }

    AnimationItem.prototype.waitForFontsLoaded = function() {
        if (!this.renderer) {
            return;
        }
        if (this.renderer.globalData.fontManager.loaded) {
            this.completeData();
        } else {
            setTimeout(this.waitForFontsLoaded.bind(this), 20);
        }
    }

    AnimationItem.prototype.addPendingElement = function() {
        this.pendingElements += 1;
    };

    AnimationItem.prototype.elementLoaded = function() {
        this.pendingElements -= 1;
        this.checkLoaded();
    };

    AnimationItem.prototype.checkLoaded = function() {
        if (this.pendingElements === 0) {
            if (expressionsPlugin) {
                expressionsPlugin.initExpressions(this);
            }
            this.renderer.initItems();
            setTimeout(function() {
                this.trigger('DOMLoaded');
            }.bind(this), 0);
            this.isLoaded = true;
            this.gotoFrame();
            if (this.autoplay) {
                this.play();
            }
        }
    };

    AnimationItem.prototype.resize = function() {
        this.renderer.updateContainerSize();
    };

    AnimationItem.prototype.setSubframe = function(flag) {
        this.subframeEnabled = flag ? true : false;
    };

    AnimationItem.prototype.gotoFrame = function() {
        this.currentFrame = this.subframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame;

        if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {
            this.currentFrame = this.timeCompleted;
        }
        this.trigger('enterFrame');
        this.renderFrame();
    };

    AnimationItem.prototype.renderFrame = function() {
        if (this.isLoaded === false) {
            return;
        }
        this.renderer.renderFrame(this.currentFrame + this.firstFrame);
    };

    AnimationItem.prototype.play = function(name) {
        if (name && this.name != name) {
            return;
        }
        if (this.isPaused === true) {
            this.isPaused = false;
            if (this._idle) {
                this._idle = false;
                this.trigger('_active');
            }
        }
    };

    AnimationItem.prototype.pause = function(name) {
        if (name && this.name != name) {
            return;
        }
        if (this.isPaused === false) {
            this.isPaused = true;
            this._idle = true;
            this.trigger('_idle');
        }
    };

    AnimationItem.prototype.togglePause = function(name) {
        if (name && this.name != name) {
            return;
        }
        if (this.isPaused === true) {
            this.play();
        } else {
            this.pause();
        }
    };

    AnimationItem.prototype.stop = function(name) {
        if (name && this.name != name) {
            return;
        }
        this.pause();
        this.playCount = 0;
        this._completedLoop = false;
        this.setCurrentRawFrameValue(0);
    };

    AnimationItem.prototype.goToAndStop = function(value, isFrame, name) {
        if (name && this.name != name) {
            return;
        }
        if (isFrame) {
            this.setCurrentRawFrameValue(value);
        } else {
            this.setCurrentRawFrameValue(value * this.frameModifier);
        }
        this.pause();
    };

    AnimationItem.prototype.goToAndPlay = function(value, isFrame, name) {
        this.goToAndStop(value, isFrame, name);
        this.play();
    };

    AnimationItem.prototype.advanceTime = function(value) {
        if (this.isPaused === true || this.isLoaded === false) {
            return;
        }
        var nextValue = this.currentRawFrame + value * this.frameModifier;
        var _isComplete = false;
        // Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.
        // If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.
        if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
            if (!this.loop || this.playCount === this.loop) {
                if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {
                    _isComplete = true;
                    nextValue = this.totalFrames - 1;
                }
            } else if (nextValue >= this.totalFrames) {
                this.playCount += 1;
                if (!this.checkSegments(nextValue % this.totalFrames)) {
                    this.setCurrentRawFrameValue(nextValue % this.totalFrames);
                    this._completedLoop = true;
                    this.trigger('loopComplete');
                }
            } else {
                this.setCurrentRawFrameValue(nextValue);
            }
        } else if (nextValue < 0) {
            if (!this.checkSegments(nextValue % this.totalFrames)) {
                if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
                    this.setCurrentRawFrameValue(this.totalFrames + (nextValue % this.totalFrames));
                    if (!this._completedLoop) {
                        this._completedLoop = true;
                    } else {
                        this.trigger('loopComplete');
                    }
                } else {
                    _isComplete = true;
                    nextValue = 0;
                }
            }
        } else {
            this.setCurrentRawFrameValue(nextValue);
        }
        if (_isComplete) {
            this.setCurrentRawFrameValue(nextValue);
            this.pause();
            this.trigger('complete');
        }
    };

    AnimationItem.prototype.adjustSegment = function(arr, offset) {
        this.playCount = 0;
        if (arr[1] < arr[0]) {
            if (this.frameModifier > 0) {
                if (this.playSpeed < 0) {
                    this.setSpeed(-this.playSpeed);
                } else {
                    this.setDirection(-1);
                }
            }
            this.timeCompleted = this.totalFrames = arr[0] - arr[1];
            this.firstFrame = arr[1];
            this.setCurrentRawFrameValue(this.totalFrames - 0.001 - offset);
        } else if (arr[1] > arr[0]) {
            if (this.frameModifier < 0) {
                if (this.playSpeed < 0) {
                    this.setSpeed(-this.playSpeed);
                } else {
                    this.setDirection(1);
                }
            }
            this.timeCompleted = this.totalFrames = arr[1] - arr[0];
            this.firstFrame = arr[0];
            this.setCurrentRawFrameValue(0.001 + offset);
        }
        this.trigger('segmentStart');
    };
    AnimationItem.prototype.setSegment = function(init, end) {
        var pendingFrame = -1;
        if (this.isPaused) {
            if (this.currentRawFrame + this.firstFrame < init) {
                pendingFrame = init;
            } else if (this.currentRawFrame + this.firstFrame > end) {
                pendingFrame = end - init;
            }
        }

        this.firstFrame = init;
        this.timeCompleted = this.totalFrames = end - init;
        if (pendingFrame !== -1) {
            this.goToAndStop(pendingFrame, true);
        }
    };

    AnimationItem.prototype.playSegments = function(arr, forceFlag) {
        if (typeof arr[0] === 'object') {
            var i, len = arr.length;
            for (i = 0; i < len; i += 1) {
                this.segments.push(arr[i]);
            }
        } else {
            this.segments.push(arr);
        }
        if (forceFlag) {
            this.checkSegments(0);
        }
        if (this.isPaused) {
            this.play();
        }
    };

    AnimationItem.prototype.resetSegments = function(forceFlag) {
        this.segments.length = 0;
        this.segments.push([this.animationData.ip, this.animationData.op]);
        //this.segments.push([this.animationData.ip*this.frameRate,Math.floor(this.animationData.op - this.animationData.ip+this.animationData.ip*this.frameRate)]);
        if (forceFlag) {
            this.checkSegments(0);
        }
    };
    AnimationItem.prototype.checkSegments = function(offset) {
        if (this.segments.length) {
            this.adjustSegment(this.segments.shift(), offset);
            return true;
        }
        return false;
    };

    AnimationItem.prototype.destroy = function(name) {
        if ((name && this.name != name) || !this.renderer) {
            return;
        }
        this.renderer.destroy();
        this.trigger('destroy');
        this._cbs = null;
        this.onEnterFrame = this.onLoopComplete = this.onComplete = this.onSegmentStart = this.onDestroy = null;
        this.renderer = null;
    };

    AnimationItem.prototype.setCurrentRawFrameValue = function(value) {
        this.currentRawFrame = value;
        this.gotoFrame();
    };

    AnimationItem.prototype.setSpeed = function(val) {
        this.playSpeed = val;
        this.updaFrameModifier();
    };

    AnimationItem.prototype.setDirection = function(val) {
        this.playDirection = val < 0 ? -1 : 1;
        this.updaFrameModifier();
    };

    AnimationItem.prototype.updaFrameModifier = function() {
        this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
    };

    AnimationItem.prototype.getPath = function() {
        return this.path;
    };

    AnimationItem.prototype.getAssetsPath = function(assetData) {
        var path = '';
        if (assetData.e) {
            path = assetData.p;
        } else if (this.assetsPath) {
            var imagePath = assetData.p;
            if (imagePath.indexOf('images/') !== -1) {
                imagePath = imagePath.split('/')[1];
            }
            path = this.assetsPath + imagePath;
        } else {
            path = this.path;
            path += assetData.u ? assetData.u : '';
            path += assetData.p;
        }
        return path;
    };

    AnimationItem.prototype.getAssetData = function(id) {
        var i = 0,
            len = this.assets.length;
        while (i < len) {
            if (id == this.assets[i].id) {
                return this.assets[i];
            }
            i += 1;
        }
    };

    AnimationItem.prototype.hide = function() {
        this.renderer.hide();
    };

    AnimationItem.prototype.show = function() {
        this.renderer.show();
    };

    AnimationItem.prototype.getDuration = function(isFrame) {
        return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
    };

    AnimationItem.prototype.trigger = function(name) {
        if (this._cbs && this._cbs[name]) {
            switch (name) {
                case 'enterFrame':
                    this.triggerEvent(name, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameMult));
                    break;
                case 'loopComplete':
                    this.triggerEvent(name, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
                    break;
                case 'complete':
                    this.triggerEvent(name, new BMCompleteEvent(name, this.frameMult));
                    break;
                case 'segmentStart':
                    this.triggerEvent(name, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
                    break;
                case 'destroy':
                    this.triggerEvent(name, new BMDestroyEvent(name, this));
                    break;
                default:
                    this.triggerEvent(name);
            }
        }
        if (name === 'enterFrame' && this.onEnterFrame) {
            this.onEnterFrame.call(this, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameMult));
        }
        if (name === 'loopComplete' && this.onLoopComplete) {
            this.onLoopComplete.call(this, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
        }
        if (name === 'complete' && this.onComplete) {
            this.onComplete.call(this, new BMCompleteEvent(name, this.frameMult));
        }
        if (name === 'segmentStart' && this.onSegmentStart) {
            this.onSegmentStart.call(this, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
        }
        if (name === 'destroy' && this.onDestroy) {
            this.onDestroy.call(this, new BMDestroyEvent(name, this));
        }
    };

    function EffectsManager() {}

    function CanvasRenderer(animationItem, config) {
        this.animationItem = animationItem;
        this.renderConfig = {
            clearCanvas: (config && config.clearCanvas !== undefined) ? config.clearCanvas : true,
            context: (config && config.context) || null,
            progressiveLoad: (config && config.progressiveLoad) || false,
            preserveAspectRatio: (config && config.preserveAspectRatio) || 'xMidYMid meet',
            imagePreserveAspectRatio: (config && config.imagePreserveAspectRatio) || 'xMidYMid slice',
            className: (config && config.className) || ''
        };
        this.renderConfig.dpr = (config && config.dpr) || 1;
        if (this.animationItem.wrapper) {
            this.renderConfig.dpr = (config && config.dpr) || window.devicePixelRatio || 1;
        }
        this.renderedFrame = -1;
        this.globalData = {
            frameNum: -1,
            _mdf: false,
            renderConfig: this.renderConfig,
            currentGlobalAlpha: -1
        };
        this.contextData = new CVContextData();
        this.elements = [];
        this.pendingElements = [];
        this.transformMat = new Matrix();
        this.completeLayers = false;
    }
    extendPrototype([BaseRenderer], CanvasRenderer);

    CanvasRenderer.prototype.createShape = function(data) {
        return new CVShapeElement(data, this.globalData, this);
    };

    CanvasRenderer.prototype.createText = function(data) {
        return new CVTextElement(data, this.globalData, this);
    };

    CanvasRenderer.prototype.createImage = function(data) {
        return new CVImageElement(data, this.globalData, this);
    };

    CanvasRenderer.prototype.createComp = function(data) {
        return new CVCompElement(data, this.globalData, this);
    };

    CanvasRenderer.prototype.createSolid = function(data) {
        return new CVSolidElement(data, this.globalData, this);
    };

    CanvasRenderer.prototype.createNull = SVGRenderer.prototype.createNull;

    CanvasRenderer.prototype.ctxTransform = function(props) {
        if (props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0) {
            return;
        }
        if (!this.renderConfig.clearCanvas) {
            this.canvasContext.transform(props[0], props[1], props[4], props[5], props[12], props[13]);
            return;
        }
        this.transformMat.cloneFromProps(props);
        var cProps = this.contextData.cTr.props;
        this.transformMat.transform(cProps[0], cProps[1], cProps[2], cProps[3], cProps[4], cProps[5], cProps[6], cProps[7], cProps[8], cProps[9], cProps[10], cProps[11], cProps[12], cProps[13], cProps[14], cProps[15]);
        //this.contextData.cTr.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
        this.contextData.cTr.cloneFromProps(this.transformMat.props);
        var trProps = this.contextData.cTr.props;
        this.canvasContext.setTransform(trProps[0], trProps[1], trProps[4], trProps[5], trProps[12], trProps[13]);
    };

    CanvasRenderer.prototype.ctxOpacity = function(op) {
        /*if(op === 1){
            return;
        }*/
        if (!this.renderConfig.clearCanvas) {
            this.canvasContext.globalAlpha *= op < 0 ? 0 : op;
            this.globalData.currentGlobalAlpha = this.contextData.cO;
            return;
        }
        this.contextData.cO *= op < 0 ? 0 : op;
        if (this.globalData.currentGlobalAlpha !== this.contextData.cO) {
            this.canvasContext.globalAlpha = this.contextData.cO;
            this.globalData.currentGlobalAlpha = this.contextData.cO;
        }
    };

    CanvasRenderer.prototype.reset = function() {
        if (!this.renderConfig.clearCanvas) {
            this.canvasContext.restore();
            return;
        }
        this.contextData.reset();
    };

    CanvasRenderer.prototype.save = function(actionFlag) {
        if (!this.renderConfig.clearCanvas) {
            this.canvasContext.save();
            return;
        }
        if (actionFlag) {
            this.canvasContext.save();
        }
        var props = this.contextData.cTr.props;
        if (this.contextData._length <= this.contextData.cArrPos) {
            this.contextData.duplicate();
        }
        var i, arr = this.contextData.saved[this.contextData.cArrPos];
        for (i = 0; i < 16; i += 1) {
            arr[i] = props[i];
        }
        this.contextData.savedOp[this.contextData.cArrPos] = this.contextData.cO;
        this.contextData.cArrPos += 1;
    };

    CanvasRenderer.prototype.restore = function(actionFlag) {
        if (!this.renderConfig.clearCanvas) {
            this.canvasContext.restore();
            return;
        }
        if (actionFlag) {
            this.canvasContext.restore();
            this.globalData.blendMode = 'source-over';
        }
        this.contextData.cArrPos -= 1;
        var popped = this.contextData.saved[this.contextData.cArrPos];
        var i, arr = this.contextData.cTr.props;
        for (i = 0; i < 16; i += 1) {
            arr[i] = popped[i];
        }
        this.canvasContext.setTransform(popped[0], popped[1], popped[4], popped[5], popped[12], popped[13]);
        popped = this.contextData.savedOp[this.contextData.cArrPos];
        this.contextData.cO = popped;
        if (this.globalData.currentGlobalAlpha !== popped) {
            this.canvasContext.globalAlpha = popped;
            this.globalData.currentGlobalAlpha = popped;
        }
    };

    CanvasRenderer.prototype.configAnimation = function(animData) {
        if (this.animationItem.wrapper) {
            this.animationItem.container = createTag('canvas');
            this.animationItem.container.style.width = '100%';
            this.animationItem.container.style.height = '100%';
            //this.animationItem.container.style.transform = 'translate3d(0,0,0)';
            //this.animationItem.container.style.webkitTransform = 'translate3d(0,0,0)';
            this.animationItem.container.style.transformOrigin = this.animationItem.container.style.mozTransformOrigin = this.animationItem.container.style.webkitTransformOrigin = this.animationItem.container.style['-webkit-transform'] = "0px 0px 0px";
            this.animationItem.wrapper.appendChild(this.animationItem.container);
            this.canvasContext = this.animationItem.container.getContext('2d');
            if (this.renderConfig.className) {
                this.animationItem.container.setAttribute('class', this.renderConfig.className);
            }
        } else {
            this.canvasContext = this.renderConfig.context;
        }
        this.data = animData;
        this.layers = animData.layers;
        this.transformCanvas = {
            w: animData.w,
            h: animData.h,
            sx: 0,
            sy: 0,
            tx: 0,
            ty: 0
        };
        this.setupGlobalData(animData, document.body);
        this.globalData.canvasContext = this.canvasContext;
        this.globalData.renderer = this;
        this.globalData.isDashed = false;
        this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
        this.globalData.transformCanvas = this.transformCanvas;
        this.elements = createSizedArray(animData.layers.length);

        this.updateContainerSize();
    };

    CanvasRenderer.prototype.updateContainerSize = function() {
        this.reset();
        var elementWidth, elementHeight;
        if (this.animationItem.wrapper && this.animationItem.container) {
            elementWidth = this.animationItem.wrapper.offsetWidth;
            elementHeight = this.animationItem.wrapper.offsetHeight;
            this.animationItem.container.setAttribute('width', elementWidth * this.renderConfig.dpr);
            this.animationItem.container.setAttribute('height', elementHeight * this.renderConfig.dpr);
        } else {
            elementWidth = this.canvasContext.canvas.width * this.renderConfig.dpr;
            elementHeight = this.canvasContext.canvas.height * this.renderConfig.dpr;
        }
        var elementRel, animationRel;
        if (this.renderConfig.preserveAspectRatio.indexOf('meet') !== -1 || this.renderConfig.preserveAspectRatio.indexOf('slice') !== -1) {
            var par = this.renderConfig.preserveAspectRatio.split(' ');
            var fillType = par[1] || 'meet';
            var pos = par[0] || 'xMidYMid';
            var xPos = pos.substr(0, 4);
            var yPos = pos.substr(4);
            elementRel = elementWidth / elementHeight;
            animationRel = this.transformCanvas.w / this.transformCanvas.h;
            if (animationRel > elementRel && fillType === 'meet' || animationRel < elementRel && fillType === 'slice') {
                this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
                this.transformCanvas.sy = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
            } else {
                this.transformCanvas.sx = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
                this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
            }

            if (xPos === 'xMid' && ((animationRel < elementRel && fillType === 'meet') || (animationRel > elementRel && fillType === 'slice'))) {
                this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) / 2 * this.renderConfig.dpr;
            } else if (xPos === 'xMax' && ((animationRel < elementRel && fillType === 'meet') || (animationRel > elementRel && fillType === 'slice'))) {
                this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) * this.renderConfig.dpr;
            } else {
                this.transformCanvas.tx = 0;
            }
            if (yPos === 'YMid' && ((animationRel > elementRel && fillType === 'meet') || (animationRel < elementRel && fillType === 'slice'))) {
                this.transformCanvas.ty = ((elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) / 2) * this.renderConfig.dpr;
            } else if (yPos === 'YMax' && ((animationRel > elementRel && fillType === 'meet') || (animationRel < elementRel && fillType === 'slice'))) {
                this.transformCanvas.ty = ((elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w))) * this.renderConfig.dpr;
            } else {
                this.transformCanvas.ty = 0;
            }

        } else if (this.renderConfig.preserveAspectRatio == 'none') {
            this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
            this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
            this.transformCanvas.tx = 0;
            this.transformCanvas.ty = 0;
        } else {
            this.transformCanvas.sx = this.renderConfig.dpr;
            this.transformCanvas.sy = this.renderConfig.dpr;
            this.transformCanvas.tx = 0;
            this.transformCanvas.ty = 0;
        }
        this.transformCanvas.props = [this.transformCanvas.sx, 0, 0, 0, 0, this.transformCanvas.sy, 0, 0, 0, 0, 1, 0, this.transformCanvas.tx, this.transformCanvas.ty, 0, 1];
        /*var i, len = this.elements.length;
        for(i=0;i<len;i+=1){
            if(this.elements[i] && this.elements[i].data.ty === 0){
                this.elements[i].resize(this.globalData.transformCanvas);
            }
        }*/
        this.ctxTransform(this.transformCanvas.props);
        this.canvasContext.beginPath();
        this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
        this.canvasContext.closePath();
        this.canvasContext.clip();
    };

    CanvasRenderer.prototype.destroy = function() {
        if (this.renderConfig.clearCanvas) {
            this.animationItem.wrapper.innerHTML = '';
        }
        var i, len = this.layers ? this.layers.length : 0;
        for (i = len - 1; i >= 0; i -= 1) {
            if (this.elements[i]) {
                this.elements[i].destroy();
            }
        }
        this.elements.length = 0;
        this.globalData.canvasContext = null;
        this.animationItem.container = null;
        this.destroyed = true;
    };

    CanvasRenderer.prototype.renderFrame = function(num) {
        if ((this.renderedFrame == num && this.renderConfig.clearCanvas === true) || this.destroyed || num === -1) {
            return;
        }
        this.renderedFrame = num;
        this.globalData.frameNum = num - this.animationItem._isFirstFrame;
        this.globalData.frameId += 1;
        this.globalData._mdf = !this.renderConfig.clearCanvas;
        this.globalData.projectInterface.currentFrame = num;

        // console.log('--------');
        // console.log('NEW: ',num);
        var i, len = this.layers.length;
        if (!this.completeLayers) {
            this.checkLayers(num);
        }

        for (i = 0; i < len; i++) {
            if (this.completeLayers || this.elements[i]) {
                this.elements[i].prepareFrame(num - this.layers[i].st);
            }
        }
        if (this.globalData._mdf) {
            if (this.renderConfig.clearCanvas === true) {
                this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
            } else {
                this.save();
            }
            for (i = len - 1; i >= 0; i -= 1) {
                if (this.completeLayers || this.elements[i]) {
                    this.elements[i].renderFrame();
                }
            }
            if (this.renderConfig.clearCanvas !== true) {
                this.restore();
            }
        }
    };

    CanvasRenderer.prototype.buildItem = function(pos) {
        var elements = this.elements;
        if (elements[pos] || this.layers[pos].ty == 99) {
            return;
        }
        var element = this.createItem(this.layers[pos], this, this.globalData);
        elements[pos] = element;
        element.initExpressions();
        /*if(this.layers[pos].ty === 0){
            element.resize(this.globalData.transformCanvas);
        }*/
    };

    CanvasRenderer.prototype.checkPendingElements = function() {
        while (this.pendingElements.length) {
            var element = this.pendingElements.pop();
            element.checkParenting();
        }
    };

    CanvasRenderer.prototype.hide = function() {
        this.animationItem.container.style.display = 'none';
    };

    CanvasRenderer.prototype.show = function() {
        this.animationItem.container.style.display = 'block';
    };

    function HybridRenderer(animationItem, config) {
        this.animationItem = animationItem;
        this.layers = null;
        this.renderedFrame = -1;
        this.renderConfig = {
            className: (config && config.className) || '',
            imagePreserveAspectRatio: (config && config.imagePreserveAspectRatio) || 'xMidYMid slice',
            hideOnTransparent: (config && config.hideOnTransparent === false) ? false : true
        };
        this.globalData = {
            _mdf: false,
            frameNum: -1,
            renderConfig: this.renderConfig
        };
        this.pendingElements = [];
        this.elements = [];
        this.threeDElements = [];
        this.destroyed = false;
        this.camera = null;
        this.supports3d = true;

    }

    extendPrototype([BaseRenderer], HybridRenderer);

    HybridRenderer.prototype.buildItem = SVGRenderer.prototype.buildItem;

    HybridRenderer.prototype.checkPendingElements = function() {
        while (this.pendingElements.length) {
            var element = this.pendingElements.pop();
            element.checkParenting();
        }
    };

    HybridRenderer.prototype.appendElementInPos = function(element, pos) {
        var newDOMElement = element.getBaseElement();
        if (!newDOMElement) {
            return;
        }
        var layer = this.layers[pos];
        if (!layer.ddd || !this.supports3d) {
            if (this.threeDElements) {
                this.addTo3dContainer(newDOMElement, pos);
            } else {
                var i = 0;
                var nextDOMElement, nextLayer, tmpDOMElement;
                while (i < pos) {
                    if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement) {
                        nextLayer = this.elements[i];
                        tmpDOMElement = this.layers[i].ddd ? this.getThreeDContainerByPos(i) : nextLayer.getBaseElement();
                        nextDOMElement = tmpDOMElement || nextDOMElement;
                    }
                    i += 1;
                }
                if (nextDOMElement) {
                    if (!layer.ddd || !this.supports3d) {
                        this.layerElement.insertBefore(newDOMElement, nextDOMElement);
                    }
                } else {
                    if (!layer.ddd || !this.supports3d) {
                        this.layerElement.appendChild(newDOMElement);
                    }
                }
            }

        } else {
            this.addTo3dContainer(newDOMElement, pos);
        }
    };

    HybridRenderer.prototype.createShape = function(data) {
        if (!this.supports3d) {
            return new SVGShapeElement(data, this.globalData, this);
        }
        return new HShapeElement(data, this.globalData, this);
    };

    HybridRenderer.prototype.createText = function(data) {
        if (!this.supports3d) {
            return new SVGTextElement(data, this.globalData, this);
        }
        return new HTextElement(data, this.globalData, this);
    };

    HybridRenderer.prototype.createCamera = function(data) {
        this.camera = new HCameraElement(data, this.globalData, this);
        return this.camera;
    };

    HybridRenderer.prototype.createImage = function(data) {
        if (!this.supports3d) {
            return new IImageElement(data, this.globalData, this);
        }
        return new HImageElement(data, this.globalData, this);
    };

    HybridRenderer.prototype.createComp = function(data) {
        if (!this.supports3d) {
            return new SVGCompElement(data, this.globalData, this);
        }
        return new HCompElement(data, this.globalData, this);

    };

    HybridRenderer.prototype.createSolid = function(data) {
        if (!this.supports3d) {
            return new ISolidElement(data, this.globalData, this);
        }
        return new HSolidElement(data, this.globalData, this);
    };

    HybridRenderer.prototype.createNull = SVGRenderer.prototype.createNull;

    HybridRenderer.prototype.getThreeDContainerByPos = function(pos) {
        var i = 0,
            len = this.threeDElements.length;
        while (i < len) {
            if (this.threeDElements[i].startPos <= pos && this.threeDElements[i].endPos >= pos) {
                return this.threeDElements[i].perspectiveElem;
            }
            i += 1;
        }
    };

    HybridRenderer.prototype.createThreeDContainer = function(pos, type) {
        var perspectiveElem = createTag('div');
        styleDiv(perspectiveElem);
        var container = createTag('div');
        styleDiv(container);
        if (type === '3d') {
            perspectiveElem.style.width = this.globalData.compSize.w + 'px';
            perspectiveElem.style.height = this.globalData.compSize.h + 'px';
            perspectiveElem.style.transformOrigin = perspectiveElem.style.mozTransformOrigin = perspectiveElem.style.webkitTransformOrigin = "50% 50%";
            container.style.transform = container.style.webkitTransform = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
        }

        perspectiveElem.appendChild(container);
        //this.resizerElem.appendChild(perspectiveElem);
        var threeDContainerData = {
            container: container,
            perspectiveElem: perspectiveElem,
            startPos: pos,
            endPos: pos,
            type: type
        };
        this.threeDElements.push(threeDContainerData);
        return threeDContainerData;
    };

    HybridRenderer.prototype.build3dContainers = function() {
        var i, len = this.layers.length;
        var lastThreeDContainerData;
        var currentContainer = '';
        for (i = 0; i < len; i += 1) {
            if (this.layers[i].ddd && this.layers[i].ty !== 3) {
                if (currentContainer !== '3d') {
                    currentContainer = '3d';
                    lastThreeDContainerData = this.createThreeDContainer(i, '3d');
                }
                lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);
            } else {
                if (currentContainer !== '2d') {
                    currentContainer = '2d';
                    lastThreeDContainerData = this.createThreeDContainer(i, '2d');
                }
                lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);
            }
        }
        len = this.threeDElements.length;
        for (i = len - 1; i >= 0; i--) {
            this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);
        }
    };

    HybridRenderer.prototype.addTo3dContainer = function(elem, pos) {
        var i = 0,
            len = this.threeDElements.length;
        while (i < len) {
            if (pos <= this.threeDElements[i].endPos) {
                var j = this.threeDElements[i].startPos;
                var nextElement;
                while (j < pos) {
                    if (this.elements[j] && this.elements[j].getBaseElement) {
                        nextElement = this.elements[j].getBaseElement();
                    }
                    j += 1;
                }
                if (nextElement) {
                    this.threeDElements[i].container.insertBefore(elem, nextElement);
                } else {
                    this.threeDElements[i].container.appendChild(elem);
                }
                break;
            }
            i += 1;
        }
    };

    HybridRenderer.prototype.configAnimation = function(animData) {
        var resizerElem = createTag('div');
        var wrapper = this.animationItem.wrapper;
        resizerElem.style.width = animData.w + 'px';
        resizerElem.style.height = animData.h + 'px';
        this.resizerElem = resizerElem;
        styleDiv(resizerElem);
        resizerElem.style.transformStyle = resizerElem.style.webkitTransformStyle = resizerElem.style.mozTransformStyle = "flat";
        if (this.renderConfig.className) {
            resizerElem.setAttribute('class', this.renderConfig.className);
        }
        wrapper.appendChild(resizerElem);

        resizerElem.style.overflow = 'hidden';
        var svg = createNS('svg');
        svg.setAttribute('width', '1');
        svg.setAttribute('height', '1');
        styleDiv(svg);
        this.resizerElem.appendChild(svg);
        var defs = createNS('defs');
        svg.appendChild(defs);
        this.data = animData;
        //Mask animation
        this.setupGlobalData(animData, svg);
        this.globalData.defs = defs;
        this.layers = animData.layers;
        this.layerElement = this.resizerElem;
        this.build3dContainers();
        this.updateContainerSize();
    };

    HybridRenderer.prototype.destroy = function() {
        this.animationItem.wrapper.innerHTML = '';
        this.animationItem.container = null;
        this.globalData.defs = null;
        var i, len = this.layers ? this.layers.length : 0;
        for (i = 0; i < len; i++) {
            this.elements[i].destroy();
        }
        this.elements.length = 0;
        this.destroyed = true;
        this.animationItem = null;
    };

    HybridRenderer.prototype.updateContainerSize = function() {
        var elementWidth = this.animationItem.wrapper.offsetWidth;
        var elementHeight = this.animationItem.wrapper.offsetHeight;
        var elementRel = elementWidth / elementHeight;
        var animationRel = this.globalData.compSize.w / this.globalData.compSize.h;
        var sx, sy, tx, ty;
        if (animationRel > elementRel) {
            sx = elementWidth / (this.globalData.compSize.w);
            sy = elementWidth / (this.globalData.compSize.w);
            tx = 0;
            ty = ((elementHeight - this.globalData.compSize.h * (elementWidth / this.globalData.compSize.w)) / 2);
        } else {
            sx = elementHeight / (this.globalData.compSize.h);
            sy = elementHeight / (this.globalData.compSize.h);
            tx = (elementWidth - this.globalData.compSize.w * (elementHeight / this.globalData.compSize.h)) / 2;
            ty = 0;
        }
        this.resizerElem.style.transform = this.resizerElem.style.webkitTransform = 'matrix3d(' + sx + ',0,0,0,0,' + sy + ',0,0,0,0,1,0,' + tx + ',' + ty + ',0,1)';
    };

    HybridRenderer.prototype.renderFrame = SVGRenderer.prototype.renderFrame;

    HybridRenderer.prototype.hide = function() {
        this.resizerElem.style.display = 'none';
    };

    HybridRenderer.prototype.show = function() {
        this.resizerElem.style.display = 'block';
    };

    HybridRenderer.prototype.initItems = function() {
        this.buildAllItems();
        if (this.camera) {
            this.camera.setup();
        } else {
            var cWidth = this.globalData.compSize.w;
            var cHeight = this.globalData.compSize.h;
            var i, len = this.threeDElements.length;
            for (i = 0; i < len; i += 1) {
                this.threeDElements[i].perspectiveElem.style.perspective = this.threeDElements[i].perspectiveElem.style.webkitPerspective = Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + 'px';
            }
        }
    };

    HybridRenderer.prototype.searchExtraCompositions = function(assets) {
        var i, len = assets.length;
        var floatingContainer = createTag('div');
        for (i = 0; i < len; i += 1) {
            if (assets[i].xt) {
                var comp = this.createComp(assets[i], floatingContainer, this.globalData.comp, null);
                comp.initExpressions();
                this.globalData.projectInterface.registerComposition(comp);
            }
        }
    };

    function CVShapeData(element, data) {
        this.nodes = [];
        this.trNodes = [];
        this.tr = [0, 0, 0, 0, 0, 0];
        var ty = 4;
        if (data.ty == 'rc') {
            ty = 5;
        } else if (data.ty == 'el') {
            ty = 6;
        } else if (data.ty == 'sr') {
            ty = 7;
        }
        this.sh = ShapePropertyFactory.getShapeProp(element, data, ty, element);
        this.st = false;
        this.fl = false;
    }

    CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;

    function CVContextData() {
        this.saved = [];
        this.cArrPos = 0;
        this.cTr = new Matrix();
        this.cO = 1;
        var i, len = 15;
        this.savedOp = createTypedArray('float32', len);
        for (i = 0; i < len; i += 1) {
            this.saved[i] = createTypedArray('float32', 16);
        }
        this._length = len;
    }

    CVContextData.prototype.duplicate = function() {
        var newLength = this._length * 2;
        var currentSavedOp = this.savedOp;
        this.savedOp = createTypedArray('float32', newLength);
        this.savedOp.set(currentSavedOp);
        var i = 0;
        for (i = this._length; i < newLength; i += 1) {
            this.saved[i] = createTypedArray('float32', 16);
        }
        this._length = newLength;
    };

    CVContextData.prototype.reset = function() {
        this.cArrPos = 0;
        this.cTr.reset();
        this.cO = 1;
    };

    function CVBaseElement() {}

    CVBaseElement.prototype = {
        createElements: function() {},
        initRendererElement: function() {},
        createContainerElements: function() {
            this.canvasContext = this.globalData.canvasContext;
            this.renderableEffectsManager = new CVEffects(this);
        },
        createContent: function() {},
        setBlendMode: function() {
            var globalData = this.globalData;
            if (globalData.blendMode !== this.data.bm) {
                globalData.blendMode = this.data.bm;
                var blendModeValue = this.getBlendMode();
                globalData.canvasContext.globalCompositeOperation = blendModeValue;
            }
        },
        addMasks: function() {
            this.maskManager = new CVMaskElement(this.data, this);
        },
        hideElement: function() {
            if (!this.hidden && (!this.isInRange || this.isTransparent)) {
                this.hidden = true;
            }
        },
        showElement: function() {
            if (this.isInRange && !this.isTransparent) {
                this.hidden = false;
                this._isFirstFrame = true;
                this.maskManager._isFirstFrame = true;
            }
        },
        renderFrame: function() {
            if (this.hidden || this.data.hd) {
                return;
            }
            this.renderTransform();
            this.renderRenderable();
            this.setBlendMode();
            this.globalData.renderer.save();
            this.globalData.renderer.ctxTransform(this.finalTransform.mat.props);
            this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v);
            this.renderInnerContent();
            this.globalData.renderer.restore();
            if (this.maskManager.hasMasks) {
                this.globalData.renderer.restore(true);
            }
            if (this._isFirstFrame) {
                this._isFirstFrame = false;
            }
        },
        destroy: function() {
            this.canvasContext = null;
            this.data = null;
            this.globalData = null;
            this.maskManager.destroy();
        },
        mHelper: new Matrix()
    };
    CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
    CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;

    function CVImageElement(data, globalData, comp) {
        this.failed = false;
        this.img = new Image();
        this.img.crossOrigin = 'anonymous';
        this.assetData = globalData.getAssetData(data.refId);
        this.initElement(data, globalData, comp);
        this.globalData.addPendingElement();
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);

    CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
    CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;

    CVImageElement.prototype.imageLoaded = function() {
        this.globalData.elementLoaded();
        if (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height) {
            var canvas = createTag('canvas');
            canvas.width = this.assetData.w;
            canvas.height = this.assetData.h;
            var ctx = canvas.getContext('2d');

            var imgW = this.img.width;
            var imgH = this.img.height;
            var imgRel = imgW / imgH;
            var canvasRel = this.assetData.w / this.assetData.h;
            var widthCrop, heightCrop;
            var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;
            if ((imgRel > canvasRel && par === 'xMidYMid slice') || (imgRel < canvasRel && par !== 'xMidYMid slice')) {
                heightCrop = imgH;
                widthCrop = heightCrop * canvasRel;
            } else {
                widthCrop = imgW;
                heightCrop = widthCrop / canvasRel;
            }
            ctx.drawImage(this.img, (imgW - widthCrop) / 2, (imgH - heightCrop) / 2, widthCrop, heightCrop, 0, 0, this.assetData.w, this.assetData.h);
            this.img = canvas;
        }
    };

    CVImageElement.prototype.imageFailed = function() {
        this.failed = true;
        this.globalData.elementLoaded();
    };

    CVImageElement.prototype.createContent = function() {
        var img = this.img;
        img.addEventListener('load', this.imageLoaded.bind(this), false);
        img.addEventListener('error', this.imageFailed.bind(this), false);
        var assetPath = this.globalData.getAssetsPath(this.assetData);
        img.src = assetPath;

    };

    CVImageElement.prototype.renderInnerContent = function(parentMatrix) {
        if (this.failed) {
            return;
        }
        this.canvasContext.drawImage(this.img, 0, 0);
    };

    CVImageElement.prototype.destroy = function() {
        this.img = null;
    };

    function CVCompElement(data, globalData, comp) {
        this.completeLayers = false;
        this.layers = data.layers;
        this.pendingElements = [];
        this.elements = createSizedArray(this.layers.length);
        this.initElement(data, globalData, comp);
        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
            _placeholder: true
        };
    }

    extendPrototype([CanvasRenderer, ICompElement, CVBaseElement], CVCompElement);

    CVCompElement.prototype.renderInnerContent = function() {
        var i, len = this.layers.length;
        for (i = len - 1; i >= 0; i -= 1) {
            if (this.completeLayers || this.elements[i]) {
                this.elements[i].renderFrame();
            }
        }
    };

    CVCompElement.prototype.destroy = function() {
        var i, len = this.layers.length;
        for (i = len - 1; i >= 0; i -= 1) {
            if (this.elements[i]) {
                this.elements[i].destroy();
            }
        }
        this.layers = null;
        this.elements = null;
    };

    function CVMaskElement(data, element) {
        this.data = data;
        this.element = element;
        this.masksProperties = this.data.masksProperties || [];
        this.viewData = createSizedArray(this.masksProperties.length);
        var i, len = this.masksProperties.length,
            hasMasks = false;
        for (i = 0; i < len; i++) {
            if (this.masksProperties[i].mode !== 'n') {
                hasMasks = true;
            }
            this.viewData[i] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[i], 3);
        }
        this.hasMasks = hasMasks;
        if (hasMasks) {
            this.element.addRenderableComponent(this);
        }
    }

    CVMaskElement.prototype.renderFrame = function() {
        if (!this.hasMasks) {
            return;
        }
        var transform = this.element.finalTransform.mat;
        var ctx = this.element.canvasContext;
        var i, len = this.masksProperties.length;
        var pt, pts, data;
        ctx.beginPath();
        for (i = 0; i < len; i++) {
            if (this.masksProperties[i].mode !== 'n') {
                if (this.masksProperties[i].inv) {
                    ctx.moveTo(0, 0);
                    ctx.lineTo(this.element.globalData.compSize.w, 0);
                    ctx.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);
                    ctx.lineTo(0, this.element.globalData.compSize.h);
                    ctx.lineTo(0, 0);
                }
                data = this.viewData[i].v;
                pt = transform.applyToPointArray(data.v[0][0], data.v[0][1], 0);
                ctx.moveTo(pt[0], pt[1]);
                var j, jLen = data._length;
                for (j = 1; j < jLen; j++) {
                    pts = transform.applyToTriplePoints(data.o[j - 1], data.i[j], data.v[j]);
                    ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
                }
                pts = transform.applyToTriplePoints(data.o[j - 1], data.i[0], data.v[0]);
                ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
            }
        }
        this.element.globalData.renderer.save(true);
        ctx.clip();
    };

    CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;

    CVMaskElement.prototype.destroy = function() {
        this.element = null;
    };

    function CVShapeElement(data, globalData, comp) {
        this.shapes = [];
        this.shapesData = data.shapes;
        this.stylesList = [];
        this.itemsData = [];
        this.prevViewData = [];
        this.shapeModifiers = [];
        this.processedElements = [];
        this.initElement(data, globalData, comp);
    }

    extendPrototype([BaseElement, TransformElement, CVBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableElement], CVShapeElement);

    CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;

    CVShapeElement.prototype.transformHelper = {
        opacity: 1,
        mat: new Matrix(),
        _matMdf: false,
        _opMdf: false
    };

    CVShapeElement.prototype.dashResetter = [];

    CVShapeElement.prototype.createContent = function() {
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true);
    };

    CVShapeElement.prototype.createStyleElement = function(data) {
        var styleElem = {
            data: data,
            type: data.ty,
            elements: []
        };
        var elementData = {};
        if (data.ty == 'fl' || data.ty == 'st') {
            elementData.c = PropertyFactory.getProp(this, data.c, 1, 255, this);
            if (!elementData.c.k) {
                styleElem.co = 'rgb(' + bm_floor(elementData.c.v[0]) + ',' + bm_floor(elementData.c.v[1]) + ',' + bm_floor(elementData.c.v[2]) + ')';
            }
        } else if (data.ty === 'gf' || data.ty === 'gs') {
            elementData.s = PropertyFactory.getProp(this, data.s, 1, null, this);
            elementData.e = PropertyFactory.getProp(this, data.e, 1, null, this);
            elementData.h = PropertyFactory.getProp(this, data.h || {
                k: 0
            }, 0, 0.01, this);
            elementData.a = PropertyFactory.getProp(this, data.a || {
                k: 0
            }, 0, degToRads, this);
            elementData.g = new GradientProperty(this, data.g);
        }
        elementData.o = PropertyFactory.getProp(this, data.o, 0, 0.01, this);
        if (data.ty == 'st' || data.ty == 'gs') {
            styleElem.lc = this.lcEnum[data.lc] || 'round';
            styleElem.lj = this.ljEnum[data.lj] || 'round';
            if (data.lj == 1) {
                styleElem.ml = data.ml;
            }
            elementData.w = PropertyFactory.getProp(this, data.w, 0, null, this);
            if (!elementData.w.k) {
                styleElem.wi = elementData.w.v;
            }
            if (data.d) {
                var d = new DashProperty(this, data.d, 'canvas');
                elementData.d = d;
                if (!elementData.d.k) {
                    styleElem.da = elementData.d.dashArray;
                    styleElem.do = elementData.d.dashoffset[0];
                }
            }
        } else {
            styleElem.r = data.r === 2 ? 'evenodd' : 'nonzero';
        }
        this.stylesList.push(styleElem);
        elementData.style = styleElem;
        return elementData;
    };

    CVShapeElement.prototype.createGroupElement = function(data) {
        var elementData = {
            it: [],
            prevViewData: []
        };
        return elementData;
    };

    CVShapeElement.prototype.createTransformElement = function(data) {
        var elementData = {
            transform: {
                mat: new Matrix(),
                opacity: 1,
                _matMdf: false,
                _opMdf: false,
                op: PropertyFactory.getProp(this, data.o, 0, 0.01, this),
                mProps: TransformPropertyFactory.getTransformProperty(this, data, this)
            },
            elements: []
        };
        return elementData;
    };

    CVShapeElement.prototype.createShapeElement = function(data) {
        var elementData = new CVShapeData(this, data);

        this.shapes.push(elementData);
        this.addShapeToModifiers(elementData);
        var j, jLen = this.stylesList.length;
        var hasStrokes = false,
            hasFills = false;
        for (j = 0; j < jLen; j += 1) {
            if (!this.stylesList[j].closed) {
                this.stylesList[j].elements.push(elementData);
                if (this.stylesList[j].type === 'st') {
                    hasStrokes = true;
                } else {
                    hasFills = true;
                }
            }
        }
        elementData.st = hasStrokes;
        elementData.fl = hasFills;
        return elementData;
    };

    CVShapeElement.prototype.reloadShapes = function() {
        this._isFirstFrame = true;
        var i, len = this.itemsData.length;
        for (i = 0; i < len; i += 1) {
            this.prevViewData[i] = this.itemsData[i];
        }
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true);
        len = this.dynamicProperties.length;
        for (i = 0; i < len; i += 1) {
            this.dynamicProperties[i].getValue();
        }
        this.renderModifiers();
    };

    CVShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, render) {
        var i, len = arr.length - 1;
        var j, jLen;
        var ownArrays = [],
            ownModifiers = [],
            processedPos, modifier;
        for (i = len; i >= 0; i -= 1) {
            processedPos = this.searchProcessedElement(arr[i]);
            if (!processedPos) {
                arr[i]._render = render;
            } else {
                itemsData[i] = prevViewData[processedPos - 1];
            }
            if (arr[i].ty == 'fl' || arr[i].ty == 'st' || arr[i].ty == 'gf' || arr[i].ty == 'gs') {
                if (!processedPos) {
                    itemsData[i] = this.createStyleElement(arr[i]);
                } else {
                    itemsData[i].style.closed = false;
                }

                ownArrays.push(itemsData[i].style);
            } else if (arr[i].ty == 'gr') {
                if (!processedPos) {
                    itemsData[i] = this.createGroupElement(arr[i]);
                } else {
                    jLen = itemsData[i].it.length;
                    for (j = 0; j < jLen; j += 1) {
                        itemsData[i].prevViewData[j] = itemsData[i].it[j];
                    }
                }
                this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, render);
            } else if (arr[i].ty == 'tr') {
                if (!processedPos) {
                    itemsData[i] = this.createTransformElement(arr[i]);
                }
            } else if (arr[i].ty == 'sh' || arr[i].ty == 'rc' || arr[i].ty == 'el' || arr[i].ty == 'sr') {
                if (!processedPos) {
                    itemsData[i] = this.createShapeElement(arr[i]);
                }

            } else if (arr[i].ty == 'tm' || arr[i].ty == 'rd') {
                if (!processedPos) {
                    modifier = ShapeModifiers.getModifier(arr[i].ty);
                    modifier.init(this, arr[i]);
                    itemsData[i] = modifier;
                    this.shapeModifiers.push(modifier);
                } else {
                    modifier = itemsData[i];
                    modifier.closed = false;
                }
                ownModifiers.push(modifier);
            } else if (arr[i].ty == 'rp') {
                if (!processedPos) {
                    modifier = ShapeModifiers.getModifier(arr[i].ty);
                    itemsData[i] = modifier;
                    modifier.init(this, arr, i, itemsData);
                    this.shapeModifiers.push(modifier);
                    render = false;
                } else {
                    modifier = itemsData[i];
                    modifier.closed = true;
                }
                ownModifiers.push(modifier);
            }
            this.addProcessedElement(arr[i], i + 1);
        }
        len = ownArrays.length;
        for (i = 0; i < len; i += 1) {
            ownArrays[i].closed = true;
        }
        len = ownModifiers.length;
        for (i = 0; i < len; i += 1) {
            ownModifiers[i].closed = true;
        }
    };

    CVShapeElement.prototype.renderInnerContent = function() {

        this.transformHelper.mat.reset();
        this.transformHelper.opacity = 1;
        this.transformHelper._matMdf = false;
        this.transformHelper._opMdf = false;
        this.renderModifiers();
        this.renderShape(this.transformHelper, this.shapesData, this.itemsData, true);
    };

    CVShapeElement.prototype.renderShapeTransform = function(parentTransform, groupTransform) {
        var props, groupMatrix;
        if (parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
            groupTransform.opacity = parentTransform.opacity;
            groupTransform.opacity *= groupTransform.op.v;
            groupTransform._opMdf = true;
        }
        if (parentTransform._matMdf || groupTransform.mProps._mdf || this._isFirstFrame) {
            groupMatrix = groupTransform.mat;
            groupMatrix.cloneFromProps(groupTransform.mProps.v.props);
            groupTransform._matMdf = true;
            props = parentTransform.mat.props;
            groupMatrix.transform(props[0], props[1], props[2], props[3], props[4], props[5], props[6], props[7], props[8], props[9], props[10], props[11], props[12], props[13], props[14], props[15]);
        }
    };

    CVShapeElement.prototype.drawLayer = function() {
        var i, len = this.stylesList.length;
        var j, jLen, k, kLen, elems, nodes, renderer = this.globalData.renderer,
            ctx = this.globalData.canvasContext,
            type, currentStyle;
        for (i = 0; i < len; i += 1) {
            currentStyle = this.stylesList[i];
            type = currentStyle.type;
            if (((type === 'st' || type === 'gs') && currentStyle.wi === 0) || !currentStyle.data._render || currentStyle.coOp === 0) {
                continue;
            }
            renderer.save();
            elems = currentStyle.elements;
            if (type === 'st' || type === 'gs') {
                ctx.strokeStyle = type === 'st' ? currentStyle.co : currentStyle.grd;
                ctx.lineWidth = currentStyle.wi;
                ctx.lineCap = currentStyle.lc;
                ctx.lineJoin = currentStyle.lj;
                ctx.miterLimit = currentStyle.ml || 0;
            } else {
                ctx.fillStyle = type === 'fl' ? currentStyle.co : currentStyle.grd;
            }
            renderer.ctxOpacity(currentStyle.coOp);
            if (this.globalData.currentGlobalAlpha !== 0) {
                if (type !== 'st' && type !== 'gs') {
                    ctx.beginPath();
                }
                jLen = elems.length;
                for (j = 0; j < jLen; j += 1) {
                    if (type === 'st' || type === 'gs') {
                        ctx.beginPath();
                        if (currentStyle.da) {
                            ctx.setLineDash(currentStyle.da);
                            ctx.lineDashOffset = currentStyle.do;
                            this.globalData.isDashed = true;
                        } else if (this.globalData.isDashed) {
                            ctx.setLineDash(this.dashResetter);
                            this.globalData.isDashed = false;
                        }
                    }
                    nodes = elems[j].trNodes;
                    kLen = nodes.length;

                    for (k = 0; k < kLen; k += 1) {
                        if (nodes[k].t == 'm') {
                            ctx.moveTo(nodes[k].p[0], nodes[k].p[1]);
                        } else if (nodes[k].t == 'c') {
                            ctx.bezierCurveTo(nodes[k].pts[0], nodes[k].pts[1], nodes[k].pts[2], nodes[k].pts[3], nodes[k].pts[4], nodes[k].pts[5]);
                        } else {
                            ctx.closePath();
                        }
                    }
                    if (type === 'st' || type === 'gs') {
                        ctx.stroke();
                    }
                }
                if (type !== 'st' && type !== 'gs') {
                    ctx.fill(currentStyle.r);
                }

            }
            renderer.restore();
        }
    };

    CVShapeElement.prototype.renderShape = function(parentTransform, items, data, isMain) {
        var i, len = items.length - 1;
        var groupTransform;
        groupTransform = parentTransform;
        for (i = len; i >= 0; i -= 1) {
            if (items[i].ty == 'tr') {
                groupTransform = data[i].transform;
                this.renderShapeTransform(parentTransform, groupTransform);
            } else if (items[i].ty == 'sh' || items[i].ty == 'el' || items[i].ty == 'rc' || items[i].ty == 'sr') {
                this.renderPath(items[i], data[i], groupTransform);
            } else if (items[i].ty == 'fl') {
                this.renderFill(items[i], data[i], groupTransform);
            } else if (items[i].ty == 'st') {
                this.renderStroke(items[i], data[i], groupTransform);
            } else if (items[i].ty == 'gf' || items[i].ty == 'gs') {
                this.renderGradientFill(items[i], data[i], groupTransform);
            } else if (items[i].ty == 'gr') {
                this.renderShape(groupTransform, items[i].it, data[i].it);
            } else if (items[i].ty == 'tm') {
                //
            }
        }
        if (isMain) {
            this.drawLayer();
        }

    };
    CVShapeElement.prototype.renderPath = function(pathData, itemData, groupTransform) {
        var len, i, j, jLen;
        var redraw = groupTransform._matMdf || itemData.sh._mdf || this._isFirstFrame;
        if (redraw) {
            var paths = itemData.sh.paths,
                groupTransformMat = groupTransform.mat;
            jLen = pathData._render === false ? 0 : paths._length;
            var pathStringTransformed = itemData.trNodes;
            pathStringTransformed.length = 0;
            for (j = 0; j < jLen; j += 1) {
                var pathNodes = paths.shapes[j];
                if (pathNodes && pathNodes.v) {
                    len = pathNodes._length;
                    for (i = 1; i < len; i += 1) {
                        if (i == 1) {
                            pathStringTransformed.push({
                                t: 'm',
                                p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                            });
                        }
                        pathStringTransformed.push({
                            t: 'c',
                            pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[i], pathNodes.v[i])
                        });
                    }
                    if (len == 1) {
                        pathStringTransformed.push({
                            t: 'm',
                            p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                        });
                    }
                    if (pathNodes.c && len) {
                        pathStringTransformed.push({
                            t: 'c',
                            pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[0], pathNodes.v[0])
                        });
                        pathStringTransformed.push({
                            t: 'z'
                        });
                    }
                    itemData.lStr = pathStringTransformed;
                }

            }

            if (itemData.st) {
                for (i = 0; i < 16; i += 1) {
                    itemData.tr[i] = groupTransform.mat.props[i];
                }
            }
            itemData.trNodes = pathStringTransformed;

        }
    };

    CVShapeElement.prototype.renderFill = function(styleData, itemData, groupTransform) {
        var styleElem = itemData.style;

        if (itemData.c._mdf || this._isFirstFrame) {
            styleElem.co = 'rgb(' + bm_floor(itemData.c.v[0]) + ',' + bm_floor(itemData.c.v[1]) + ',' + bm_floor(itemData.c.v[2]) + ')';
        }
        if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
            styleElem.coOp = itemData.o.v * groupTransform.opacity;
        }
    };

    CVShapeElement.prototype.renderGradientFill = function(styleData, itemData, groupTransform) {
        var styleElem = itemData.style;
        if (!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || (styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf))) {
            var ctx = this.globalData.canvasContext;
            var grd;
            var pt1 = itemData.s.v,
                pt2 = itemData.e.v;
            pt1 = groupTransform.mat.applyToPointArray(pt1[0], pt1[1], 0);
            pt2 = groupTransform.mat.applyToPointArray(pt2[0], pt2[1], 0);
            if (styleData.t === 1) {
                grd = ctx.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
            } else {
                var rad;
                rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);

                var percent = itemData.h.v >= 1 ? 0.99 : itemData.h.v <= -1 ? -0.99 : itemData.h.v;
                var dist = rad * percent;
                var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
                var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
                var grd = ctx.createRadialGradient(x, y, 0, pt1[0], pt1[1], rad);
            }

            var i, len = styleData.g.p;
            var cValues = itemData.g.c;
            var opacity = 1;

            for (i = 0; i < len; i += 1) {
                if (itemData.g._hasOpacity && itemData.g._collapsable) {
                    opacity = itemData.g.o[i * 2 + 1];
                }
                grd.addColorStop(cValues[i * 4] / 100, 'rgba(' + cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ',' + cValues[i * 4 + 3] + ',' + opacity + ')');
            }
            styleElem.grd = grd;
        }
        styleElem.coOp = itemData.o.v * groupTransform.opacity;

    };

    CVShapeElement.prototype.renderStroke = function(styleData, itemData, groupTransform) {
        var styleElem = itemData.style;
        var d = itemData.d;
        if (d && (d._mdf || this._isFirstFrame)) {
            styleElem.da = d.dashArray;
            styleElem.do = d.dashoffset[0];
        }
        if (itemData.c._mdf || this._isFirstFrame) {
            styleElem.co = 'rgb(' + bm_floor(itemData.c.v[0]) + ',' + bm_floor(itemData.c.v[1]) + ',' + bm_floor(itemData.c.v[2]) + ')';
        }
        if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
            styleElem.coOp = itemData.o.v * groupTransform.opacity;
        }
        if (itemData.w._mdf || this._isFirstFrame) {
            styleElem.wi = itemData.w.v;
        }
    };


    CVShapeElement.prototype.destroy = function() {
        this.shapesData = null;
        this.globalData = null;
        this.canvasContext = null;
        this.stylesList.length = 0;
        this.itemsData.length = 0;
    };


    function CVSolidElement(data, globalData, comp) {
        this.initElement(data, globalData, comp);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);

    CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
    CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;

    CVSolidElement.prototype.renderInnerContent = function() {
        var ctx = this.canvasContext;
        ctx.fillStyle = this.data.sc;
        ctx.fillRect(0, 0, this.data.sw, this.data.sh);
        //
    };

    function CVTextElement(data, globalData, comp) {
        this.textSpans = [];
        this.yOffset = 0;
        this.fillColorAnim = false;
        this.strokeColorAnim = false;
        this.strokeWidthAnim = false;
        this.stroke = false;
        this.fill = false;
        this.justifyOffset = 0;
        this.currentRender = null;
        this.renderType = 'canvas';
        this.values = {
            fill: 'rgba(0,0,0,0)',
            stroke: 'rgba(0,0,0,0)',
            sWidth: 0,
            fValue: ''
        };
        this.initElement(data, globalData, comp);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement, ITextElement], CVTextElement);

    CVTextElement.prototype.tHelper = createTag('canvas').getContext('2d');

    CVTextElement.prototype.buildNewText = function() {
        var documentData = this.textProperty.currentData;
        this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);

        var hasFill = false;
        if (documentData.fc) {
            hasFill = true;
            this.values.fill = this.buildColor(documentData.fc);
        } else {
            this.values.fill = 'rgba(0,0,0,0)';
        }
        this.fill = hasFill;
        var hasStroke = false;
        if (documentData.sc) {
            hasStroke = true;
            this.values.stroke = this.buildColor(documentData.sc);
            this.values.sWidth = documentData.sw;
        }
        var fontData = this.globalData.fontManager.getFontByName(documentData.f);
        var i, len;
        var letters = documentData.l;
        var matrixHelper = this.mHelper;
        this.stroke = hasStroke;
        this.values.fValue = documentData.finalSize + 'px ' + this.globalData.fontManager.getFontByName(documentData.f).fFamily;
        len = documentData.finalText.length;
        //this.tHelper.font = this.values.fValue;
        var charData, shapeData, k, kLen, shapes, j, jLen, pathNodes, commands, pathArr, singleShape = this.data.singleShape;
        var trackingOffset = documentData.tr / 1000 * documentData.finalSize;
        var xPos = 0,
            yPos = 0,
            firstLine = true;
        var cnt = 0;
        for (i = 0; i < len; i += 1) {
            charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
            shapeData = charData && charData.data || {};
            matrixHelper.reset();
            if (singleShape && letters[i].n) {
                xPos = -trackingOffset;
                yPos += documentData.yOffset;
                yPos += firstLine ? 1 : 0;
                firstLine = false;
            }

            shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
            jLen = shapes.length;
            matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
            if (singleShape) {
                this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
            }
            commands = createSizedArray(jLen);
            for (j = 0; j < jLen; j += 1) {
                kLen = shapes[j].ks.k.i.length;
                pathNodes = shapes[j].ks.k;
                pathArr = [];
                for (k = 1; k < kLen; k += 1) {
                    if (k == 1) {
                        pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
                    }
                    pathArr.push(matrixHelper.applyToX(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToX(pathNodes.i[k][0], pathNodes.i[k][1], 0), matrixHelper.applyToY(pathNodes.i[k][0], pathNodes.i[k][1], 0), matrixHelper.applyToX(pathNodes.v[k][0], pathNodes.v[k][1], 0), matrixHelper.applyToY(pathNodes.v[k][0], pathNodes.v[k][1], 0));
                }
                pathArr.push(matrixHelper.applyToX(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToX(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToY(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
                commands[j] = pathArr;
            }
            if (singleShape) {
                xPos += letters[i].l;
                xPos += trackingOffset;
            }
            if (this.textSpans[cnt]) {
                this.textSpans[cnt].elem = commands;
            } else {
                this.textSpans[cnt] = {
                    elem: commands
                };
            }
            cnt += 1;
        }
    };

    CVTextElement.prototype.renderInnerContent = function() {
        var ctx = this.canvasContext;
        var finalMat = this.finalTransform.mat.props;
        ctx.font = this.values.fValue;
        ctx.lineCap = 'butt';
        ctx.lineJoin = 'miter';
        ctx.miterLimit = 4;

        if (!this.data.singleShape) {
            this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
        }

        var i, len, j, jLen, k, kLen;
        var renderedLetters = this.textAnimator.renderedLetters;

        var letters = this.textProperty.currentData.l;

        len = letters.length;
        var renderedLetter;
        var lastFill = null,
            lastStroke = null,
            lastStrokeW = null,
            commands, pathArr;
        for (i = 0; i < len; i += 1) {
            if (letters[i].n) {
                continue;
            }
            renderedLetter = renderedLetters[i];
            if (renderedLetter) {
                this.globalData.renderer.save();
                this.globalData.renderer.ctxTransform(renderedLetter.p);
                this.globalData.renderer.ctxOpacity(renderedLetter.o);
            }
            if (this.fill) {
                if (renderedLetter && renderedLetter.fc) {
                    if (lastFill !== renderedLetter.fc) {
                        lastFill = renderedLetter.fc;
                        ctx.fillStyle = renderedLetter.fc;
                    }
                } else if (lastFill !== this.values.fill) {
                    lastFill = this.values.fill;
                    ctx.fillStyle = this.values.fill;
                }
                commands = this.textSpans[i].elem;
                jLen = commands.length;
                this.globalData.canvasContext.beginPath();
                for (j = 0; j < jLen; j += 1) {
                    pathArr = commands[j];
                    kLen = pathArr.length;
                    this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
                    for (k = 2; k < kLen; k += 6) {
                        this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
                    }
                }
                this.globalData.canvasContext.closePath();
                this.globalData.canvasContext.fill();
                ///ctx.fillText(this.textSpans[i].val,0,0);
            }
            if (this.stroke) {
                if (renderedLetter && renderedLetter.sw) {
                    if (lastStrokeW !== renderedLetter.sw) {
                        lastStrokeW = renderedLetter.sw;
                        ctx.lineWidth = renderedLetter.sw;
                    }
                } else if (lastStrokeW !== this.values.sWidth) {
                    lastStrokeW = this.values.sWidth;
                    ctx.lineWidth = this.values.sWidth;
                }
                if (renderedLetter && renderedLetter.sc) {
                    if (lastStroke !== renderedLetter.sc) {
                        lastStroke = renderedLetter.sc;
                        ctx.strokeStyle = renderedLetter.sc;
                    }
                } else if (lastStroke !== this.values.stroke) {
                    lastStroke = this.values.stroke;
                    ctx.strokeStyle = this.values.stroke;
                }
                commands = this.textSpans[i].elem;
                jLen = commands.length;
                this.globalData.canvasContext.beginPath();
                for (j = 0; j < jLen; j += 1) {
                    pathArr = commands[j];
                    kLen = pathArr.length;
                    this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
                    for (k = 2; k < kLen; k += 6) {
                        this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
                    }
                }
                this.globalData.canvasContext.closePath();
                this.globalData.canvasContext.stroke();
                ///ctx.strokeText(letters[i].val,0,0);
            }
            if (renderedLetter) {
                this.globalData.renderer.restore();
            }
        }
    };

    function CVEffects() {

    }
    CVEffects.prototype.renderFrame = function() {};

    function HBaseElement(data, globalData, comp) {}
    HBaseElement.prototype = {
        checkBlendMode: function() {},
        initRendererElement: function() {
            this.baseElement = createTag(this.data.tg || 'div');
            if (this.data.hasMask) {
                this.svgElement = createNS('svg');
                this.layerElement = createNS('g');
                this.maskedElement = this.layerElement;
                this.svgElement.appendChild(this.layerElement);
                this.baseElement.appendChild(this.svgElement);
            } else {
                this.layerElement = this.baseElement;
            }
            styleDiv(this.baseElement);
        },
        createContainerElements: function() {
            this.renderableEffectsManager = new CVEffects(this);
            this.transformedElement = this.baseElement;
            this.maskedElement = this.layerElement;
            if (this.data.ln) {
                this.layerElement.setAttribute('id', this.data.ln);
            }
            if (this.data.cl) {
                this.layerElement.setAttribute('class', this.data.cl);
            }
            if (this.data.bm !== 0) {
                this.setBlendMode();
            }
        },
        renderElement: function() {
            if (this.finalTransform._matMdf) {
                this.transformedElement.style.transform = this.transformedElement.style.webkitTransform = this.finalTransform.mat.toCSS();
            }
            if (this.finalTransform._opMdf) {
                this.transformedElement.style.opacity = this.finalTransform.mProp.o.v;
            }
        },
        renderFrame: function() {
            //If it is exported as hidden (data.hd === true) no need to render
            //If it is not visible no need to render
            if (this.data.hd || this.hidden) {
                return;
            }
            this.renderTransform();
            this.renderRenderable();
            this.renderElement();
            this.renderInnerContent();
            if (this._isFirstFrame) {
                this._isFirstFrame = false;
            }
        },
        destroy: function() {
            this.layerElement = null;
            this.transformedElement = null;
            if (this.matteElement) {
                this.matteElement = null;
            }
            if (this.maskManager) {
                this.maskManager.destroy();
                this.maskManager = null;
            }
        },
        addMasks: function() {
            this.maskManager = new MaskElement(this.data, this, this.globalData);
        },
        setMatte: function() {}
    };
    HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
    HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
    HBaseElement.prototype.buildElementParenting = HybridRenderer.prototype.buildElementParenting;

    function HSolidElement(data, globalData, comp) {
        this.initElement(data, globalData, comp);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], HSolidElement);

    HSolidElement.prototype.createContent = function() {
        var rect;
        if (this.data.hasMask) {
            rect = createNS('rect');
            rect.setAttribute('width', this.data.sw);
            rect.setAttribute('height', this.data.sh);
            rect.setAttribute('fill', this.data.sc);
            this.svgElement.setAttribute('width', this.data.sw);
            this.svgElement.setAttribute('height', this.data.sh);
        } else {
            rect = createTag('div');
            rect.style.width = this.data.sw + 'px';
            rect.style.height = this.data.sh + 'px';
            rect.style.backgroundColor = this.data.sc;
        }
        this.layerElement.appendChild(rect);
    };

    function HCompElement(data, globalData, comp) {
        this.layers = data.layers;
        this.supports3d = !data.hasMask;
        this.completeLayers = false;
        this.pendingElements = [];
        this.elements = this.layers ? createSizedArray(this.layers.length) : [];
        this.initElement(data, globalData, comp);
        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
            _placeholder: true
        };
    }

    extendPrototype([HybridRenderer, ICompElement, HBaseElement], HCompElement);
    HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;

    HCompElement.prototype.createContainerElements = function() {
        this._createBaseContainerElements();
        //divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';
        if (this.data.hasMask) {
            this.svgElement.setAttribute('width', this.data.w);
            this.svgElement.setAttribute('height', this.data.h);
            this.transformedElement = this.baseElement;
        } else {
            this.transformedElement = this.layerElement;
        }
    };

    HCompElement.prototype.addTo3dContainer = function(elem, pos) {
        var j = 0;
        var nextElement;
        while (j < pos) {
            if (this.elements[j] && this.elements[j].getBaseElement) {
                nextElement = this.elements[j].getBaseElement();
            }
            j += 1;
        }
        if (nextElement) {
            this.layerElement.insertBefore(elem, nextElement);
        } else {
            this.layerElement.appendChild(elem);
        }
    }

    function HShapeElement(data, globalData, comp) {
        //List of drawable elements
        this.shapes = [];
        // Full shape data
        this.shapesData = data.shapes;
        //List of styles that will be applied to shapes
        this.stylesList = [];
        //List of modifiers that will be applied to shapes
        this.shapeModifiers = [];
        //List of items in shape tree
        this.itemsData = [];
        //List of items in previous shape tree
        this.processedElements = [];
        // List of animated components
        this.animatedContents = [];
        this.shapesContainer = createNS('g');
        this.initElement(data, globalData, comp);
        //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
        // List of elements that have been created
        this.prevViewData = [];
        this.currentBBox = {
            x: 999999,
            y: -999999,
            h: 0,
            w: 0
        };
    }
    extendPrototype([BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement, HierarchyElement, FrameElement, RenderableElement], HShapeElement);
    HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;

    HShapeElement.prototype.createContent = function() {
        var cont;
        this.baseElement.style.fontSize = 0;
        if (this.data.hasMask) {
            this.layerElement.appendChild(this.shapesContainer);
            cont = this.svgElement;
        } else {
            cont = createNS('svg');
            var size = this.comp.data ? this.comp.data : this.globalData.compSize;
            cont.setAttribute('width', size.w);
            cont.setAttribute('height', size.h);
            cont.appendChild(this.shapesContainer);
            this.layerElement.appendChild(cont);
        }

        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);
        this.filterUniqueShapes();
        this.shapeCont = cont;
    };

    HShapeElement.prototype.getTransformedPoint = function(transformers, point) {
        var i, len = transformers.length;
        for (i = 0; i < len; i += 1) {
            point = transformers[i].mProps.v.applyToPointArray(point[0], point[1], 0);
        }
        return point;
    }

    HShapeElement.prototype.calculateShapeBoundingBox = function(item, boundingBox) {
        var shape = item.sh.v;
        var transformers = item.transformers;
        var i, len = shape._length,
            vPoint, oPoint, nextIPoint, nextVPoint, bounds;
        if (len <= 1) {
            return;
        }
        for (i = 0; i < len - 1; i += 1) {
            vPoint = this.getTransformedPoint(transformers, shape.v[i]);
            oPoint = this.getTransformedPoint(transformers, shape.o[i]);
            nextIPoint = this.getTransformedPoint(transformers, shape.i[i + 1]);
            nextVPoint = this.getTransformedPoint(transformers, shape.v[i + 1]);
            this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
        }
        if (shape.c) {
            vPoint = this.getTransformedPoint(transformers, shape.v[i]);
            oPoint = this.getTransformedPoint(transformers, shape.o[i]);
            nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
            nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
            this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
        }
    }

    HShapeElement.prototype.checkBounds = function(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
        this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
        var bounds = this.shapeBoundingBox;
        boundingBox.x = bm_min(bounds.left, boundingBox.x);
        boundingBox.xMax = bm_max(bounds.right, boundingBox.xMax);
        boundingBox.y = bm_min(bounds.top, boundingBox.y);
        boundingBox.yMax = bm_max(bounds.bottom, boundingBox.yMax);
    }

    HShapeElement.prototype.shapeBoundingBox = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
    }

    HShapeElement.prototype.tempBoundingBox = {
        x: 0,
        xMax: 0,
        y: 0,
        yMax: 0,
        width: 0,
        height: 0
    }

    HShapeElement.prototype.getBoundsOfCurve = function(p0, p1, p2, p3) {

        var bounds = [
            [p0[0], p3[0]],
            [p0[1], p3[1]]
        ];

        for (var a, b, c, t, b2ac, t1, t2, i = 0; i < 2; ++i) {

            b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
            a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
            c = 3 * p1[i] - 3 * p0[i];

            b = b | 0;
            a = a | 0;
            c = c | 0;

            if (a === 0) {

                if (b === 0) {
                    continue;
                }

                t = -c / b;

                if (0 < t && t < 1) {
                    bounds[i].push(this.calculateF(t, p0, p1, p2, p3, i));
                }
                continue;
            }

            b2ac = b * b - 4 * c * a;

            if (b2ac < 0) {
                continue;
            }

            t1 = (-b + bm_sqrt(b2ac)) / (2 * a);
            if (0 < t1 && t1 < 1) bounds[i].push(this.calculateF(t1, p0, p1, p2, p3, i));

            t2 = (-b - bm_sqrt(b2ac)) / (2 * a);
            if (0 < t2 && t2 < 1) bounds[i].push(this.calculateF(t2, p0, p1, p2, p3, i));

        }

        this.shapeBoundingBox.left = bm_min.apply(null, bounds[0]);
        this.shapeBoundingBox.top = bm_min.apply(null, bounds[1]);
        this.shapeBoundingBox.right = bm_max.apply(null, bounds[0]);
        this.shapeBoundingBox.bottom = bm_max.apply(null, bounds[1]);
    };

    HShapeElement.prototype.calculateF = function(t, p0, p1, p2, p3, i) {
        return bm_pow(1 - t, 3) * p0[i] +
            3 * bm_pow(1 - t, 2) * t * p1[i] +
            3 * (1 - t) * bm_pow(t, 2) * p2[i] +
            bm_pow(t, 3) * p3[i];
    }

    HShapeElement.prototype.calculateBoundingBox = function(itemsData, boundingBox) {
        var i, len = itemsData.length,
            path;
        for (i = 0; i < len; i += 1) {
            if (itemsData[i] && itemsData[i].sh) {
                this.calculateShapeBoundingBox(itemsData[i], boundingBox)
            } else if (itemsData[i] && itemsData[i].it) {
                this.calculateBoundingBox(itemsData[i].it, boundingBox)
            }
        }
    }

    HShapeElement.prototype.currentBoxContains = function(box) {
        return this.currentBBox.x <= box.x &&
            this.currentBBox.y <= box.y &&
            this.currentBBox.width + this.currentBBox.x >= box.x + box.width &&
            this.currentBBox.height + this.currentBBox.y >= box.y + box.height
    }

    HShapeElement.prototype.renderInnerContent = function() {
        this._renderShapeFrame();

        if (!this.hidden && (this._isFirstFrame || this._mdf)) {
            var tempBoundingBox = this.tempBoundingBox;
            var max = 999999;
            tempBoundingBox.x = max;
            tempBoundingBox.xMax = -max;
            tempBoundingBox.y = max;
            tempBoundingBox.yMax = -max;
            this.calculateBoundingBox(this.itemsData, tempBoundingBox);
            tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
            tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y;
            //var tempBoundingBox = this.shapeCont.getBBox();
            if (this.currentBoxContains(tempBoundingBox)) {
                return;
            }
            var changed = false;
            if (this.currentBBox.w !== tempBoundingBox.width) {
                this.currentBBox.w = tempBoundingBox.width;
                this.shapeCont.setAttribute('width', tempBoundingBox.width);
                changed = true;
            }
            if (this.currentBBox.h !== tempBoundingBox.height) {
                this.currentBBox.h = tempBoundingBox.height;
                this.shapeCont.setAttribute('height', tempBoundingBox.height);
                changed = true;
            }
            if (changed || this.currentBBox.x !== tempBoundingBox.x || this.currentBBox.y !== tempBoundingBox.y) {
                this.currentBBox.w = tempBoundingBox.width;
                this.currentBBox.h = tempBoundingBox.height;
                this.currentBBox.x = tempBoundingBox.x;
                this.currentBBox.y = tempBoundingBox.y;

                this.shapeCont.setAttribute('viewBox', this.currentBBox.x + ' ' + this.currentBBox.y + ' ' + this.currentBBox.w + ' ' + this.currentBBox.h);
                this.shapeCont.style.transform = this.shapeCont.style.webkitTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
            }
        }

    };

    function HTextElement(data, globalData, comp) {
        this.textSpans = [];
        this.textPaths = [];
        this.currentBBox = {
            x: 999999,
            y: -999999,
            h: 0,
            w: 0
        };
        this.renderType = 'svg';
        this.isMasked = false;
        this.initElement(data, globalData, comp);

    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], HTextElement);

    HTextElement.prototype.createContent = function() {
        this.isMasked = this.checkMasks();
        if (this.isMasked) {
            this.renderType = 'svg';
            this.compW = this.comp.data.w;
            this.compH = this.comp.data.h;
            this.svgElement.setAttribute('width', this.compW);
            this.svgElement.setAttribute('height', this.compH);
            var g = createNS('g');
            this.maskedElement.appendChild(g);
            this.innerElem = g;
        } else {
            this.renderType = 'html';
            this.innerElem = this.layerElement;
        }

        this.checkParenting();

    };

    HTextElement.prototype.buildNewText = function() {
        var documentData = this.textProperty.currentData;
        this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
        var innerElemStyle = this.innerElem.style;
        innerElemStyle.color = innerElemStyle.fill = documentData.fc ? this.buildColor(documentData.fc) : 'rgba(0,0,0,0)';
        if (documentData.sc) {
            innerElemStyle.stroke = this.buildColor(documentData.sc);
            innerElemStyle.strokeWidth = documentData.sw + 'px';
        }
        var fontData = this.globalData.fontManager.getFontByName(documentData.f);
        if (!this.globalData.fontManager.chars) {
            innerElemStyle.fontSize = documentData.finalSize + 'px';
            innerElemStyle.lineHeight = documentData.finalSize + 'px';
            if (fontData.fClass) {
                this.innerElem.className = fontData.fClass;
            } else {
                innerElemStyle.fontFamily = fontData.fFamily;
                var fWeight = documentData.fWeight,
                    fStyle = documentData.fStyle;
                innerElemStyle.fontStyle = fStyle;
                innerElemStyle.fontWeight = fWeight;
            }
        }
        var i, len;

        var letters = documentData.l;
        len = letters.length;
        var tSpan, tParent, tCont;
        var matrixHelper = this.mHelper;
        var shapes, shapeStr = '';
        var cnt = 0;
        for (i = 0; i < len; i += 1) {
            if (this.globalData.fontManager.chars) {
                if (!this.textPaths[cnt]) {
                    tSpan = createNS('path');
                    tSpan.setAttribute('stroke-linecap', 'butt');
                    tSpan.setAttribute('stroke-linejoin', 'round');
                    tSpan.setAttribute('stroke-miterlimit', '4');
                } else {
                    tSpan = this.textPaths[cnt];
                }
                if (!this.isMasked) {
                    if (this.textSpans[cnt]) {
                        tParent = this.textSpans[cnt];
                        tCont = tParent.children[0];
                    } else {

                        tParent = createTag('div');
                        tCont = createNS('svg');
                        tCont.appendChild(tSpan);
                        styleDiv(tParent);
                    }
                }
            } else {
                if (!this.isMasked) {
                    if (this.textSpans[cnt]) {
                        tParent = this.textSpans[cnt];
                        tSpan = this.textPaths[cnt];
                    } else {
                        tParent = createTag('span');
                        styleDiv(tParent);
                        tSpan = createTag('span');
                        styleDiv(tSpan);
                        tParent.appendChild(tSpan);
                    }
                } else {
                    tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS('text');
                }
            }
            //tSpan.setAttribute('visibility', 'hidden');
            if (this.globalData.fontManager.chars) {
                var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
                var shapeData;
                if (charData) {
                    shapeData = charData.data;
                } else {
                    shapeData = null;
                }
                matrixHelper.reset();
                if (shapeData && shapeData.shapes) {
                    shapes = shapeData.shapes[0].it;
                    matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
                    shapeStr = this.createPathShape(matrixHelper, shapes);
                    tSpan.setAttribute('d', shapeStr);
                }
                if (!this.isMasked) {
                    this.innerElem.appendChild(tParent);
                    if (shapeData && shapeData.shapes) {

                        //document.body.appendChild is needed to get exact measure of shape
                        document.body.appendChild(tCont);
                        var boundingBox = tCont.getBBox();
                        tCont.setAttribute('width', boundingBox.width + 2);
                        tCont.setAttribute('height', boundingBox.height + 2);
                        tCont.setAttribute('viewBox', (boundingBox.x - 1) + ' ' + (boundingBox.y - 1) + ' ' + (boundingBox.width + 2) + ' ' + (boundingBox.height + 2));
                        tCont.style.transform = tCont.style.webkitTransform = 'translate(' + (boundingBox.x - 1) + 'px,' + (boundingBox.y - 1) + 'px)';

                        letters[i].yOffset = boundingBox.y - 1;

                    } else {
                        tCont.setAttribute('width', 1);
                        tCont.setAttribute('height', 1);
                    }
                    tParent.appendChild(tCont);
                } else {
                    this.innerElem.appendChild(tSpan);
                }
            } else {
                tSpan.textContent = letters[i].val;
                tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
                if (!this.isMasked) {
                    this.innerElem.appendChild(tParent);
                    //
                    tSpan.style.transform = tSpan.style.webkitTransform = 'translate3d(0,' + -documentData.finalSize / 1.2 + 'px,0)';
                } else {
                    this.innerElem.appendChild(tSpan);
                }
            }
            //
            if (!this.isMasked) {
                this.textSpans[cnt] = tParent;
            } else {
                this.textSpans[cnt] = tSpan;
            }
            this.textSpans[cnt].style.display = 'block';
            this.textPaths[cnt] = tSpan;
            cnt += 1;
        }
        while (cnt < this.textSpans.length) {
            this.textSpans[cnt].style.display = 'none';
            cnt += 1;
        }
    };

    HTextElement.prototype.renderInnerContent = function() {

        if (this.data.singleShape) {
            if (!this._isFirstFrame && !this.lettersChangedFlag) {
                return;
            } else {
                // Todo Benchmark if using this is better than getBBox
                if (this.isMasked && this.finalTransform._matMdf) {
                    this.svgElement.setAttribute('viewBox', -this.finalTransform.mProp.p.v[0] + ' ' + -this.finalTransform.mProp.p.v[1] + ' ' + this.compW + ' ' + this.compH);
                    this.svgElement.style.transform = this.svgElement.style.webkitTransform = 'translate(' + -this.finalTransform.mProp.p.v[0] + 'px,' + -this.finalTransform.mProp.p.v[1] + 'px)';
                }
            }
        }

        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
        if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {
            return;
        }
        var i, len, count = 0;
        var renderedLetters = this.textAnimator.renderedLetters;

        var letters = this.textProperty.currentData.l;

        len = letters.length;
        var renderedLetter, textSpan, textPath;
        for (i = 0; i < len; i += 1) {
            if (letters[i].n) {
                count += 1;
                continue;
            }
            textSpan = this.textSpans[i];
            textPath = this.textPaths[i];
            renderedLetter = renderedLetters[count];
            count += 1;
            if (renderedLetter._mdf.m) {
                if (!this.isMasked) {
                    textSpan.style.transform = textSpan.style.webkitTransform = renderedLetter.m;
                } else {
                    textSpan.setAttribute('transform', renderedLetter.m);
                }
            }
            ////textSpan.setAttribute('opacity',renderedLetter.o);
            textSpan.style.opacity = renderedLetter.o;
            if (renderedLetter.sw && renderedLetter._mdf.sw) {
                textPath.setAttribute('stroke-width', renderedLetter.sw);
            }
            if (renderedLetter.sc && renderedLetter._mdf.sc) {
                textPath.setAttribute('stroke', renderedLetter.sc);
            }
            if (renderedLetter.fc && renderedLetter._mdf.fc) {
                textPath.setAttribute('fill', renderedLetter.fc);
                textPath.style.color = renderedLetter.fc;
            }
        }

        if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {
            var boundingBox = this.innerElem.getBBox();

            if (this.currentBBox.w !== boundingBox.width) {
                this.currentBBox.w = boundingBox.width;
                this.svgElement.setAttribute('width', boundingBox.width);
            }
            if (this.currentBBox.h !== boundingBox.height) {
                this.currentBBox.h = boundingBox.height;
                this.svgElement.setAttribute('height', boundingBox.height);
            }

            var margin = 1;
            if (this.currentBBox.w !== (boundingBox.width + margin * 2) || this.currentBBox.h !== (boundingBox.height + margin * 2) || this.currentBBox.x !== (boundingBox.x - margin) || this.currentBBox.y !== (boundingBox.y - margin)) {
                this.currentBBox.w = boundingBox.width + margin * 2;
                this.currentBBox.h = boundingBox.height + margin * 2;
                this.currentBBox.x = boundingBox.x - margin;
                this.currentBBox.y = boundingBox.y - margin;

                this.svgElement.setAttribute('viewBox', this.currentBBox.x + ' ' + this.currentBBox.y + ' ' + this.currentBBox.w + ' ' + this.currentBBox.h);
                this.svgElement.style.transform = this.svgElement.style.webkitTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
            }
        }
    };

    function HImageElement(data, globalData, comp) {
        this.assetData = globalData.getAssetData(data.refId);
        this.initElement(data, globalData, comp);
    }

    extendPrototype([BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement, FrameElement, RenderableElement], HImageElement);


    HImageElement.prototype.createContent = function() {
        var assetPath = this.globalData.getAssetsPath(this.assetData);
        var img = new Image();

        if (this.data.hasMask) {
            this.imageElem = createNS('image');
            this.imageElem.setAttribute('width', this.assetData.w + "px");
            this.imageElem.setAttribute('height', this.assetData.h + "px");
            this.imageElem.setAttributeNS('http://www.w3.org/1999/xlink', 'href', assetPath);
            this.layerElement.appendChild(this.imageElem);
            this.baseElement.setAttribute('width', this.assetData.w);
            this.baseElement.setAttribute('height', this.assetData.h);
        } else {
            this.layerElement.appendChild(img);
        }
        img.src = assetPath;
        if (this.data.ln) {
            this.baseElement.setAttribute('id', this.data.ln);
        }
    };

    function HCameraElement(data, globalData, comp) {
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.initHierarchy();
        var getProp = PropertyFactory.getProp;
        this.pe = getProp(this, data.pe, 0, 0, this);
        if (data.ks.p.s) {
            this.px = getProp(this, data.ks.p.x, 1, 0, this);
            this.py = getProp(this, data.ks.p.y, 1, 0, this);
            this.pz = getProp(this, data.ks.p.z, 1, 0, this);
        } else {
            this.p = getProp(this, data.ks.p, 1, 0, this);
        }
        if (data.ks.a) {
            this.a = getProp(this, data.ks.a, 1, 0, this);
        }
        if (data.ks.or.k.length && data.ks.or.k[0].to) {
            var i, len = data.ks.or.k.length;
            for (i = 0; i < len; i += 1) {
                data.ks.or.k[i].to = null;
                data.ks.or.k[i].ti = null;
            }
        }
        this.or = getProp(this, data.ks.or, 1, degToRads, this);
        this.or.sh = true;
        this.rx = getProp(this, data.ks.rx, 0, degToRads, this);
        this.ry = getProp(this, data.ks.ry, 0, degToRads, this);
        this.rz = getProp(this, data.ks.rz, 0, degToRads, this);
        this.mat = new Matrix();
        this._prevMat = new Matrix();
        this._isFirstFrame = true;
    }
    extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);

    HCameraElement.prototype.setup = function() {
        var i, len = this.comp.threeDElements.length,
            comp;
        for (i = 0; i < len; i += 1) {
            //[perspectiveElem,container]
            comp = this.comp.threeDElements[i];
            if (comp.type === '3d') {
                comp.perspectiveElem.style.perspective = comp.perspectiveElem.style.webkitPerspective = this.pe.v + 'px';
                comp.container.style.transformOrigin = comp.container.style.mozTransformOrigin = comp.container.style.webkitTransformOrigin = "0px 0px 0px";
                comp.perspectiveElem.style.transform = comp.perspectiveElem.style.webkitTransform = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
            }
        }
    };

    HCameraElement.prototype.createElements = function() {};

    HCameraElement.prototype.hide = function() {};

    HCameraElement.prototype.renderFrame = function() {
        var _mdf = this._isFirstFrame;
        var i, len;
        if (this.hierarchy) {
            len = this.hierarchy.length;
            for (i = 0; i < len; i += 1) {
                _mdf = this.hierarchy[i].finalTransform.mProp._mdf || _mdf;
            }
        }
        if (_mdf || this.pe._mdf || (this.p && this.p._mdf) || (this.px && (this.px._mdf || this.py._mdf || this.pz._mdf)) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || (this.a && this.a._mdf)) {
            this.mat.reset();

            if (this.hierarchy) {
                var mat;
                len = this.hierarchy.length - 1;
                for (i = len; i >= 0; i -= 1) {
                    /*mat = this.hierarchy[i].finalTransform.mProp.v.props;
                    console.log(mat)
                    this.mat.transform(-mat[0],-mat[1],-mat[2],-mat[3],-mat[4],-mat[5],-mat[6],-mat[7],-mat[8],-mat[9],-mat[10],-mat[11],-mat[12],-mat[13],-mat[14],mat[15]);
                    console.log(this.mat.props)*/
                    var mTransf = this.hierarchy[i].finalTransform.mProp;
                    this.mat.translate(-mTransf.p.v[0], -mTransf.p.v[1], mTransf.p.v[2]);
                    this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
                    this.mat.scale(1 / mTransf.s.v[0], 1 / mTransf.s.v[1], 1 / mTransf.s.v[2]);
                    this.mat.translate(mTransf.a.v[0], mTransf.a.v[1], mTransf.a.v[2]);
                }
            }

            if (this.p) {
                this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);
            } else {
                this.mat.translate(-this.px.v, -this.py.v, this.pz.v);
            }
            if (this.a) {
                var diffVector = [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]];
                var mag = Math.sqrt(Math.pow(diffVector[0], 2) + Math.pow(diffVector[1], 2) + Math.pow(diffVector[2], 2));
                //var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));
                var lookDir = [diffVector[0] / mag, diffVector[1] / mag, diffVector[2] / mag];
                var lookLengthOnXZ = Math.sqrt(lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0]);
                var m_rotationX = (Math.atan2(lookDir[1], lookLengthOnXZ));
                var m_rotationY = (Math.atan2(lookDir[0], -lookDir[2]));
                this.mat.rotateY(m_rotationY).rotateX(-m_rotationX);

            }
            this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
            this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
            this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);
            this.mat.translate(0, 0, this.pe.v);




            var hasMatrixChanged = !this._prevMat.equals(this.mat);
            if ((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
                len = this.comp.threeDElements.length;
                var comp;
                for (i = 0; i < len; i += 1) {
                    comp = this.comp.threeDElements[i];
                    if (comp.type === '3d') {
                        if (hasMatrixChanged) {
                            comp.container.style.transform = comp.container.style.webkitTransform = this.mat.toCSS();
                        }
                        if (this.pe._mdf) {
                            comp.perspectiveElem.style.perspective = comp.perspectiveElem.style.webkitPerspective = this.pe.v + 'px';
                        }
                    }
                }
                this.mat.clone(this._prevMat);
            }
        }
        this._isFirstFrame = false;
    };

    HCameraElement.prototype.prepareFrame = function(num) {
        this.prepareProperties(num, true);
    };

    HCameraElement.prototype.destroy = function() {};
    HCameraElement.prototype.initExpressions = function() {};
    HCameraElement.prototype.getBaseElement = function() {
        return null;
    };

    function HEffects() {}
    HEffects.prototype.renderFrame = function() {};
    var Expressions = (function() {
        var ob = {};
        ob.initExpressions = initExpressions;


        function initExpressions(animation) {
            animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
            animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
        }
        return ob;
    }());

    expressionsPlugin = Expressions;

    var ExpressionManager = (function() {
        'use strict';
        var ob = {};
        var Math = BMMath;
        var window = null;
        var document = null;

        function $bm_isInstanceOfArray(arr) {
            return arr.constructor === Array || arr.constructor === Float32Array;
        }

        function isNumerable(tOfV, v) {
            return tOfV === 'number' || tOfV === 'boolean' || tOfV === 'string' || v instanceof Number;
        }

        function $bm_neg(a) {
            var tOfA = typeof a;
            if (tOfA === 'number' || tOfA === 'boolean' || a instanceof Number) {
                return -a;
            }
            if ($bm_isInstanceOfArray(a)) {
                var i, lenA = a.length;
                var retArr = [];
                for (i = 0; i < lenA; i += 1) {
                    retArr[i] = -a[i];
                }
                return retArr;
            }
        }

        function sum(a, b) {
            var tOfA = typeof a;
            var tOfB = typeof b;
            if (tOfA === 'string' || tOfB === 'string') {
                return a + b;
            }
            if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
                return a + b;
            }
            if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
                a = a.slice(0);
                a[0] = a[0] + b;
                return a;
            }
            if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
                b = b.slice(0);
                b[0] = a + b[0];
                return b;
            }
            if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {

                var i = 0,
                    lenA = a.length,
                    lenB = b.length;
                var retArr = [];
                while (i < lenA || i < lenB) {
                    if ((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)) {
                        retArr[i] = a[i] + b[i];
                    } else {
                        retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
                    }
                    i += 1;
                }
                return retArr;
            }
            return 0;
        }
        var add = sum;

        function sub(a, b) {
            var tOfA = typeof a;
            var tOfB = typeof b;
            if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
                if (tOfA === 'string') {
                    a = parseInt(a);
                }
                if (tOfB === 'string') {
                    b = parseInt(b);
                }
                return a - b;
            }
            if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
                a = a.slice(0);
                a[0] = a[0] - b;
                return a;
            }
            if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
                b = b.slice(0);
                b[0] = a - b[0];
                return b;
            }
            if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
                var i = 0,
                    lenA = a.length,
                    lenB = b.length;
                var retArr = [];
                while (i < lenA || i < lenB) {
                    if ((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)) {
                        retArr[i] = a[i] - b[i];
                    } else {
                        retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
                    }
                    i += 1;
                }
                return retArr;
            }
            return 0;
        }

        function mul(a, b) {
            var tOfA = typeof a;
            var tOfB = typeof b;
            var arr;
            if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
                return a * b;
            }

            var i, len;
            if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
                len = a.length;
                arr = createTypedArray('float32', len);
                for (i = 0; i < len; i += 1) {
                    arr[i] = a[i] * b;
                }
                return arr;
            }
            if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
                len = b.length;
                arr = createTypedArray('float32', len);
                for (i = 0; i < len; i += 1) {
                    arr[i] = a * b[i];
                }
                return arr;
            }
            return 0;
        }

        function div(a, b) {
            var tOfA = typeof a;
            var tOfB = typeof b;
            var arr;
            if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
                return a / b;
            }
            var i, len;
            if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
                len = a.length;
                arr = createTypedArray('float32', len);
                for (i = 0; i < len; i += 1) {
                    arr[i] = a[i] / b;
                }
                return arr;
            }
            if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
                len = b.length;
                arr = createTypedArray('float32', len);
                for (i = 0; i < len; i += 1) {
                    arr[i] = a / b[i];
                }
                return arr;
            }
            return 0;
        }

        function mod(a, b) {
            if (typeof a === 'string') {
                a = parseInt(a);
            }
            if (typeof b === 'string') {
                b = parseInt(b);
            }
            return a % b;
        }

        function clamp(num, min, max) {
            if (min > max) {
                var mm = max;
                max = min;
                min = mm;
            }
            return Math.min(Math.max(num, min), max);
        }

        function radiansToDegrees(val) {
            return val / degToRads;
        }
        var radians_to_degrees = radiansToDegrees;

        function degreesToRadians(val) {
            return val * degToRads;
        }
        var degrees_to_radians = radiansToDegrees;

        var helperLengthArray = [0, 0, 0, 0, 0, 0];

        function length(arr1, arr2) {
            if (typeof arr1 === 'number' || arr1 instanceof Number) {
                arr2 = arr2 || 0;
                return Math.abs(arr1 - arr2);
            }
            if (!arr2) {
                arr2 = helperLengthArray;
            }
            var i, len = Math.min(arr1.length, arr2.length);
            var addedLength = 0;
            for (i = 0; i < len; i += 1) {
                addedLength += Math.pow(arr2[i] - arr1[i], 2);
            }
            return Math.sqrt(addedLength);
        }

        function normalize(vec) {
            return div(vec, length(vec));
        }

        function rgbToHsl(val) {
            var r = val[0];
            var g = val[1];
            var b = val[2];
            var max = Math.max(r, g, b),
                min = Math.min(r, g, b);
            var h, s, l = (max + min) / 2;

            if (max == min) {
                h = s = 0; // achromatic
            } else {
                var d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch (max) {
                    case r:
                        h = (g - b) / d + (g < b ? 6 : 0);
                        break;
                    case g:
                        h = (b - r) / d + 2;
                        break;
                    case b:
                        h = (r - g) / d + 4;
                        break;
                }
                h /= 6;
            }

            return [h, s, l, val[3]];
        }

        function hue2rgb(p, q, t) {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        }

        function hslToRgb(val) {
            var h = val[0];
            var s = val[1];
            var l = val[2];

            var r, g, b;

            if (s === 0) {
                r = g = b = l; // achromatic
            } else {

                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1 / 3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1 / 3);
            }

            return [r, g, b, val[3]];
        }

        function linear(t, tMin, tMax, value1, value2) {
            if (value1 === undefined || value2 === undefined) {
                value1 = tMin;
                value2 = tMax;
                tMin = 0;
                tMax = 1;
            }
            if (tMax < tMin) {
                var _tMin = tMax;
                tMax = tMin;
                tMin = _tMin;
            }
            if (t <= tMin) {
                return value1;
            } else if (t >= tMax) {
                return value2;
            }
            var perc = tMax === tMin ? 0 : (t - tMin) / (tMax - tMin);
            if (!value1.length) {
                return value1 + (value2 - value1) * perc;
            }
            var i, len = value1.length;
            var arr = createTypedArray('float32', len);
            for (i = 0; i < len; i += 1) {
                arr[i] = value1[i] + (value2[i] - value1[i]) * perc;
            }
            return arr;
        }

        function random(min, max) {
            if (max === undefined) {
                if (min === undefined) {
                    min = 0;
                    max = 1;
                } else {
                    max = min;
                    min = undefined;
                }
            }
            if (max.length) {
                var i, len = max.length;
                if (!min) {
                    min = createTypedArray('float32', len);
                }
                var arr = createTypedArray('float32', len);
                var rnd = BMMath.random();
                for (i = 0; i < len; i += 1) {
                    arr[i] = min[i] + rnd * (max[i] - min[i]);
                }
                return arr;
            }
            if (min === undefined) {
                min = 0;
            }
            var rndm = BMMath.random();
            return min + rndm * (max - min);
        }

        function createPath(points, inTangents, outTangents, closed) {
            var i, len = points.length;
            var path = shape_pool.newElement();
            path.setPathData(!!closed, len);
            var arrPlaceholder = [0, 0],
                inVertexPoint, outVertexPoint;
            for (i = 0; i < len; i += 1) {
                inVertexPoint = inTangents ? inTangents[i] : arrPlaceholder;
                outVertexPoint = outTangents ? outTangents[i] : arrPlaceholder;
                path.setTripleAt(points[i][0], points[i][1], outVertexPoint[0] + points[i][0], outVertexPoint[1] + points[i][1], inVertexPoint[0] + points[i][0], inVertexPoint[1] + points[i][1], i, true);
            }
            return path;
        }

        function initiateExpression(elem, data, property) {
            var val = data.x;
            var needsVelocity = /velocity(?![\w\d])/.test(val);
            var _needsRandom = val.indexOf('random') !== -1;
            var elemType = elem.data.ty;
            var transform, content, effect;
            var thisProperty = property;
            elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;
            var inPoint = elem.data.ip / elem.comp.globalData.frameRate;
            var outPoint = elem.data.op / elem.comp.globalData.frameRate;
            var width = elem.data.sw ? elem.data.sw : 0;
            var height = elem.data.sh ? elem.data.sh : 0;
            var name = elem.data.nm;
            var loopIn, loop_in, loopOut, loop_out;
            var toWorld, fromWorld, fromComp, toComp, fromCompToSurface, anchorPoint, thisLayer, thisComp, mask, valueAtTime, velocityAtTime;
            var __expression_functions = [];
            if (data.xf) {
                var i, len = data.xf.length;
                for (i = 0; i < len; i += 1) {
                    __expression_functions[i] = eval('(function(){ return ' + data.xf[i] + '}())');
                }
            }

            var scoped_bm_rt;
            var expression_function = eval('[function _expression_function(){' + val + ';scoped_bm_rt=$bm_rt}' + ']')[0];
            var numKeys = property.kf ? data.k.length : 0;

            var wiggle = function wiggle(freq, amp) {
                var i, j, len = this.pv.length ? this.pv.length : 1;
                var addedAmps = createTypedArray('float32', len);
                freq = 5;
                var iterations = Math.floor(time * freq);
                i = 0;
                j = 0;
                while (i < iterations) {
                    //var rnd = BMMath.random();
                    for (j = 0; j < len; j += 1) {
                        addedAmps[j] += -amp + amp * 2 * BMMath.random();
                        //addedAmps[j] += -amp + amp*2*rnd;
                    }
                    i += 1;
                }
                //var rnd2 = BMMath.random();
                var periods = time * freq;
                var perc = periods - Math.floor(periods);
                var arr = createTypedArray('float32', len);
                if (len > 1) {
                    for (j = 0; j < len; j += 1) {
                        arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp * 2 * BMMath.random()) * perc;
                        //arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;
                        //arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);
                    }
                    return arr;
                } else {
                    return this.pv + addedAmps[0] + (-amp + amp * 2 * BMMath.random()) * perc;
                }
            }.bind(this);

            if (thisProperty.loopIn) {
                loopIn = thisProperty.loopIn.bind(thisProperty);
                loop_in = loopIn;
            }

            if (thisProperty.loopOut) {
                loopOut = thisProperty.loopOut.bind(thisProperty);
                loop_out = loopOut;
            }

            function loopInDuration(type, duration) {
                return loopIn(type, duration, true);
            }

            function loopOutDuration(type, duration) {
                return loopOut(type, duration, true);
            }

            if (this.getValueAtTime) {
                valueAtTime = this.getValueAtTime.bind(this);
            }

            if (this.getVelocityAtTime) {
                velocityAtTime = this.getVelocityAtTime.bind(this);
            }

            var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);

            function lookAt(elem1, elem2) {
                var fVec = [elem2[0] - elem1[0], elem2[1] - elem1[1], elem2[2] - elem1[2]];
                var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads;
                var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;
                return [yaw, pitch, 0];
            }

            function easeOut(t, tMin, tMax, val1, val2) {
                if (val1 === undefined) {
                    val1 = tMin;
                    val2 = tMax;
                } else {
                    t = (t - tMin) / (tMax - tMin);
                }
                return -(val2 - val1) * t * (t - 2) + val1;
            }

            function easeIn(t, tMin, tMax, val1, val2) {
                if (val1 === undefined) {
                    val1 = tMin;
                    val2 = tMax;
                } else {
                    t = (t - tMin) / (tMax - tMin);
                }
                return (val2 - val1) * t * t + val1;
            }

            function nearestKey(time) {
                var i, len = data.k.length,
                    index, keyTime;
                if (!data.k.length || typeof(data.k[0]) === 'number') {
                    index = 0;
                    keyTime = 0;
                } else {
                    index = -1;
                    time *= elem.comp.globalData.frameRate;
                    if (time < data.k[0].t) {
                        index = 1;
                        keyTime = data.k[0].t;
                    } else {
                        for (i = 0; i < len - 1; i += 1) {
                            if (time === data.k[i].t) {
                                index = i + 1;
                                keyTime = data.k[i].t;
                                break;
                            } else if (time > data.k[i].t && time < data.k[i + 1].t) {
                                if (time - data.k[i].t > data.k[i + 1].t - time) {
                                    index = i + 2;
                                    keyTime = data.k[i + 1].t;
                                } else {
                                    index = i + 1;
                                    keyTime = data.k[i].t;
                                }
                                break;
                            }
                        }
                        if (index === -1) {
                            index = i + 1;
                            keyTime = data.k[i].t;
                        }
                    }

                }
                var ob = {};
                ob.index = index;
                ob.time = keyTime / elem.comp.globalData.frameRate;
                return ob;
            }

            function key(ind) {
                var ob, i, len;
                if (!data.k.length || typeof(data.k[0]) === 'number') {
                    throw new Error('The property has no keyframe at index ' + ind);
                }
                ind -= 1;
                ob = {
                    time: data.k[ind].t / elem.comp.globalData.frameRate
                };
                var arr;
                if (ind === data.k.length - 1 && !data.k[ind].h) {
                    arr = data.k[ind - 1].e;
                } else {
                    arr = data.k[ind].s;
                }
                len = arr.length;
                for (i = 0; i < len; i += 1) {
                    ob[i] = arr[i];
                }
                return ob;
            }

            function framesToTime(frames, fps) {
                if (!fps) {
                    fps = elem.comp.globalData.frameRate;
                }
                return frames / fps;
            }

            function timeToFrames(t, fps) {
                if (!t && t !== 0) {
                    t = time;
                }
                if (!fps) {
                    fps = elem.comp.globalData.frameRate;
                }
                return t * fps;
            }

            function seedRandom(seed) {
                BMMath.seedrandom(randSeed + seed);
            }

            function sourceRectAtTime() {
                return elem.sourceRectAtTime();
            }

            function substring(init, end) {
                if (typeof value === 'string') {
                    if (end === undefined) {
                        return value.substring(init)
                    }
                    return value.substring(init, end)
                }
                return '';
            }

            function substr(init, end) {
                if (typeof value === 'string') {
                    if (end === undefined) {
                        return value.substr(init)
                    }
                    return value.substr(init, end)
                }
                return '';
            }

            var time, velocity, value, text, textIndex, textTotal, selectorValue;
            var index = elem.data.ind;
            var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
            var parent;
            var randSeed = Math.floor(Math.random() * 1000000);

            function executeExpression(_value) {
                value = _value;
                if (_needsRandom) {
                    seedRandom(randSeed);
                }
                if (this.frameExpressionId === elem.globalData.frameId && this.propType !== 'textSelector') {
                    return value;
                }
                if (this.propType === 'textSelector') {
                    textIndex = this.textIndex;
                    textTotal = this.textTotal;
                    selectorValue = this.selectorValue;
                }
                if (!thisLayer) {
                    text = elem.layerInterface.text;
                    thisLayer = elem.layerInterface;
                    thisComp = elem.comp.compInterface;
                    toWorld = thisLayer.toWorld.bind(thisLayer);
                    fromWorld = thisLayer.fromWorld.bind(thisLayer);
                    fromComp = thisLayer.fromComp.bind(thisLayer);
                    toComp = thisLayer.toComp.bind(thisLayer);
                    mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
                    fromCompToSurface = fromComp;
                }
                if (!transform) {
                    transform = elem.layerInterface("ADBE Transform Group");
                    anchorPoint = transform.anchorPoint;
                }

                if (elemType === 4 && !content) {
                    content = thisLayer("ADBE Root Vectors Group");
                }
                if (!effect) {
                    effect = thisLayer(4);
                }
                hasParent = !!(elem.hierarchy && elem.hierarchy.length);
                if (hasParent && !parent) {
                    parent = elem.hierarchy[0].layerInterface;
                }
                time = this.comp.renderedFrame / this.comp.globalData.frameRate;
                if (needsVelocity) {
                    velocity = velocityAtTime(time);
                }
                expression_function();
                this.frameExpressionId = elem.globalData.frameId;


                //TODO: Check if it's possible to return on ShapeInterface the .v value
                if (scoped_bm_rt.propType === "shape") {
                    scoped_bm_rt = shape_pool.clone(scoped_bm_rt.v);
                }
                return scoped_bm_rt;
            }
            return executeExpression;
        }

        ob.initiateExpression = initiateExpression;
        return ob;
    }());
    (function addPropertyDecorator() {

        function getStaticValueAtTime() {
            return this.pv;
        }

        function loopOut(type, duration, durationFlag) {
            if (!this.k || !this.keyframes) {
                return this.pv;
            }
            type = type ? type.toLowerCase() : '';
            var currentFrame = this.comp.renderedFrame;
            var keyframes = this.keyframes;
            var lastKeyFrame = keyframes[keyframes.length - 1].t;
            if (currentFrame <= lastKeyFrame) {
                return this.pv;
            } else {
                var cycleDuration, firstKeyFrame;
                if (!durationFlag) {
                    if (!duration || duration > keyframes.length - 1) {
                        duration = keyframes.length - 1;
                    }
                    firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;
                    cycleDuration = lastKeyFrame - firstKeyFrame;
                } else {
                    if (!duration) {
                        cycleDuration = Math.max(0, lastKeyFrame - this.elem.data.ip);
                    } else {
                        cycleDuration = Math.abs(lastKeyFrame - elem.comp.globalData.frameRate * duration);
                    }
                    firstKeyFrame = lastKeyFrame - cycleDuration;
                }
                var i, len, ret;
                if (type === 'pingpong') {
                    var iterations = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);
                    if (iterations % 2 !== 0) {
                        return this.getValueAtTime(((cycleDuration - (currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0);
                    }
                } else if (type === 'offset') {
                    var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
                    var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
                    var current = this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
                    var repeats = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);
                    if (this.pv.length) {
                        ret = new Array(initV.length);
                        len = ret.length;
                        for (i = 0; i < len; i += 1) {
                            ret[i] = (endV[i] - initV[i]) * repeats + current[i];
                        }
                        return ret;
                    }
                    return (endV - initV) * repeats + current;
                } else if (type === 'continue') {
                    var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
                    var nextLastValue = this.getValueAtTime((lastKeyFrame - 0.001) / this.comp.globalData.frameRate, 0);
                    if (this.pv.length) {
                        ret = new Array(lastValue.length);
                        len = ret.length;
                        for (i = 0; i < len; i += 1) {
                            ret[i] = lastValue[i] + (lastValue[i] - nextLastValue[i]) * ((currentFrame - lastKeyFrame) / this.comp.globalData.frameRate) / 0.0005;
                        }
                        return ret;
                    }
                    return lastValue + (lastValue - nextLastValue) * (((currentFrame - lastKeyFrame)) / 0.001);
                }
                return this.getValueAtTime((((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0);
            }
        }

        function loopIn(type, duration, durationFlag) {
            if (!this.k) {
                return this.pv;
            }
            type = type ? type.toLowerCase() : '';
            var currentFrame = this.comp.renderedFrame;
            var keyframes = this.keyframes;
            var firstKeyFrame = keyframes[0].t;
            if (currentFrame >= firstKeyFrame) {
                return this.pv;
            } else {
                var cycleDuration, lastKeyFrame;
                if (!durationFlag) {
                    if (!duration || duration > keyframes.length - 1) {
                        duration = keyframes.length - 1;
                    }
                    lastKeyFrame = keyframes[duration].t;
                    cycleDuration = lastKeyFrame - firstKeyFrame;
                } else {
                    if (!duration) {
                        cycleDuration = Math.max(0, this.elem.data.op - firstKeyFrame);
                    } else {
                        cycleDuration = Math.abs(elem.comp.globalData.frameRate * duration);
                    }
                    lastKeyFrame = firstKeyFrame + cycleDuration;
                }
                var i, len, ret;
                if (type === 'pingpong') {
                    var iterations = Math.floor((firstKeyFrame - currentFrame) / cycleDuration);
                    if (iterations % 2 === 0) {
                        return this.getValueAtTime((((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0);
                    }
                } else if (type === 'offset') {
                    var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
                    var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
                    var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
                    var repeats = Math.floor((firstKeyFrame - currentFrame) / cycleDuration) + 1;
                    if (this.pv.length) {
                        ret = new Array(initV.length);
                        len = ret.length;
                        for (i = 0; i < len; i += 1) {
                            ret[i] = current[i] - (endV[i] - initV[i]) * repeats;
                        }
                        return ret;
                    }
                    return current - (endV - initV) * repeats;
                } else if (type === 'continue') {
                    var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
                    var nextFirstValue = this.getValueAtTime((firstKeyFrame + 0.001) / this.comp.globalData.frameRate, 0);
                    if (this.pv.length) {
                        ret = new Array(firstValue.length);
                        len = ret.length;
                        for (i = 0; i < len; i += 1) {
                            ret[i] = firstValue[i] + (firstValue[i] - nextFirstValue[i]) * (firstKeyFrame - currentFrame) / 0.001;
                        }
                        return ret;
                    }
                    return firstValue + (firstValue - nextFirstValue) * (firstKeyFrame - currentFrame) / 0.001;
                }
                return this.getValueAtTime(((cycleDuration - (firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0);
            }
        }

        function getValueAtTime(frameNum) {
            if (frameNum !== this._cachingAtTime.lastFrame) {
                frameNum *= this.elem.globalData.frameRate;
                frameNum -= this.offsetTime;
                this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
                this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
                this._cachingAtTime.lastFrame = frameNum;
            }
            return this._cachingAtTime.value;

        }

        function getSpeedAtTime(frameNum) {
            var delta = -0.01;
            var v1 = this.getValueAtTime(frameNum);
            var v2 = this.getValueAtTime(frameNum + delta);
            var speed = 0;
            if (v1.length) {
                var i;
                for (i = 0; i < v1.length; i += 1) {
                    speed += Math.pow(v2[i] - v1[i], 2);
                }
                speed = Math.sqrt(speed) * 100;
            } else {
                speed = 0;
            }
            return speed;
        }

        function getVelocityAtTime(frameNum) {
            if (this.vel !== undefined) {
                return this.vel;
            }
            var delta = -0.001;
            //frameNum += this.elem.data.st;
            var v1 = this.getValueAtTime(frameNum);
            var v2 = this.getValueAtTime(frameNum + delta);
            var velocity;
            if (v1.length) {
                velocity = createTypedArray('float32', v1.length);
                var i;
                for (i = 0; i < v1.length; i += 1) {
                    //removing frameRate
                    //if needed, don't add it here
                    //velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);
                    velocity[i] = (v2[i] - v1[i]) / delta;
                }
            } else {
                velocity = (v2 - v1) / delta;
            }
            return velocity;
        }

        function setGroupProperty(propertyGroup) {
            this.propertyGroup = propertyGroup;
        }

        function searchExpressions(elem, data, prop) {
            if (data.x) {
                prop.k = true;
                prop.x = true;
                prop.initiateExpression = ExpressionManager.initiateExpression;
                prop.effectsSequence.push(prop.initiateExpression(elem, data, prop).bind(prop));
            }
        }

        function getTransformValueAtTime(time) {
            console.warn('Transform at time not supported');
        }

        function getTransformStaticValueAtTime(time) {

        }

        var TextExpressionSelectorProp = (function() {

            function getValueProxy(index, total) {
                this.textIndex = index + 1;
                this.textTotal = total;
                this.getValue();
                return this.v;
            }

            return function TextExpressionSelectorProp(elem, data) {
                this.pv = 1;
                this.comp = elem.comp;
                this.elem = elem;
                this.mult = 0.01;
                this.propType = 'textSelector';
                this.textTotal = data.totalChars;
                this.selectorValue = 100;
                this.lastValue = [1, 1, 1];
                searchExpressions.bind(this)(elem, data, this);
                this.getMult = getValueProxy;
                this.getVelocityAtTime = getVelocityAtTime;
                if (this.kf) {
                    this.getValueAtTime = getValueAtTime.bind(this);
                } else {
                    this.getValueAtTime = getStaticValueAtTime.bind(this);
                }
                this.setGroupProperty = setGroupProperty;
            };
        }());

        var getTransformProperty = TransformPropertyFactory.getTransformProperty;
        TransformPropertyFactory.getTransformProperty = function(elem, data, container) {
            var prop = getTransformProperty(elem, data, container);
            if (prop.dynamicProperties.length) {
                prop.getValueAtTime = getTransformValueAtTime.bind(prop);
            } else {
                prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
            }
            prop.setGroupProperty = setGroupProperty;
            return prop;
        };

        var propertyGetProp = PropertyFactory.getProp;
        PropertyFactory.getProp = function(elem, data, type, mult, container) {
            var prop = propertyGetProp(elem, data, type, mult, container);
            //prop.getVelocityAtTime = getVelocityAtTime;
            //prop.loopOut = loopOut;
            //prop.loopIn = loopIn;
            if (prop.kf) {
                prop.getValueAtTime = getValueAtTime.bind(prop);
            } else {
                prop.getValueAtTime = getStaticValueAtTime.bind(prop);
            }
            prop.setGroupProperty = setGroupProperty;
            prop.loopOut = loopOut;
            prop.loopIn = loopIn;
            prop.getVelocityAtTime = getVelocityAtTime.bind(prop);
            prop.getSpeedAtTime = getSpeedAtTime.bind(prop);
            prop.numKeys = data.a === 1 ? data.k.length : 0;
            prop.propertyIndex = data.ix;
            var value = 0;
            if (type !== 0) {
                value = createTypedArray('float32', data.a === 1 ? data.k[0].s.length : data.k.length);
            }
            prop._cachingAtTime = {
                lastFrame: initialDefaultFrame,
                lastIndex: 0,
                value: value
            };
            searchExpressions(elem, data, prop);
            if (prop.k) {
                container.addDynamicProperty(prop);
            }

            return prop;
        };

        function getShapeValueAtTime(frameNum) {
            //For now this caching object is created only when needed instead of creating it when the shape is initialized.
            if (!this._cachingAtTime) {
                this._cachingAtTime = {
                    shapeValue: shape_pool.clone(this.pv),
                    lastIndex: 0,
                    lastTime: initialDefaultFrame
                };
            }
            if (frameNum !== this._cachingAtTime.lastTime) {
                this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;
                this._cachingAtTime.lastTime = frameNum;
                frameNum *= this.elem.globalData.frameRate;
                this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
            }
            return this._cachingAtTime.shapeValue;
        }

        var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
        var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();

        function ShapeExpressions() {}
        ShapeExpressions.prototype = {
            vertices: function(prop, time) {
                var shapePath = this.v;
                if (time !== undefined) {
                    shapePath = this.getValueAtTime(time, 0);
                }
                var i, len = shapePath._length;
                var vertices = shapePath[prop];
                var points = shapePath.v;
                var arr = createSizedArray(len);
                for (i = 0; i < len; i += 1) {
                    if (prop === 'i' || prop === 'o') {
                        arr[i] = [vertices[i][0] - points[i][0], vertices[i][1] - points[i][1]];
                    } else {
                        arr[i] = [vertices[i][0], vertices[i][1]];
                    }

                }
                return arr;
            },
            points: function(time) {
                return this.vertices('v', time);
            },
            inTangents: function(time) {
                return this.vertices('i', time);
            },
            outTangents: function(time) {
                return this.vertices('o', time);
            },
            isClosed: function() {
                return this.v.c;
            },
            pointOnPath: function(perc, time) {
                var shapePath = this.v;
                if (time !== undefined) {
                    shapePath = this.getValueAtTime(time, 0);
                }
                if (!this._segmentsLength) {
                    this._segmentsLength = bez.getSegmentsLength(shapePath);
                }

                var segmentsLength = this._segmentsLength;
                var lengths = segmentsLength.lengths;
                var lengthPos = segmentsLength.totalLength * perc;
                var i = 0,
                    len = lengths.length;
                var j = 0,
                    jLen;
                var accumulatedLength = 0,
                    pt;
                while (i < len) {
                    if (accumulatedLength + lengths[i].addedLength > lengthPos) {
                        var initIndex = i;
                        var endIndex = (shapePath.c && i === len - 1) ? 0 : i + 1;
                        var segmentPerc = (lengthPos - accumulatedLength) / lengths[i].addedLength;
                        pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i]);
                        break;
                    } else {
                        accumulatedLength += lengths[i].addedLength;
                    }
                    i += 1;
                }
                if (!pt) {
                    pt = shapePath.c ? [shapePath.v[0][0], shapePath.v[0][1]] : [shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1]];
                }
                return pt;
            },
            vectorOnPath: function(perc, time, vectorType) {
                //perc doesn't use triple equality because it can be a Number object as well as a primitive.
                perc = perc == 1 ? this.v.c ? 0 : 0.999 : perc;
                var pt1 = this.pointOnPath(perc, time);
                var pt2 = this.pointOnPath(perc + 0.001, time);
                var xLength = pt2[0] - pt1[0];
                var yLength = pt2[1] - pt1[1];
                var magnitude = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));
                var unitVector = vectorType === 'tangent' ? [xLength / magnitude, yLength / magnitude] : [-yLength / magnitude, xLength / magnitude];
                return unitVector;
            },
            tangentOnPath: function(perc, time) {
                return this.vectorOnPath(perc, time, 'tangent');
            },
            normalOnPath: function(perc, time) {
                return this.vectorOnPath(perc, time, 'normal');
            },
            setGroupProperty: setGroupProperty,
            getValueAtTime: getStaticValueAtTime
        };
        extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
        extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
        KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
        KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;

        var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;
        ShapePropertyFactory.getShapeProp = function(elem, data, type, arr, trims) {
            var prop = propertyGetShapeProp(elem, data, type, arr, trims);
            prop.propertyIndex = data.ix;
            prop.lock = false;
            if (type === 3) {
                searchExpressions(elem, data.pt, prop);
            } else if (type === 4) {
                searchExpressions(elem, data.ks, prop);
            }
            if (prop.k) {
                elem.addDynamicProperty(prop);
            }
            return prop;
        };

        var propertyGetTextProp = TextSelectorProp.getTextSelectorProp;
        TextSelectorProp.getTextSelectorProp = function(elem, data, arr) {
            if (data.t === 1) {
                return new TextExpressionSelectorProp(elem, data, arr);
            } else {
                return propertyGetTextProp(elem, data, arr);
            }
        };
    }());
    (function addDecorator() {

        function searchExpressions() {
            if (this.data.d.x) {
                this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this);
                this.addEffect(this.getExpressionValue.bind(this));
                return true;
            }
        }

        TextProperty.prototype.getExpressionValue = function(currentValue, text) {
            var newValue = this.calculateExpression(text);
            if (currentValue.t !== newValue) {
                var newData = {};
                this.copyData(newData, currentValue);
                newData.t = newValue.toString();
                newData.__complete = false;
                return newData;
            }
            return currentValue;
        }

        TextProperty.prototype.searchProperty = function() {

            var isKeyframed = this.searchKeyframes();
            var hasExpressions = this.searchExpressions();
            this.kf = isKeyframed || hasExpressions;
            return this.kf;
        };

        TextProperty.prototype.searchExpressions = searchExpressions;

    }());
    var ShapeExpressionInterface = (function() {

        function iterateElements(shapes, view, propertyGroup) {
            var arr = [];
            var i, len = shapes ? shapes.length : 0;
            for (i = 0; i < len; i += 1) {
                if (shapes[i].ty == 'gr') {
                    arr.push(groupInterfaceFactory(shapes[i], view[i], propertyGroup));
                } else if (shapes[i].ty == 'fl') {
                    arr.push(fillInterfaceFactory(shapes[i], view[i], propertyGroup));
                } else if (shapes[i].ty == 'st') {
                    arr.push(strokeInterfaceFactory(shapes[i], view[i], propertyGroup));
                } else if (shapes[i].ty == 'tm') {
                    arr.push(trimInterfaceFactory(shapes[i], view[i], propertyGroup));
                } else if (shapes[i].ty == 'tr') {
                    //arr.push(transformInterfaceFactory(shapes[i],view[i],propertyGroup));
                } else if (shapes[i].ty == 'el') {
                    arr.push(ellipseInterfaceFactory(shapes[i], view[i], propertyGroup));
                } else if (shapes[i].ty == 'sr') {
                    arr.push(starInterfaceFactory(shapes[i], view[i], propertyGroup));
                } else if (shapes[i].ty == 'sh') {
                    arr.push(pathInterfaceFactory(shapes[i], view[i], propertyGroup));
                } else if (shapes[i].ty == 'rc') {
                    arr.push(rectInterfaceFactory(shapes[i], view[i], propertyGroup));
                } else if (shapes[i].ty == 'rd') {
                    arr.push(roundedInterfaceFactory(shapes[i], view[i], propertyGroup));
                } else if (shapes[i].ty == 'rp') {
                    arr.push(repeaterInterfaceFactory(shapes[i], view[i], propertyGroup));
                }
            }
            return arr;
        }

        function contentsInterfaceFactory(shape, view, propertyGroup) {
            var interfaces;
            var interfaceFunction = function _interfaceFunction(value) {
                var i = 0,
                    len = interfaces.length;
                while (i < len) {
                    if (interfaces[i]._name === value || interfaces[i].mn === value || interfaces[i].propertyIndex === value || interfaces[i].ix === value || interfaces[i].ind === value) {
                        return interfaces[i];
                    }
                    i += 1;
                }
                if (typeof value === 'number') {
                    return interfaces[value - 1];
                }
            };
            interfaceFunction.propertyGroup = function(val) {
                if (val === 1) {
                    return interfaceFunction;
                } else {
                    return propertyGroup(val - 1);
                }
            };
            interfaces = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);
            interfaceFunction.numProperties = interfaces.length;
            interfaceFunction.propertyIndex = shape.cix;
            interfaceFunction._name = shape.nm;

            return interfaceFunction;
        }

        function groupInterfaceFactory(shape, view, propertyGroup) {
            var interfaceFunction = function _interfaceFunction(value) {
                switch (value) {
                    case 'ADBE Vectors Group':
                    case 'Contents':
                    case 2:
                        return interfaceFunction.content;
                        //Not necessary for now. Keeping them here in case a new case appears
                        //case 'ADBE Vector Transform Group':
                        //case 3:
                    default:
                        return interfaceFunction.transform;
                }
            };
            interfaceFunction.propertyGroup = function(val) {
                if (val === 1) {
                    return interfaceFunction;
                } else {
                    return propertyGroup(val - 1);
                }
            };
            var content = contentsInterfaceFactory(shape, view, interfaceFunction.propertyGroup);
            var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
            interfaceFunction.content = content;
            interfaceFunction.transform = transformInterface;
            Object.defineProperty(interfaceFunction, '_name', {
                get: function() {
                    return shape.nm;
                }
            });
            //interfaceFunction.content = interfaceFunction;
            interfaceFunction.numProperties = shape.np;
            interfaceFunction.propertyIndex = shape.ix;
            interfaceFunction.nm = shape.nm;
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
        }

        function fillInterfaceFactory(shape, view, propertyGroup) {
            function interfaceFunction(val) {
                if (val === 'Color' || val === 'color') {
                    return interfaceFunction.color;
                } else if (val === 'Opacity' || val === 'opacity') {
                    return interfaceFunction.opacity;
                }
            }
            Object.defineProperties(interfaceFunction, {
                'color': {
                    get: function() {
                        return ExpressionValue(view.c, 1 / view.c.mult, 'color');
                    }
                },
                'opacity': {
                    get: function() {
                        return ExpressionValue(view.o, 100);
                    }
                },
                '_name': {
                    value: shape.nm
                },
                'mn': {
                    value: shape.mn
                }
            });

            view.c.setGroupProperty(propertyGroup);
            view.o.setGroupProperty(propertyGroup);
            return interfaceFunction;
        }

        function strokeInterfaceFactory(shape, view, propertyGroup) {
            function _propertyGroup(val) {
                if (val === 1) {
                    return ob;
                } else {
                    return propertyGroup(val - 1);
                }
            }

            function _dashPropertyGroup(val) {
                if (val === 1) {
                    return dashOb;
                } else {
                    return _propertyGroup(val - 1);
                }
            }

            function addPropertyToDashOb(i) {
                Object.defineProperty(dashOb, shape.d[i].nm, {
                    get: function() {
                        return ExpressionValue(view.d.dataProps[i].p);
                    }
                });
            }
            var i, len = shape.d ? shape.d.length : 0;
            var dashOb = {};
            for (i = 0; i < len; i += 1) {
                addPropertyToDashOb(i);
                view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);
            }

            function interfaceFunction(val) {
                if (val === 'Color' || val === 'color') {
                    return interfaceFunction.color;
                } else if (val === 'Opacity' || val === 'opacity') {
                    return interfaceFunction.opacity;
                } else if (val === 'Stroke Width' || val === 'stroke width') {
                    return interfaceFunction.strokeWidth;
                }
            }
            Object.defineProperties(interfaceFunction, {
                'color': {
                    get: function() {
                        return ExpressionValue(view.c, 1 / view.c.mult, 'color');
                    }
                },
                'opacity': {
                    get: function() {
                        return ExpressionValue(view.o, 100);
                    }
                },
                'strokeWidth': {
                    get: function() {
                        return ExpressionValue(view.w);
                    }
                },
                'dash': {
                    get: function() {
                        return dashOb;
                    }
                },
                '_name': {
                    value: shape.nm
                },
                'mn': {
                    value: shape.mn
                }
            });

            view.c.setGroupProperty(_propertyGroup);
            view.o.setGroupProperty(_propertyGroup);
            view.w.setGroupProperty(_propertyGroup);
            return interfaceFunction;
        }

        function trimInterfaceFactory(shape, view, propertyGroup) {
            function _propertyGroup(val) {
                if (val == 1) {
                    return interfaceFunction;
                } else {
                    return propertyGroup(--val);
                }
            }
            interfaceFunction.propertyIndex = shape.ix;

            view.s.setGroupProperty(_propertyGroup);
            view.e.setGroupProperty(_propertyGroup);
            view.o.setGroupProperty(_propertyGroup);

            function interfaceFunction(val) {
                if (val === shape.e.ix || val === 'End' || val === 'end') {
                    return interfaceFunction.end;
                }
                if (val === shape.s.ix) {
                    return interfaceFunction.start;
                }
                if (val === shape.o.ix) {
                    return interfaceFunction.offset;
                }
            }
            interfaceFunction.propertyIndex = shape.ix;

            Object.defineProperties(interfaceFunction, {
                'start': {
                    get: function() {
                        return ExpressionValue(view.s, 1 / view.s.mult);
                    }
                },
                'end': {
                    get: function() {
                        return ExpressionValue(view.e, 1 / view.e.mult);
                    }
                },
                'offset': {
                    get: function() {
                        return ExpressionValue(view.o);
                    }
                },
                '_name': {
                    value: shape.nm
                }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
        }

        function transformInterfaceFactory(shape, view, propertyGroup) {
            function _propertyGroup(val) {
                if (val == 1) {
                    return interfaceFunction;
                } else {
                    return propertyGroup(--val);
                }
            }
            view.transform.mProps.o.setGroupProperty(_propertyGroup);
            view.transform.mProps.p.setGroupProperty(_propertyGroup);
            view.transform.mProps.a.setGroupProperty(_propertyGroup);
            view.transform.mProps.s.setGroupProperty(_propertyGroup);
            view.transform.mProps.r.setGroupProperty(_propertyGroup);
            if (view.transform.mProps.sk) {
                view.transform.mProps.sk.setGroupProperty(_propertyGroup);
                view.transform.mProps.sa.setGroupProperty(_propertyGroup);
            }
            view.transform.op.setGroupProperty(_propertyGroup);

            function interfaceFunction(value) {
                if (shape.a.ix === value || value === 'Anchor Point') {
                    return interfaceFunction.anchorPoint;
                }
                if (shape.o.ix === value || value === 'Opacity') {
                    return interfaceFunction.opacity;
                }
                if (shape.p.ix === value || value === 'Position') {
                    return interfaceFunction.position;
                }
                if (shape.r.ix === value || value === 'Rotation' || value === 'ADBE Vector Rotation') {
                    return interfaceFunction.rotation;
                }
                if (shape.s.ix === value || value === 'Scale') {
                    return interfaceFunction.scale;
                }
                if (shape.sk && shape.sk.ix === value || value === 'Skew') {
                    return interfaceFunction.skew;
                }
                if (shape.sa && shape.sa.ix === value || value === 'Skew Axis') {
                    return interfaceFunction.skewAxis;
                }

            }
            Object.defineProperties(interfaceFunction, {
                'opacity': {
                    get: function() {
                        return ExpressionValue(view.transform.mProps.o, 1 / view.transform.mProps.o.mult);
                    }
                },
                'position': {
                    get: function() {
                        return ExpressionValue(view.transform.mProps.p);
                    }
                },
                'anchorPoint': {
                    get: function() {
                        return ExpressionValue(view.transform.mProps.a);
                    }
                },
                'scale': {
                    get: function() {
                        return ExpressionValue(view.transform.mProps.s, 1 / view.transform.mProps.s.mult);
                    }
                },
                'rotation': {
                    get: function() {
                        return ExpressionValue(view.transform.mProps.r, 1 / view.transform.mProps.r.mult);
                    }
                },
                'skew': {
                    get: function() {
                        return ExpressionValue(view.transform.mProps.sk);
                    }
                },
                'skewAxis': {
                    get: function() {
                        return ExpressionValue(view.transform.mProps.sa);
                    }
                },
                '_name': {
                    value: shape.nm
                }
            });
            interfaceFunction.ty = 'tr';
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
        }

        function ellipseInterfaceFactory(shape, view, propertyGroup) {
            function _propertyGroup(val) {
                if (val == 1) {
                    return interfaceFunction;
                } else {
                    return propertyGroup(--val);
                }
            }
            interfaceFunction.propertyIndex = shape.ix;
            var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
            prop.s.setGroupProperty(_propertyGroup);
            prop.p.setGroupProperty(_propertyGroup);

            function interfaceFunction(value) {
                if (shape.p.ix === value) {
                    return interfaceFunction.position;
                }
                if (shape.s.ix === value) {
                    return interfaceFunction.size;
                }
            }
            Object.defineProperties(interfaceFunction, {
                'size': {
                    get: function() {
                        return ExpressionValue(prop.s);
                    }
                },
                'position': {
                    get: function() {
                        return ExpressionValue(prop.p);
                    }
                },
                '_name': {
                    value: shape.nm
                }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
        }

        function starInterfaceFactory(shape, view, propertyGroup) {
            function _propertyGroup(val) {
                if (val == 1) {
                    return interfaceFunction;
                } else {
                    return propertyGroup(--val);
                }
            }
            var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
            interfaceFunction.propertyIndex = shape.ix;
            prop.or.setGroupProperty(_propertyGroup);
            prop.os.setGroupProperty(_propertyGroup);
            prop.pt.setGroupProperty(_propertyGroup);
            prop.p.setGroupProperty(_propertyGroup);
            prop.r.setGroupProperty(_propertyGroup);
            if (shape.ir) {
                prop.ir.setGroupProperty(_propertyGroup);
                prop.is.setGroupProperty(_propertyGroup);
            }

            function interfaceFunction(value) {
                if (shape.p.ix === value) {
                    return interfaceFunction.position;
                }
                if (shape.r.ix === value) {
                    return interfaceFunction.rotation;
                }
                if (shape.pt.ix === value) {
                    return interfaceFunction.points;
                }
                if (shape.or.ix === value || 'ADBE Vector Star Outer Radius' === value) {
                    return interfaceFunction.outerRadius;
                }
                if (shape.os.ix === value) {
                    return interfaceFunction.outerRoundness;
                }
                if (shape.ir && (shape.ir.ix === value || 'ADBE Vector Star Inner Radius' === value)) {
                    return interfaceFunction.innerRadius;
                }
                if (shape.is && shape.is.ix === value) {
                    return interfaceFunction.innerRoundness;
                }

            }
            Object.defineProperties(interfaceFunction, {
                'position': {
                    get: function() {
                        return ExpressionValue(prop.p);
                    }
                },
                'rotation': {
                    get: function() {
                        return ExpressionValue(prop.r, 1 / prop.r.mult);
                    }
                },
                'points': {
                    get: function() {
                        return ExpressionValue(prop.pt);
                    }
                },
                'outerRadius': {
                    get: function() {
                        return ExpressionValue(prop.or);
                    }
                },
                'outerRoundness': {
                    get: function() {
                        return ExpressionValue(prop.os);
                    }
                },
                'innerRadius': {
                    get: function() {
                        if (!prop.ir) {
                            return 0;
                        }
                        return ExpressionValue(prop.ir);
                    }
                },
                'innerRoundness': {
                    get: function() {
                        if (!prop.is) {
                            return 0;
                        }
                        return ExpressionValue(prop.is, 1 / prop.is.mult);
                    }
                },
                '_name': {
                    value: shape.nm
                }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
        }

        function rectInterfaceFactory(shape, view, propertyGroup) {
            function _propertyGroup(val) {
                if (val == 1) {
                    return interfaceFunction;
                } else {
                    return propertyGroup(--val);
                }
            }
            var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
            interfaceFunction.propertyIndex = shape.ix;
            prop.p.setGroupProperty(_propertyGroup);
            prop.s.setGroupProperty(_propertyGroup);
            prop.r.setGroupProperty(_propertyGroup);

            function interfaceFunction(value) {
                if (shape.p.ix === value) {
                    return interfaceFunction.position;
                }
                if (shape.r.ix === value) {
                    return interfaceFunction.roundness;
                }
                if (shape.s.ix === value || value === 'Size' || value === 'ADBE Vector Rect Size') {
                    return interfaceFunction.size;
                }

            }
            Object.defineProperties(interfaceFunction, {
                'position': {
                    get: function() {
                        return ExpressionValue(prop.p);
                    }
                },
                'roundness': {
                    get: function() {
                        return ExpressionValue(prop.r);
                    }
                },
                'size': {
                    get: function() {
                        return ExpressionValue(prop.s);
                    }
                },
                '_name': {
                    value: shape.nm
                }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
        }

        function roundedInterfaceFactory(shape, view, propertyGroup) {
            function _propertyGroup(val) {
                if (val == 1) {
                    return interfaceFunction;
                } else {
                    return propertyGroup(--val);
                }
            }
            var prop = view;
            interfaceFunction.propertyIndex = shape.ix;
            prop.rd.setGroupProperty(_propertyGroup);

            function interfaceFunction(value) {
                if (shape.r.ix === value || 'Round Corners 1' === value) {
                    return interfaceFunction.radius;
                }

            }
            Object.defineProperties(interfaceFunction, {
                'radius': {
                    get: function() {
                        return ExpressionValue(prop.rd);
                    }
                },
                '_name': {
                    value: shape.nm
                }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
        }

        function repeaterInterfaceFactory(shape, view, propertyGroup) {
            function _propertyGroup(val) {
                if (val == 1) {
                    return interfaceFunction;
                } else {
                    return propertyGroup(--val);
                }
            }
            var prop = view;
            interfaceFunction.propertyIndex = shape.ix;
            prop.c.setGroupProperty(_propertyGroup);
            prop.o.setGroupProperty(_propertyGroup);

            function interfaceFunction(value) {
                if (shape.c.ix === value || 'Copies' === value) {
                    return interfaceFunction.copies;
                } else if (shape.o.ix === value || 'Offset' === value) {
                    return interfaceFunction.offset;
                }

            }
            Object.defineProperties(interfaceFunction, {
                'copies': {
                    get: function() {
                        return ExpressionValue(prop.c);
                    }
                },
                'offset': {
                    get: function() {
                        return ExpressionValue(prop.o);
                    }
                },
                '_name': {
                    value: shape.nm
                }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
        }

        function pathInterfaceFactory(shape, view, propertyGroup) {
            var prop = view.sh;

            function _propertyGroup(val) {
                if (val == 1) {
                    return interfaceFunction;
                } else {
                    return propertyGroup(--val);
                }
            }
            prop.setGroupProperty(_propertyGroup);

            function interfaceFunction(val) {
                if (val === 'Shape' || val === 'shape' || val === 'Path' || val === 'path' || val === 'ADBE Vector Shape' || val === 2) {
                    return interfaceFunction.path;
                }
            }
            Object.defineProperties(interfaceFunction, {
                'path': {
                    get: function() {
                        if (prop.k) {
                            prop.getValue();
                        }
                        return prop;
                    }
                },
                'shape': {
                    get: function() {
                        if (prop.k) {
                            prop.getValue();
                        }
                        return prop;
                    }
                },
                '_name': {
                    value: shape.nm
                },
                'ix': {
                    value: shape.ix
                },
                'mn': {
                    value: shape.mn
                }
            });
            return interfaceFunction;
        }

        return function(shapes, view, propertyGroup) {
            var interfaces;

            function _interfaceFunction(value) {
                if (typeof value === 'number') {
                    return interfaces[value - 1];
                } else {
                    var i = 0,
                        len = interfaces.length;
                    while (i < len) {
                        if (interfaces[i]._name === value) {
                            return interfaces[i];
                        }
                        i += 1;
                    }
                }
            }
            _interfaceFunction.propertyGroup = propertyGroup;
            interfaces = iterateElements(shapes, view, _interfaceFunction);
            return _interfaceFunction;
        };
    }());

    var TextExpressionInterface = (function() {
        return function(elem) {
            var _prevValue, _sourceText;

            function _thisLayerFunction() {}
            Object.defineProperty(_thisLayerFunction, "sourceText", {
                get: function() {
                    var stringValue = elem.textProperty.currentData.t;
                    if (stringValue !== _prevValue) {
                        elem.textProperty.currentData.t = _prevValue;
                        _sourceText = new String(stringValue);
                        //If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive
                        _sourceText.value = stringValue ? stringValue : new String(stringValue);
                    }
                    return _sourceText;
                }
            });
            return _thisLayerFunction;
        };
    }());
    var LayerExpressionInterface = (function() {
        function toWorld(arr, time) {
            var toWorldMat = new Matrix();
            toWorldMat.reset();
            var transformMat;
            if (time) {
                //Todo implement value at time on transform properties
                //transformMat = this._elem.finalTransform.mProp.getValueAtTime(time);
                transformMat = this._elem.finalTransform.mProp;
            } else {
                transformMat = this._elem.finalTransform.mProp;
            }
            transformMat.applyToMatrix(toWorldMat);
            if (this._elem.hierarchy && this._elem.hierarchy.length) {
                var i, len = this._elem.hierarchy.length;
                for (i = 0; i < len; i += 1) {
                    this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
                }
                return toWorldMat.applyToPointArray(arr[0], arr[1], arr[2] || 0);
            }
            return toWorldMat.applyToPointArray(arr[0], arr[1], arr[2] || 0);
        }

        function fromWorld(arr, time) {
            var toWorldMat = new Matrix();
            toWorldMat.reset();
            var transformMat;
            if (time) {
                //Todo implement value at time on transform properties
                //transformMat = this._elem.finalTransform.mProp.getValueAtTime(time);
                transformMat = this._elem.finalTransform.mProp;
            } else {
                transformMat = this._elem.finalTransform.mProp;
            }
            transformMat.applyToMatrix(toWorldMat);
            if (this._elem.hierarchy && this._elem.hierarchy.length) {
                var i, len = this._elem.hierarchy.length;
                for (i = 0; i < len; i += 1) {
                    this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
                }
                return toWorldMat.inversePoint(arr);
            }
            return toWorldMat.inversePoint(arr);
        }

        function fromComp(arr) {
            var toWorldMat = new Matrix();
            toWorldMat.reset();
            this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);
            if (this._elem.hierarchy && this._elem.hierarchy.length) {
                var i, len = this._elem.hierarchy.length;
                for (i = 0; i < len; i += 1) {
                    this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
                }
                return toWorldMat.inversePoint(arr);
            }
            return toWorldMat.inversePoint(arr);
        }

        function sampleImage() {
            return [1, 1, 1, 1];
        }


        return function(elem) {

            var transformInterface;

            function _registerMaskInterface(maskManager) {
                _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem);
            }

            function _registerEffectsInterface(effects) {
                _thisLayerFunction.effect = effects;
            }

            function _thisLayerFunction(name) {
                switch (name) {
                    case "ADBE Root Vectors Group":
                    case "Contents":
                    case 2:
                        return _thisLayerFunction.shapeInterface;
                    case 1:
                    case 6:
                    case "Transform":
                    case "transform":
                    case "ADBE Transform Group":
                        return transformInterface;
                    case 4:
                    case "ADBE Effect Parade":
                        return _thisLayerFunction.effect;
                }
            }
            _thisLayerFunction.toWorld = toWorld;
            _thisLayerFunction.fromWorld = fromWorld;
            _thisLayerFunction.toComp = toWorld;
            _thisLayerFunction.fromComp = fromComp;
            _thisLayerFunction.sampleImage = sampleImage;
            _thisLayerFunction.sourceRectAtTime = elem.sourceRectAtTime.bind(elem);
            _thisLayerFunction._elem = elem;
            transformInterface = TransformExpressionInterface(elem.finalTransform.mProp);
            var anchorPointDescriptor = getDescriptor(transformInterface, 'anchorPoint');
            Object.defineProperties(_thisLayerFunction, {
                hasParent: {
                    get: function() {
                        return elem.hierarchy.length;
                    }
                },
                parent: {
                    get: function() {
                        return elem.hierarchy[0].layerInterface;
                    }
                },
                rotation: getDescriptor(transformInterface, 'rotation'),
                scale: getDescriptor(transformInterface, 'scale'),
                position: getDescriptor(transformInterface, 'position'),
                opacity: getDescriptor(transformInterface, 'opacity'),
                anchorPoint: anchorPointDescriptor,
                anchor_point: anchorPointDescriptor,
                transform: {
                    get: function() {
                        return transformInterface;
                    }
                },
                active: {
                    get: function() {
                        return elem.isInRange;
                    }
                }
            });

            _thisLayerFunction.startTime = elem.data.st;
            _thisLayerFunction.index = elem.data.ind;
            _thisLayerFunction.source = elem.data.refId;
            _thisLayerFunction.height = elem.data.ty === 0 ? elem.data.h : 100;
            _thisLayerFunction.width = elem.data.ty === 0 ? elem.data.w : 100;
            _thisLayerFunction.inPoint = elem.data.ip / elem.comp.globalData.frameRate;
            _thisLayerFunction.outPoint = elem.data.op / elem.comp.globalData.frameRate;
            _thisLayerFunction._name = elem.data.nm;

            _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
            _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
            return _thisLayerFunction;
        };
    }());

    var CompExpressionInterface = (function() {
        return function(comp) {
            function _thisLayerFunction(name) {
                var i = 0,
                    len = comp.layers.length;
                while (i < len) {
                    if (comp.layers[i].nm === name || comp.layers[i].ind === name) {
                        return comp.elements[i].layerInterface;
                    }
                    i += 1;
                }
                return {
                    active: false
                };
            }
            Object.defineProperty(_thisLayerFunction, "_name", {
                value: comp.data.nm
            });
            _thisLayerFunction.layer = _thisLayerFunction;
            _thisLayerFunction.pixelAspect = 1;
            _thisLayerFunction.height = comp.globalData.compSize.h;
            _thisLayerFunction.width = comp.globalData.compSize.w;
            _thisLayerFunction.pixelAspect = 1;
            _thisLayerFunction.frameDuration = 1 / comp.globalData.frameRate;
            return _thisLayerFunction;
        };
    }());
    var TransformExpressionInterface = (function() {
        return function(transform) {
            function _thisFunction(name) {
                switch (name) {
                    case "scale":
                    case "Scale":
                    case "ADBE Scale":
                    case 6:
                        return _thisFunction.scale;
                    case "rotation":
                    case "Rotation":
                    case "ADBE Rotation":
                    case "ADBE Rotate Z":
                    case 10:
                        return _thisFunction.rotation;
                    case "ADBE Rotate X":
                        return _thisFunction.xRotation;
                    case "ADBE Rotate Y":
                        return _thisFunction.yRotation;
                    case "position":
                    case "Position":
                    case "ADBE Position":
                    case 2:
                        return _thisFunction.position;
                    case 'ADBE Position_0':
                        return _thisFunction.xPosition;
                    case 'ADBE Position_1':
                        return _thisFunction.yPosition;
                    case 'ADBE Position_2':
                        return _thisFunction.zPosition;
                    case "anchorPoint":
                    case "AnchorPoint":
                    case "Anchor Point":
                    case "ADBE AnchorPoint":
                    case 1:
                        return _thisFunction.anchorPoint;
                    case "opacity":
                    case "Opacity":
                    case 11:
                        return _thisFunction.opacity;
                }
            }

            Object.defineProperty(_thisFunction, "rotation", {
                get: function() {
                    if (transform.r) {
                        return ExpressionValue(transform.r, 1 / degToRads);
                    } else {
                        return ExpressionValue(transform.rz, 1 / degToRads);
                    }
                }
            });

            Object.defineProperty(_thisFunction, "xRotation", {
                get: function() {
                    return ExpressionValue(transform.rx, 1 / degToRads);
                }
            });

            Object.defineProperty(_thisFunction, "yRotation", {
                get: function() {
                    return ExpressionValue(transform.ry, 1 / degToRads);
                }
            });
            Object.defineProperty(_thisFunction, "scale", {
                get: function() {
                    return ExpressionValue(transform.s, 100);
                }
            });

            Object.defineProperty(_thisFunction, "position", {
                get: function() {
                    if (transform.p) {
                        return ExpressionValue(transform.p);
                    } else {
                        return [transform.px.v, transform.py.v, transform.pz ? transform.pz.v : 0];
                    }
                }
            });

            Object.defineProperty(_thisFunction, "xPosition", {
                get: function() {
                    return ExpressionValue(transform.px);
                }
            });

            Object.defineProperty(_thisFunction, "yPosition", {
                get: function() {
                    return ExpressionValue(transform.py);
                }
            });

            Object.defineProperty(_thisFunction, "zPosition", {
                get: function() {
                    return ExpressionValue(transform.pz);
                }
            });

            Object.defineProperty(_thisFunction, "anchorPoint", {
                get: function() {
                    return ExpressionValue(transform.a);
                }
            });

            Object.defineProperty(_thisFunction, "opacity", {
                get: function() {
                    return ExpressionValue(transform.o, 100);
                }
            });

            Object.defineProperty(_thisFunction, "skew", {
                get: function() {
                    return ExpressionValue(transform.sk);
                }
            });

            Object.defineProperty(_thisFunction, "skewAxis", {
                get: function() {
                    return ExpressionValue(transform.sa);
                }
            });

            Object.defineProperty(_thisFunction, "orientation", {
                get: function() {
                    return ExpressionValue(transform.or);
                }
            });

            return _thisFunction;
        };
    }());
    var ProjectInterface = (function() {

        function registerComposition(comp) {
            this.compositions.push(comp);
        }

        return function() {
            function _thisProjectFunction(name) {
                var i = 0,
                    len = this.compositions.length;
                while (i < len) {
                    if (this.compositions[i].data && this.compositions[i].data.nm === name) {
                        if (this.compositions[i].prepareFrame && this.compositions[i].data.xt) {
                            this.compositions[i].prepareFrame(this.currentFrame);
                        }
                        return this.compositions[i].compInterface;
                    }
                    i += 1;
                }
            }

            _thisProjectFunction.compositions = [];
            _thisProjectFunction.currentFrame = 0;

            _thisProjectFunction.registerComposition = registerComposition;



            return _thisProjectFunction;
        };
    }());
    var EffectsExpressionInterface = (function() {
        var ob = {
            createEffectsInterface: createEffectsInterface
        };

        function createEffectsInterface(elem, propertyGroup) {
            if (elem.effectsManager) {

                var effectElements = [];
                var effectsData = elem.data.ef;
                var i, len = elem.effectsManager.effectElements.length;
                for (i = 0; i < len; i += 1) {
                    effectElements.push(createGroupInterface(effectsData[i], elem.effectsManager.effectElements[i], propertyGroup, elem));
                }

                return function(name) {
                    var effects = elem.data.ef || [],
                        i = 0,
                        len = effects.length;
                    while (i < len) {
                        if (name === effects[i].nm || name === effects[i].mn || name === effects[i].ix) {
                            return effectElements[i];
                        }
                        i += 1;
                    }
                };
            }
        }

        function createGroupInterface(data, elements, propertyGroup, elem) {
            var effectElements = [];
            var i, len = data.ef.length;
            for (i = 0; i < len; i += 1) {
                if (data.ef[i].ty === 5) {
                    effectElements.push(createGroupInterface(data.ef[i], elements.effectElements[i], elements.effectElements[i].propertyGroup, elem));
                } else {
                    effectElements.push(createValueInterface(elements.effectElements[i], data.ef[i].ty, elem, _propertyGroup));
                }
            }

            function _propertyGroup(val) {
                if (val === 1) {
                    return groupInterface;
                } else {
                    return propertyGroup(val - 1);
                }
            }

            var groupInterface = function(name) {
                var effects = data.ef,
                    i = 0,
                    len = effects.length;
                while (i < len) {
                    if (name === effects[i].nm || name === effects[i].mn || name === effects[i].ix) {
                        if (effects[i].ty === 5) {
                            return effectElements[i];
                        } else {
                            return effectElements[i]();
                        }
                    }
                    i += 1;
                }
                return effectElements[0]();
            };

            groupInterface.propertyGroup = _propertyGroup;

            if (data.mn === 'ADBE Color Control') {
                Object.defineProperty(groupInterface, 'color', {
                    get: function() {
                        return effectElements[0]();
                    }
                });
            }
            Object.defineProperty(groupInterface, 'numProperties', {
                get: function() {
                    return data.np;
                }
            });
            groupInterface.active = data.en !== 0;
            return groupInterface;
        }

        function createValueInterface(element, type, elem, propertyGroup) {
            function interfaceFunction() {
                if (type === 10) {
                    return elem.comp.compInterface(element.p.v);
                }
                return ExpressionValue(element.p);
            }

            if (element.p.setGroupProperty) {
                element.p.setGroupProperty(propertyGroup);
            }

            return interfaceFunction;
        }

        return ob;

    }());
    var MaskManagerInterface = (function() {

        function MaskInterface(mask, data) {
            this._mask = mask;
            this._data = data;
        }
        Object.defineProperty(MaskInterface.prototype, 'maskPath', {
            get: function() {
                if (this._mask.prop.k) {
                    this._mask.prop.getValue();
                }
                return this._mask.prop;
            }
        });

        var MaskManager = function(maskManager, elem) {
            var _maskManager = maskManager;
            var _elem = elem;
            var _masksInterfaces = createSizedArray(maskManager.viewData.length);
            var i, len = maskManager.viewData.length;
            for (i = 0; i < len; i += 1) {
                _masksInterfaces[i] = new MaskInterface(maskManager.viewData[i], maskManager.masksProperties[i]);
            }

            var maskFunction = function(name) {
                i = 0;
                while (i < len) {
                    if (maskManager.masksProperties[i].nm === name) {
                        return _masksInterfaces[i];
                    }
                    i += 1;
                }
            };
            return maskFunction;
        };
        return MaskManager;
    }());

    var ExpressionValue = (function() {
        return function(elementProp, mult, type) {
            mult = mult || 1;
            var expressionValue, arrayValue;

            if (elementProp.k) {
                elementProp.getValue();
            }
            var i, len, arrValue, val;
            if (type) {
                if (type === 'color') {
                    len = 4;
                    expressionValue = createTypedArray('float32', len);
                    arrValue = createTypedArray('float32', len);
                    for (i = 0; i < len; i += 1) {
                        expressionValue[i] = arrValue[i] = (i < 3) ? elementProp.v[i] * mult : 1;
                    }
                    expressionValue.value = arrValue;
                }
            } else if (elementProp.propType === 'unidimensional') {
                val = elementProp.v * mult;
                expressionValue = new Number(val);
                expressionValue.value = val;
            } else {
                len = elementProp.pv.length;
                expressionValue = createTypedArray('float32', len);
                arrValue = createTypedArray('float32', len);
                for (i = 0; i < len; i += 1) {
                    expressionValue[i] = arrValue[i] = elementProp.v[i] * mult;
                }
                expressionValue.value = arrValue;
            }

            expressionValue.numKeys = elementProp.keyframes ? elementProp.keyframes.length : 0;
            expressionValue.key = function(pos) {
                if (!expressionValue.numKeys) {
                    return 0;
                } else {
                    return elementProp.keyframes[pos - 1].t;
                }
            };
            expressionValue.valueAtTime = elementProp.getValueAtTime;
            expressionValue.speedAtTime = elementProp.getSpeedAtTime;
            expressionValue.velocityAtTime = elementProp.getVelocityAtTime;
            expressionValue.propertyGroup = elementProp.propertyGroup;
            return expressionValue;
        };
    }());

    function SliderEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
    }

    function AngleEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
    }

    function ColorEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 1, 0, container);
    }

    function PointEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 1, 0, container);
    }

    function LayerIndexEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
    }

    function MaskIndexEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
    }

    function CheckboxEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
    }

    function NoValueEffect() {
        this.p = {};
    }

    function EffectsManager(data, element) {
        var effects = data.ef || [];
        this.effectElements = [];
        var i, len = effects.length;
        var effectItem;
        for (i = 0; i < len; i++) {
            effectItem = new GroupEffect(effects[i], element);
            this.effectElements.push(effectItem);
        }
    }

    function GroupEffect(data, element) {
        this.init(data, element);
    }

    extendPrototype([DynamicPropertyContainer], GroupEffect);

    GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;

    GroupEffect.prototype.init = function(data, element) {
        this.data = data;
        this.effectElements = [];
        this.initDynamicPropertyContainer(element);
        var i, len = this.data.ef.length;
        var eff, effects = this.data.ef;
        for (i = 0; i < len; i += 1) {
            eff = null;
            switch (effects[i].ty) {
                case 0:
                    eff = new SliderEffect(effects[i], element, this);
                    break;
                case 1:
                    eff = new AngleEffect(effects[i], element, this);
                    break;
                case 2:
                    eff = new ColorEffect(effects[i], element, this);
                    break;
                case 3:
                    eff = new PointEffect(effects[i], element, this);
                    break;
                case 4:
                case 7:
                    eff = new CheckboxEffect(effects[i], element, this);
                    break;
                case 10:
                    eff = new LayerIndexEffect(effects[i], element, this);
                    break;
                case 11:
                    eff = new MaskIndexEffect(effects[i], element, this);
                    break;
                case 5:
                    eff = new EffectsManager(effects[i], element, this);
                    break;
                    //case 6:
                default:
                    eff = new NoValueEffect(effects[i], element, this);
                    break;
            }
            if (eff) {
                this.effectElements.push(eff);
            }
        }
    };
    var lottiejs = {};

    var _isFrozen = false;

    function setLocationHref(href) {
        locationHref = href;
    }

    function searchAnimations() {
        if (standalone === true) {
            animationManager.searchAnimations(animationData, standalone, renderer);
        } else {
            animationManager.searchAnimations();
        }
    }

    function setSubframeRendering(flag) {
        subframeEnabled = flag;
    }

    function loadAnimation(params) {
        if (standalone === true) {
            params.animationData = JSON.parse(animationData);
        }
        return animationManager.loadAnimation(params);
    }

    function setQuality(value) {
        if (typeof value === 'string') {
            switch (value) {
                case 'high':
                    defaultCurveSegments = 200;
                    break;
                case 'medium':
                    defaultCurveSegments = 50;
                    break;
                case 'low':
                    defaultCurveSegments = 10;
                    break;
            }
        } else if (!isNaN(value) && value > 1) {
            defaultCurveSegments = value;
        }
        if (defaultCurveSegments >= 50) {
            roundValues(false);
        } else {
            roundValues(true);
        }
    }

    function inBrowser() {
        return typeof navigator !== 'undefined';
    }

    function installPlugin(type, plugin) {
        if (type === 'expressions') {
            expressionsPlugin = plugin;
        }
    }

    function getFactory(name) {
        switch (name) {
            case "propertyFactory":
                return PropertyFactory;
            case "shapePropertyFactory":
                return ShapePropertyFactory;
            case "matrix":
                return Matrix;
        }
    }

    lottiejs.play = animationManager.play;
    lottiejs.pause = animationManager.pause;
    lottiejs.setLocationHref = setLocationHref;
    lottiejs.togglePause = animationManager.togglePause;
    lottiejs.setSpeed = animationManager.setSpeed;
    lottiejs.setDirection = animationManager.setDirection;
    lottiejs.stop = animationManager.stop;
    lottiejs.searchAnimations = searchAnimations;
    lottiejs.registerAnimation = animationManager.registerAnimation;
    lottiejs.loadAnimation = loadAnimation;
    lottiejs.setSubframeRendering = setSubframeRendering;
    lottiejs.resize = animationManager.resize;
    //lottiejs.start = start;
    lottiejs.goToAndStop = animationManager.goToAndStop;
    lottiejs.destroy = animationManager.destroy;
    lottiejs.setQuality = setQuality;
    lottiejs.inBrowser = inBrowser;
    lottiejs.installPlugin = installPlugin;
    lottiejs.freeze = animationManager.freeze;
    lottiejs.unfreeze = animationManager.unfreeze;
    lottiejs.getRegisteredAnimations = animationManager.getRegisteredAnimations;
    lottiejs.__getFactory = getFactory;
    lottiejs.version = '5.2.0';

    function checkReady() {
        if (document.readyState === "complete") {
            clearInterval(readyStateCheckInterval);
            searchAnimations();
        }
    }

    function getQueryVariable(variable) {
        var vars = queryString.split('&');
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            if (decodeURIComponent(pair[0]) == variable) {
                return decodeURIComponent(pair[1]);
            }
        }
    }
    var standalone = '__[STANDALONE]__';
    var animationData = '__[ANIMATIONDATA]__';
    var renderer = '';
    if (standalone) {
        var scripts = document.getElementsByTagName('script');
        var index = scripts.length - 1;
        var myScript = scripts[index] || {
            src: ''
        };
        var queryString = myScript.src.replace(/^[^\?]+\??/, '');
        renderer = getQueryVariable('renderer');
    }
    var readyStateCheckInterval = setInterval(checkReady, 100);
    return lottiejs;
}));
/*!
 * VERSION: 1.20.5
 * DATE: 2018-05-21
 * UPDATES AND DOCS AT: http://greensock.com
 * 
 * Includes all of the following: TweenLite, TweenMax, TimelineLite, TimelineMax, EasePack, CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin
 *
 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
var _gsScope = (typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node
(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function() {

    "use strict";

    _gsScope._gsDefine("TweenMax", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function(Animation, SimpleTimeline, TweenLite) {

        var _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                var b = [],
                    l = a.length,
                    i;
                for (i = 0; i !== l; b.push(a[i++]));
                return b;
            },
            _applyCycle = function(vars, targets, i) {
                var alt = vars.cycle,
                    p, val;
                for (p in alt) {
                    val = alt[p];
                    vars[p] = (typeof(val) === "function") ? val(i, targets[i]) : val[i % val.length];
                }
                delete vars.cycle;
            },
            TweenMax = function(target, duration, vars) {
                TweenLite.call(this, target, duration, vars);
                this._cycle = 0;
                this._yoyo = (this.vars.yoyo === true || !!this.vars.yoyoEase);
                this._repeat = this.vars.repeat || 0;
                this._repeatDelay = this.vars.repeatDelay || 0;
                if (this._repeat) {
                    this._uncache(true); //ensures that if there is any repeat, the totalDuration will get recalculated to accurately report it.
                }
                this.render = TweenMax.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)
            },
            _tinyNum = 0.0000000001,
            TweenLiteInternals = TweenLite._internals,
            _isSelector = TweenLiteInternals.isSelector,
            _isArray = TweenLiteInternals.isArray,
            p = TweenMax.prototype = TweenLite.to({}, 0.1, {}),
            _blankArray = [];

        TweenMax.version = "1.20.5";
        p.constructor = TweenMax;
        p.kill()._gc = false;
        TweenMax.killTweensOf = TweenMax.killDelayedCallsTo = TweenLite.killTweensOf;
        TweenMax.getTweensOf = TweenLite.getTweensOf;
        TweenMax.lagSmoothing = TweenLite.lagSmoothing;
        TweenMax.ticker = TweenLite.ticker;
        TweenMax.render = TweenLite.render;

        p.invalidate = function() {
            this._yoyo = (this.vars.yoyo === true || !!this.vars.yoyoEase);
            this._repeat = this.vars.repeat || 0;
            this._repeatDelay = this.vars.repeatDelay || 0;
            this._yoyoEase = null;
            this._uncache(true);
            return TweenLite.prototype.invalidate.call(this);
        };

        p.updateTo = function(vars, resetDuration) {
            var curRatio = this.ratio,
                immediate = this.vars.immediateRender || vars.immediateRender,
                p;
            if (resetDuration && this._startTime < this._timeline._time) {
                this._startTime = this._timeline._time;
                this._uncache(false);
                if (this._gc) {
                    this._enabled(true, false);
                } else {
                    this._timeline.insert(this, this._startTime - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
                }
            }
            for (p in vars) {
                this.vars[p] = vars[p];
            }
            if (this._initted || immediate) {
                if (resetDuration) {
                    this._initted = false;
                    if (immediate) {
                        this.render(0, true, true);
                    }
                } else {
                    if (this._gc) {
                        this._enabled(true, false);
                    }
                    if (this._notifyPluginsOfEnabled && this._firstPT) {
                        TweenLite._onPluginEvent("_onDisable", this); //in case a plugin like MotionBlur must perform some cleanup tasks
                    }
                    if (this._time / this._duration > 0.998) { //if the tween has finished (or come extremely close to finishing), we just need to rewind it to 0 and then render it again at the end which forces it to re-initialize (parsing the new vars). We allow tweens that are close to finishing (but haven't quite finished) to work this way too because otherwise, the values are so small when determining where to project the starting values that binary math issues creep in and can make the tween appear to render incorrectly when run backwards. 
                        var prevTime = this._totalTime;
                        this.render(0, true, false);
                        this._initted = false;
                        this.render(prevTime, true, false);
                    } else {
                        this._initted = false;
                        this._init();
                        if (this._time > 0 || immediate) {
                            var inv = 1 / (1 - curRatio),
                                pt = this._firstPT,
                                endValue;
                            while (pt) {
                                endValue = pt.s + pt.c;
                                pt.c *= inv;
                                pt.s = endValue - pt.c;
                                pt = pt._next;
                            }
                        }
                    }
                }
            }
            return this;
        };

        p.render = function(time, suppressEvents, force) {
            if (!this._initted)
                if (this._duration === 0 && this.vars.repeat) { //zero duration tweens that render immediately have render() called from TweenLite's constructor, before TweenMax's constructor has finished setting _repeat, _repeatDelay, and _yoyo which are critical in determining totalDuration() so we need to call invalidate() which is a low-kb way to get those set properly.
                    this.invalidate();
                }
            var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                prevTime = this._time,
                prevTotalTime = this._totalTime,
                prevCycle = this._cycle,
                duration = this._duration,
                prevRawPrevTime = this._rawPrevTime,
                isComplete, callback, pt, cycleDuration, r, type, pow, rawPrevTime, yoyoEase;
            if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                this._totalTime = totalDur;
                this._cycle = this._repeat;
                if (this._yoyo && (this._cycle & 1) !== 0) {
                    this._time = 0;
                    this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                } else {
                    this._time = duration;
                    this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
                }
                if (!this._reversed) {
                    isComplete = true;
                    callback = "onComplete";
                    force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                }
                if (duration === 0)
                    if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                        if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
                            time = 0;
                        }
                        if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause"))
                            if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
                                force = true;
                                if (prevRawPrevTime > _tinyNum) {
                                    callback = "onReverseComplete";
                                }
                            }
                        this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    }

            } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                this._totalTime = this._time = this._cycle = 0;
                this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                if (prevTotalTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
                    callback = "onReverseComplete";
                    isComplete = this._reversed;
                }
                if (time < 0) {
                    this._active = false;
                    if (duration === 0)
                        if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                            if (prevRawPrevTime >= 0) {
                                force = true;
                            }
                            this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                        }
                }
                if (!this._initted) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
                    force = true;
                }
            } else {
                this._totalTime = this._time = time;
                if (this._repeat !== 0) {
                    cycleDuration = duration + this._repeatDelay;
                    this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
                    if (this._cycle !== 0)
                        if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
                            this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
                        }
                    this._time = this._totalTime - (this._cycle * cycleDuration);
                    if (this._yoyo)
                        if ((this._cycle & 1) !== 0) {
                            this._time = duration - this._time;
                            yoyoEase = this._yoyoEase || this.vars.yoyoEase; //note: we don't set this._yoyoEase in _init() like we do other properties because it's TweenMax-specific and doing it here allows us to optimize performance (most tweens don't have a yoyoEase). Note that we also must skip the this.ratio calculation further down right after we _init() in this function, because we're doing it here.
                            if (yoyoEase) {
                                if (!this._yoyoEase) {
                                    if (yoyoEase === true && !this._initted) { //if it's not initted and yoyoEase is true, this._ease won't have been populated yet so we must discern it here.
                                        yoyoEase = this.vars.ease;
                                        this._yoyoEase = yoyoEase = !yoyoEase ? TweenLite.defaultEase : (yoyoEase instanceof Ease) ? yoyoEase : (typeof(yoyoEase) === "function") ? new Ease(yoyoEase, this.vars.easeParams) : Ease.map[yoyoEase] || TweenLite.defaultEase;
                                    } else {
                                        this._yoyoEase = yoyoEase = (yoyoEase === true) ? this._ease : (yoyoEase instanceof Ease) ? yoyoEase : Ease.map[yoyoEase];
                                    }
                                }
                                this.ratio = yoyoEase ? 1 - yoyoEase.getRatio((duration - this._time) / duration) : 0;
                            }
                        }
                    if (this._time > duration) {
                        this._time = duration;
                    } else if (this._time < 0) {
                        this._time = 0;
                    }
                }
                if (this._easeType && !yoyoEase) {
                    r = this._time / duration;
                    type = this._easeType;
                    pow = this._easePower;
                    if (type === 1 || (type === 3 && r >= 0.5)) {
                        r = 1 - r;
                    }
                    if (type === 3) {
                        r *= 2;
                    }
                    if (pow === 1) {
                        r *= r;
                    } else if (pow === 2) {
                        r *= r * r;
                    } else if (pow === 3) {
                        r *= r * r * r;
                    } else if (pow === 4) {
                        r *= r * r * r * r;
                    }

                    if (type === 1) {
                        this.ratio = 1 - r;
                    } else if (type === 2) {
                        this.ratio = r;
                    } else if (this._time / duration < 0.5) {
                        this.ratio = r / 2;
                    } else {
                        this.ratio = 1 - (r / 2);
                    }

                } else if (!yoyoEase) {
                    this.ratio = this._ease.getRatio(this._time / duration);
                }

            }

            if (prevTime === this._time && !force && prevCycle === this._cycle) {
                if (prevTotalTime !== this._totalTime)
                    if (this._onUpdate)
                        if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
                            this._callback("onUpdate");
                        }
                return;
            } else if (!this._initted) {
                this._init();
                if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
                    return;
                } else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) { //we stick it in the queue for rendering at the very end of the tick - this is a performance optimization because browsers invalidate styles and force a recalculation if you read, write, and then read style data (so it's better to read/read/read/write/write/write than read/write/read/write/read/write). The down side, of course, is that usually you WANT things to render immediately because you may have code running right after that which depends on the change. Like imagine running TweenLite.set(...) and then immediately after that, creating a nother tween that animates the same property to another value; the starting values of that 2nd tween wouldn't be accurate if lazy is true.
                    this._time = prevTime;
                    this._totalTime = prevTotalTime;
                    this._rawPrevTime = prevRawPrevTime;
                    this._cycle = prevCycle;
                    TweenLiteInternals.lazyTweens.push(this);
                    this._lazy = [time, suppressEvents];
                    return;
                }
                //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
                if (this._time && !isComplete && !yoyoEase) {
                    this.ratio = this._ease.getRatio(this._time / duration);
                } else if (isComplete && this._ease._calcEnd && !yoyoEase) {
                    this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
                }
            }
            if (this._lazy !== false) {
                this._lazy = false;
            }

            if (!this._active)
                if (!this._paused && this._time !== prevTime && time >= 0) {
                    this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
                }
            if (prevTotalTime === 0) {
                if (this._initted === 2 && time > 0) {
                    //this.invalidate();
                    this._init(); //will just apply overwriting since _initted of (2) means it was a from() tween that had immediateRender:true
                }
                if (this._startAt) {
                    if (time >= 0) {
                        this._startAt.render(time, true, force);
                    } else if (!callback) {
                        callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
                    }
                }
                if (this.vars.onStart)
                    if (this._totalTime !== 0 || duration === 0)
                        if (!suppressEvents) {
                            this._callback("onStart");
                        }
            }

            pt = this._firstPT;
            while (pt) {
                if (pt.f) {
                    pt.t[pt.p](pt.c * this.ratio + pt.s);
                } else {
                    pt.t[pt.p] = pt.c * this.ratio + pt.s;
                }
                pt = pt._next;
            }

            if (this._onUpdate) {
                if (time < 0)
                    if (this._startAt && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                        this._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
                    }
                if (!suppressEvents)
                    if (this._totalTime !== prevTotalTime || callback) {
                        this._callback("onUpdate");
                    }
            }
            if (this._cycle !== prevCycle)
                if (!suppressEvents)
                    if (!this._gc)
                        if (this.vars.onRepeat) {
                            this._callback("onRepeat");
                        }
            if (callback)
                if (!this._gc || force) { //check gc because there's a chance that kill() could be called in an onUpdate
                    if (time < 0 && this._startAt && !this._onUpdate && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                        this._startAt.render(time, true, force);
                    }
                    if (isComplete) {
                        if (this._timeline.autoRemoveChildren) {
                            this._enabled(false, false);
                        }
                        this._active = false;
                    }
                    if (!suppressEvents && this.vars[callback]) {
                        this._callback(callback);
                    }
                    if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
                        this._rawPrevTime = 0;
                    }
                }
        };

        //---- STATIC FUNCTIONS -----------------------------------------------------------------------------------------------------------

        TweenMax.to = function(target, duration, vars) {
            return new TweenMax(target, duration, vars);
        };

        TweenMax.from = function(target, duration, vars) {
            vars.runBackwards = true;
            vars.immediateRender = (vars.immediateRender != false);
            return new TweenMax(target, duration, vars);
        };

        TweenMax.fromTo = function(target, duration, fromVars, toVars) {
            toVars.startAt = fromVars;
            toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
            return new TweenMax(target, duration, toVars);
        };

        TweenMax.staggerTo = TweenMax.allTo = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            stagger = stagger || 0;
            var delay = 0,
                a = [],
                finalComplete = function() {
                    if (vars.onComplete) {
                        vars.onComplete.apply(vars.onCompleteScope || this, arguments);
                    }
                    onCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray);
                },
                cycle = vars.cycle,
                fromCycle = (vars.startAt && vars.startAt.cycle),
                l, copy, i, p;
            if (!_isArray(targets)) {
                if (typeof(targets) === "string") {
                    targets = TweenLite.selector(targets) || targets;
                }
                if (_isSelector(targets)) {
                    targets = _slice(targets);
                }
            }
            targets = targets || [];
            if (stagger < 0) {
                targets = _slice(targets);
                targets.reverse();
                stagger *= -1;
            }
            l = targets.length - 1;
            for (i = 0; i <= l; i++) {
                copy = {};
                for (p in vars) {
                    copy[p] = vars[p];
                }
                if (cycle) {
                    _applyCycle(copy, targets, i);
                    if (copy.duration != null) {
                        duration = copy.duration;
                        delete copy.duration;
                    }
                }
                if (fromCycle) {
                    fromCycle = copy.startAt = {};
                    for (p in vars.startAt) {
                        fromCycle[p] = vars.startAt[p];
                    }
                    _applyCycle(copy.startAt, targets, i);
                }
                copy.delay = delay + (copy.delay || 0);
                if (i === l && onCompleteAll) {
                    copy.onComplete = finalComplete;
                }
                a[i] = new TweenMax(targets[i], duration, copy);
                delay += stagger;
            }
            return a;
        };

        TweenMax.staggerFrom = TweenMax.allFrom = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            vars.runBackwards = true;
            vars.immediateRender = (vars.immediateRender != false);
            return TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
        };

        TweenMax.staggerFromTo = TweenMax.allFromTo = function(targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            toVars.startAt = fromVars;
            toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
            return TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
        };

        TweenMax.delayedCall = function(delay, callback, params, scope, useFrames) {
            return new TweenMax(callback, 0, {
                delay: delay,
                onComplete: callback,
                onCompleteParams: params,
                callbackScope: scope,
                onReverseComplete: callback,
                onReverseCompleteParams: params,
                immediateRender: false,
                useFrames: useFrames,
                overwrite: 0
            });
        };

        TweenMax.set = function(target, vars) {
            return new TweenMax(target, 0, vars);
        };

        TweenMax.isTweening = function(target) {
            return (TweenLite.getTweensOf(target, true).length > 0);
        };

        var _getChildrenOf = function(timeline, includeTimelines) {
                var a = [],
                    cnt = 0,
                    tween = timeline._first;
                while (tween) {
                    if (tween instanceof TweenLite) {
                        a[cnt++] = tween;
                    } else {
                        if (includeTimelines) {
                            a[cnt++] = tween;
                        }
                        a = a.concat(_getChildrenOf(tween, includeTimelines));
                        cnt = a.length;
                    }
                    tween = tween._next;
                }
                return a;
            },
            getAllTweens = TweenMax.getAllTweens = function(includeTimelines) {
                return _getChildrenOf(Animation._rootTimeline, includeTimelines).concat(_getChildrenOf(Animation._rootFramesTimeline, includeTimelines));
            };

        TweenMax.killAll = function(complete, tweens, delayedCalls, timelines) {
            if (tweens == null) {
                tweens = true;
            }
            if (delayedCalls == null) {
                delayedCalls = true;
            }
            var a = getAllTweens((timelines != false)),
                l = a.length,
                allTrue = (tweens && delayedCalls && timelines),
                isDC, tween, i;
            for (i = 0; i < l; i++) {
                tween = a[i];
                if (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
                    if (complete) {
                        tween.totalTime(tween._reversed ? 0 : tween.totalDuration());
                    } else {
                        tween._enabled(false, false);
                    }
                }
            }
        };

        TweenMax.killChildTweensOf = function(parent, complete) {
            if (parent == null) {
                return;
            }
            var tl = TweenLiteInternals.tweenLookup,
                a, curParent, p, i, l;
            if (typeof(parent) === "string") {
                parent = TweenLite.selector(parent) || parent;
            }
            if (_isSelector(parent)) {
                parent = _slice(parent);
            }
            if (_isArray(parent)) {
                i = parent.length;
                while (--i > -1) {
                    TweenMax.killChildTweensOf(parent[i], complete);
                }
                return;
            }
            a = [];
            for (p in tl) {
                curParent = tl[p].target.parentNode;
                while (curParent) {
                    if (curParent === parent) {
                        a = a.concat(tl[p].tweens);
                    }
                    curParent = curParent.parentNode;
                }
            }
            l = a.length;
            for (i = 0; i < l; i++) {
                if (complete) {
                    a[i].totalTime(a[i].totalDuration());
                }
                a[i]._enabled(false, false);
            }
        };

        var _changePause = function(pause, tweens, delayedCalls, timelines) {
            tweens = (tweens !== false);
            delayedCalls = (delayedCalls !== false);
            timelines = (timelines !== false);
            var a = getAllTweens(timelines),
                allTrue = (tweens && delayedCalls && timelines),
                i = a.length,
                isDC, tween;
            while (--i > -1) {
                tween = a[i];
                if (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
                    tween.paused(pause);
                }
            }
        };

        TweenMax.pauseAll = function(tweens, delayedCalls, timelines) {
            _changePause(true, tweens, delayedCalls, timelines);
        };

        TweenMax.resumeAll = function(tweens, delayedCalls, timelines) {
            _changePause(false, tweens, delayedCalls, timelines);
        };

        TweenMax.globalTimeScale = function(value) {
            var tl = Animation._rootTimeline,
                t = TweenLite.ticker.time;
            if (!arguments.length) {
                return tl._timeScale;
            }
            value = value || _tinyNum; //can't allow zero because it'll throw the math off
            tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
            tl = Animation._rootFramesTimeline;
            t = TweenLite.ticker.frame;
            tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
            tl._timeScale = Animation._rootTimeline._timeScale = value;
            return value;
        };


        //---- GETTERS / SETTERS ----------------------------------------------------------------------------------------------------------

        p.progress = function(value, suppressEvents) {
            return (!arguments.length) ? this._time / this.duration() : this.totalTime(this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
        };

        p.totalProgress = function(value, suppressEvents) {
            return (!arguments.length) ? this._totalTime / this.totalDuration() : this.totalTime(this.totalDuration() * value, suppressEvents);
        };

        p.time = function(value, suppressEvents) {
            if (!arguments.length) {
                return this._time;
            }
            if (this._dirty) {
                this.totalDuration();
            }
            if (value > this._duration) {
                value = this._duration;
            }
            if (this._yoyo && (this._cycle & 1) !== 0) {
                value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
            } else if (this._repeat !== 0) {
                value += this._cycle * (this._duration + this._repeatDelay);
            }
            return this.totalTime(value, suppressEvents);
        };

        p.duration = function(value) {
            if (!arguments.length) {
                return this._duration; //don't set _dirty = false because there could be repeats that haven't been factored into the _totalDuration yet. Otherwise, if you create a repeated TweenMax and then immediately check its duration(), it would cache the value and the totalDuration would not be correct, thus repeats wouldn't take effect.
            }
            return Animation.prototype.duration.call(this, value);
        };

        p.totalDuration = function(value) {
            if (!arguments.length) {
                if (this._dirty) {
                    //instead of Infinity, we use 999999999999 so that we can accommodate reverses
                    this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
                    this._dirty = false;
                }
                return this._totalDuration;
            }
            return (this._repeat === -1) ? this : this.duration((value - (this._repeat * this._repeatDelay)) / (this._repeat + 1));
        };

        p.repeat = function(value) {
            if (!arguments.length) {
                return this._repeat;
            }
            this._repeat = value;
            return this._uncache(true);
        };

        p.repeatDelay = function(value) {
            if (!arguments.length) {
                return this._repeatDelay;
            }
            this._repeatDelay = value;
            return this._uncache(true);
        };

        p.yoyo = function(value) {
            if (!arguments.length) {
                return this._yoyo;
            }
            this._yoyo = value;
            return this;
        };


        return TweenMax;

    }, true);








    /*
     * ----------------------------------------------------------------
     * TimelineLite
     * ----------------------------------------------------------------
     */
    _gsScope._gsDefine("TimelineLite", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function(Animation, SimpleTimeline, TweenLite) {

        var TimelineLite = function(vars) {
                SimpleTimeline.call(this, vars);
                this._labels = {};
                this.autoRemoveChildren = (this.vars.autoRemoveChildren === true);
                this.smoothChildTiming = (this.vars.smoothChildTiming === true);
                this._sortChildren = true;
                this._onUpdate = this.vars.onUpdate;
                var v = this.vars,
                    val, p;
                for (p in v) {
                    val = v[p];
                    if (_isArray(val))
                        if (val.join("").indexOf("{self}") !== -1) {
                            v[p] = this._swapSelfInParams(val);
                        }
                }
                if (_isArray(v.tweens)) {
                    this.add(v.tweens, 0, v.align, v.stagger);
                }
            },
            _tinyNum = 0.0000000001,
            TweenLiteInternals = TweenLite._internals,
            _internals = TimelineLite._internals = {},
            _isSelector = TweenLiteInternals.isSelector,
            _isArray = TweenLiteInternals.isArray,
            _lazyTweens = TweenLiteInternals.lazyTweens,
            _lazyRender = TweenLiteInternals.lazyRender,
            _globals = _gsScope._gsDefine.globals,
            _copy = function(vars) {
                var copy = {},
                    p;
                for (p in vars) {
                    copy[p] = vars[p];
                }
                return copy;
            },
            _applyCycle = function(vars, targets, i) {
                var alt = vars.cycle,
                    p, val;
                for (p in alt) {
                    val = alt[p];
                    vars[p] = (typeof(val) === "function") ? val(i, targets[i]) : val[i % val.length];
                }
                delete vars.cycle;
            },
            _pauseCallback = _internals.pauseCallback = function() {},
            _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                var b = [],
                    l = a.length,
                    i;
                for (i = 0; i !== l; b.push(a[i++]));
                return b;
            },
            p = TimelineLite.prototype = new SimpleTimeline();

        TimelineLite.version = "1.20.4";
        p.constructor = TimelineLite;
        p.kill()._gc = p._forcingPlayhead = p._hasPause = false;

        /* might use later...
        //translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.
        function localToGlobal(time, animation) {
        	while (animation) {
        		time = (time / animation._timeScale) + animation._startTime;
        		animation = animation.timeline;
        	}
        	return time;
        }

        //translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales
        function globalToLocal(time, animation) {
        	var scale = 1;
        	time -= localToGlobal(0, animation);
        	while (animation) {
        		scale *= animation._timeScale;
        		animation = animation.timeline;
        	}
        	return time * scale;
        }
        */

        p.to = function(target, duration, vars, position) {
            var Engine = (vars.repeat && _globals.TweenMax) || TweenLite;
            return duration ? this.add(new Engine(target, duration, vars), position) : this.set(target, vars, position);
        };

        p.from = function(target, duration, vars, position) {
            return this.add(((vars.repeat && _globals.TweenMax) || TweenLite).from(target, duration, vars), position);
        };

        p.fromTo = function(target, duration, fromVars, toVars, position) {
            var Engine = (toVars.repeat && _globals.TweenMax) || TweenLite;
            return duration ? this.add(Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);
        };

        p.staggerTo = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            var tl = new TimelineLite({
                    onComplete: onCompleteAll,
                    onCompleteParams: onCompleteAllParams,
                    callbackScope: onCompleteAllScope,
                    smoothChildTiming: this.smoothChildTiming
                }),
                cycle = vars.cycle,
                copy, i;
            if (typeof(targets) === "string") {
                targets = TweenLite.selector(targets) || targets;
            }
            targets = targets || [];
            if (_isSelector(targets)) { //senses if the targets object is a selector. If it is, we should translate it into an array.
                targets = _slice(targets);
            }
            stagger = stagger || 0;
            if (stagger < 0) {
                targets = _slice(targets);
                targets.reverse();
                stagger *= -1;
            }
            for (i = 0; i < targets.length; i++) {
                copy = _copy(vars);
                if (copy.startAt) {
                    copy.startAt = _copy(copy.startAt);
                    if (copy.startAt.cycle) {
                        _applyCycle(copy.startAt, targets, i);
                    }
                }
                if (cycle) {
                    _applyCycle(copy, targets, i);
                    if (copy.duration != null) {
                        duration = copy.duration;
                        delete copy.duration;
                    }
                }
                tl.to(targets[i], duration, copy, i * stagger);
            }
            return this.add(tl, position);
        };

        p.staggerFrom = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            vars.immediateRender = (vars.immediateRender != false);
            vars.runBackwards = true;
            return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
        };

        p.staggerFromTo = function(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            toVars.startAt = fromVars;
            toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
            return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
        };

        p.call = function(callback, params, scope, position) {
            return this.add(TweenLite.delayedCall(0, callback, params, scope), position);
        };

        p.set = function(target, vars, position) {
            position = this._parseTimeOrLabel(position, 0, true);
            if (vars.immediateRender == null) {
                vars.immediateRender = (position === this._time && !this._paused);
            }
            return this.add(new TweenLite(target, 0, vars), position);
        };

        TimelineLite.exportRoot = function(vars, ignoreDelayedCalls) {
            vars = vars || {};
            if (vars.smoothChildTiming == null) {
                vars.smoothChildTiming = true;
            }
            var tl = new TimelineLite(vars),
                root = tl._timeline,
                hasNegativeStart, time, tween, next;
            if (ignoreDelayedCalls == null) {
                ignoreDelayedCalls = true;
            }
            root._remove(tl, true);
            tl._startTime = 0;
            tl._rawPrevTime = tl._time = tl._totalTime = root._time;
            tween = root._first;
            while (tween) {
                next = tween._next;
                if (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {
                    time = tween._startTime - tween._delay;
                    if (time < 0) {
                        hasNegativeStart = 1;
                    }
                    tl.add(tween, time);
                }
                tween = next;
            }
            root.add(tl, 0);
            if (hasNegativeStart) { //calling totalDuration() will force the adjustment necessary to shift the children forward so none of them start before zero, and moves the timeline backwards the same amount, so the playhead is still aligned where it should be globally, but the timeline doesn't have illegal children that start before zero.
                tl.totalDuration();
            }
            return tl;
        };

        p.add = function(value, position, align, stagger) {
            var curTime, l, i, child, tl, beforeRawTime;
            if (typeof(position) !== "number") {
                position = this._parseTimeOrLabel(position, 0, true, value);
            }
            if (!(value instanceof Animation)) {
                if ((value instanceof Array) || (value && value.push && _isArray(value))) {
                    align = align || "normal";
                    stagger = stagger || 0;
                    curTime = position;
                    l = value.length;
                    for (i = 0; i < l; i++) {
                        if (_isArray(child = value[i])) {
                            child = new TimelineLite({
                                tweens: child
                            });
                        }
                        this.add(child, curTime);
                        if (typeof(child) !== "string" && typeof(child) !== "function") {
                            if (align === "sequence") {
                                curTime = child._startTime + (child.totalDuration() / child._timeScale);
                            } else if (align === "start") {
                                child._startTime -= child.delay();
                            }
                        }
                        curTime += stagger;
                    }
                    return this._uncache(true);
                } else if (typeof(value) === "string") {
                    return this.addLabel(value, position);
                } else if (typeof(value) === "function") {
                    value = TweenLite.delayedCall(0, value);
                } else {
                    throw ("Cannot add " + value + " into the timeline; it is not a tween, timeline, function, or string.");
                }
            }

            SimpleTimeline.prototype.add.call(this, value, position);

            if (value._time) { //in case, for example, the _startTime is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
                value.render((this.rawTime() - value._startTime) * value._timeScale, false, false);
            }

            //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
            if (this._gc || this._time === this._duration)
                if (!this._paused)
                    if (this._duration < this.duration()) {
                        //in case any of the ancestors had completed but should now be enabled...
                        tl = this;
                        beforeRawTime = (tl.rawTime() > value._startTime); //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.
                        while (tl._timeline) {
                            if (beforeRawTime && tl._timeline.smoothChildTiming) {
                                tl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.
                            } else if (tl._gc) {
                                tl._enabled(true, false);
                            }
                            tl = tl._timeline;
                        }
                    }

            return this;
        };

        p.remove = function(value) {
            if (value instanceof Animation) {
                this._remove(value, false);
                var tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.
                value._startTime = (value._paused ? value._pauseTime : tl._time) - ((!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale); //ensure that if it gets played again, the timing is correct.
                return this;
            } else if (value instanceof Array || (value && value.push && _isArray(value))) {
                var i = value.length;
                while (--i > -1) {
                    this.remove(value[i]);
                }
                return this;
            } else if (typeof(value) === "string") {
                return this.removeLabel(value);
            }
            return this.kill(null, value);
        };

        p._remove = function(tween, skipDisable) {
            SimpleTimeline.prototype._remove.call(this, tween, skipDisable);
            var last = this._last;
            if (!last) {
                this._time = this._totalTime = this._duration = this._totalDuration = 0;
            } else if (this._time > this.duration()) {
                this._time = this._duration;
                this._totalTime = this._totalDuration;
            }
            return this;
        };

        p.append = function(value, offsetOrLabel) {
            return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));
        };

        p.insert = p.insertMultiple = function(value, position, align, stagger) {
            return this.add(value, position || 0, align, stagger);
        };

        p.appendMultiple = function(tweens, offsetOrLabel, align, stagger) {
            return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);
        };

        p.addLabel = function(label, position) {
            this._labels[label] = this._parseTimeOrLabel(position);
            return this;
        };

        p.addPause = function(position, callback, params, scope) {
            var t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);
            t.vars.onComplete = t.vars.onReverseComplete = callback;
            t.data = "isPause";
            this._hasPause = true;
            return this.add(t, position);
        };

        p.removeLabel = function(label) {
            delete this._labels[label];
            return this;
        };

        p.getLabelTime = function(label) {
            return (this._labels[label] != null) ? this._labels[label] : -1;
        };

        p._parseTimeOrLabel = function(timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {
            var clippedDuration, i;
            //if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().
            if (ignore instanceof Animation && ignore.timeline === this) {
                this.remove(ignore);
            } else if (ignore && ((ignore instanceof Array) || (ignore.push && _isArray(ignore)))) {
                i = ignore.length;
                while (--i > -1) {
                    if (ignore[i] instanceof Animation && ignore[i].timeline === this) {
                        this.remove(ignore[i]);
                    }
                }
            }
            clippedDuration = (typeof(timeOrLabel) === "number" && !offsetOrLabel) ? 0 : (this.duration() > 99999999999) ? this.recent().endTime(false) : this._duration; //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
            if (typeof(offsetOrLabel) === "string") {
                return this._parseTimeOrLabel(offsetOrLabel, (appendIfAbsent && typeof(timeOrLabel) === "number" && this._labels[offsetOrLabel] == null) ? timeOrLabel - clippedDuration : 0, appendIfAbsent);
            }
            offsetOrLabel = offsetOrLabel || 0;
            if (typeof(timeOrLabel) === "string" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) { //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
                i = timeOrLabel.indexOf("=");
                if (i === -1) {
                    if (this._labels[timeOrLabel] == null) {
                        return appendIfAbsent ? (this._labels[timeOrLabel] = clippedDuration + offsetOrLabel) : offsetOrLabel;
                    }
                    return this._labels[timeOrLabel] + offsetOrLabel;
                }
                offsetOrLabel = parseInt(timeOrLabel.charAt(i - 1) + "1", 10) * Number(timeOrLabel.substr(i + 1));
                timeOrLabel = (i > 1) ? this._parseTimeOrLabel(timeOrLabel.substr(0, i - 1), 0, appendIfAbsent) : clippedDuration;
            } else if (timeOrLabel == null) {
                timeOrLabel = clippedDuration;
            }
            return Number(timeOrLabel) + offsetOrLabel;
        };

        p.seek = function(position, suppressEvents) {
            return this.totalTime((typeof(position) === "number") ? position : this._parseTimeOrLabel(position), (suppressEvents !== false));
        };

        p.stop = function() {
            return this.paused(true);
        };

        p.gotoAndPlay = function(position, suppressEvents) {
            return this.play(position, suppressEvents);
        };

        p.gotoAndStop = function(position, suppressEvents) {
            return this.pause(position, suppressEvents);
        };

        p.render = function(time, suppressEvents, force) {
            if (this._gc) {
                this._enabled(true, false);
            }
            var prevTime = this._time,
                totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                prevStart = this._startTime,
                prevTimeScale = this._timeScale,
                prevPaused = this._paused,
                tween, isComplete, next, callback, internalForce, pauseTween, curTime;
            if (prevTime !== this._time) { //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
                time += this._time - prevTime;
            }
            if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                this._totalTime = this._time = totalDur;
                if (!this._reversed)
                    if (!this._hasPausedChild()) {
                        isComplete = true;
                        callback = "onComplete";
                        internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                        if (this._duration === 0)
                            if ((time <= 0 && time >= -0.0000001) || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum)
                                if (this._rawPrevTime !== time && this._first) {
                                    internalForce = true;
                                    if (this._rawPrevTime > _tinyNum) {
                                        callback = "onReverseComplete";
                                    }
                                }
                    }
                this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                time = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.

            } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                this._totalTime = this._time = 0;
                if (prevTime !== 0 || (this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || (time < 0 && this._rawPrevTime >= 0)))) {
                    callback = "onReverseComplete";
                    isComplete = this._reversed;
                }
                if (time < 0) {
                    this._active = false;
                    if (this._timeline.autoRemoveChildren && this._reversed) { //ensures proper GC if a timeline is resumed after it's finished reversing.
                        internalForce = isComplete = true;
                        callback = "onReverseComplete";
                    } else if (this._rawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
                        internalForce = true;
                    }
                    this._rawPrevTime = time;
                } else {
                    this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
                        tween = this._first;
                        while (tween && tween._startTime === 0) {
                            if (!tween._duration) {
                                isComplete = false;
                            }
                            tween = tween._next;
                        }
                    }
                    time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
                    if (!this._initted) {
                        internalForce = true;
                    }
                }

            } else {

                if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                    if (time >= prevTime) {
                        tween = this._first;
                        while (tween && tween._startTime <= time && !pauseTween) {
                            if (!tween._duration)
                                if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                    pauseTween = tween;
                                }
                            tween = tween._next;
                        }
                    } else {
                        tween = this._last;
                        while (tween && tween._startTime >= time && !pauseTween) {
                            if (!tween._duration)
                                if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                    pauseTween = tween;
                                }
                            tween = tween._prev;
                        }
                    }
                    if (pauseTween) {
                        this._time = time = pauseTween._startTime;
                        this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
                    }
                }

                this._totalTime = this._time = this._rawPrevTime = time;
            }
            if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                return;
            } else if (!this._initted) {
                this._initted = true;
            }

            if (!this._active)
                if (!this._paused && this._time !== prevTime && time > 0) {
                    this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
                }

            if (prevTime === 0)
                if (this.vars.onStart)
                    if (this._time !== 0 || !this._duration)
                        if (!suppressEvents) {
                            this._callback("onStart");
                        }

            curTime = this._time;
            if (curTime >= prevTime) {
                tween = this._first;
                while (tween) {
                    next = tween._next; //record it here because the value could change after rendering...
                    if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                        break;
                    } else if (tween._active || (tween._startTime <= curTime && !tween._paused && !tween._gc)) {
                        if (pauseTween === tween) {
                            this.pause();
                        }
                        if (!tween._reversed) {
                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                        } else {
                            tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                        }
                    }
                    tween = next;
                }
            } else {
                tween = this._last;
                while (tween) {
                    next = tween._prev; //record it here because the value could change after rendering...
                    if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                        break;
                    } else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
                        if (pauseTween === tween) {
                            pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
                            while (pauseTween && pauseTween.endTime() > this._time) {
                                pauseTween.render((pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
                                pauseTween = pauseTween._prev;
                            }
                            pauseTween = null;
                            this.pause();
                        }
                        if (!tween._reversed) {
                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                        } else {
                            tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                        }
                    }
                    tween = next;
                }
            }

            if (this._onUpdate)
                if (!suppressEvents) {
                    if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
                        _lazyRender();
                    }
                    this._callback("onUpdate");
                }

            if (callback)
                if (!this._gc)
                    if (prevStart === this._startTime || prevTimeScale !== this._timeScale)
                        if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
                            if (isComplete) {
                                if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
                                    _lazyRender();
                                }
                                if (this._timeline.autoRemoveChildren) {
                                    this._enabled(false, false);
                                }
                                this._active = false;
                            }
                            if (!suppressEvents && this.vars[callback]) {
                                this._callback(callback);
                            }
                        }
        };

        p._hasPausedChild = function() {
            var tween = this._first;
            while (tween) {
                if (tween._paused || ((tween instanceof TimelineLite) && tween._hasPausedChild())) {
                    return true;
                }
                tween = tween._next;
            }
            return false;
        };

        p.getChildren = function(nested, tweens, timelines, ignoreBeforeTime) {
            ignoreBeforeTime = ignoreBeforeTime || -9999999999;
            var a = [],
                tween = this._first,
                cnt = 0;
            while (tween) {
                if (tween._startTime < ignoreBeforeTime) {
                    //do nothing
                } else if (tween instanceof TweenLite) {
                    if (tweens !== false) {
                        a[cnt++] = tween;
                    }
                } else {
                    if (timelines !== false) {
                        a[cnt++] = tween;
                    }
                    if (nested !== false) {
                        a = a.concat(tween.getChildren(true, tweens, timelines));
                        cnt = a.length;
                    }
                }
                tween = tween._next;
            }
            return a;
        };

        p.getTweensOf = function(target, nested) {
            var disabled = this._gc,
                a = [],
                cnt = 0,
                tweens, i;
            if (disabled) {
                this._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.
            }
            tweens = TweenLite.getTweensOf(target);
            i = tweens.length;
            while (--i > -1) {
                if (tweens[i].timeline === this || (nested && this._contains(tweens[i]))) {
                    a[cnt++] = tweens[i];
                }
            }
            if (disabled) {
                this._enabled(false, true);
            }
            return a;
        };

        p.recent = function() {
            return this._recent;
        };

        p._contains = function(tween) {
            var tl = tween.timeline;
            while (tl) {
                if (tl === this) {
                    return true;
                }
                tl = tl.timeline;
            }
            return false;
        };

        p.shiftChildren = function(amount, adjustLabels, ignoreBeforeTime) {
            ignoreBeforeTime = ignoreBeforeTime || 0;
            var tween = this._first,
                labels = this._labels,
                p;
            while (tween) {
                if (tween._startTime >= ignoreBeforeTime) {
                    tween._startTime += amount;
                }
                tween = tween._next;
            }
            if (adjustLabels) {
                for (p in labels) {
                    if (labels[p] >= ignoreBeforeTime) {
                        labels[p] += amount;
                    }
                }
            }
            return this._uncache(true);
        };

        p._kill = function(vars, target) {
            if (!vars && !target) {
                return this._enabled(false, false);
            }
            var tweens = (!target) ? this.getChildren(true, true, false) : this.getTweensOf(target),
                i = tweens.length,
                changed = false;
            while (--i > -1) {
                if (tweens[i]._kill(vars, target)) {
                    changed = true;
                }
            }
            return changed;
        };

        p.clear = function(labels) {
            var tweens = this.getChildren(false, true, true),
                i = tweens.length;
            this._time = this._totalTime = 0;
            while (--i > -1) {
                tweens[i]._enabled(false, false);
            }
            if (labels !== false) {
                this._labels = {};
            }
            return this._uncache(true);
        };

        p.invalidate = function() {
            var tween = this._first;
            while (tween) {
                tween.invalidate();
                tween = tween._next;
            }
            return Animation.prototype.invalidate.call(this);;
        };

        p._enabled = function(enabled, ignoreTimeline) {
            if (enabled === this._gc) {
                var tween = this._first;
                while (tween) {
                    tween._enabled(enabled, true);
                    tween = tween._next;
                }
            }
            return SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);
        };

        p.totalTime = function(time, suppressEvents, uncapped) {
            this._forcingPlayhead = true;
            var val = Animation.prototype.totalTime.apply(this, arguments);
            this._forcingPlayhead = false;
            return val;
        };

        p.duration = function(value) {
            if (!arguments.length) {
                if (this._dirty) {
                    this.totalDuration(); //just triggers recalculation
                }
                return this._duration;
            }
            if (this.duration() !== 0 && value !== 0) {
                this.timeScale(this._duration / value);
            }
            return this;
        };

        p.totalDuration = function(value) {
            if (!arguments.length) {
                if (this._dirty) {
                    var max = 0,
                        tween = this._last,
                        prevStart = 999999999999,
                        prev, end;
                    while (tween) {
                        prev = tween._prev; //record it here in case the tween changes position in the sequence...
                        if (tween._dirty) {
                            tween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.
                        }
                        if (tween._startTime > prevStart && this._sortChildren && !tween._paused && !this._calculatingDuration) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
                            this._calculatingDuration = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add(), like _parseTimeOrLabel().
                            this.add(tween, tween._startTime - tween._delay);
                            this._calculatingDuration = 0;
                        } else {
                            prevStart = tween._startTime;
                        }
                        if (tween._startTime < 0 && !tween._paused) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
                            max -= tween._startTime;
                            if (this._timeline.smoothChildTiming) {
                                this._startTime += tween._startTime / this._timeScale;
                                this._time -= tween._startTime;
                                this._totalTime -= tween._startTime;
                                this._rawPrevTime -= tween._startTime;
                            }
                            this.shiftChildren(-tween._startTime, false, -9999999999);
                            prevStart = 0;
                        }
                        end = tween._startTime + (tween._totalDuration / tween._timeScale);
                        if (end > max) {
                            max = end;
                        }
                        tween = prev;
                    }
                    this._duration = this._totalDuration = max;
                    this._dirty = false;
                }
                return this._totalDuration;
            }
            return (value && this.totalDuration()) ? this.timeScale(this._totalDuration / value) : this;
        };

        p.paused = function(value) {
            if (!value) { //if there's a pause directly at the spot from where we're unpausing, skip it.
                var tween = this._first,
                    time = this._time;
                while (tween) {
                    if (tween._startTime === time && tween.data === "isPause") {
                        tween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.
                    }
                    tween = tween._next;
                }
            }
            return Animation.prototype.paused.apply(this, arguments);
        };

        p.usesFrames = function() {
            var tl = this._timeline;
            while (tl._timeline) {
                tl = tl._timeline;
            }
            return (tl === Animation._rootFramesTimeline);
        };

        p.rawTime = function(wrapRepeats) {
            return (wrapRepeats && (this._paused || (this._repeat && this.time() > 0 && this.totalProgress() < 1))) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(wrapRepeats) - this._startTime) * this._timeScale;
        };

        return TimelineLite;

    }, true);













    /*
     * ----------------------------------------------------------------
     * TimelineMax
     * ----------------------------------------------------------------
     */
    _gsScope._gsDefine("TimelineMax", ["TimelineLite", "TweenLite", "easing.Ease"], function(TimelineLite, TweenLite, Ease) {

        var TimelineMax = function(vars) {
                TimelineLite.call(this, vars);
                this._repeat = this.vars.repeat || 0;
                this._repeatDelay = this.vars.repeatDelay || 0;
                this._cycle = 0;
                this._yoyo = (this.vars.yoyo === true);
                this._dirty = true;
            },
            _tinyNum = 0.0000000001,
            TweenLiteInternals = TweenLite._internals,
            _lazyTweens = TweenLiteInternals.lazyTweens,
            _lazyRender = TweenLiteInternals.lazyRender,
            _globals = _gsScope._gsDefine.globals,
            _easeNone = new Ease(null, null, 1, 0),
            p = TimelineMax.prototype = new TimelineLite();

        p.constructor = TimelineMax;
        p.kill()._gc = false;
        TimelineMax.version = "1.20.4";

        p.invalidate = function() {
            this._yoyo = (this.vars.yoyo === true);
            this._repeat = this.vars.repeat || 0;
            this._repeatDelay = this.vars.repeatDelay || 0;
            this._uncache(true);
            return TimelineLite.prototype.invalidate.call(this);
        };

        p.addCallback = function(callback, position, params, scope) {
            return this.add(TweenLite.delayedCall(0, callback, params, scope), position);
        };

        p.removeCallback = function(callback, position) {
            if (callback) {
                if (position == null) {
                    this._kill(null, callback);
                } else {
                    var a = this.getTweensOf(callback, false),
                        i = a.length,
                        time = this._parseTimeOrLabel(position);
                    while (--i > -1) {
                        if (a[i]._startTime === time) {
                            a[i]._enabled(false, false);
                        }
                    }
                }
            }
            return this;
        };

        p.removePause = function(position) {
            return this.removeCallback(TimelineLite._internals.pauseCallback, position);
        };

        p.tweenTo = function(position, vars) {
            vars = vars || {};
            var copy = {
                    ease: _easeNone,
                    useFrames: this.usesFrames(),
                    immediateRender: false,
                    lazy: false
                },
                Engine = (vars.repeat && _globals.TweenMax) || TweenLite,
                duration, p, t;
            for (p in vars) {
                copy[p] = vars[p];
            }
            copy.time = this._parseTimeOrLabel(position);
            duration = (Math.abs(Number(copy.time) - this._time) / this._timeScale) || 0.001;
            t = new Engine(this, duration, copy);
            copy.onStart = function() {
                t.target.paused(true);
                if (t.vars.time !== t.target.time() && duration === t.duration() && !t.isFromTo) { //don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.
                    t.duration(Math.abs(t.vars.time - t.target.time()) / t.target._timeScale).render(t.time(), true, true); //render() right away to ensure that things look right, especially in the case of .tweenTo(0).
                }
                if (vars.onStart) { //in case the user had an onStart in the vars - we don't want to overwrite it.
                    vars.onStart.apply(vars.onStartScope || vars.callbackScope || t, vars.onStartParams || []); //don't use t._callback("onStart") or it'll point to the copy.onStart and we'll get a recursion error.
                }
            };
            return t;
        };

        p.tweenFromTo = function(fromPosition, toPosition, vars) {
            vars = vars || {};
            fromPosition = this._parseTimeOrLabel(fromPosition);
            vars.startAt = {
                onComplete: this.seek,
                onCompleteParams: [fromPosition],
                callbackScope: this
            };
            vars.immediateRender = (vars.immediateRender !== false);
            var t = this.tweenTo(toPosition, vars);
            t.isFromTo = 1; //to ensure we don't mess with the duration in the onStart (we've got the start and end values here, so lock it in)
            return t.duration((Math.abs(t.vars.time - fromPosition) / this._timeScale) || 0.001);
        };

        p.render = function(time, suppressEvents, force) {
            if (this._gc) {
                this._enabled(true, false);
            }
            var prevTime = this._time,
                totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                dur = this._duration,
                prevTotalTime = this._totalTime,
                prevStart = this._startTime,
                prevTimeScale = this._timeScale,
                prevRawPrevTime = this._rawPrevTime,
                prevPaused = this._paused,
                prevCycle = this._cycle,
                tween, isComplete, next, callback, internalForce, cycleDuration, pauseTween, curTime;
            if (prevTime !== this._time) { //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
                time += this._time - prevTime;
            }
            if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                if (!this._locked) {
                    this._totalTime = totalDur;
                    this._cycle = this._repeat;
                }
                if (!this._reversed)
                    if (!this._hasPausedChild()) {
                        isComplete = true;
                        callback = "onComplete";
                        internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                        if (this._duration === 0)
                            if ((time <= 0 && time >= -0.0000001) || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum)
                                if (prevRawPrevTime !== time && this._first) {
                                    internalForce = true;
                                    if (prevRawPrevTime > _tinyNum) {
                                        callback = "onReverseComplete";
                                    }
                                }
                    }
                this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                if (this._yoyo && (this._cycle & 1) !== 0) {
                    this._time = time = 0;
                } else {
                    this._time = dur;
                    time = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.
                }

            } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                if (!this._locked) {
                    this._totalTime = this._cycle = 0;
                }
                this._time = 0;
                if (prevTime !== 0 || (dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || (time < 0 && prevRawPrevTime >= 0)) && !this._locked)) { //edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)
                    callback = "onReverseComplete";
                    isComplete = this._reversed;
                }
                if (time < 0) {
                    this._active = false;
                    if (this._timeline.autoRemoveChildren && this._reversed) {
                        internalForce = isComplete = true;
                        callback = "onReverseComplete";
                    } else if (prevRawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
                        internalForce = true;
                    }
                    this._rawPrevTime = time;
                } else {
                    this._rawPrevTime = (dur || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
                        tween = this._first;
                        while (tween && tween._startTime === 0) {
                            if (!tween._duration) {
                                isComplete = false;
                            }
                            tween = tween._next;
                        }
                    }
                    time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
                    if (!this._initted) {
                        internalForce = true;
                    }
                }

            } else {
                if (dur === 0 && prevRawPrevTime < 0) { //without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.
                    internalForce = true;
                }
                this._time = this._rawPrevTime = time;
                if (!this._locked) {
                    this._totalTime = time;
                    if (this._repeat !== 0) {
                        cycleDuration = dur + this._repeatDelay;
                        this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)
                        if (this._cycle !== 0)
                            if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
                                this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
                            }
                        this._time = this._totalTime - (this._cycle * cycleDuration);
                        if (this._yoyo)
                            if ((this._cycle & 1) !== 0) {
                                this._time = dur - this._time;
                            }
                        if (this._time > dur) {
                            this._time = dur;
                            time = dur + 0.0001; //to avoid occasional floating point rounding error
                        } else if (this._time < 0) {
                            this._time = time = 0;
                        } else {
                            time = this._time;
                        }
                    }
                }

                if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                    time = this._time;
                    if (time >= prevTime || (this._repeat && prevCycle !== this._cycle)) {
                        tween = this._first;
                        while (tween && tween._startTime <= time && !pauseTween) {
                            if (!tween._duration)
                                if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                    pauseTween = tween;
                                }
                            tween = tween._next;
                        }
                    } else {
                        tween = this._last;
                        while (tween && tween._startTime >= time && !pauseTween) {
                            if (!tween._duration)
                                if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                    pauseTween = tween;
                                }
                            tween = tween._prev;
                        }
                    }
                    if (pauseTween && pauseTween._startTime < dur) {
                        this._time = time = pauseTween._startTime;
                        this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
                    }
                }

            }

            if (this._cycle !== prevCycle)
                if (!this._locked) {
                    /*
                    make sure children at the end/beginning of the timeline are rendered properly. If, for example,
                    a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
                    would get transated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
                    could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
                    we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
                    ensure that zero-duration tweens at the very beginning or end of the TimelineMax work.
                    */
                    var backwards = (this._yoyo && (prevCycle & 1) !== 0),
                        wrap = (backwards === (this._yoyo && (this._cycle & 1) !== 0)),
                        recTotalTime = this._totalTime,
                        recCycle = this._cycle,
                        recRawPrevTime = this._rawPrevTime,
                        recTime = this._time;

                    this._totalTime = prevCycle * dur;
                    if (this._cycle < prevCycle) {
                        backwards = !backwards;
                    } else {
                        this._totalTime += dur;
                    }
                    this._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a "cleaner" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.

                    this._rawPrevTime = (dur === 0) ? prevRawPrevTime - 0.0001 : prevRawPrevTime;
                    this._cycle = prevCycle;
                    this._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()
                    prevTime = (backwards) ? 0 : dur;
                    this.render(prevTime, suppressEvents, (dur === 0));
                    if (!suppressEvents)
                        if (!this._gc) {
                            if (this.vars.onRepeat) {
                                this._cycle = recCycle; //in case the onRepeat alters the playhead or invalidates(), we shouldn't stay locked or use the previous cycle.
                                this._locked = false;
                                this._callback("onRepeat");
                            }
                        }
                    if (prevTime !== this._time) { //in case there's a callback like onComplete in a nested tween/timeline that changes the playhead position, like via seek(), we should just abort.
                        return;
                    }
                    if (wrap) {
                        this._cycle = prevCycle; //if there's an onRepeat, we reverted this above, so make sure it's set properly again. We also unlocked in that scenario, so reset that too.
                        this._locked = true;
                        prevTime = (backwards) ? dur + 0.0001 : -0.0001;
                        this.render(prevTime, true, false);
                    }
                    this._locked = false;
                    if (this._paused && !prevPaused) { //if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)
                        return;
                    }
                    this._time = recTime;
                    this._totalTime = recTotalTime;
                    this._cycle = recCycle;
                    this._rawPrevTime = recRawPrevTime;
                }

            if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                if (prevTotalTime !== this._totalTime)
                    if (this._onUpdate)
                        if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
                            this._callback("onUpdate");
                        }
                return;
            } else if (!this._initted) {
                this._initted = true;
            }

            if (!this._active)
                if (!this._paused && this._totalTime !== prevTotalTime && time > 0) {
                    this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
                }

            if (prevTotalTime === 0)
                if (this.vars.onStart)
                    if (this._totalTime !== 0 || !this._totalDuration)
                        if (!suppressEvents) {
                            this._callback("onStart");
                        }

            curTime = this._time;
            if (curTime >= prevTime) {
                tween = this._first;
                while (tween) {
                    next = tween._next; //record it here because the value could change after rendering...
                    if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                        break;
                    } else if (tween._active || (tween._startTime <= this._time && !tween._paused && !tween._gc)) {
                        if (pauseTween === tween) {
                            this.pause();
                        }
                        if (!tween._reversed) {
                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                        } else {
                            tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                        }
                    }
                    tween = next;
                }
            } else {
                tween = this._last;
                while (tween) {
                    next = tween._prev; //record it here because the value could change after rendering...
                    if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                        break;
                    } else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
                        if (pauseTween === tween) {
                            pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
                            while (pauseTween && pauseTween.endTime() > this._time) {
                                pauseTween.render((pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
                                pauseTween = pauseTween._prev;
                            }
                            pauseTween = null;
                            this.pause();
                        }
                        if (!tween._reversed) {
                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                        } else {
                            tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                        }
                    }
                    tween = next;
                }
            }

            if (this._onUpdate)
                if (!suppressEvents) {
                    if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
                        _lazyRender();
                    }
                    this._callback("onUpdate");
                }
            if (callback)
                if (!this._locked)
                    if (!this._gc)
                        if (prevStart === this._startTime || prevTimeScale !== this._timeScale)
                            if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
                                if (isComplete) {
                                    if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
                                        _lazyRender();
                                    }
                                    if (this._timeline.autoRemoveChildren) {
                                        this._enabled(false, false);
                                    }
                                    this._active = false;
                                }
                                if (!suppressEvents && this.vars[callback]) {
                                    this._callback(callback);
                                }
                            }
        };

        p.getActive = function(nested, tweens, timelines) {
            if (nested == null) {
                nested = true;
            }
            if (tweens == null) {
                tweens = true;
            }
            if (timelines == null) {
                timelines = false;
            }
            var a = [],
                all = this.getChildren(nested, tweens, timelines),
                cnt = 0,
                l = all.length,
                i, tween;
            for (i = 0; i < l; i++) {
                tween = all[i];
                if (tween.isActive()) {
                    a[cnt++] = tween;
                }
            }
            return a;
        };


        p.getLabelAfter = function(time) {
            if (!time)
                if (time !== 0) { //faster than isNan()
                    time = this._time;
                }
            var labels = this.getLabelsArray(),
                l = labels.length,
                i;
            for (i = 0; i < l; i++) {
                if (labels[i].time > time) {
                    return labels[i].name;
                }
            }
            return null;
        };

        p.getLabelBefore = function(time) {
            if (time == null) {
                time = this._time;
            }
            var labels = this.getLabelsArray(),
                i = labels.length;
            while (--i > -1) {
                if (labels[i].time < time) {
                    return labels[i].name;
                }
            }
            return null;
        };

        p.getLabelsArray = function() {
            var a = [],
                cnt = 0,
                p;
            for (p in this._labels) {
                a[cnt++] = {
                    time: this._labels[p],
                    name: p
                };
            }
            a.sort(function(a, b) {
                return a.time - b.time;
            });
            return a;
        };

        p.invalidate = function() {
            this._locked = false; //unlock and set cycle in case invalidate() is called from inside an onRepeat
            return TimelineLite.prototype.invalidate.call(this);
        };


        //---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------

        p.progress = function(value, suppressEvents) {
            return (!arguments.length) ? (this._time / this.duration()) || 0 : this.totalTime(this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
        };

        p.totalProgress = function(value, suppressEvents) {
            return (!arguments.length) ? (this._totalTime / this.totalDuration()) || 0 : this.totalTime(this.totalDuration() * value, suppressEvents);
        };

        p.totalDuration = function(value) {
            if (!arguments.length) {
                if (this._dirty) {
                    TimelineLite.prototype.totalDuration.call(this); //just forces refresh
                    //Instead of Infinity, we use 999999999999 so that we can accommodate reverses.
                    this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
                }
                return this._totalDuration;
            }
            return (this._repeat === -1 || !value) ? this : this.timeScale(this.totalDuration() / value);
        };

        p.time = function(value, suppressEvents) {
            if (!arguments.length) {
                return this._time;
            }
            if (this._dirty) {
                this.totalDuration();
            }
            if (value > this._duration) {
                value = this._duration;
            }
            if (this._yoyo && (this._cycle & 1) !== 0) {
                value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
            } else if (this._repeat !== 0) {
                value += this._cycle * (this._duration + this._repeatDelay);
            }
            return this.totalTime(value, suppressEvents);
        };

        p.repeat = function(value) {
            if (!arguments.length) {
                return this._repeat;
            }
            this._repeat = value;
            return this._uncache(true);
        };

        p.repeatDelay = function(value) {
            if (!arguments.length) {
                return this._repeatDelay;
            }
            this._repeatDelay = value;
            return this._uncache(true);
        };

        p.yoyo = function(value) {
            if (!arguments.length) {
                return this._yoyo;
            }
            this._yoyo = value;
            return this;
        };

        p.currentLabel = function(value) {
            if (!arguments.length) {
                return this.getLabelBefore(this._time + 0.00000001);
            }
            return this.seek(value, true);
        };

        return TimelineMax;

    }, true);












    /*
     * ----------------------------------------------------------------
     * BezierPlugin
     * ----------------------------------------------------------------
     */
    (function() {

        var _RAD2DEG = 180 / Math.PI,
            _r1 = [],
            _r2 = [],
            _r3 = [],
            _corProps = {},
            _globals = _gsScope._gsDefine.globals,
            Segment = function(a, b, c, d) {
                if (c === d) { //if c and d match, the final autoRotate value could lock at -90 degrees, so differentiate them slightly.
                    c = d - (d - b) / 1000000;
                }
                if (a === b) { //if a and b match, the starting autoRotate value could lock at -90 degrees, so differentiate them slightly.
                    b = a + (c - a) / 1000000;
                }
                this.a = a;
                this.b = b;
                this.c = c;
                this.d = d;
                this.da = d - a;
                this.ca = c - a;
                this.ba = b - a;
            },
            _correlate = ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",
            cubicToQuadratic = function(a, b, c, d) {
                var q1 = {
                        a: a
                    },
                    q2 = {},
                    q3 = {},
                    q4 = {
                        c: d
                    },
                    mab = (a + b) / 2,
                    mbc = (b + c) / 2,
                    mcd = (c + d) / 2,
                    mabc = (mab + mbc) / 2,
                    mbcd = (mbc + mcd) / 2,
                    m8 = (mbcd - mabc) / 8;
                q1.b = mab + (a - mab) / 4;
                q2.b = mabc + m8;
                q1.c = q2.a = (q1.b + q2.b) / 2;
                q2.c = q3.a = (mabc + mbcd) / 2;
                q3.b = mbcd - m8;
                q4.b = mcd + (d - mcd) / 4;
                q3.c = q4.a = (q3.b + q4.b) / 2;
                return [q1, q2, q3, q4];
            },
            _calculateControlPoints = function(a, curviness, quad, basic, correlate) {
                var l = a.length - 1,
                    ii = 0,
                    cp1 = a[0].a,
                    i, p1, p2, p3, seg, m1, m2, mm, cp2, qb, r1, r2, tl;
                for (i = 0; i < l; i++) {
                    seg = a[ii];
                    p1 = seg.a;
                    p2 = seg.d;
                    p3 = a[ii + 1].d;

                    if (correlate) {
                        r1 = _r1[i];
                        r2 = _r2[i];
                        tl = ((r2 + r1) * curviness * 0.25) / (basic ? 0.5 : _r3[i] || 0.5);
                        m1 = p2 - (p2 - p1) * (basic ? curviness * 0.5 : (r1 !== 0 ? tl / r1 : 0));
                        m2 = p2 + (p3 - p2) * (basic ? curviness * 0.5 : (r2 !== 0 ? tl / r2 : 0));
                        mm = p2 - (m1 + (((m2 - m1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
                    } else {
                        m1 = p2 - (p2 - p1) * curviness * 0.5;
                        m2 = p2 + (p3 - p2) * curviness * 0.5;
                        mm = p2 - (m1 + m2) / 2;
                    }
                    m1 += mm;
                    m2 += mm;

                    seg.c = cp2 = m1;
                    if (i !== 0) {
                        seg.b = cp1;
                    } else {
                        seg.b = cp1 = seg.a + (seg.c - seg.a) * 0.6; //instead of placing b on a exactly, we move it inline with c so that if the user specifies an ease like Back.easeIn or Elastic.easeIn which goes BEYOND the beginning, it will do so smoothly.
                    }

                    seg.da = p2 - p1;
                    seg.ca = cp2 - p1;
                    seg.ba = cp1 - p1;

                    if (quad) {
                        qb = cubicToQuadratic(p1, cp1, cp2, p2);
                        a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
                        ii += 4;
                    } else {
                        ii++;
                    }

                    cp1 = m2;
                }
                seg = a[ii];
                seg.b = cp1;
                seg.c = cp1 + (seg.d - cp1) * 0.4; //instead of placing c on d exactly, we move it inline with b so that if the user specifies an ease like Back.easeOut or Elastic.easeOut which goes BEYOND the end, it will do so smoothly.
                seg.da = seg.d - seg.a;
                seg.ca = seg.c - seg.a;
                seg.ba = cp1 - seg.a;
                if (quad) {
                    qb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);
                    a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
                }
            },
            _parseAnchors = function(values, p, correlate, prepend) {
                var a = [],
                    l, i, p1, p2, p3, tmp;
                if (prepend) {
                    values = [prepend].concat(values);
                    i = values.length;
                    while (--i > -1) {
                        if (typeof((tmp = values[i][p])) === "string")
                            if (tmp.charAt(1) === "=") {
                                values[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)); //accommodate relative values. Do it inline instead of breaking it out into a function for speed reasons
                            }
                    }
                }
                l = values.length - 2;
                if (l < 0) {
                    a[0] = new Segment(values[0][p], 0, 0, values[0][p]);
                    return a;
                }
                for (i = 0; i < l; i++) {
                    p1 = values[i][p];
                    p2 = values[i + 1][p];
                    a[i] = new Segment(p1, 0, 0, p2);
                    if (correlate) {
                        p3 = values[i + 2][p];
                        _r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);
                        _r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);
                    }
                }
                a[i] = new Segment(values[i][p], 0, 0, values[i + 1][p]);
                return a;
            },
            bezierThrough = function(values, curviness, quadratic, basic, correlate, prepend) {
                var obj = {},
                    props = [],
                    first = prepend || values[0],
                    i, p, a, j, r, l, seamless, last;
                correlate = (typeof(correlate) === "string") ? "," + correlate + "," : _correlate;
                if (curviness == null) {
                    curviness = 1;
                }
                for (p in values[0]) {
                    props.push(p);
                }
                //check to see if the last and first values are identical (well, within 0.05). If so, make seamless by appending the second element to the very end of the values array and the 2nd-to-last element to the very beginning (we'll remove those segments later)
                if (values.length > 1) {
                    last = values[values.length - 1];
                    seamless = true;
                    i = props.length;
                    while (--i > -1) {
                        p = props[i];
                        if (Math.abs(first[p] - last[p]) > 0.05) { //build in a tolerance of +/-0.05 to accommodate rounding errors.
                            seamless = false;
                            break;
                        }
                    }
                    if (seamless) {
                        values = values.concat(); //duplicate the array to avoid contaminating the original which the user may be reusing for other tweens
                        if (prepend) {
                            values.unshift(prepend);
                        }
                        values.push(values[1]);
                        prepend = values[values.length - 3];
                    }
                }
                _r1.length = _r2.length = _r3.length = 0;
                i = props.length;
                while (--i > -1) {
                    p = props[i];
                    _corProps[p] = (correlate.indexOf("," + p + ",") !== -1);
                    obj[p] = _parseAnchors(values, p, _corProps[p], prepend);
                }
                i = _r1.length;
                while (--i > -1) {
                    _r1[i] = Math.sqrt(_r1[i]);
                    _r2[i] = Math.sqrt(_r2[i]);
                }
                if (!basic) {
                    i = props.length;
                    while (--i > -1) {
                        if (_corProps[p]) {
                            a = obj[props[i]];
                            l = a.length - 1;
                            for (j = 0; j < l; j++) {
                                r = (a[j + 1].da / _r2[j] + a[j].da / _r1[j]) || 0;
                                _r3[j] = (_r3[j] || 0) + r * r;
                            }
                        }
                    }
                    i = _r3.length;
                    while (--i > -1) {
                        _r3[i] = Math.sqrt(_r3[i]);
                    }
                }
                i = props.length;
                j = quadratic ? 4 : 1;
                while (--i > -1) {
                    p = props[i];
                    a = obj[p];
                    _calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]); //this method requires that _parseAnchors() and _setSegmentRatios() ran first so that _r1, _r2, and _r3 values are populated for all properties
                    if (seamless) {
                        a.splice(0, j);
                        a.splice(a.length - j, j);
                    }
                }
                return obj;
            },
            _parseBezierData = function(values, type, prepend) {
                type = type || "soft";
                var obj = {},
                    inc = (type === "cubic") ? 3 : 2,
                    soft = (type === "soft"),
                    props = [],
                    a, b, c, d, cur, i, j, l, p, cnt, tmp;
                if (soft && prepend) {
                    values = [prepend].concat(values);
                }
                if (values == null || values.length < inc + 1) {
                    throw "invalid Bezier data";
                }
                for (p in values[0]) {
                    props.push(p);
                }
                i = props.length;
                while (--i > -1) {
                    p = props[i];
                    obj[p] = cur = [];
                    cnt = 0;
                    l = values.length;
                    for (j = 0; j < l; j++) {
                        a = (prepend == null) ? values[j][p] : (typeof((tmp = values[j][p])) === "string" && tmp.charAt(1) === "=") ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);
                        if (soft)
                            if (j > 1)
                                if (j < l - 1) {
                                    cur[cnt++] = (a + cur[cnt - 2]) / 2;
                                }
                        cur[cnt++] = a;
                    }
                    l = cnt - inc + 1;
                    cnt = 0;
                    for (j = 0; j < l; j += inc) {
                        a = cur[j];
                        b = cur[j + 1];
                        c = cur[j + 2];
                        d = (inc === 2) ? 0 : cur[j + 3];
                        cur[cnt++] = tmp = (inc === 3) ? new Segment(a, b, c, d) : new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
                    }
                    cur.length = cnt;
                }
                return obj;
            },
            _addCubicLengths = function(a, steps, resolution) {
                var inc = 1 / resolution,
                    j = a.length,
                    d, d1, s, da, ca, ba, p, i, inv, bez, index;
                while (--j > -1) {
                    bez = a[j];
                    s = bez.a;
                    da = bez.d - s;
                    ca = bez.c - s;
                    ba = bez.b - s;
                    d = d1 = 0;
                    for (i = 1; i <= resolution; i++) {
                        p = inc * i;
                        inv = 1 - p;
                        d = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);
                        index = j * resolution + i - 1;
                        steps[index] = (steps[index] || 0) + d * d;
                    }
                }
            },
            _parseLengthData = function(obj, resolution) {
                resolution = resolution >> 0 || 6;
                var a = [],
                    lengths = [],
                    d = 0,
                    total = 0,
                    threshold = resolution - 1,
                    segments = [],
                    curLS = [], //current length segments array
                    p, i, l, index;
                for (p in obj) {
                    _addCubicLengths(obj[p], a, resolution);
                }
                l = a.length;
                for (i = 0; i < l; i++) {
                    d += Math.sqrt(a[i]);
                    index = i % resolution;
                    curLS[index] = d;
                    if (index === threshold) {
                        total += d;
                        index = (i / resolution) >> 0;
                        segments[index] = curLS;
                        lengths[index] = total;
                        d = 0;
                        curLS = [];
                    }
                }
                return {
                    length: total,
                    lengths: lengths,
                    segments: segments
                };
            },



            BezierPlugin = _gsScope._gsDefine.plugin({
                propName: "bezier",
                priority: -1,
                version: "1.3.8",
                API: 2,
                global: true,

                //gets called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                init: function(target, vars, tween) {
                    this._target = target;
                    if (vars instanceof Array) {
                        vars = {
                            values: vars
                        };
                    }
                    this._func = {};
                    this._mod = {};
                    this._props = [];
                    this._timeRes = (vars.timeResolution == null) ? 6 : parseInt(vars.timeResolution, 10);
                    var values = vars.values || [],
                        first = {},
                        second = values[0],
                        autoRotate = vars.autoRotate || tween.vars.orientToBezier,
                        p, isFunc, i, j, prepend;

                    this._autoRotate = autoRotate ? (autoRotate instanceof Array) ? autoRotate : [
                        ["x", "y", "rotation", ((autoRotate === true) ? 0 : Number(autoRotate) || 0)]
                    ] : null;
                    for (p in second) {
                        this._props.push(p);
                    }

                    i = this._props.length;
                    while (--i > -1) {
                        p = this._props[i];

                        this._overwriteProps.push(p);
                        isFunc = this._func[p] = (typeof(target[p]) === "function");
                        first[p] = (!isFunc) ? parseFloat(target[p]) : target[((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3))]();
                        if (!prepend)
                            if (first[p] !== values[0][p]) {
                                prepend = first;
                            }
                    }
                    this._beziers = (vars.type !== "cubic" && vars.type !== "quadratic" && vars.type !== "soft") ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, (vars.type === "thruBasic"), vars.correlate, prepend) : _parseBezierData(values, vars.type, first);
                    this._segCount = this._beziers[p].length;

                    if (this._timeRes) {
                        var ld = _parseLengthData(this._beziers, this._timeRes);
                        this._length = ld.length;
                        this._lengths = ld.lengths;
                        this._segments = ld.segments;
                        this._l1 = this._li = this._s1 = this._si = 0;
                        this._l2 = this._lengths[0];
                        this._curSeg = this._segments[0];
                        this._s2 = this._curSeg[0];
                        this._prec = 1 / this._curSeg.length;
                    }

                    if ((autoRotate = this._autoRotate)) {
                        this._initialRotations = [];
                        if (!(autoRotate[0] instanceof Array)) {
                            this._autoRotate = autoRotate = [autoRotate];
                        }
                        i = autoRotate.length;
                        while (--i > -1) {
                            for (j = 0; j < 3; j++) {
                                p = autoRotate[i][j];
                                this._func[p] = (typeof(target[p]) === "function") ? target[((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3))] : false;
                            }
                            p = autoRotate[i][2];
                            this._initialRotations[i] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;
                            this._overwriteProps.push(p);
                        }
                    }
                    this._startRatio = tween.vars.runBackwards ? 1 : 0; //we determine the starting ratio when the tween inits which is always 0 unless the tween has runBackwards:true (indicating it's a from() tween) in which case it's 1.
                    return true;
                },

                //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
                set: function(v) {
                    var segments = this._segCount,
                        func = this._func,
                        target = this._target,
                        notStart = (v !== this._startRatio),
                        curIndex, inv, i, p, b, t, val, l, lengths, curSeg;
                    if (!this._timeRes) {
                        curIndex = (v < 0) ? 0 : (v >= 1) ? segments - 1 : (segments * v) >> 0;
                        t = (v - (curIndex * (1 / segments))) * segments;
                    } else {
                        lengths = this._lengths;
                        curSeg = this._curSeg;
                        v *= this._length;
                        i = this._li;
                        //find the appropriate segment (if the currently cached one isn't correct)
                        if (v > this._l2 && i < segments - 1) {
                            l = segments - 1;
                            while (i < l && (this._l2 = lengths[++i]) <= v) {}
                            this._l1 = lengths[i - 1];
                            this._li = i;
                            this._curSeg = curSeg = this._segments[i];
                            this._s2 = curSeg[(this._s1 = this._si = 0)];
                        } else if (v < this._l1 && i > 0) {
                            while (i > 0 && (this._l1 = lengths[--i]) >= v) {}
                            if (i === 0 && v < this._l1) {
                                this._l1 = 0;
                            } else {
                                i++;
                            }
                            this._l2 = lengths[i];
                            this._li = i;
                            this._curSeg = curSeg = this._segments[i];
                            this._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;
                            this._s2 = curSeg[this._si];
                        }
                        curIndex = i;
                        //now find the appropriate sub-segment (we split it into the number of pieces that was defined by "precision" and measured each one)
                        v -= this._l1;
                        i = this._si;
                        if (v > this._s2 && i < curSeg.length - 1) {
                            l = curSeg.length - 1;
                            while (i < l && (this._s2 = curSeg[++i]) <= v) {}
                            this._s1 = curSeg[i - 1];
                            this._si = i;
                        } else if (v < this._s1 && i > 0) {
                            while (i > 0 && (this._s1 = curSeg[--i]) >= v) {}
                            if (i === 0 && v < this._s1) {
                                this._s1 = 0;
                            } else {
                                i++;
                            }
                            this._s2 = curSeg[i];
                            this._si = i;
                        }
                        t = ((i + (v - this._s1) / (this._s2 - this._s1)) * this._prec) || 0;
                    }
                    inv = 1 - t;

                    i = this._props.length;
                    while (--i > -1) {
                        p = this._props[i];
                        b = this._beziers[p][curIndex];
                        val = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;
                        if (this._mod[p]) {
                            val = this._mod[p](val, target);
                        }
                        if (func[p]) {
                            target[p](val);
                        } else {
                            target[p] = val;
                        }
                    }

                    if (this._autoRotate) {
                        var ar = this._autoRotate,
                            b2, x1, y1, x2, y2, add, conv;
                        i = ar.length;
                        while (--i > -1) {
                            p = ar[i][2];
                            add = ar[i][3] || 0;
                            conv = (ar[i][4] === true) ? 1 : _RAD2DEG;
                            b = this._beziers[ar[i][0]];
                            b2 = this._beziers[ar[i][1]];

                            if (b && b2) { //in case one of the properties got overwritten.
                                b = b[curIndex];
                                b2 = b2[curIndex];

                                x1 = b.a + (b.b - b.a) * t;
                                x2 = b.b + (b.c - b.b) * t;
                                x1 += (x2 - x1) * t;
                                x2 += ((b.c + (b.d - b.c) * t) - x2) * t;

                                y1 = b2.a + (b2.b - b2.a) * t;
                                y2 = b2.b + (b2.c - b2.b) * t;
                                y1 += (y2 - y1) * t;
                                y2 += ((b2.c + (b2.d - b2.c) * t) - y2) * t;

                                val = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];

                                if (this._mod[p]) {
                                    val = this._mod[p](val, target); //for modProps
                                }

                                if (func[p]) {
                                    target[p](val);
                                } else {
                                    target[p] = val;
                                }
                            }
                        }
                    }
                }
            }),
            p = BezierPlugin.prototype;


        BezierPlugin.bezierThrough = bezierThrough;
        BezierPlugin.cubicToQuadratic = cubicToQuadratic;
        BezierPlugin._autoCSS = true; //indicates that this plugin can be inserted into the "css" object using the autoCSS feature of TweenLite
        BezierPlugin.quadraticToCubic = function(a, b, c) {
            return new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
        };

        BezierPlugin._cssRegister = function() {
            var CSSPlugin = _globals.CSSPlugin;
            if (!CSSPlugin) {
                return;
            }
            var _internals = CSSPlugin._internals,
                _parseToProxy = _internals._parseToProxy,
                _setPluginRatio = _internals._setPluginRatio,
                CSSPropTween = _internals.CSSPropTween;
            _internals._registerComplexSpecialProp("bezier", {
                parser: function(t, e, prop, cssp, pt, plugin) {
                    if (e instanceof Array) {
                        e = {
                            values: e
                        };
                    }
                    plugin = new BezierPlugin();
                    var values = e.values,
                        l = values.length - 1,
                        pluginValues = [],
                        v = {},
                        i, p, data;
                    if (l < 0) {
                        return pt;
                    }
                    for (i = 0; i <= l; i++) {
                        data = _parseToProxy(t, values[i], cssp, pt, plugin, (l !== i));
                        pluginValues[i] = data.end;
                    }
                    for (p in e) {
                        v[p] = e[p]; //duplicate the vars object because we need to alter some things which would cause problems if the user plans to reuse the same vars object for another tween.
                    }
                    v.values = pluginValues;
                    pt = new CSSPropTween(t, "bezier", 0, 0, data.pt, 2);
                    pt.data = data;
                    pt.plugin = plugin;
                    pt.setRatio = _setPluginRatio;
                    if (v.autoRotate === 0) {
                        v.autoRotate = true;
                    }
                    if (v.autoRotate && !(v.autoRotate instanceof Array)) {
                        i = (v.autoRotate === true) ? 0 : Number(v.autoRotate);
                        v.autoRotate = (data.end.left != null) ? [
                            ["left", "top", "rotation", i, false]
                        ] : (data.end.x != null) ? [
                            ["x", "y", "rotation", i, false]
                        ] : false;
                    }
                    if (v.autoRotate) {
                        if (!cssp._transform) {
                            cssp._enableTransforms(false);
                        }
                        data.autoRotate = cssp._target._gsTransform;
                        data.proxy.rotation = data.autoRotate.rotation || 0;
                        cssp._overwriteProps.push("rotation");
                    }
                    plugin._onInitTween(data.proxy, v, cssp._tween);
                    return pt;
                }
            });
        };

        p._mod = function(lookup) {
            var op = this._overwriteProps,
                i = op.length,
                val;
            while (--i > -1) {
                val = lookup[op[i]];
                if (val && typeof(val) === "function") {
                    this._mod[op[i]] = val;
                }
            }
        };

        p._kill = function(lookup) {
            var a = this._props,
                p, i;
            for (p in this._beziers) {
                if (p in lookup) {
                    delete this._beziers[p];
                    delete this._func[p];
                    i = a.length;
                    while (--i > -1) {
                        if (a[i] === p) {
                            a.splice(i, 1);
                        }
                    }
                }
            }
            a = this._autoRotate;
            if (a) {
                i = a.length;
                while (--i > -1) {
                    if (lookup[a[i][2]]) {
                        a.splice(i, 1);
                    }
                }
            }
            return this._super._kill.call(this, lookup);
        };

    }());














    /*
     * ----------------------------------------------------------------
     * CSSPlugin
     * ----------------------------------------------------------------
     */
    _gsScope._gsDefine("plugins.CSSPlugin", ["plugins.TweenPlugin", "TweenLite"], function(TweenPlugin, TweenLite) {

        /** @constructor **/
        var CSSPlugin = function() {
                TweenPlugin.call(this, "css");
                this._overwriteProps.length = 0;
                this.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this "hot" method)
            },
            _globals = _gsScope._gsDefine.globals,
            _hasPriority, //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.
            _suffixMap, //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance
            _cs, //computed style (we store this in a shared variable to conserve memory and make minification tighter
            _overwriteProps, //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.
            _specialProps = {},
            p = CSSPlugin.prototype = new TweenPlugin("css");

        p.constructor = CSSPlugin;
        CSSPlugin.version = "1.20.5";
        CSSPlugin.API = 2;
        CSSPlugin.defaultTransformPerspective = 0;
        CSSPlugin.defaultSkewType = "compensated";
        CSSPlugin.defaultSmoothOrigin = true;
        p = "px"; //we'll reuse the "p" variable to keep file size down
        CSSPlugin.suffixMap = {
            top: p,
            right: p,
            bottom: p,
            left: p,
            width: p,
            height: p,
            fontSize: p,
            padding: p,
            margin: p,
            perspective: p,
            lineHeight: ""
        };


        var _numExp = /(?:\-|\.|\b)(\d|\.|e\-)+/g,
            _relNumExp = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,
            _valuesExp = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like "1px 5px 20px rgb(255,102,51)"
            _NaNExp = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g, //also allows scientific notation and doesn't kill the leading -/+ in -= and +=
            _suffixExp = /(?:\d|\-|\+|=|#|\.)*/g,
            _opacityExp = /opacity *= *([^)]*)/i,
            _opacityValExp = /opacity:([^;]*)/i,
            _alphaFilterExp = /alpha\(opacity *=.+?\)/i,
            _rgbhslExp = /^(rgb|hsl)/,
            _capsExp = /([A-Z])/g,
            _camelExp = /-([a-z])/gi,
            _urlExp = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi, //for pulling out urls from url(...) or url("...") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)
            _camelFunc = function(s, g) {
                return g.toUpperCase();
            },
            _horizExp = /(?:Left|Right|Width)/i,
            _ieGetMatrixExp = /(M11|M12|M21|M22)=[\d\-\.e]+/gi,
            _ieSetMatrixExp = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,
            _commasOutsideParenExp = /,(?=[^\)]*(?:\(|$))/gi, //finds any commas that are not within parenthesis
            _complexExp = /[\s,\(]/i, //for testing a string to find if it has a space, comma, or open parenthesis (clues that it's a complex value)
            _DEG2RAD = Math.PI / 180,
            _RAD2DEG = 180 / Math.PI,
            _forcePT = {},
            _dummyElement = {
                style: {}
            },
            _doc = _gsScope.document || {
                createElement: function() {
                    return _dummyElement;
                }
            },
            _createElement = function(type, ns) {
                return _doc.createElementNS ? _doc.createElementNS(ns || "http://www.w3.org/1999/xhtml", type) : _doc.createElement(type);
            },
            _tempDiv = _createElement("div"),
            _tempImg = _createElement("img"),
            _internals = CSSPlugin._internals = {
                _specialProps: _specialProps
            }, //provides a hook to a few internal methods that we need to access from inside other plugins
            _agent = (_gsScope.navigator || {}).userAgent || "",
            _autoRound,
            _reqSafariFix, //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).

            _isSafari,
            _isFirefox, //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.
            _isSafariLT6, //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to "top" and "left" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)
            _ieVers,
            _supportsOpacity = (function() { //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.
                var i = _agent.indexOf("Android"),
                    a = _createElement("a");
                _isSafari = (_agent.indexOf("Safari") !== -1 && _agent.indexOf("Chrome") === -1 && (i === -1 || parseFloat(_agent.substr(i + 8, 2)) > 3));
                _isSafariLT6 = (_isSafari && (parseFloat(_agent.substr(_agent.indexOf("Version/") + 8, 2)) < 6));
                _isFirefox = (_agent.indexOf("Firefox") !== -1);
                if ((/MSIE ([0-9]{1,}[\.0-9]{0,})/).exec(_agent) || (/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/).exec(_agent)) {
                    _ieVers = parseFloat(RegExp.$1);
                }
                if (!a) {
                    return false;
                }
                a.style.cssText = "top:1px;opacity:.55;";
                return /^0.55/.test(a.style.opacity);
            }()),
            _getIEOpacity = function(v) {
                return (_opacityExp.test(((typeof(v) === "string") ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || "")) ? (parseFloat(RegExp.$1) / 100) : 1);
            },
            _log = function(s) { //for logging messages, but in a way that won't throw errors in old versions of IE.
                if (_gsScope.console) {
                    console.log(s);
                }
            },
            _target, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params
            _index, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params

            _prefixCSS = "", //the non-camelCase vendor prefix like "-o-", "-moz-", "-ms-", or "-webkit-"
            _prefix = "", //camelCase vendor prefix like "O", "ms", "Webkit", or "Moz".

            // @private feed in a camelCase property name like "transform" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. "WebkitTransform" or "MozTransform" or "transform" or null if no such property is found, like if the browser is IE8 or before, "transform" won't be found at all)
            _checkPropPrefix = function(p, e) {
                e = e || _tempDiv;
                var s = e.style,
                    a, i;
                if (s[p] !== undefined) {
                    return p;
                }
                p = p.charAt(0).toUpperCase() + p.substr(1);
                a = ["O", "Moz", "ms", "Ms", "Webkit"];
                i = 5;
                while (--i > -1 && s[a[i] + p] === undefined) {}
                if (i >= 0) {
                    _prefix = (i === 3) ? "ms" : a[i];
                    _prefixCSS = "-" + _prefix.toLowerCase() + "-";
                    return _prefix + p;
                }
                return null;
            },

            _getComputedStyle = (typeof(window) !== "undefined" ? window : _doc.defaultView || {
                getComputedStyle: function() {}
            }).getComputedStyle,

            /**
             * @private Returns the css style for a particular property of an element. For example, to get whatever the current "left" css value for an element with an ID of "myElement", you could do:
             * var currentLeft = CSSPlugin.getStyle( document.getElementById("myElement"), "left");
             *
             * @param {!Object} t Target element whose style property you want to query
             * @param {!string} p Property name (like "left" or "top" or "marginTop", etc.)
             * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.
             * @param {boolean=} calc If true, the value will not be read directly from the element's "style" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.
             * @param {string=} dflt Default value that should be returned in the place of null, "none", "auto" or "auto auto".
             * @return {?string} The current property value
             */
            _getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {
                var rv;
                if (!_supportsOpacity)
                    if (p === "opacity") { //several versions of IE don't use the standard "opacity" property - they use things like filter:alpha(opacity=50), so we parse that here.
                        return _getIEOpacity(t);
                    }
                if (!calc && t.style[p]) {
                    rv = t.style[p];
                } else if ((cs = cs || _getComputedStyle(t))) {
                    rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, "-$1").toLowerCase());
                } else if (t.currentStyle) {
                    rv = t.currentStyle[p];
                }
                return (dflt != null && (!rv || rv === "none" || rv === "auto" || rv === "auto auto")) ? dflt : rv;
            },

            /**
             * @private Pass the target element, the property name, the numeric value, and the suffix (like "%", "em", "px", etc.) and it will spit back the equivalent pixel number.
             * @param {!Object} t Target element
             * @param {!string} p Property name (like "left", "top", "marginLeft", etc.)
             * @param {!number} v Value
             * @param {string=} sfx Suffix (like "px" or "%" or "em")
             * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.
             * @return {number} value in pixels
             */
            _convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {
                if (sfx === "px" || (!sfx && p !== "lineHeight")) {
                    return v;
                }
                if (sfx === "auto" || !v) {
                    return 0;
                }
                var horiz = _horizExp.test(p),
                    node = t,
                    style = _tempDiv.style,
                    neg = (v < 0),
                    precise = (v === 1),
                    pix, cache, time;
                if (neg) {
                    v = -v;
                }
                if (precise) {
                    v *= 100;
                }
                if (p === "lineHeight" && !sfx) { //special case of when a simple lineHeight (without a unit) is used. Set it to the value, read back the computed value, and then revert.
                    cache = _getComputedStyle(t).lineHeight;
                    t.style.lineHeight = v;
                    pix = parseFloat(_getComputedStyle(t).lineHeight);
                    t.style.lineHeight = cache;
                } else if (sfx === "%" && p.indexOf("border") !== -1) {
                    pix = (v / 100) * (horiz ? t.clientWidth : t.clientHeight);
                } else {
                    style.cssText = "border:0 solid red;position:" + _getStyle(t, "position") + ";line-height:0;";
                    if (sfx === "%" || !node.appendChild || sfx.charAt(0) === "v" || sfx === "rem") {
                        node = t.parentNode || _doc.body;
                        if (_getStyle(node, "display").indexOf("flex") !== -1) { //Edge and IE11 have a bug that causes offsetWidth to report as 0 if the container has display:flex and the child is position:relative. Switching to position: absolute solves it.
                            style.position = "absolute";
                        }
                        cache = node._gsCache;
                        time = TweenLite.ticker.frame;
                        if (cache && horiz && cache.time === time) { //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)
                            return cache.width * v / 100;
                        }
                        style[(horiz ? "width" : "height")] = v + sfx;
                    } else {
                        style[(horiz ? "borderLeftWidth" : "borderTopWidth")] = v + sfx;
                    }
                    node.appendChild(_tempDiv);
                    pix = parseFloat(_tempDiv[(horiz ? "offsetWidth" : "offsetHeight")]);
                    node.removeChild(_tempDiv);
                    if (horiz && sfx === "%" && CSSPlugin.cacheWidths !== false) {
                        cache = node._gsCache = node._gsCache || {};
                        cache.time = time;
                        cache.width = pix / v * 100;
                    }
                    if (pix === 0 && !recurse) {
                        pix = _convertToPixels(t, p, v, sfx, true);
                    }
                }
                if (precise) {
                    pix /= 100;
                }
                return neg ? -pix : pix;
            },
            _calculateOffset = _internals.calculateOffset = function(t, p, cs) { //for figuring out "top" or "left" in px when it's "auto". We need to factor in margin with the offsetLeft/offsetTop
                if (_getStyle(t, "position", cs) !== "absolute") {
                    return 0;
                }
                var dim = ((p === "left") ? "Left" : "Top"),
                    v = _getStyle(t, "margin" + dim, cs);
                return t["offset" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, "")) || 0);
            },

            // @private returns at object containing ALL of the style properties in camelCase and their associated values.
            _getAllStyles = function(t, cs) {
                var s = {},
                    i, tr, p;
                if ((cs = cs || _getComputedStyle(t, null))) {
                    if ((i = cs.length)) {
                        while (--i > -1) {
                            p = cs[i];
                            if (p.indexOf("-transform") === -1 || _transformPropCSS === p) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
                                s[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);
                            }
                        }
                    } else { //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.
                        for (i in cs) {
                            if (i.indexOf("Transform") === -1 || _transformProp === i) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
                                s[i] = cs[i];
                            }
                        }
                    }
                } else if ((cs = t.currentStyle || t.style)) {
                    for (i in cs) {
                        if (typeof(i) === "string" && s[i] === undefined) {
                            s[i.replace(_camelExp, _camelFunc)] = cs[i];
                        }
                    }
                }
                if (!_supportsOpacity) {
                    s.opacity = _getIEOpacity(t);
                }
                tr = _getTransform(t, cs, false);
                s.rotation = tr.rotation;
                s.skewX = tr.skewX;
                s.scaleX = tr.scaleX;
                s.scaleY = tr.scaleY;
                s.x = tr.x;
                s.y = tr.y;
                if (_supports3D) {
                    s.z = tr.z;
                    s.rotationX = tr.rotationX;
                    s.rotationY = tr.rotationY;
                    s.scaleZ = tr.scaleZ;
                }
                if (s.filters) {
                    delete s.filters;
                }
                return s;
            },

            // @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a "difs" property which refers to an object containing only those isolated properties and values for tweening, and a "firstMPT" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.
            _cssDif = function(t, s1, s2, vars, forceLookup) {
                var difs = {},
                    style = t.style,
                    val, p, mpt;
                for (p in s2) {
                    if (p !== "cssText")
                        if (p !== "length")
                            if (isNaN(p))
                                if (s1[p] !== (val = s2[p]) || (forceLookup && forceLookup[p]))
                                    if (p.indexOf("Origin") === -1)
                                        if (typeof(val) === "number" || typeof(val) === "string") {
                                            difs[p] = (val === "auto" && (p === "left" || p === "top")) ? _calculateOffset(t, p) : ((val === "" || val === "auto" || val === "none") && typeof(s1[p]) === "string" && s1[p].replace(_NaNExp, "") !== "") ? 0 : val; //if the ending value is defaulting ("" or "auto"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for "" or "auto" so that things actually tween.
                                            if (style[p] !== undefined) { //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.
                                                mpt = new MiniPropTween(style, p, style[p], mpt);
                                            }
                                        }
                }
                if (vars) {
                    for (p in vars) { //copy properties (except className)
                        if (p !== "className") {
                            difs[p] = vars[p];
                        }
                    }
                }
                return {
                    difs: difs,
                    firstMPT: mpt
                };
            },
            _dimensions = {
                width: ["Left", "Right"],
                height: ["Top", "Bottom"]
            },
            _margins = ["marginLeft", "marginRight", "marginTop", "marginBottom"],

            /**
             * @private Gets the width or height of an element
             * @param {!Object} t Target element
             * @param {!string} p Property name ("width" or "height")
             * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.
             * @return {number} Dimension (in pixels)
             */
            _getDimension = function(t, p, cs) {
                if ((t.nodeName + "").toLowerCase() === "svg") { //Chrome no longer supports offsetWidth/offsetHeight on SVG elements.
                    return (cs || _getComputedStyle(t))[p] || 0;
                } else if (t.getCTM && _isSVG(t)) {
                    return t.getBBox()[p] || 0;
                }
                var v = parseFloat((p === "width") ? t.offsetWidth : t.offsetHeight),
                    a = _dimensions[p],
                    i = a.length;
                cs = cs || _getComputedStyle(t, null);
                while (--i > -1) {
                    v -= parseFloat(_getStyle(t, "padding" + a[i], cs, true)) || 0;
                    v -= parseFloat(_getStyle(t, "border" + a[i] + "Width", cs, true)) || 0;
                }
                return v;
            },

            // @private Parses position-related complex strings like "top left" or "50px 10px" or "70% 20%", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: "ox" (offsetX), "oy" (offsetY), "oxp" (if true, "ox" is a percentage not a pixel value), and "oxy" (if true, "oy" is a percentage not a pixel value)
            _parsePosition = function(v, recObj) {
                if (v === "contain" || v === "auto" || v === "auto auto") { //note: Firefox uses "auto auto" as default whereas Chrome uses "auto".
                    return v + " ";
                }
                if (v == null || v === "") {
                    v = "0 0";
                }
                var a = v.split(" "),
                    x = (v.indexOf("left") !== -1) ? "0%" : (v.indexOf("right") !== -1) ? "100%" : a[0],
                    y = (v.indexOf("top") !== -1) ? "0%" : (v.indexOf("bottom") !== -1) ? "100%" : a[1],
                    i;
                if (a.length > 3 && !recObj) { //multiple positions
                    a = v.split(", ").join(",").split(",");
                    v = [];
                    for (i = 0; i < a.length; i++) {
                        v.push(_parsePosition(a[i]));
                    }
                    return v.join(",");
                }
                if (y == null) {
                    y = (x === "center") ? "50%" : "0";
                } else if (y === "center") {
                    y = "50%";
                }
                if (x === "center" || (isNaN(parseFloat(x)) && (x + "").indexOf("=") === -1)) { //remember, the user could flip-flop the values and say "bottom center" or "center bottom", etc. "center" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an "=" sign in the value, it's relative.
                    x = "50%";
                }
                v = x + " " + y + ((a.length > 2) ? " " + a[2] : "");
                if (recObj) {
                    recObj.oxp = (x.indexOf("%") !== -1);
                    recObj.oyp = (y.indexOf("%") !== -1);
                    recObj.oxr = (x.charAt(1) === "=");
                    recObj.oyr = (y.charAt(1) === "=");
                    recObj.ox = parseFloat(x.replace(_NaNExp, ""));
                    recObj.oy = parseFloat(y.replace(_NaNExp, ""));
                    recObj.v = v;
                }
                return recObj || v;
            },

            /**
             * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)
             * @param {(number|string)} e End value which is typically a string, but could be a number
             * @param {(number|string)} b Beginning value which is typically a string but could be a number
             * @return {number} Amount of change between the beginning and ending values (relative values that have a "+=" or "-=" are recognized)
             */
            _parseChange = function(e, b) {
                if (typeof(e) === "function") {
                    e = e(_index, _target);
                }
                return (typeof(e) === "string" && e.charAt(1) === "=") ? parseInt(e.charAt(0) + "1", 10) * parseFloat(e.substr(2)) : (parseFloat(e) - parseFloat(b)) || 0;
            },

            /**
             * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.
             * @param {Object} v Value to be parsed
             * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
             * @return {number} Parsed value
             */
            _parseVal = function(v, d) {
                if (typeof(v) === "function") {
                    v = v(_index, _target);
                }
                return (v == null) ? d : (typeof(v) === "string" && v.charAt(1) === "=") ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;
            },

            /**
             * @private Translates strings like "40deg" or "40" or 40rad" or "+=40deg" or "270_short" or "-90_cw" or "+=45_ccw" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.
             * @param {Object} v Value to be parsed
             * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
             * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be "rotation", "rotationX", or "rotationY"
             * @param {Object=} directionalEnd An object that will store the raw end values for directional angles ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.
             * @return {number} parsed angle in radians
             */
            _parseAngle = function(v, d, p, directionalEnd) {
                var min = 0.000001,
                    cap, split, dif, result, isRelative;
                if (typeof(v) === "function") {
                    v = v(_index, _target);
                }
                if (v == null) {
                    result = d;
                } else if (typeof(v) === "number") {
                    result = v;
                } else {
                    cap = 360;
                    split = v.split("_");
                    isRelative = (v.charAt(1) === "=");
                    dif = (isRelative ? parseInt(v.charAt(0) + "1", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * ((v.indexOf("rad") === -1) ? 1 : _RAD2DEG) - (isRelative ? 0 : d);
                    if (split.length) {
                        if (directionalEnd) {
                            directionalEnd[p] = d + dif;
                        }
                        if (v.indexOf("short") !== -1) {
                            dif = dif % cap;
                            if (dif !== dif % (cap / 2)) {
                                dif = (dif < 0) ? dif + cap : dif - cap;
                            }
                        }
                        if (v.indexOf("_cw") !== -1 && dif < 0) {
                            dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                        } else if (v.indexOf("ccw") !== -1 && dif > 0) {
                            dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                        }
                    }
                    result = d + dif;
                }
                if (result < min && result > -min) {
                    result = 0;
                }
                return result;
            },

            _colorLookup = {
                aqua: [0, 255, 255],
                lime: [0, 255, 0],
                silver: [192, 192, 192],
                black: [0, 0, 0],
                maroon: [128, 0, 0],
                teal: [0, 128, 128],
                blue: [0, 0, 255],
                navy: [0, 0, 128],
                white: [255, 255, 255],
                fuchsia: [255, 0, 255],
                olive: [128, 128, 0],
                yellow: [255, 255, 0],
                orange: [255, 165, 0],
                gray: [128, 128, 128],
                purple: [128, 0, 128],
                green: [0, 128, 0],
                red: [255, 0, 0],
                pink: [255, 192, 203],
                cyan: [0, 255, 255],
                transparent: [255, 255, 255, 0]
            },

            _hue = function(h, m1, m2) {
                h = (h < 0) ? h + 1 : (h > 1) ? h - 1 : h;
                return ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : (h < 0.5) ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255) + 0.5) | 0;
            },

            /**
             * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).
             * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.
             * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()
             * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.
             */
            _parseColor = CSSPlugin.parseColor = function(v, toHSL) {
                var a, r, g, b, h, s, l, max, min, d, wasHSL;
                if (!v) {
                    a = _colorLookup.black;
                } else if (typeof(v) === "number") {
                    a = [v >> 16, (v >> 8) & 255, v & 255];
                } else {
                    if (v.charAt(v.length - 1) === ",") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
                        v = v.substr(0, v.length - 1);
                    }
                    if (_colorLookup[v]) {
                        a = _colorLookup[v];
                    } else if (v.charAt(0) === "#") {
                        if (v.length === 4) { //for shorthand like #9F0
                            r = v.charAt(1);
                            g = v.charAt(2);
                            b = v.charAt(3);
                            v = "#" + r + r + g + g + b + b;
                        }
                        v = parseInt(v.substr(1), 16);
                        a = [v >> 16, (v >> 8) & 255, v & 255];
                    } else if (v.substr(0, 3) === "hsl") {
                        a = wasHSL = v.match(_numExp);
                        if (!toHSL) {
                            h = (Number(a[0]) % 360) / 360;
                            s = Number(a[1]) / 100;
                            l = Number(a[2]) / 100;
                            g = (l <= 0.5) ? l * (s + 1) : l + s - l * s;
                            r = l * 2 - g;
                            if (a.length > 3) {
                                a[3] = Number(a[3]);
                            }
                            a[0] = _hue(h + 1 / 3, r, g);
                            a[1] = _hue(h, r, g);
                            a[2] = _hue(h - 1 / 3, r, g);
                        } else if (v.indexOf("=") !== -1) { //if relative values are found, just return the raw strings with the relative prefixes in place.
                            return v.match(_relNumExp);
                        }
                    } else {
                        a = v.match(_numExp) || _colorLookup.transparent;
                    }
                    a[0] = Number(a[0]);
                    a[1] = Number(a[1]);
                    a[2] = Number(a[2]);
                    if (a.length > 3) {
                        a[3] = Number(a[3]);
                    }
                }
                if (toHSL && !wasHSL) {
                    r = a[0] / 255;
                    g = a[1] / 255;
                    b = a[2] / 255;
                    max = Math.max(r, g, b);
                    min = Math.min(r, g, b);
                    l = (max + min) / 2;
                    if (max === min) {
                        h = s = 0;
                    } else {
                        d = max - min;
                        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                        h = (max === r) ? (g - b) / d + (g < b ? 6 : 0) : (max === g) ? (b - r) / d + 2 : (r - g) / d + 4;
                        h *= 60;
                    }
                    a[0] = (h + 0.5) | 0;
                    a[1] = (s * 100 + 0.5) | 0;
                    a[2] = (l * 100 + 0.5) | 0;
                }
                return a;
            },
            _formatColors = function(s, toHSL) {
                var colors = s.match(_colorExp) || [],
                    charIndex = 0,
                    parsed = "",
                    i, color, temp;
                if (!colors.length) {
                    return s;
                }
                for (i = 0; i < colors.length; i++) {
                    color = colors[i];
                    temp = s.substr(charIndex, s.indexOf(color, charIndex) - charIndex);
                    charIndex += temp.length + color.length;
                    color = _parseColor(color, toHSL);
                    if (color.length === 3) {
                        color.push(1);
                    }
                    parsed += temp + (toHSL ? "hsla(" + color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : "rgba(" + color.join(",")) + ")";
                }
                return parsed + s.substr(charIndex);
            },
            _colorExp = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.

        for (p in _colorLookup) {
            _colorExp += "|" + p + "\\b";
        }
        _colorExp = new RegExp(_colorExp + ")", "gi");

        CSSPlugin.colorStringFilter = function(a) {
            var combined = a[0] + " " + a[1],
                toHSL;
            if (_colorExp.test(combined)) {
                toHSL = (combined.indexOf("hsl(") !== -1 || combined.indexOf("hsla(") !== -1);
                a[0] = _formatColors(a[0], toHSL);
                a[1] = _formatColors(a[1], toHSL);
            }
            _colorExp.lastIndex = 0;
        };

        if (!TweenLite.defaultStringFilter) {
            TweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;
        }

        /**
         * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as "0px red" or "0px 0px 10px rgb(255,0,0)" or "0px 0px 20px 20px #F00" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter("0px 0px 0px 0px #777", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.
         * @param {!string} dflt The default value and pattern to follow. So "0px 0px 0px 0px #777" will ensure that 4 numbers and a color will always get returned.
         * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.
         * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.
         * @return {Function} formatter function
         */
        var _getFormatter = function(dflt, clr, collapsible, multi) {
                if (dflt == null) {
                    return function(v) {
                        return v;
                    };
                }
                var dColor = clr ? (dflt.match(_colorExp) || [""])[0] : "",
                    dVals = dflt.split(dColor).join("").match(_valuesExp) || [],
                    pfx = dflt.substr(0, dflt.indexOf(dVals[0])),
                    sfx = (dflt.charAt(dflt.length - 1) === ")") ? ")" : "",
                    delim = (dflt.indexOf(" ") !== -1) ? " " : ",",
                    numVals = dVals.length,
                    dSfx = (numVals > 0) ? dVals[0].replace(_numExp, "") : "",
                    formatter;
                if (!numVals) {
                    return function(v) {
                        return v;
                    };
                }
                if (clr) {
                    formatter = function(v) {
                        var color, vals, i, a;
                        if (typeof(v) === "number") {
                            v += dSfx;
                        } else if (multi && _commasOutsideParenExp.test(v)) {
                            a = v.replace(_commasOutsideParenExp, "|").split("|");
                            for (i = 0; i < a.length; i++) {
                                a[i] = formatter(a[i]);
                            }
                            return a.join(",");
                        }
                        color = (v.match(_colorExp) || [dColor])[0];
                        vals = v.split(color).join("").match(_valuesExp) || [];
                        i = vals.length;
                        if (numVals > i--) {
                            while (++i < numVals) {
                                vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
                            }
                        }
                        return pfx + vals.join(delim) + delim + color + sfx + (v.indexOf("inset") !== -1 ? " inset" : "");
                    };
                    return formatter;

                }
                formatter = function(v) {
                    var vals, a, i;
                    if (typeof(v) === "number") {
                        v += dSfx;
                    } else if (multi && _commasOutsideParenExp.test(v)) {
                        a = v.replace(_commasOutsideParenExp, "|").split("|");
                        for (i = 0; i < a.length; i++) {
                            a[i] = formatter(a[i]);
                        }
                        return a.join(",");
                    }
                    vals = v.match(_valuesExp) || [];
                    i = vals.length;
                    if (numVals > i--) {
                        while (++i < numVals) {
                            vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
                        }
                    }
                    return pfx + vals.join(delim) + sfx;
                };
                return formatter;
            },

            /**
             * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.
             * @param {!string} props a comma-delimited list of property names in order from top to left, like "marginTop,marginRight,marginBottom,marginLeft"
             * @return {Function} a formatter function
             */
            _getEdgeParser = function(props) {
                props = props.split(",");
                return function(t, e, p, cssp, pt, plugin, vars) {
                    var a = (e + "").split(" "),
                        i;
                    vars = {};
                    for (i = 0; i < 4; i++) {
                        vars[props[i]] = a[i] = a[i] || a[(((i - 1) / 2) >> 0)];
                    }
                    return cssp.parse(t, vars, pt, plugin);
                };
            },

            // @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.
            _setPluginRatio = _internals._setPluginRatio = function(v) {
                this.plugin.setRatio(v);
                var d = this.data,
                    proxy = d.proxy,
                    mpt = d.firstMPT,
                    min = 0.000001,
                    val, pt, i, str, p;
                while (mpt) {
                    val = proxy[mpt.v];
                    if (mpt.r) {
                        val = mpt.r(val);
                    } else if (val < min && val > -min) {
                        val = 0;
                    }
                    mpt.t[mpt.p] = val;
                    mpt = mpt._next;
                }
                if (d.autoRotate) {
                    d.autoRotate.rotation = d.mod ? d.mod.call(this._tween, proxy.rotation, this.t, this._tween) : proxy.rotation; //special case for ModifyPlugin to hook into an auto-rotating bezier
                }
                //at the end, we must set the CSSPropTween's "e" (end) value dynamically here because that's what is used in the final setRatio() method. Same for "b" at the beginning.
                if (v === 1 || v === 0) {
                    mpt = d.firstMPT;
                    p = (v === 1) ? "e" : "b";
                    while (mpt) {
                        pt = mpt.t;
                        if (!pt.type) {
                            pt[p] = pt.s + pt.xs0;
                        } else if (pt.type === 1) {
                            str = pt.xs0 + pt.s + pt.xs1;
                            for (i = 1; i < pt.l; i++) {
                                str += pt["xn" + i] + pt["xs" + (i + 1)];
                            }
                            pt[p] = str;
                        }
                        mpt = mpt._next;
                    }
                }
            },

            /**
             * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.
             * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)
             * @param {!string} p property name
             * @param {(number|string|object)} v value
             * @param {MiniPropTween=} next next MiniPropTween in the linked list
             * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer
             */
            MiniPropTween = function(t, p, v, next, r) {
                this.t = t;
                this.p = p;
                this.v = v;
                this.r = r;
                if (next) {
                    next._prev = this;
                    this._next = next;
                }
            },

            /**
             * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like "10px 10px 20px 30px rgb(255,0,0)" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like "s" or "xn1" or "xn2") that we're tweening and the unique property name that was used for the proxy (like "boxShadow_xn1" and "boxShadow_xn2") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.
             * This method returns an object that has the following properties:
             *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target
             *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values
             *  - firstMPT: the first MiniPropTween in the linked list
             *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the "pt" (4th) parameter.
             * @param {!Object} t target object to be tweened
             * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed
             * @param {!CSSPlugin} cssp The CSSPlugin instance
             * @param {CSSPropTween=} pt the next CSSPropTween in the linked list
             * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values
             * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the "pt" (4th) parameter.
             * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)
             */
            _parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {
                var bpt = pt,
                    start = {},
                    end = {},
                    transform = cssp._transform,
                    oldForce = _forcePT,
                    i, p, xp, mpt, firstPT;
                cssp._transform = null;
                _forcePT = vars;
                pt = firstPT = cssp.parse(t, vars, pt, plugin);
                _forcePT = oldForce;
                //break off from the linked list so the new ones are isolated.
                if (shallow) {
                    cssp._transform = transform;
                    if (bpt) {
                        bpt._prev = null;
                        if (bpt._prev) {
                            bpt._prev._next = null;
                        }
                    }
                }
                while (pt && pt !== bpt) {
                    if (pt.type <= 1) {
                        p = pt.p;
                        end[p] = pt.s + pt.c;
                        start[p] = pt.s;
                        if (!shallow) {
                            mpt = new MiniPropTween(pt, "s", p, mpt, pt.r);
                            pt.c = 0;
                        }
                        if (pt.type === 1) {
                            i = pt.l;
                            while (--i > 0) {
                                xp = "xn" + i;
                                p = pt.p + "_" + xp;
                                end[p] = pt.data[xp];
                                start[p] = pt[xp];
                                if (!shallow) {
                                    mpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);
                                }
                            }
                        }
                    }
                    pt = pt._next;
                }
                return {
                    proxy: start,
                    end: end,
                    firstMPT: mpt,
                    pt: firstPT
                };
            },



            /**
             * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of "extra" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where "s" indicates string and "n" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be "5px 5px 8px rgb(102, 102, 51)". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.
             * CSSPropTweens have the following optional properties as well (not defined through the constructor):
             *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.
             *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)
             *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.
             *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.
             *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.
             * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.
             * @param {string} p Property to tween (name). For example, to tween element.width, p would be "width".
             * @param {number} s Starting numeric value
             * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.
             * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.
             * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:"1px solid red"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.
             * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a "clip:rect(...)" tween in which case "p" might be xs1 but "n" is still "clip"
             * @param {boolean=} r If true, the value(s) should be rounded
             * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.
             * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.
             * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.
             */
            CSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {
                this.t = t; //target
                this.p = p; //property
                this.s = s; //starting value
                this.c = c; //change value
                this.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)
                if (!(t instanceof CSSPropTween)) {
                    _overwriteProps.push(this.n);
                }
                this.r = !r ? r : (typeof(r) === "function") ? r : Math.round; //round (boolean)
                this.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work
                if (pr) {
                    this.pr = pr;
                    _hasPriority = true;
                }
                this.b = (b === undefined) ? s : b;
                this.e = (e === undefined) ? s + c : e;
                if (next) {
                    this._next = next;
                    next._prev = this;
                }
            },

            _addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) { //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween
                var pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);
                pt.b = start;
                pt.e = pt.xs0 = end;
                return pt;
            },

            /**
             * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:
             * sp.parseComplex(element, "boxShadow", "5px 10px 20px rgb(255,102,51)", "0px 0px 0px red", true, "0px 0px 0px rgb(0,0,0,0)", pt);
             * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the "data" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().
             * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.
             *
             * @param {!Object} t Target whose property will be tweened
             * @param {!string} p Property that will be tweened (its name, like "left" or "backgroundColor" or "boxShadow")
             * @param {string} b Beginning value
             * @param {string} e Ending value
             * @param {boolean} clrs If true, the value could contain a color value like "rgb(255,0,0)" or "#F00" or "red". The default is false, so no colors will be recognized (a performance optimization)
             * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match
             * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).
             * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.
             * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the "data" property, like {s:100, xn1:50, xn2:300}
             * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.
             * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.
             */
            _parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {
                //DEBUG: _log("parseComplex: "+p+", b: "+b+", e: "+e);
                b = b || dflt || "";
                if (typeof(e) === "function") {
                    e = e(_index, _target);
                }
                pt = new CSSPropTween(t, p, 0, 0, pt, (setRatio ? 2 : 1), null, false, pr, b, e);
                e += ""; //ensures it's a string
                if (clrs && _colorExp.test(e + b)) { //if colors are found, normalize the formatting to rgba() or hsla().
                    e = [b, e];
                    CSSPlugin.colorStringFilter(e);
                    b = e[0];
                    e = e[1];
                }
                var ba = b.split(", ").join(",").split(" "), //beginning array
                    ea = e.split(", ").join(",").split(" "), //ending array
                    l = ba.length,
                    autoRound = (_autoRound !== false),
                    i, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;
                if (e.indexOf(",") !== -1 || b.indexOf(",") !== -1) {
                    if ((e + b).indexOf("rgb") !== -1 || (e + b).indexOf("hsl") !== -1) { //keep rgb(), rgba(), hsl(), and hsla() values together! (remember, we're splitting on spaces)
                        ba = ba.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
                        ea = ea.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
                    } else {
                        ba = ba.join(" ").split(",").join(", ").split(" ");
                        ea = ea.join(" ").split(",").join(", ").split(" ");
                    }
                    l = ba.length;
                }
                if (l !== ea.length) {
                    //DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
                    ba = (dflt || "").split(" ");
                    l = ba.length;
                }
                pt.plugin = plugin;
                pt.setRatio = setRatio;
                _colorExp.lastIndex = 0;
                for (i = 0; i < l; i++) {
                    bv = ba[i];
                    ev = ea[i] + "";
                    bn = parseFloat(bv);
                    //if the value begins with a number (most common). It's fine if it has a suffix like px
                    if (bn || bn === 0) {
                        pt.appendXtra("", bn, _parseChange(ev, bn), ev.replace(_relNumExp, ""), (autoRound && ev.indexOf("px") !== -1) ? Math.round : false, true);

                        //if the value is a color
                    } else if (clrs && _colorExp.test(bv)) {
                        str = ev.indexOf(")") + 1;
                        str = ")" + (str ? ev.substr(str) : ""); //if there's a comma or ) at the end, retain it.
                        useHSL = (ev.indexOf("hsl") !== -1 && _supportsOpacity);
                        temp = ev; //original string value so we can look for any prefix later.
                        bv = _parseColor(bv, useHSL);
                        ev = _parseColor(ev, useHSL);
                        hasAlpha = (bv.length + ev.length > 6);
                        if (hasAlpha && !_supportsOpacity && ev[3] === 0) { //older versions of IE don't support rgba(), so if the destination alpha is 0, just use "transparent" for the end color
                            pt["xs" + pt.l] += pt.l ? " transparent" : "transparent";
                            pt.e = pt.e.split(ea[i]).join("transparent");
                        } else {
                            if (!_supportsOpacity) { //old versions of IE don't support rgba().
                                hasAlpha = false;
                            }
                            if (useHSL) {
                                pt.appendXtra(temp.substr(0, temp.indexOf("hsl")) + (hasAlpha ? "hsla(" : "hsl("), bv[0], _parseChange(ev[0], bv[0]), ",", false, true)
                                    .appendXtra("", bv[1], _parseChange(ev[1], bv[1]), "%,", false)
                                    .appendXtra("", bv[2], _parseChange(ev[2], bv[2]), (hasAlpha ? "%," : "%" + str), false);
                            } else {
                                pt.appendXtra(temp.substr(0, temp.indexOf("rgb")) + (hasAlpha ? "rgba(" : "rgb("), bv[0], ev[0] - bv[0], ",", Math.round, true)
                                    .appendXtra("", bv[1], ev[1] - bv[1], ",", Math.round)
                                    .appendXtra("", bv[2], ev[2] - bv[2], (hasAlpha ? "," : str), Math.round);
                            }

                            if (hasAlpha) {
                                bv = (bv.length < 4) ? 1 : bv[3];
                                pt.appendXtra("", bv, ((ev.length < 4) ? 1 : ev[3]) - bv, str, false);
                            }
                        }
                        _colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.

                    } else {
                        bnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array

                        //if no number is found, treat it as a non-tweening value and just append the string to the current xs.
                        if (!bnums) {
                            pt["xs" + pt.l] += (pt.l || pt["xs" + pt.l]) ? " " + ev : ev;

                            //loop through all the numbers that are found and construct the extra values on the pt.
                        } else {
                            enums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5
                            if (!enums || enums.length !== bnums.length) {
                                //DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
                                return pt;
                            }
                            ni = 0;
                            for (xi = 0; xi < bnums.length; xi++) {
                                cv = bnums[xi];
                                temp = bv.indexOf(cv, ni);
                                pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), "", (autoRound && bv.substr(temp + cv.length, 2) === "px") ? Math.round : false, (xi === 0));
                                ni = temp + cv.length;
                            }
                            pt["xs" + pt.l] += bv.substr(ni);
                        }
                    }
                }
                //if there are relative values ("+=" or "-=" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.
                if (e.indexOf("=") !== -1)
                    if (pt.data) {
                        str = pt.xs0 + pt.data.s;
                        for (i = 1; i < pt.l; i++) {
                            str += pt["xs" + i] + pt.data["xn" + i];
                        }
                        pt.e = str + pt["xs" + i];
                    }
                if (!pt.l) {
                    pt.type = -1;
                    pt.xs0 = pt.e;
                }
                return pt.xfirst || pt;
            },
            i = 9;


        p = CSSPropTween.prototype;
        p.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.
        while (--i > 0) {
            p["xn" + i] = 0;
            p["xs" + i] = "";
        }
        p.xs0 = "";
        p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;


        /**
         * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like "rect(10px, 5px, 0px, 20px)", the values would be stored like this:
         * xs0:"rect(", s:10, xs1:"px, ", xn1:5, xs2:"px, ", xn2:0, xs3:"px, ", xn3:20, xn4:"px)"
         * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).
         * @param {string=} pfx Prefix (if any)
         * @param {!number} s Starting value
         * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.
         * @param {string=} sfx Suffix (if any)
         * @param {boolean=} r Round (if true).
         * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.
         * @return {CSSPropTween} returns itself so that multiple methods can be chained together.
         */
        p.appendXtra = function(pfx, s, c, sfx, r, pad) {
            var pt = this,
                l = pt.l;
            pt["xs" + l] += (pad && (l || pt["xs" + l])) ? " " + pfx : pfx || "";
            if (!c)
                if (l !== 0 && !pt.plugin) { //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!
                    pt["xs" + l] += s + (sfx || "");
                    return pt;
                }
            pt.l++;
            pt.type = pt.setRatio ? 2 : 1;
            pt["xs" + pt.l] = sfx || "";
            if (l > 0) {
                pt.data["xn" + l] = s + c;
                pt.rxp["xn" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)
                pt["xn" + l] = s;
                if (!pt.plugin) {
                    pt.xfirst = new CSSPropTween(pt, "xn" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);
                    pt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is "" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.
                }
                return pt;
            }
            pt.data = {
                s: s + c
            };
            pt.rxp = {};
            pt.s = s;
            pt.c = c;
            pt.r = r;
            return pt;
        };

        /**
         * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:"5px 10px 15px rgb(255, 102, 51)" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like "boxShadow" or "throwProps" or "bezier" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.
         * @param {!string} p Property name (like "boxShadow" or "throwProps")
         * @param {Object=} options An object containing any of the following configuration options:
         *                      - defaultValue: the default value
         *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)
         *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take "5px 5px red" and format it to "5px 5px 0px 0px red" so that both the beginning and ending values have a common order and quantity of values.)
         *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)
         *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.
         *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.
         *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.
         *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like "5px" would apply to all, "5px, 10px" would use 5px for top/bottom and 10px for right/left, etc.
         *                      - keyword: a special keyword that can [optionally] be found inside the value (like "inset" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).
         */
        var SpecialProp = function(p, options) {
                options = options || {};
                this.p = options.prefix ? _checkPropPrefix(p) || p : p;
                _specialProps[p] = _specialProps[this.p] = this;
                this.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);
                if (options.parser) {
                    this.parse = options.parser;
                }
                this.clrs = options.color;
                this.multi = options.multi;
                this.keyword = options.keyword;
                this.dflt = options.defaultValue;
                this.pr = options.priority || 0;
            },

            //shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.
            _registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {
                if (typeof(options) !== "object") {
                    options = {
                        parser: defaults
                    }; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin
                }
                var a = p.split(","),
                    d = options.defaultValue,
                    i, temp;
                defaults = defaults || [d];
                for (i = 0; i < a.length; i++) {
                    options.prefix = (i === 0 && options.prefix);
                    options.defaultValue = defaults[i] || d;
                    temp = new SpecialProp(a[i], options);
                }
            },

            //creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.
            _registerPluginProp = _internals._registerPluginProp = function(p) {
                if (!_specialProps[p]) {
                    var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + "Plugin";
                    _registerComplexSpecialProp(p, {
                        parser: function(t, e, p, cssp, pt, plugin, vars) {
                            var pluginClass = _globals.com.greensock.plugins[pluginName];
                            if (!pluginClass) {
                                _log("Error: " + pluginName + " js file not loaded.");
                                return pt;
                            }
                            pluginClass._cssRegister();
                            return _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);
                        }
                    });
                }
            };


        p = SpecialProp.prototype;

        /**
         * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like "inset" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)
         * @param {!Object} t target element
         * @param {(string|number|object)} b beginning value
         * @param {(string|number|object)} e ending (destination) value
         * @param {CSSPropTween=} pt next CSSPropTween in the linked list
         * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.
         * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.
         * @return {CSSPropTween=} First CSSPropTween in the linked list
         */
        p.parseComplex = function(t, b, e, pt, plugin, setRatio) {
            var kwd = this.keyword,
                i, ba, ea, l, bi, ei;
            //if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like "inset" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)
            if (this.multi)
                if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {
                    ba = b.replace(_commasOutsideParenExp, "|").split("|");
                    ea = e.replace(_commasOutsideParenExp, "|").split("|");
                } else if (kwd) {
                ba = [b];
                ea = [e];
            }
            if (ea) {
                l = (ea.length > ba.length) ? ea.length : ba.length;
                for (i = 0; i < l; i++) {
                    b = ba[i] = ba[i] || this.dflt;
                    e = ea[i] = ea[i] || this.dflt;
                    if (kwd) {
                        bi = b.indexOf(kwd);
                        ei = e.indexOf(kwd);
                        if (bi !== ei) {
                            if (ei === -1) { //if the keyword isn't in the end value, remove it from the beginning one.
                                ba[i] = ba[i].split(kwd).join("");
                            } else if (bi === -1) { //if the keyword isn't in the beginning, add it.
                                ba[i] += " " + kwd;
                            }
                        }
                    }
                }
                b = ba.join(", ");
                e = ea.join(", ");
            }
            return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);
        };

        /**
         * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:
         * this._firstPT = sp.parse(element, "5px 10px 20px rgb(2550,102,51)", "boxShadow", this);
         * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).
         * @param {!Object} t Target object whose property is being tweened
         * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).
         * @param {!string} p Property name
         * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.
         * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)
         * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.
         * @param {Object=} vars Original vars object that contains the data for parsing.
         * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.
         */
        p.parse = function(t, e, p, cssp, pt, plugin, vars) {
            return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);
        };

        /**
         * Registers a special property that should be intercepted from any "css" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:
         *  1) Target object whose property should be tweened (typically a DOM element)
         *  2) The end/destination value (could be a string, number, object, or whatever you want)
         *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)
         *
         * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric "ratio" parameter to your function that indicates the change factor (usually between 0 and 1). For example:
         *
         * CSSPlugin.registerSpecialProp("myCustomProp", function(target, value, tween) {
         *      var start = target.style.width;
         *      return function(ratio) {
         *              target.style.width = (start + value * ratio) + "px";
         *              console.log("set width to " + target.style.width);
         *          }
         * }, 0);
         *
         * Then, when I do this tween, it will trigger my special property:
         *
         * TweenLite.to(element, 1, {css:{myCustomProp:100}});
         *
         * In the example, of course, we're just changing the width, but you can do anything you want.
         *
         * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define "myCustomProp", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})
         * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a "change factor" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.
         * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.
         */
        CSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {
            _registerComplexSpecialProp(name, {
                parser: function(t, e, p, cssp, pt, plugin, vars) {
                    var rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);
                    rv.plugin = plugin;
                    rv.setRatio = onInitTween(t, e, cssp._tween, p);
                    return rv;
                },
                priority: priority
            });
        };






        //transform-related methods and properties
        CSSPlugin.useSVGTransformAttr = true; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the "transform" attribute instead (users can override this).
        var _transformProps = ("scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent").split(","),
            _transformProp = _checkPropPrefix("transform"), //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.
            _transformPropCSS = _prefixCSS + "transform",
            _transformOriginProp = _checkPropPrefix("transformOrigin"),
            _supports3D = (_checkPropPrefix("perspective") !== null),
            Transform = _internals.Transform = function() {
                this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;
                this.force3D = (CSSPlugin.defaultForce3D === false || !_supports3D) ? false : CSSPlugin.defaultForce3D || "auto";
            },
            _SVGElement = _gsScope.SVGElement,
            _useSVGTransformAttr,
            //Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.

            _createSVG = function(type, container, attributes) {
                var element = _doc.createElementNS("http://www.w3.org/2000/svg", type),
                    reg = /([a-z])([A-Z])/g,
                    p;
                for (p in attributes) {
                    element.setAttributeNS(null, p.replace(reg, "$1-$2").toLowerCase(), attributes[p]);
                }
                container.appendChild(element);
                return element;
            },
            _docElement = _doc.documentElement || {},
            _forceSVGTransformAttr = (function() {
                //IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the "transform" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element
                var force = _ieVers || (/Android/i.test(_agent) && !_gsScope.chrome),
                    svg, rect, width;
                if (_doc.createElementNS && !force) { //IE8 and earlier doesn't support SVG anyway
                    svg = _createSVG("svg", _docElement);
                    rect = _createSVG("rect", svg, {
                        width: 100,
                        height: 50,
                        x: 100
                    });
                    width = rect.getBoundingClientRect().width;
                    rect.style[_transformOriginProp] = "50% 50%";
                    rect.style[_transformProp] = "scaleX(0.5)";
                    force = (width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D)); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).
                    _docElement.removeChild(svg);
                }
                return force;
            })(),
            _parseSVGOrigin = function(e, local, decoratee, absolute, smoothOrigin, skipRecord) {
                var tm = e._gsTransform,
                    m = _getMatrix(e, true),
                    v, x, y, xOrigin, yOrigin, a, b, c, d, tx, ty, determinant, xOriginOld, yOriginOld;
                if (tm) {
                    xOriginOld = tm.xOrigin; //record the original values before we alter them.
                    yOriginOld = tm.yOrigin;
                }
                if (!absolute || (v = absolute.split(" ")).length < 2) {
                    b = e.getBBox();
                    if (b.x === 0 && b.y === 0 && b.width + b.height === 0) { //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.
                        b = {
                            x: parseFloat(e.hasAttribute("x") ? e.getAttribute("x") : e.hasAttribute("cx") ? e.getAttribute("cx") : 0) || 0,
                            y: parseFloat(e.hasAttribute("y") ? e.getAttribute("y") : e.hasAttribute("cy") ? e.getAttribute("cy") : 0) || 0,
                            width: 0,
                            height: 0
                        };
                    }
                    local = _parsePosition(local).split(" ");
                    v = [(local[0].indexOf("%") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x,
                        (local[1].indexOf("%") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y
                    ];
                }
                decoratee.xOrigin = xOrigin = parseFloat(v[0]);
                decoratee.yOrigin = yOrigin = parseFloat(v[1]);
                if (absolute && m !== _identity2DMatrix) { //if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.
                    a = m[0];
                    b = m[1];
                    c = m[2];
                    d = m[3];
                    tx = m[4];
                    ty = m[5];
                    determinant = (a * d - b * c);
                    if (determinant) { //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
                        x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);
                        y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);
                        xOrigin = decoratee.xOrigin = v[0] = x;
                        yOrigin = decoratee.yOrigin = v[1] = y;
                    }
                }
                if (tm) { //avoid jump when transformOrigin is changed - adjust the x/y values accordingly
                    if (skipRecord) {
                        decoratee.xOffset = tm.xOffset;
                        decoratee.yOffset = tm.yOffset;
                        tm = decoratee;
                    }
                    if (smoothOrigin || (smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false)) {
                        x = xOrigin - xOriginOld;
                        y = yOrigin - yOriginOld;
                        //originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.
                        //tm.x -= x - (x * m[0] + y * m[2]);
                        //tm.y -= y - (x * m[1] + y * m[3]);
                        tm.xOffset += (x * m[0] + y * m[2]) - x;
                        tm.yOffset += (x * m[1] + y * m[3]) - y;
                    } else {
                        tm.xOffset = tm.yOffset = 0;
                    }
                }
                if (!skipRecord) {
                    e.setAttribute("data-svg-origin", v.join(" "));
                }
            },
            _getBBoxHack = function(swapIfPossible) { //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
                var svg = _createElement("svg", (this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns")) || "http://www.w3.org/2000/svg"),
                    oldParent = this.parentNode,
                    oldSibling = this.nextSibling,
                    oldCSS = this.style.cssText,
                    bbox;
                _docElement.appendChild(svg);
                svg.appendChild(this);
                this.style.display = "block";
                if (swapIfPossible) {
                    try {
                        bbox = this.getBBox();
                        this._originalGetBBox = this.getBBox;
                        this.getBBox = _getBBoxHack;
                    } catch (e) {}
                } else if (this._originalGetBBox) {
                    bbox = this._originalGetBBox();
                }
                if (oldSibling) {
                    oldParent.insertBefore(this, oldSibling);
                } else {
                    oldParent.appendChild(this);
                }
                _docElement.removeChild(svg);
                this.style.cssText = oldCSS;
                return bbox;
            },
            _getBBox = function(e) {
                try {
                    return e.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
                } catch (error) {
                    return _getBBoxHack.call(e, true);
                }
            },
            _isSVG = function(e) { //reports if the element is an SVG on which getBBox() actually works
                return !!(_SVGElement && e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
            },
            _identity2DMatrix = [1, 0, 0, 1, 0, 0],
            _getMatrix = function(e, force2D) {
                var tm = e._gsTransform || new Transform(),
                    rnd = 100000,
                    style = e.style,
                    isDefault, s, m, n, dec, none;
                if (_transformProp) {
                    s = _getStyle(e, _transformPropCSS, null, true);
                } else if (e.currentStyle) {
                    //for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.
                    s = e.currentStyle.filter.match(_ieGetMatrixExp);
                    s = (s && s.length === 4) ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), (tm.x || 0), (tm.y || 0)].join(",") : "";
                }
                isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
                if (_transformProp && ((none = (!_getComputedStyle(e) || _getComputedStyle(e).display === "none")) || !e.parentNode)) { //note: Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
                    if (none) { //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
                        n = style.display;
                        style.display = "block";
                    }
                    if (!e.parentNode) {
                        dec = 1; //flag
                        _docElement.appendChild(e);
                    }
                    s = _getStyle(e, _transformPropCSS, null, true);
                    isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
                    if (n) {
                        style.display = n;
                    } else if (none) {
                        _removeProp(style, "display");
                    }
                    if (dec) {
                        _docElement.removeChild(e);
                    }
                }
                if (tm.svg || (e.getCTM && _isSVG(e))) {
                    if (isDefault && (style[_transformProp] + "").indexOf("matrix") !== -1) { //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values
                        s = style[_transformProp];
                        isDefault = 0;
                    }
                    m = e.getAttribute("transform");
                    if (isDefault && m) {
                        m = e.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.
                        s = "matrix(" + m.a + "," + m.b + "," + m.c + "," + m.d + "," + m.e + "," + m.f + ")";
                        isDefault = 0;
                    }
                }
                if (isDefault) {
                    return _identity2DMatrix;
                }
                //split the matrix values out into an array (m for matrix)
                m = (s || "").match(_numExp) || [];
                i = m.length;
                while (--i > -1) {
                    n = Number(m[i]);
                    m[i] = (dec = n - (n |= 0)) ? ((dec * rnd + (dec < 0 ? -0.5 : 0.5)) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).
                }
                return (force2D && m.length > 6) ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;
            },

            /**
             * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.
             * @param {!Object} t target element
             * @param {Object=} cs computed style object (optional)
             * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}
             * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)
             * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}
             */
            _getTransform = _internals.getTransform = function(t, cs, rec, parse) {
                if (t._gsTransform && rec && !parse) {
                    return t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.
                }
                var tm = rec ? t._gsTransform || new Transform() : new Transform(),
                    invX = (tm.scaleX < 0), //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.
                    min = 0.00002,
                    rnd = 100000,
                    zOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, "0 0 0").split(" ")[2]) || tm.zOrigin || 0 : 0,
                    defaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,
                    m, i, scaleX, scaleY, rotation, skewX;

                tm.svg = !!(t.getCTM && _isSVG(t));
                if (tm.svg) {
                    _parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, "50% 50%") + "", tm, t.getAttribute("data-svg-origin"));
                    _useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;
                }
                m = _getMatrix(t);
                if (m !== _identity2DMatrix) {

                    if (m.length === 16) {
                        //we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)
                        var a11 = m[0],
                            a21 = m[1],
                            a31 = m[2],
                            a41 = m[3],
                            a12 = m[4],
                            a22 = m[5],
                            a32 = m[6],
                            a42 = m[7],
                            a13 = m[8],
                            a23 = m[9],
                            a33 = m[10],
                            a14 = m[12],
                            a24 = m[13],
                            a34 = m[14],
                            a43 = m[11],
                            angle = Math.atan2(a32, a33),
                            t1, t2, t3, t4, cos, sin;
                        //we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari
                        if (tm.zOrigin) {
                            a34 = -tm.zOrigin;
                            a14 = a13 * a34 - m[12];
                            a24 = a23 * a34 - m[13];
                            a34 = a33 * a34 + tm.zOrigin - m[14];
                        }
                        //note for possible future consolidation: rotationX: Math.atan2(a32, a33), rotationY: Math.atan2(-a31, Math.sqrt(a33 * a33 + a32 * a32)), rotation: Math.atan2(a21, a11), skew: Math.atan2(a12, a22). However, it doesn't seem to be quite as reliable as the full-on backwards rotation procedure.
                        tm.rotationX = angle * _RAD2DEG;
                        //rotationX
                        if (angle) {
                            cos = Math.cos(-angle);
                            sin = Math.sin(-angle);
                            t1 = a12 * cos + a13 * sin;
                            t2 = a22 * cos + a23 * sin;
                            t3 = a32 * cos + a33 * sin;
                            a13 = a12 * -sin + a13 * cos;
                            a23 = a22 * -sin + a23 * cos;
                            a33 = a32 * -sin + a33 * cos;
                            a43 = a42 * -sin + a43 * cos;
                            a12 = t1;
                            a22 = t2;
                            a32 = t3;
                        }
                        //rotationY
                        angle = Math.atan2(-a31, a33);
                        tm.rotationY = angle * _RAD2DEG;
                        if (angle) {
                            cos = Math.cos(-angle);
                            sin = Math.sin(-angle);
                            t1 = a11 * cos - a13 * sin;
                            t2 = a21 * cos - a23 * sin;
                            t3 = a31 * cos - a33 * sin;
                            a23 = a21 * sin + a23 * cos;
                            a33 = a31 * sin + a33 * cos;
                            a43 = a41 * sin + a43 * cos;
                            a11 = t1;
                            a21 = t2;
                            a31 = t3;
                        }
                        //rotationZ
                        angle = Math.atan2(a21, a11);
                        tm.rotation = angle * _RAD2DEG;
                        if (angle) {
                            cos = Math.cos(angle);
                            sin = Math.sin(angle);
                            t1 = a11 * cos + a21 * sin;
                            t2 = a12 * cos + a22 * sin;
                            t3 = a13 * cos + a23 * sin;
                            a21 = a21 * cos - a11 * sin;
                            a22 = a22 * cos - a12 * sin;
                            a23 = a23 * cos - a13 * sin;
                            a11 = t1;
                            a12 = t2;
                            a13 = t3;
                        }

                        if (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
                            tm.rotationX = tm.rotation = 0;
                            tm.rotationY = 180 - tm.rotationY;
                        }

                        //skewX
                        angle = Math.atan2(a12, a22);

                        //scales
                        tm.scaleX = ((Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31) * rnd + 0.5) | 0) / rnd;
                        tm.scaleY = ((Math.sqrt(a22 * a22 + a32 * a32) * rnd + 0.5) | 0) / rnd;
                        tm.scaleZ = ((Math.sqrt(a13 * a13 + a23 * a23 + a33 * a33) * rnd + 0.5) | 0) / rnd;
                        a11 /= tm.scaleX;
                        a12 /= tm.scaleY;
                        a21 /= tm.scaleX;
                        a22 /= tm.scaleY;
                        if (Math.abs(angle) > min) {
                            tm.skewX = angle * _RAD2DEG;
                            a12 = 0; //unskews
                            if (tm.skewType !== "simple") {
                                tm.scaleY *= 1 / Math.cos(angle); //by default, we compensate the scale based on the skew so that the element maintains a similar proportion when skewed, so we have to alter the scaleY here accordingly to match the default (non-adjusted) skewing that CSS does (stretching more and more as it skews).
                            }

                        } else {
                            tm.skewX = 0;
                        }

                        /* //for testing purposes
                        var transform = "matrix3d(",
                        	comma = ",",
                        	zero = "0";
                        a13 /= tm.scaleZ;
                        a23 /= tm.scaleZ;
                        a31 /= tm.scaleX;
                        a32 /= tm.scaleY;
                        a33 /= tm.scaleZ;
                        transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);
                        transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);
                        transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);
                        transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;
                        transform += a14 + comma + a24 + comma + a34 + comma + (tm.perspective ? (1 + (-a34 / tm.perspective)) : 1) + ")";
                        console.log(transform);
                        document.querySelector(".test").style[_transformProp] = transform;
                        */

                        tm.perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;
                        tm.x = a14;
                        tm.y = a24;
                        tm.z = a34;
                        if (tm.svg) {
                            tm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);
                            tm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);
                        }

                    } else if ((!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || (!tm.rotationX && !tm.rotationY))) { //sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's "display" is "none", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.
                        var k = (m.length >= 6),
                            a = k ? m[0] : 1,
                            b = m[1] || 0,
                            c = m[2] || 0,
                            d = k ? m[3] : 1;
                        tm.x = m[4] || 0;
                        tm.y = m[5] || 0;
                        scaleX = Math.sqrt(a * a + b * b);
                        scaleY = Math.sqrt(d * d + c * c);
                        rotation = (a || b) ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
                        skewX = (c || d) ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;
                        tm.scaleX = scaleX;
                        tm.scaleY = scaleY;
                        tm.rotation = rotation;
                        tm.skewX = skewX;
                        if (_supports3D) {
                            tm.rotationX = tm.rotationY = tm.z = 0;
                            tm.perspective = defaultTransformPerspective;
                            tm.scaleZ = 1;
                        }
                        if (tm.svg) {
                            tm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);
                            tm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);
                        }
                    }
                    if (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {
                        if (invX) {
                            tm.scaleX *= -1;
                            tm.skewX += (tm.rotation <= 0) ? 180 : -180;
                            tm.rotation += (tm.rotation <= 0) ? 180 : -180;
                        } else {
                            tm.scaleY *= -1;
                            tm.skewX += (tm.skewX <= 0) ? 180 : -180;
                        }
                    }
                    tm.zOrigin = zOrigin;
                    //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.
                    for (i in tm) {
                        if (tm[i] < min)
                            if (tm[i] > -min) {
                                tm[i] = 0;
                            }
                    }
                }
                //DEBUG: _log("parsed rotation of " + t.getAttribute("id")+": "+(tm.rotationX)+", "+(tm.rotationY)+", "+(tm.rotation)+", scale: "+tm.scaleX+", "+tm.scaleY+", "+tm.scaleZ+", position: "+tm.x+", "+tm.y+", "+tm.z+", perspective: "+tm.perspective+ ", origin: "+ tm.xOrigin+ ","+ tm.yOrigin);
                if (rec) {
                    t._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)
                    if (tm.svg) { //if we're supposed to apply transforms to the SVG element's "transform" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.
                        if (_useSVGTransformAttr && t.style[_transformProp]) {
                            TweenLite.delayedCall(0.001, function() { //if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).
                                _removeProp(t.style, _transformProp);
                            });
                        } else if (!_useSVGTransformAttr && t.getAttribute("transform")) {
                            TweenLite.delayedCall(0.001, function() {
                                t.removeAttribute("transform");
                            });
                        }
                    }
                }
                return tm;
            },

            //for setting 2D transforms in IE6, IE7, and IE8 (must use a "filter" to emulate the behavior of modern day browser transforms)
            _setIETransformRatio = function(v) {
                var t = this.data, //refers to the element's _gsTransform object
                    ang = -t.rotation * _DEG2RAD,
                    skew = ang + t.skewX * _DEG2RAD,
                    rnd = 100000,
                    a = ((Math.cos(ang) * t.scaleX * rnd) | 0) / rnd,
                    b = ((Math.sin(ang) * t.scaleX * rnd) | 0) / rnd,
                    c = ((Math.sin(skew) * -t.scaleY * rnd) | 0) / rnd,
                    d = ((Math.cos(skew) * t.scaleY * rnd) | 0) / rnd,
                    style = this.t.style,
                    cs = this.t.currentStyle,
                    filters, val;
                if (!cs) {
                    return;
                }
                val = b; //just for swapping the variables an inverting them (reused "val" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)
                b = -c;
                c = -val;
                filters = cs.filter;
                style.filter = ""; //remove filters so that we can accurately measure offsetWidth/offsetHeight
                var w = this.t.offsetWidth,
                    h = this.t.offsetHeight,
                    clip = (cs.position !== "absolute"),
                    m = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ", M12=" + b + ", M21=" + c + ", M22=" + d,
                    ox = t.x + (w * t.xPercent / 100),
                    oy = t.y + (h * t.yPercent / 100),
                    dx, dy;

                //if transformOrigin is being used, adjust the offset x and y
                if (t.ox != null) {
                    dx = ((t.oxp) ? w * t.ox * 0.01 : t.ox) - w / 2;
                    dy = ((t.oyp) ? h * t.oy * 0.01 : t.oy) - h / 2;
                    ox += dx - (dx * a + dy * b);
                    oy += dy - (dx * c + dy * d);
                }

                if (!clip) {
                    m += ", sizingMethod='auto expand')";
                } else {
                    dx = (w / 2);
                    dy = (h / 2);
                    //translate to ensure that transformations occur around the correct origin (default is center).
                    m += ", Dx=" + (dx - (dx * a + dy * b) + ox) + ", Dy=" + (dy - (dx * c + dy * d) + oy) + ")";
                }
                if (filters.indexOf("DXImageTransform.Microsoft.Matrix(") !== -1) {
                    style.filter = filters.replace(_ieSetMatrixExp, m);
                } else {
                    style.filter = m + " " + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.
                }

                //at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.
                if (v === 0 || v === 1)
                    if (a === 1)
                        if (b === 0)
                            if (c === 0)
                                if (d === 1)
                                    if (!clip || m.indexOf("Dx=0, Dy=0") !== -1)
                                        if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100)
                                            if (filters.indexOf("gradient(" && filters.indexOf("Alpha")) === -1) {
                                                style.removeAttribute("filter");
                                            }

                //we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).
                if (!clip) {
                    var mult = (_ieVers < 8) ? 1 : -1, //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom
                        marg, prop, dif;
                    dx = t.ieOffsetX || 0;
                    dy = t.ieOffsetY || 0;
                    t.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);
                    t.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);
                    for (i = 0; i < 4; i++) {
                        prop = _margins[i];
                        marg = cs[prop];
                        //we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)
                        val = (marg.indexOf("px") !== -1) ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, "")) || 0;
                        if (val !== t[prop]) {
                            dif = (i < 2) ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.
                        } else {
                            dif = (i < 2) ? dx - t.ieOffsetX : dy - t.ieOffsetY;
                        }
                        style[prop] = (t[prop] = Math.round(val - dif * ((i === 0 || i === 2) ? 1 : mult))) + "px";
                    }
                }
            },

            /* translates a super small decimal to a string WITHOUT scientific notation
            _safeDecimal = function(n) {
            	var s = (n < 0 ? -n : n) + "",
            		a = s.split("e-");
            	return (n < 0 ? "-0." : "0.") + new Array(parseInt(a[1], 10) || 0).join("0") + a[0].split(".").join("");
            },
            */

            _setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function(v) {
                var t = this.data, //refers to the element's _gsTransform object
                    style = this.t.style,
                    angle = t.rotation,
                    rotationX = t.rotationX,
                    rotationY = t.rotationY,
                    sx = t.scaleX,
                    sy = t.scaleY,
                    sz = t.scaleZ,
                    x = t.x,
                    y = t.y,
                    z = t.z,
                    isSVG = t.svg,
                    perspective = t.perspective,
                    force3D = t.force3D,
                    skewY = t.skewY,
                    skewX = t.skewX,
                    t1, a11, a12, a13, a21, a22, a23, a31, a32, a33, a41, a42, a43,
                    zOrigin, min, cos, sin, t2, transform, comma, zero, skew, rnd;
                if (skewY) { //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
                    skewX += skewY;
                    angle += skewY;
                }

                //check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)
                if (((((v === 1 || v === 0) && force3D === "auto" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime)) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1) || (_useSVGTransformAttr && isSVG) || !_supports3D) { //on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.

                    //2D
                    if (angle || skewX || isSVG) {
                        angle *= _DEG2RAD;
                        skew = skewX * _DEG2RAD;
                        rnd = 100000;
                        a11 = Math.cos(angle) * sx;
                        a21 = Math.sin(angle) * sx;
                        a12 = Math.sin(angle - skew) * -sy;
                        a22 = Math.cos(angle - skew) * sy;
                        if (skew && t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
                            t1 = Math.tan(skew - skewY * _DEG2RAD);
                            t1 = Math.sqrt(1 + t1 * t1);
                            a12 *= t1;
                            a22 *= t1;
                            if (skewY) {
                                t1 = Math.tan(skewY * _DEG2RAD);
                                t1 = Math.sqrt(1 + t1 * t1);
                                a11 *= t1;
                                a21 *= t1;
                            }
                        }
                        if (isSVG) {
                            x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                            y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
                            if (_useSVGTransformAttr && (t.xPercent || t.yPercent)) { //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the matrix to simulate it.
                                min = this.t.getBBox();
                                x += t.xPercent * 0.01 * min.width;
                                y += t.yPercent * 0.01 * min.height;
                            }
                            min = 0.000001;
                            if (x < min)
                                if (x > -min) {
                                    x = 0;
                                }
                            if (y < min)
                                if (y > -min) {
                                    y = 0;
                                }
                        }
                        transform = (((a11 * rnd) | 0) / rnd) + "," + (((a21 * rnd) | 0) / rnd) + "," + (((a12 * rnd) | 0) / rnd) + "," + (((a22 * rnd) | 0) / rnd) + "," + x + "," + y + ")";
                        if (isSVG && _useSVGTransformAttr) {
                            this.t.setAttribute("transform", "matrix(" + transform);
                        } else {
                            //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 5 decimal places.
                            style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + transform;
                        }
                    } else {
                        style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + sx + ",0,0," + sy + "," + x + "," + y + ")";
                    }
                    return;

                }
                if (_isFirefox) { //Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.
                    min = 0.0001;
                    if (sx < min && sx > -min) {
                        sx = sz = 0.00002;
                    }
                    if (sy < min && sy > -min) {
                        sy = sz = 0.00002;
                    }
                    if (perspective && !t.z && !t.rotationX && !t.rotationY) { //Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).
                        perspective = 0;
                    }
                }
                if (angle || skewX) {
                    angle *= _DEG2RAD;
                    cos = a11 = Math.cos(angle);
                    sin = a21 = Math.sin(angle);
                    if (skewX) {
                        angle -= skewX * _DEG2RAD;
                        cos = Math.cos(angle);
                        sin = Math.sin(angle);
                        if (t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
                            t1 = Math.tan((skewX - skewY) * _DEG2RAD);
                            t1 = Math.sqrt(1 + t1 * t1);
                            cos *= t1;
                            sin *= t1;
                            if (t.skewY) {
                                t1 = Math.tan(skewY * _DEG2RAD);
                                t1 = Math.sqrt(1 + t1 * t1);
                                a11 *= t1;
                                a21 *= t1;
                            }
                        }
                    }
                    a12 = -sin;
                    a22 = cos;

                } else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) { //if we're only translating and/or 2D scaling, this is faster...
                    style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) translate3d(" : "translate3d(") + x + "px," + y + "px," + z + "px)" + ((sx !== 1 || sy !== 1) ? " scale(" + sx + "," + sy + ")" : "");
                    return;
                } else {
                    a11 = a22 = 1;
                    a12 = a21 = 0;
                }
                // KEY  INDEX   AFFECTS a[row][column]
                // a11  0       rotation, rotationY, scaleX
                // a21  1       rotation, rotationY, scaleX
                // a31  2       rotationY, scaleX
                // a41  3       rotationY, scaleX
                // a12  4       rotation, skewX, rotationX, scaleY
                // a22  5       rotation, skewX, rotationX, scaleY
                // a32  6       rotationX, scaleY
                // a42  7       rotationX, scaleY
                // a13  8       rotationY, rotationX, scaleZ
                // a23  9       rotationY, rotationX, scaleZ
                // a33  10      rotationY, rotationX, scaleZ
                // a43  11      rotationY, rotationX, perspective, scaleZ
                // a14  12      x, zOrigin, svgOrigin
                // a24  13      y, zOrigin, svgOrigin
                // a34  14      z, zOrigin
                // a44  15
                // rotation: Math.atan2(a21, a11)
                // rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))
                // rotationX: Math.atan2(a32, a33)
                a33 = 1;
                a13 = a23 = a31 = a32 = a41 = a42 = 0;
                a43 = (perspective) ? -1 / perspective : 0;
                zOrigin = t.zOrigin;
                min = 0.000001; //threshold below which browsers use scientific notation which won't work.
                comma = ",";
                zero = "0";
                angle = rotationY * _DEG2RAD;
                if (angle) {
                    cos = Math.cos(angle);
                    sin = Math.sin(angle);
                    a31 = -sin;
                    a41 = a43 * -sin;
                    a13 = a11 * sin;
                    a23 = a21 * sin;
                    a33 = cos;
                    a43 *= cos;
                    a11 *= cos;
                    a21 *= cos;
                }
                angle = rotationX * _DEG2RAD;
                if (angle) {
                    cos = Math.cos(angle);
                    sin = Math.sin(angle);
                    t1 = a12 * cos + a13 * sin;
                    t2 = a22 * cos + a23 * sin;
                    a32 = a33 * sin;
                    a42 = a43 * sin;
                    a13 = a12 * -sin + a13 * cos;
                    a23 = a22 * -sin + a23 * cos;
                    a33 = a33 * cos;
                    a43 = a43 * cos;
                    a12 = t1;
                    a22 = t2;
                }
                if (sz !== 1) {
                    a13 *= sz;
                    a23 *= sz;
                    a33 *= sz;
                    a43 *= sz;
                }
                if (sy !== 1) {
                    a12 *= sy;
                    a22 *= sy;
                    a32 *= sy;
                    a42 *= sy;
                }
                if (sx !== 1) {
                    a11 *= sx;
                    a21 *= sx;
                    a31 *= sx;
                    a41 *= sx;
                }

                if (zOrigin || isSVG) {
                    if (zOrigin) {
                        x += a13 * -zOrigin;
                        y += a23 * -zOrigin;
                        z += a33 * -zOrigin + zOrigin;
                    }
                    if (isSVG) { //due to bugs in some browsers, we need to manage the transform-origin of SVG manually
                        x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                        y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
                    }
                    if (x < min && x > -min) {
                        x = zero;
                    }
                    if (y < min && y > -min) {
                        y = zero;
                    }
                    if (z < min && z > -min) {
                        z = 0; //don't use string because we calculate perspective later and need the number.
                    }
                }

                //optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:
                transform = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix3d(" : "matrix3d(");
                transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);
                transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);
                if (rotationX || rotationY || sz !== 1) { //performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)
                    transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);
                    transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;
                } else {
                    transform += ",0,0,0,0,1,0,";
                }
                transform += x + comma + y + comma + z + comma + (perspective ? (1 + (-z / perspective)) : 1) + ")";

                style[_transformProp] = transform;
            };

        p = Transform.prototype;
        p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;
        p.scaleX = p.scaleY = p.scaleZ = 1;

        _registerComplexSpecialProp("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", {
            parser: function(t, e, parsingProp, cssp, pt, plugin, vars) {
                if (cssp._lastParsedTransform === vars) {
                    return pt;
                } //only need to parse the transform once, and only if the browser supports it.
                cssp._lastParsedTransform = vars;
                var scaleFunc = (vars.scale && typeof(vars.scale) === "function") ? vars.scale : 0, //if there's a function-based "scale" value, swap in the resulting numeric value temporarily. Otherwise, if it's called for both scaleX and scaleY independently, they may not match (like if the function uses Math.random()).
                    swapFunc;
                if (typeof(vars[parsingProp]) === "function") { //whatever property triggers the initial parsing might be a function-based value in which case it already got called in parse(), thus we don't want to call it again in here. The most efficient way to avoid this is to temporarily swap the value directly into the vars object, and then after we do all our parsing in this function, we'll swap it back again.
                    swapFunc = vars[parsingProp];
                    vars[parsingProp] = e;
                }
                if (scaleFunc) {
                    vars.scale = scaleFunc(_index, t);
                }
                var originalGSTransform = t._gsTransform,
                    style = t.style,
                    min = 0.000001,
                    i = _transformProps.length,
                    v = vars,
                    endRotations = {},
                    transformOriginString = "transformOrigin",
                    m1 = _getTransform(t, _cs, true, v.parseTransform),
                    orig = v.transform && ((typeof(v.transform) === "function") ? v.transform(_index, _target) : v.transform),
                    m2, copy, has3D, hasChange, dr, x, y, matrix, p;
                m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;
                cssp._transform = m1;
                if (orig && typeof(orig) === "string" && _transformProp) { //for values like transform:"rotate(60deg) scale(0.5, 0.8)"
                    copy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.
                    copy[_transformProp] = orig;
                    copy.display = "block"; //if display is "none", the browser often refuses to report the transform properties correctly.
                    copy.position = "absolute";
                    if (orig.indexOf("%") !== -1) { //%-based translations will fail unless we set the width/height to match the original target...
                        copy.width = _getStyle(t, "width");
                        copy.height = _getStyle(t, "height");
                    }
                    _doc.body.appendChild(_tempDiv);
                    m2 = _getTransform(_tempDiv, null, false);
                    if (m1.skewType === "simple") { //the default _getTransform() reports the skewX/scaleY as if skewType is "compensated", thus we need to adjust that here if skewType is "simple".
                        m2.scaleY *= Math.cos(m2.skewX * _DEG2RAD);
                    }
                    if (m1.svg) { //if it's an SVG element, x/y part of the matrix will be affected by whatever we use as the origin and the offsets, so compensate here...
                        x = m1.xOrigin;
                        y = m1.yOrigin;
                        m2.x -= m1.xOffset;
                        m2.y -= m1.yOffset;
                        if (v.transformOrigin || v.svgOrigin) { //if this tween is altering the origin, we must factor that in here. The actual work of recording the transformOrigin values and setting up the PropTween is done later (still inside this function) so we cannot leave the changes intact here - we only want to update the x/y accordingly.
                            orig = {};
                            _parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);
                            x = orig.xOrigin;
                            y = orig.yOrigin;
                            m2.x -= orig.xOffset - m1.xOffset;
                            m2.y -= orig.yOffset - m1.yOffset;
                        }
                        if (x || y) {
                            matrix = _getMatrix(_tempDiv, true);
                            m2.x -= x - (x * matrix[0] + y * matrix[2]);
                            m2.y -= y - (x * matrix[1] + y * matrix[3]);
                        }
                    }
                    _doc.body.removeChild(_tempDiv);
                    if (!m2.perspective) {
                        m2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
                    }
                    if (v.xPercent != null) {
                        m2.xPercent = _parseVal(v.xPercent, m1.xPercent);
                    }
                    if (v.yPercent != null) {
                        m2.yPercent = _parseVal(v.yPercent, m1.yPercent);
                    }
                } else if (typeof(v) === "object") { //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)
                    m2 = {
                        scaleX: _parseVal((v.scaleX != null) ? v.scaleX : v.scale, m1.scaleX),
                        scaleY: _parseVal((v.scaleY != null) ? v.scaleY : v.scale, m1.scaleY),
                        scaleZ: _parseVal(v.scaleZ, m1.scaleZ),
                        x: _parseVal(v.x, m1.x),
                        y: _parseVal(v.y, m1.y),
                        z: _parseVal(v.z, m1.z),
                        xPercent: _parseVal(v.xPercent, m1.xPercent),
                        yPercent: _parseVal(v.yPercent, m1.yPercent),
                        perspective: _parseVal(v.transformPerspective, m1.perspective)
                    };
                    dr = v.directionalRotation;
                    if (dr != null) {
                        if (typeof(dr) === "object") {
                            for (copy in dr) {
                                v[copy] = dr[copy];
                            }
                        } else {
                            v.rotation = dr;
                        }
                    }
                    if (typeof(v.x) === "string" && v.x.indexOf("%") !== -1) {
                        m2.x = 0;
                        m2.xPercent = _parseVal(v.x, m1.xPercent);
                    }
                    if (typeof(v.y) === "string" && v.y.indexOf("%") !== -1) {
                        m2.y = 0;
                        m2.yPercent = _parseVal(v.y, m1.yPercent);
                    }

                    m2.rotation = _parseAngle(("rotation" in v) ? v.rotation : ("shortRotation" in v) ? v.shortRotation + "_short" : ("rotationZ" in v) ? v.rotationZ : m1.rotation, m1.rotation, "rotation", endRotations);
                    if (_supports3D) {
                        m2.rotationX = _parseAngle(("rotationX" in v) ? v.rotationX : ("shortRotationX" in v) ? v.shortRotationX + "_short" : m1.rotationX || 0, m1.rotationX, "rotationX", endRotations);
                        m2.rotationY = _parseAngle(("rotationY" in v) ? v.rotationY : ("shortRotationY" in v) ? v.shortRotationY + "_short" : m1.rotationY || 0, m1.rotationY, "rotationY", endRotations);
                    }
                    m2.skewX = _parseAngle(v.skewX, m1.skewX);
                    m2.skewY = _parseAngle(v.skewY, m1.skewY);
                }
                if (_supports3D && v.force3D != null) {
                    m1.force3D = v.force3D;
                    hasChange = true;
                }

                has3D = (m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective);
                if (!has3D && v.scale != null) {
                    m2.scaleZ = 1; //no need to tween scaleZ.
                }

                while (--i > -1) {
                    p = _transformProps[i];
                    orig = m2[p] - m1[p];
                    if (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {
                        hasChange = true;
                        pt = new CSSPropTween(m1, p, m1[p], orig, pt);
                        if (p in endRotations) {
                            pt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested
                        }
                        pt.xs0 = 0; //ensures the value stays numeric in setRatio()
                        pt.plugin = plugin;
                        cssp._overwriteProps.push(pt.n);
                    }
                }

                orig = v.transformOrigin;
                if (m1.svg && (orig || v.svgOrigin)) {
                    x = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin
                    y = m1.yOffset;
                    _parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);
                    pt = _addNonTweeningNumericPT(m1, "xOrigin", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to("#wheel", 3, {rotation:180, transformOrigin:"50% 50%", delay:1}); TweenLite.fromTo("#wheel", 3, {scale:0.5, transformOrigin:"50% 50%"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.
                    pt = _addNonTweeningNumericPT(m1, "yOrigin", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);
                    if (x !== m1.xOffset || y !== m1.yOffset) {
                        pt = _addNonTweeningNumericPT(m1, "xOffset", (originalGSTransform ? x : m1.xOffset), m1.xOffset, pt, transformOriginString);
                        pt = _addNonTweeningNumericPT(m1, "yOffset", (originalGSTransform ? y : m1.yOffset), m1.yOffset, pt, transformOriginString);
                    }
                    orig = "0px 0px"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin
                }
                if (orig || (_supports3D && has3D && m1.zOrigin)) { //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a "transformOrigin" in this particular tween (maybe they did it via css directly).
                    if (_transformProp) {
                        hasChange = true;
                        p = _transformOriginProp;
                        orig = (orig || _getStyle(t, p, _cs, false, "50% 50%")) + ""; //cast as string to avoid errors
                        pt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);
                        pt.b = style[p];
                        pt.plugin = plugin;
                        if (_supports3D) {
                            copy = m1.zOrigin;
                            orig = orig.split(" ");
                            m1.zOrigin = ((orig.length > 2 && !(copy !== 0 && orig[2] === "0px")) ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.
                            pt.xs0 = pt.e = orig[0] + " " + (orig[1] || "50%") + " 0px"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!
                            pt = new CSSPropTween(m1, "zOrigin", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)
                            pt.b = copy;
                            pt.xs0 = pt.e = m1.zOrigin;
                        } else {
                            pt.xs0 = pt.e = orig;
                        }

                        //for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).
                    } else {
                        _parsePosition(orig + "", m1);
                    }
                }
                if (hasChange) {
                    cssp._transformType = (!(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3)) ? 3 : 2; //quicker than calling cssp._enableTransforms();
                }
                if (swapFunc) {
                    vars[parsingProp] = swapFunc;
                }
                if (scaleFunc) {
                    vars.scale = scaleFunc;
                }
                return pt;
            },
            prefix: true
        });

        _registerComplexSpecialProp("boxShadow", {
            defaultValue: "0px 0px 0px 0px #999",
            prefix: true,
            color: true,
            multi: true,
            keyword: "inset"
        });

        _registerComplexSpecialProp("borderRadius", {
            defaultValue: "0px",
            parser: function(t, e, p, cssp, pt, plugin) {
                e = this.format(e);
                var props = ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"],
                    style = t.style,
                    ea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;
                w = parseFloat(t.offsetWidth);
                h = parseFloat(t.offsetHeight);
                ea1 = e.split(" ");
                for (i = 0; i < props.length; i++) { //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!
                    if (this.p.indexOf("border")) { //older browsers used a prefix
                        props[i] = _checkPropPrefix(props[i]);
                    }
                    bs = bs2 = _getStyle(t, props[i], _cs, false, "0px");
                    if (bs.indexOf(" ") !== -1) {
                        bs2 = bs.split(" ");
                        bs = bs2[0];
                        bs2 = bs2[1];
                    }
                    es = es2 = ea1[i];
                    bn = parseFloat(bs);
                    bsfx = bs.substr((bn + "").length);
                    rel = (es.charAt(1) === "=");
                    if (rel) {
                        en = parseInt(es.charAt(0) + "1", 10);
                        es = es.substr(2);
                        en *= parseFloat(es);
                        esfx = es.substr((en + "").length - (en < 0 ? 1 : 0)) || "";
                    } else {
                        en = parseFloat(es);
                        esfx = es.substr((en + "").length);
                    }
                    if (esfx === "") {
                        esfx = _suffixMap[p] || bsfx;
                    }
                    if (esfx !== bsfx) {
                        hn = _convertToPixels(t, "borderLeft", bn, bsfx); //horizontal number (we use a bogus "borderLeft" property just because the _convertToPixels() method searches for the keywords "Left", "Right", "Top", and "Bottom" to determine of it's a horizontal or vertical property, and we need "border" in the name so that it knows it should measure relative to the element itself, not its parent.
                        vn = _convertToPixels(t, "borderTop", bn, bsfx); //vertical number
                        if (esfx === "%") {
                            bs = (hn / w * 100) + "%";
                            bs2 = (vn / h * 100) + "%";
                        } else if (esfx === "em") {
                            em = _convertToPixels(t, "borderLeft", 1, "em");
                            bs = (hn / em) + "em";
                            bs2 = (vn / em) + "em";
                        } else {
                            bs = hn + "px";
                            bs2 = vn + "px";
                        }
                        if (rel) {
                            es = (parseFloat(bs) + en) + esfx;
                            es2 = (parseFloat(bs2) + en) + esfx;
                        }
                    }
                    pt = _parseComplex(style, props[i], bs + " " + bs2, es + " " + es2, false, "0px", pt);
                }
                return pt;
            },
            prefix: true,
            formatter: _getFormatter("0px 0px 0px 0px", false, true)
        });
        _registerComplexSpecialProp("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius", {
            defaultValue: "0px",
            parser: function(t, e, p, cssp, pt, plugin) {
                return _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, "0px 0px")), this.format(e), false, "0px", pt);
            },
            prefix: true,
            formatter: _getFormatter("0px 0px", false, true)
        });
        _registerComplexSpecialProp("backgroundPosition", {
            defaultValue: "0 0",
            parser: function(t, e, p, cssp, pt, plugin) {
                var bp = "background-position",
                    cs = (_cs || _getComputedStyle(t, null)),
                    bs = this.format(((cs) ? _ieVers ? cs.getPropertyValue(bp + "-x") + " " + cs.getPropertyValue(bp + "-y") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"), //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase
                    es = this.format(e),
                    ba, ea, i, pct, overlap, src;
                if ((bs.indexOf("%") !== -1) !== (es.indexOf("%") !== -1) && es.split(",").length < 2) {
                    src = _getStyle(t, "backgroundImage").replace(_urlExp, "");
                    if (src && src !== "none") {
                        ba = bs.split(" ");
                        ea = es.split(" ");
                        _tempImg.setAttribute("src", src); //set the temp IMG's src to the background-image so that we can measure its width/height
                        i = 2;
                        while (--i > -1) {
                            bs = ba[i];
                            pct = (bs.indexOf("%") !== -1);
                            if (pct !== (ea[i].indexOf("%") !== -1)) {
                                overlap = (i === 0) ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;
                                ba[i] = pct ? (parseFloat(bs) / 100 * overlap) + "px" : (parseFloat(bs) / overlap * 100) + "%";
                            }
                        }
                        bs = ba.join(" ");
                    }
                }
                return this.parseComplex(t.style, bs, es, pt, plugin);
            },
            formatter: _parsePosition
        });
        _registerComplexSpecialProp("backgroundSize", {
            defaultValue: "0 0",
            formatter: function(v) {
                v += ""; //ensure it's a string
                return (v.substr(0, 2) === "co") ? v : _parsePosition(v.indexOf(" ") === -1 ? v + " " + v : v); //if set to something like "100% 100%", Safari typically reports the computed style as just "100%" (no 2nd value), but we should ensure that there are two values, so copy the first one. Otherwise, it'd be interpreted as "100% 0" (wrong). Also remember that it could be "cover" or "contain" which we can't tween but should be able to set.
            }
        });
        _registerComplexSpecialProp("perspective", {
            defaultValue: "0px",
            prefix: true
        });
        _registerComplexSpecialProp("perspectiveOrigin", {
            defaultValue: "50% 50%",
            prefix: true
        });
        _registerComplexSpecialProp("transformStyle", {
            prefix: true
        });
        _registerComplexSpecialProp("backfaceVisibility", {
            prefix: true
        });
        _registerComplexSpecialProp("userSelect", {
            prefix: true
        });
        _registerComplexSpecialProp("margin", {
            parser: _getEdgeParser("marginTop,marginRight,marginBottom,marginLeft")
        });
        _registerComplexSpecialProp("padding", {
            parser: _getEdgeParser("paddingTop,paddingRight,paddingBottom,paddingLeft")
        });
        _registerComplexSpecialProp("clip", {
            defaultValue: "rect(0px,0px,0px,0px)",
            parser: function(t, e, p, cssp, pt, plugin) {
                var b, cs, delim;
                if (_ieVers < 9) { //IE8 and earlier don't report a "clip" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.
                    cs = t.currentStyle;
                    delim = _ieVers < 8 ? " " : ",";
                    b = "rect(" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + ")";
                    e = this.format(e).split(",").join(delim);
                } else {
                    b = this.format(_getStyle(t, this.p, _cs, false, this.dflt));
                    e = this.format(e);
                }
                return this.parseComplex(t.style, b, e, pt, plugin);
            }
        });
        _registerComplexSpecialProp("textShadow", {
            defaultValue: "0px 0px 0px #999",
            color: true,
            multi: true
        });
        _registerComplexSpecialProp("autoRound,strictUnits", {
            parser: function(t, e, p, cssp, pt) {
                return pt;
            }
        }); //just so that we can ignore these properties (not tween them)
        _registerComplexSpecialProp("border", {
            defaultValue: "0px solid #000",
            parser: function(t, e, p, cssp, pt, plugin) {
                var bw = _getStyle(t, "borderTopWidth", _cs, false, "0px"),
                    end = this.format(e).split(" "),
                    esfx = end[0].replace(_suffixExp, "");
                if (esfx !== "px") { //if we're animating to a non-px value, we need to convert the beginning width to that unit.
                    bw = (parseFloat(bw) / _convertToPixels(t, "borderTopWidth", 1, esfx)) + esfx;
                }
                return this.parseComplex(t.style, this.format(bw + " " + _getStyle(t, "borderTopStyle", _cs, false, "solid") + " " + _getStyle(t, "borderTopColor", _cs, false, "#000")), end.join(" "), pt, plugin);
            },
            color: true,
            formatter: function(v) {
                var a = v.split(" ");
                return a[0] + " " + (a[1] || "solid") + " " + (v.match(_colorExp) || ["#000"])[0];
            }
        });
        _registerComplexSpecialProp("borderWidth", {
            parser: _getEdgeParser("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")
        }); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).
        _registerComplexSpecialProp("float,cssFloat,styleFloat", {
            parser: function(t, e, p, cssp, pt, plugin) {
                var s = t.style,
                    prop = ("cssFloat" in s) ? "cssFloat" : "styleFloat";
                return new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);
            }
        });

        //opacity-related
        var _setIEOpacityRatio = function(v) {
            var t = this.t, //refers to the element's style property
                filters = t.filter || _getStyle(this.data, "filter") || "",
                val = (this.s + this.c * v) | 0,
                skip;
            if (val === 100) { //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.
                if (filters.indexOf("atrix(") === -1 && filters.indexOf("radient(") === -1 && filters.indexOf("oader(") === -1) {
                    t.removeAttribute("filter");
                    skip = (!_getStyle(this.data, "filter")); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.
                } else {
                    t.filter = filters.replace(_alphaFilterExp, "");
                    skip = true;
                }
            }
            if (!skip) {
                if (this.xn1) {
                    t.filter = filters = filters || ("alpha(opacity=" + val + ")"); //works around bug in IE7/8 that prevents changes to "visibility" from being applied properly if the filter is changed to a different alpha on the same frame.
                }
                if (filters.indexOf("pacity") === -1) { //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the "O" to avoid case-sensitivity issues
                    if (val !== 0 || !this.xn1) { //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as "visibility" changes (this.xn1 is 1 if this tween is an "autoAlpha" tween)
                        t.filter = filters + " alpha(opacity=" + val + ")"; //we round the value because otherwise, bugs in IE7/8 can prevent "visibility" changes from being applied properly.
                    }
                } else {
                    t.filter = filters.replace(_opacityExp, "opacity=" + val);
                }
            }
        };
        _registerComplexSpecialProp("opacity,alpha,autoAlpha", {
            defaultValue: "1",
            parser: function(t, e, p, cssp, pt, plugin) {
                var b = parseFloat(_getStyle(t, "opacity", _cs, false, "1")),
                    style = t.style,
                    isAutoAlpha = (p === "autoAlpha");
                if (typeof(e) === "string" && e.charAt(1) === "=") {
                    e = ((e.charAt(0) === "-") ? -1 : 1) * parseFloat(e.substr(2)) + b;
                }
                if (isAutoAlpha && b === 1 && _getStyle(t, "visibility", _cs) === "hidden" && e !== 0) { //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
                    b = 0;
                }
                if (_supportsOpacity) {
                    pt = new CSSPropTween(style, "opacity", b, e - b, pt);
                } else {
                    pt = new CSSPropTween(style, "opacity", b * 100, (e - b) * 100, pt);
                    pt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to "visibility" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.
                    style.zoom = 1; //helps correct an IE issue.
                    pt.type = 2;
                    pt.b = "alpha(opacity=" + pt.s + ")";
                    pt.e = "alpha(opacity=" + (pt.s + pt.c) + ")";
                    pt.data = t;
                    pt.plugin = plugin;
                    pt.setRatio = _setIEOpacityRatio;
                }
                if (isAutoAlpha) { //we have to create the "visibility" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier
                    pt = new CSSPropTween(style, "visibility", 0, 0, pt, -1, null, false, 0, ((b !== 0) ? "inherit" : "hidden"), ((e === 0) ? "hidden" : "inherit"));
                    pt.xs0 = "inherit";
                    cssp._overwriteProps.push(pt.n);
                    cssp._overwriteProps.push(p);
                }
                return pt;
            }
        });


        var _removeProp = function(s, p) {
                if (p) {
                    if (s.removeProperty) {
                        if (p.substr(0, 2) === "ms" || p.substr(0, 6) === "webkit") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
                            p = "-" + p;
                        }
                        s.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
                    } else { //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
                        s.removeAttribute(p);
                    }
                }
            },
            _setClassNameRatio = function(v) {
                this.t._gsClassPT = this;
                if (v === 1 || v === 0) {
                    this.t.setAttribute("class", (v === 0) ? this.b : this.e);
                    var mpt = this.data, //first MiniPropTween
                        s = this.t.style;
                    while (mpt) {
                        if (!mpt.v) {
                            _removeProp(s, mpt.p);
                        } else {
                            s[mpt.p] = mpt.v;
                        }
                        mpt = mpt._next;
                    }
                    if (v === 1 && this.t._gsClassPT === this) {
                        this.t._gsClassPT = null;
                    }
                } else if (this.t.getAttribute("class") !== this.e) {
                    this.t.setAttribute("class", this.e);
                }
            };
        _registerComplexSpecialProp("className", {
            parser: function(t, e, p, cssp, pt, plugin, vars) {
                var b = t.getAttribute("class") || "", //don't use t.className because it doesn't work consistently on SVG elements; getAttribute("class") and setAttribute("class", value") is more reliable.
                    cssText = t.style.cssText,
                    difData, bs, cnpt, cnptLookup, mpt;
                pt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);
                pt.setRatio = _setClassNameRatio;
                pt.pr = -11;
                _hasPriority = true;
                pt.b = b;
                bs = _getAllStyles(t, _cs);
                //if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)
                cnpt = t._gsClassPT;
                if (cnpt) {
                    cnptLookup = {};
                    mpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.
                    while (mpt) {
                        cnptLookup[mpt.p] = 1;
                        mpt = mpt._next;
                    }
                    cnpt.setRatio(1);
                }
                t._gsClassPT = pt;
                pt.e = (e.charAt(1) !== "=") ? e : b.replace(new RegExp("(?:\\s|^)" + e.substr(2) + "(?![\\w-])"), "") + ((e.charAt(0) === "+") ? " " + e.substr(2) : "");
                t.setAttribute("class", pt.e);
                difData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);
                t.setAttribute("class", b);
                pt.data = difData.firstMPT;
                t.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
                pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if "className" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)
                return pt;
            }
        });


        var _setClearPropsRatio = function(v) {
            if (v === 1 || v === 0)
                if (this.data._totalTime === this.data._totalDuration && this.data.data !== "isFromStart") { //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).
                    var s = this.t.style,
                        transformParse = _specialProps.transform.parse,
                        a, p, i, clearTransform, transform;
                    if (this.e === "all") {
                        s.cssText = "";
                        clearTransform = true;
                    } else {
                        a = this.e.split(" ").join("").split(",");
                        i = a.length;
                        while (--i > -1) {
                            p = a[i];
                            if (_specialProps[p]) {
                                if (_specialProps[p].parse === transformParse) {
                                    clearTransform = true;
                                } else {
                                    p = (p === "transformOrigin") ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like "scaleX" might be "-webkit-transform" or "boxShadow" might be "-moz-box-shadow"
                                }
                            }
                            _removeProp(s, p);
                        }
                    }
                    if (clearTransform) {
                        _removeProp(s, _transformProp);
                        transform = this.t._gsTransform;
                        if (transform) {
                            if (transform.svg) {
                                this.t.removeAttribute("data-svg-origin");
                                this.t.removeAttribute("transform");
                            }
                            delete this.t._gsTransform;
                        }
                    }

                }
        };
        _registerComplexSpecialProp("clearProps", {
            parser: function(t, e, p, cssp, pt) {
                pt = new CSSPropTween(t, p, 0, 0, pt, 2);
                pt.setRatio = _setClearPropsRatio;
                pt.e = e;
                pt.pr = -10;
                pt.data = cssp._tween;
                _hasPriority = true;
                return pt;
            }
        });

        p = "bezier,throwProps,physicsProps,physics2D".split(",");
        i = p.length;
        while (i--) {
            _registerPluginProp(p[i]);
        }








        p = CSSPlugin.prototype;
        p._firstPT = p._lastParsedTransform = p._transform = null;

        //gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.
        p._onInitTween = function(target, vars, tween, index) {
            if (!target.nodeType) { //css is only for dom elements
                return false;
            }
            this._target = _target = target;
            this._tween = tween;
            this._vars = vars;
            _index = index;
            _autoRound = vars.autoRound;
            _hasPriority = false;
            _suffixMap = vars.suffixMap || CSSPlugin.suffixMap;
            _cs = _getComputedStyle(target, "");
            _overwriteProps = this._overwriteProps;
            var style = target.style,
                v, pt, pt2, first, last, next, zIndex, tpt, threeD;
            if (_reqSafariFix)
                if (style.zIndex === "") {
                    v = _getStyle(target, "zIndex", _cs);
                    if (v === "auto" || v === "") {
                        //corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using "left" or "top" instead of transforms like "x" and "y") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.
                        this._addLazySet(style, "zIndex", 0);
                    }
                }

            if (typeof(vars) === "string") {
                first = style.cssText;
                v = _getAllStyles(target, _cs);
                style.cssText = first + ";" + vars;
                v = _cssDif(target, v, _getAllStyles(target)).difs;
                if (!_supportsOpacity && _opacityValExp.test(vars)) {
                    v.opacity = parseFloat(RegExp.$1);
                }
                vars = v;
                style.cssText = first;
            }

            if (vars.className) { //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:"myClass", scale:0.5, left:20} would work.
                this._firstPT = pt = _specialProps.className.parse(target, vars.className, "className", this, null, null, vars);
            } else {
                this._firstPT = pt = this.parse(target, vars, null);
            }

            if (this._transformType) {
                threeD = (this._transformType === 3);
                if (!_transformProp) {
                    style.zoom = 1; //helps correct an IE issue.
                } else if (_isSafari) {
                    _reqSafariFix = true;
                    //if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).
                    if (style.zIndex === "") {
                        zIndex = _getStyle(target, "zIndex", _cs);
                        if (zIndex === "auto" || zIndex === "") {
                            this._addLazySet(style, "zIndex", 0);
                        }
                    }
                    //Setting WebkitBackfaceVisibility corrects 3 bugs:
                    // 1) [non-Android] Safari skips rendering changes to "top" and "left" that are made on the same frame/render as a transform update.
                    // 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly.
                    // 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.
                    //Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.
                    if (_isSafariLT6) {
                        this._addLazySet(style, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (threeD ? "visible" : "hidden"));
                    }
                }
                pt2 = pt;
                while (pt2 && pt2._next) {
                    pt2 = pt2._next;
                }
                tpt = new CSSPropTween(target, "transform", 0, 0, null, 2);
                this._linkCSSP(tpt, null, pt2);
                tpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;
                tpt.data = this._transform || _getTransform(target, _cs, true);
                tpt.tween = tween;
                tpt.pr = -1; //ensures that the transforms get applied after the components are updated.
                _overwriteProps.pop(); //we don't want to force the overwrite of all "transform" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.
            }

            if (_hasPriority) {
                //reorders the linked list in order of pr (priority)
                while (pt) {
                    next = pt._next;
                    pt2 = first;
                    while (pt2 && pt2.pr > pt.pr) {
                        pt2 = pt2._next;
                    }
                    if ((pt._prev = pt2 ? pt2._prev : last)) {
                        pt._prev._next = pt;
                    } else {
                        first = pt;
                    }
                    if ((pt._next = pt2)) {
                        pt2._prev = pt;
                    } else {
                        last = pt;
                    }
                    pt = next;
                }
                this._firstPT = first;
            }
            return true;
        };


        p.parse = function(target, vars, pt, plugin) {
            var style = target.style,
                p, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;
            for (p in vars) {
                es = vars[p]; //ending value string
                if (typeof(es) === "function") {
                    es = es(_index, _target);
                }
                sp = _specialProps[p]; //SpecialProp lookup.
                if (sp) {
                    pt = sp.parse(target, es, p, this, pt, plugin, vars);
                } else if (p.substr(0, 2) === "--") { //for tweening CSS variables (which always start with "--"). To maximize performance and simplicity, we bypass CSSPlugin altogether and just add a normal property tween to the tween instance itself.
                    this._tween._propLookup[p] = this._addTween.call(this._tween, target.style, "setProperty", _getComputedStyle(target).getPropertyValue(p) + "", es + "", p, false, p);
                    continue;
                } else {
                    bs = _getStyle(target, p, _cs) + "";
                    isStr = (typeof(es) === "string");
                    if (p === "color" || p === "fill" || p === "stroke" || p.indexOf("Color") !== -1 || (isStr && _rgbhslExp.test(es))) { //Opera uses background: to define color sometimes in addition to backgroundColor:
                        if (!isStr) {
                            es = _parseColor(es);
                            es = ((es.length > 3) ? "rgba(" : "rgb(") + es.join(",") + ")";
                        }
                        pt = _parseComplex(style, p, bs, es, true, "transparent", pt, 0, plugin);

                    } else if (isStr && _complexExp.test(es)) {
                        pt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);

                    } else {
                        bn = parseFloat(bs);
                        bsfx = (bn || bn === 0) ? bs.substr((bn + "").length) : ""; //remember, bs could be non-numeric like "normal" for fontWeight, so we should default to a blank suffix in that case.

                        if (bs === "" || bs === "auto") {
                            if (p === "width" || p === "height") {
                                bn = _getDimension(target, p, _cs);
                                bsfx = "px";
                            } else if (p === "left" || p === "top") {
                                bn = _calculateOffset(target, p, _cs);
                                bsfx = "px";
                            } else {
                                bn = (p !== "opacity") ? 0 : 1;
                                bsfx = "";
                            }
                        }

                        rel = (isStr && es.charAt(1) === "=");
                        if (rel) {
                            en = parseInt(es.charAt(0) + "1", 10);
                            es = es.substr(2);
                            en *= parseFloat(es);
                            esfx = es.replace(_suffixExp, "");
                        } else {
                            en = parseFloat(es);
                            esfx = isStr ? es.replace(_suffixExp, "") : "";
                        }

                        if (esfx === "") {
                            esfx = (p in _suffixMap) ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.
                        }

                        es = (en || en === 0) ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.
                        //if the beginning/ending suffixes don't match, normalize them...
                        if (bsfx !== esfx)
                            if (esfx !== "" || p === "lineHeight")
                                if (en || en === 0)
                                    if (bn) { //note: if the beginning value (bn) is 0, we don't need to convert units!
                                        bn = _convertToPixels(target, p, bn, bsfx);
                                        if (esfx === "%") {
                                            bn /= _convertToPixels(target, p, 100, "%") / 100;
                                            if (vars.strictUnits !== true) { //some browsers report only "px" values instead of allowing "%" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.
                                                bs = bn + "%";
                                            }

                                        } else if (esfx === "em" || esfx === "rem" || esfx === "vw" || esfx === "vh") {
                                            bn /= _convertToPixels(target, p, 1, esfx);

                                            //otherwise convert to pixels.
                                        } else if (esfx !== "px") {
                                            en = _convertToPixels(target, p, en, esfx);
                                            esfx = "px"; //we don't use bsfx after this, so we don't need to set it to px too.
                                        }
                                        if (rel)
                                            if (en || en === 0) {
                                                es = (en + bn) + esfx; //the changes we made affect relative calculations, so adjust the end value here.
                                            }
                                    }

                        if (rel) {
                            en += bn;
                        }

                        if ((bn || bn === 0) && (en || en === 0)) { //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.
                            pt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, (_autoRound !== false && (esfx === "px" || p === "zIndex")), 0, bs, es);
                            pt.xs0 = esfx;
                            //DEBUG: _log("tween "+p+" from "+pt.b+" ("+bn+esfx+") to "+pt.e+" with suffix: "+pt.xs0);
                        } else if (style[p] === undefined || !es && (es + "" === "NaN" || es == null)) {
                            _log("invalid " + p + " tween value: " + vars[p]);
                        } else {
                            pt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);
                            pt.xs0 = (es === "none" && (p === "display" || p.indexOf("Style") !== -1)) ? bs : es; //intermediate value should typically be set immediately (end value) except for "display" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.
                            //DEBUG: _log("non-tweening value "+p+": "+pt.xs0);
                        }
                    }
                }
                if (plugin)
                    if (pt && !pt.plugin) {
                        pt.plugin = plugin;
                    }
            }
            return pt;
        };


        //gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.
        p.setRatio = function(v) {
            var pt = this._firstPT,
                min = 0.000001,
                val, str, i;
            //at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like "position" or "float" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).
            if (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {
                while (pt) {
                    if (pt.type !== 2) {
                        if (pt.r && pt.type !== -1) {
                            val = pt.r(pt.s + pt.c);
                            if (!pt.type) {
                                pt.t[pt.p] = val + pt.xs0;
                            } else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
                                i = pt.l;
                                str = pt.xs0 + val + pt.xs1;
                                for (i = 1; i < pt.l; i++) {
                                    str += pt["xn" + i] + pt["xs" + (i + 1)];
                                }
                                pt.t[pt.p] = str;
                            }
                        } else {
                            pt.t[pt.p] = pt.e;
                        }
                    } else {
                        pt.setRatio(v);
                    }
                    pt = pt._next;
                }

            } else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {
                while (pt) {
                    val = pt.c * v + pt.s;
                    if (pt.r) {
                        val = pt.r(val);
                    } else if (val < min)
                        if (val > -min) {
                            val = 0;
                        }
                    if (!pt.type) {
                        pt.t[pt.p] = val + pt.xs0;
                    } else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
                        i = pt.l;
                        if (i === 2) {
                            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;
                        } else if (i === 3) {
                            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;
                        } else if (i === 4) {
                            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;
                        } else if (i === 5) {
                            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;
                        } else {
                            str = pt.xs0 + val + pt.xs1;
                            for (i = 1; i < pt.l; i++) {
                                str += pt["xn" + i] + pt["xs" + (i + 1)];
                            }
                            pt.t[pt.p] = str;
                        }

                    } else if (pt.type === -1) { //non-tweening value
                        pt.t[pt.p] = pt.xs0;

                    } else if (pt.setRatio) { //custom setRatio() for things like SpecialProps, external plugins, etc.
                        pt.setRatio(v);
                    }
                    pt = pt._next;
                }

                //if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).
            } else {
                while (pt) {
                    if (pt.type !== 2) {
                        pt.t[pt.p] = pt.b;
                    } else {
                        pt.setRatio(v);
                    }
                    pt = pt._next;
                }
            }
        };

        /**
         * @private
         * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.
         * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked
         * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call
         * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin
         * doesn't have any transform-related properties of its own. You can call this method as many times as you
         * want and it won't create duplicate CSSPropTweens.
         *
         * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)
         */
        p._enableTransforms = function(threeD) {
            this._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.
            this._transformType = (!(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3)) ? 3 : 2;
        };

        var lazySet = function(v) {
            this.t[this.p] = this.e;
            this.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.
        };
        /** @private Gives us a way to set a value on the first render (and only the first render). **/
        p._addLazySet = function(t, p, v) {
            var pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);
            pt.e = v;
            pt.setRatio = lazySet;
            pt.data = this;
        };

        /** @private **/
        p._linkCSSP = function(pt, next, prev, remove) {
            if (pt) {
                if (next) {
                    next._prev = pt;
                }
                if (pt._next) {
                    pt._next._prev = pt._prev;
                }
                if (pt._prev) {
                    pt._prev._next = pt._next;
                } else if (this._firstPT === pt) {
                    this._firstPT = pt._next;
                    remove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)
                }
                if (prev) {
                    prev._next = pt;
                } else if (!remove && this._firstPT === null) {
                    this._firstPT = pt;
                }
                pt._next = next;
                pt._prev = prev;
            }
            return pt;
        };

        p._mod = function(lookup) {
            var pt = this._firstPT;
            while (pt) {
                if (typeof(lookup[pt.p]) === "function") { //only gets called by RoundPropsPlugin (ModifyPlugin manages all the rendering internally for CSSPlugin properties that need modification). Remember, we handle rounding a bit differently in this plugin for performance reasons, leveraging "r" as an indicator that the value should be rounded internally.
                    pt.r = lookup[pt.p];
                }
                pt = pt._next;
            }
        };

        //we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the "visibility" property.
        p._kill = function(lookup) {
            var copy = lookup,
                pt, p, xfirst;
            if (lookup.autoAlpha || lookup.alpha) {
                copy = {};
                for (p in lookup) { //copy the lookup so that we're not changing the original which may be passed elsewhere.
                    copy[p] = lookup[p];
                }
                copy.opacity = 1;
                if (copy.autoAlpha) {
                    copy.visibility = 1;
                }
            }
            if (lookup.className && (pt = this._classNamePT)) { //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's "xfirst".
                xfirst = pt.xfirst;
                if (xfirst && xfirst._prev) {
                    this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev
                } else if (xfirst === this._firstPT) {
                    this._firstPT = pt._next;
                }
                if (pt._next) {
                    this._linkCSSP(pt._next, pt._next._next, xfirst._prev);
                }
                this._classNamePT = null;
            }
            pt = this._firstPT;
            while (pt) {
                if (pt.plugin && pt.plugin !== p && pt.plugin._kill) { //for plugins that are registered with CSSPlugin, we should notify them of the kill.
                    pt.plugin._kill(lookup);
                    p = pt.plugin;
                }
                pt = pt._next;
            }
            return TweenPlugin.prototype._kill.call(this, copy);
        };



        //used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.
        var _getChildStyles = function(e, props, targets) {
            var children, i, child, type;
            if (e.slice) {
                i = e.length;
                while (--i > -1) {
                    _getChildStyles(e[i], props, targets);
                }
                return;
            }
            children = e.childNodes;
            i = children.length;
            while (--i > -1) {
                child = children[i];
                type = child.type;
                if (child.style) {
                    props.push(_getAllStyles(child));
                    if (targets) {
                        targets.push(child);
                    }
                }
                if ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {
                    _getChildStyles(child, props, targets);
                }
            }
        };

        /**
         * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite
         * and then compares the style properties of all the target's child elements at the tween's start and end, and
         * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting
         * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is
         * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens
         * is because it creates entirely new tweens that may have completely different targets than the original tween,
         * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API
         * and it would create other problems. For example:
         *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)
         *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.
         *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.
         *
         * @param {Object} target object to be tweened
         * @param {number} Duration in seconds (or frames for frames-based tweens)
         * @param {Object} Object containing the end values, like {className:"newClass", ease:Linear.easeNone}
         * @return {Array} An array of TweenLite instances
         */
        CSSPlugin.cascadeTo = function(target, duration, vars) {
            var tween = TweenLite.to(target, duration, vars),
                results = [tween],
                b = [],
                e = [],
                targets = [],
                _reservedProps = TweenLite._internals.reservedProps,
                i, difs, p, from;
            target = tween._targets || tween.target;
            _getChildStyles(target, b, targets);
            tween.render(duration, true, true);
            _getChildStyles(target, e);
            tween.render(0, true, true);
            tween._enabled(true);
            i = targets.length;
            while (--i > -1) {
                difs = _cssDif(targets[i], b[i], e[i]);
                if (difs.firstMPT) {
                    difs = difs.difs;
                    for (p in vars) {
                        if (_reservedProps[p]) {
                            difs[p] = vars[p];
                        }
                    }
                    from = {};
                    for (p in difs) {
                        from[p] = b[i][p];
                    }
                    results.push(TweenLite.fromTo(targets[i], duration, from, difs));
                }
            }
            return results;
        };

        TweenPlugin.activate([CSSPlugin]);
        return CSSPlugin;

    }, true);











    /*
     * ----------------------------------------------------------------
     * RoundPropsPlugin
     * ----------------------------------------------------------------
     */
    (function() {

        var RoundPropsPlugin = _gsScope._gsDefine.plugin({
                propName: "roundProps",
                version: "1.7.0",
                priority: -1,
                API: 2,

                //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                init: function(target, value, tween) {
                    this._tween = tween;
                    return true;
                }

            }),
            _getRoundFunc = function(v) { //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
                var p = v < 1 ? Math.pow(10, (v + "").length - 2) : 1; //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed()
                return function(n) {
                    return ((Math.round(n / v) * v * p) | 0) / p;
                };
            },
            _roundLinkedList = function(node, mod) {
                while (node) {
                    if (!node.f && !node.blob) {
                        node.m = mod || Math.round;
                    }
                    node = node._next;
                }
            },
            p = RoundPropsPlugin.prototype;

        p._onInitAllProps = function() {
            var tween = this._tween,
                rp = tween.vars.roundProps,
                lookup = {},
                rpt = tween._propLookup.roundProps,
                pt, next, i, p;
            if (typeof(rp) === "object" && !rp.push) {
                for (p in rp) {
                    lookup[p] = _getRoundFunc(rp[p]);
                }
            } else {
                if (typeof(rp) === "string") {
                    rp = rp.split(",");
                }
                i = rp.length;
                while (--i > -1) {
                    lookup[rp[i]] = Math.round;
                }
            }

            for (p in lookup) {
                pt = tween._firstPT;
                while (pt) {
                    next = pt._next; //record here, because it may get removed
                    if (pt.pg) {
                        pt.t._mod(lookup);
                    } else if (pt.n === p) {
                        if (pt.f === 2 && pt.t) { //a blob (text containing multiple numeric values)
                            _roundLinkedList(pt.t._firstPT, lookup[p]);
                        } else {
                            this._add(pt.t, p, pt.s, pt.c, lookup[p]);
                            //remove from linked list
                            if (next) {
                                next._prev = pt._prev;
                            }
                            if (pt._prev) {
                                pt._prev._next = next;
                            } else if (tween._firstPT === pt) {
                                tween._firstPT = next;
                            }
                            pt._next = pt._prev = null;
                            tween._propLookup[p] = rpt;
                        }
                    }
                    pt = next;
                }
            }
            return false;
        };

        p._add = function(target, p, s, c, mod) {
            this._addTween(target, p, s, s + c, p, mod || Math.round);
            this._overwriteProps.push(p);
        };

    }());










    /*
     * ----------------------------------------------------------------
     * AttrPlugin
     * ----------------------------------------------------------------
     */

    (function() {

        _gsScope._gsDefine.plugin({
            propName: "attr",
            API: 2,
            version: "0.6.1",

            //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
            init: function(target, value, tween, index) {
                var p, end;
                if (typeof(target.setAttribute) !== "function") {
                    return false;
                }
                for (p in value) {
                    end = value[p];
                    if (typeof(end) === "function") {
                        end = end(index, target);
                    }
                    this._addTween(target, "setAttribute", target.getAttribute(p) + "", end + "", p, false, p);
                    this._overwriteProps.push(p);
                }
                return true;
            }

        });

    }());










    /*
     * ----------------------------------------------------------------
     * DirectionalRotationPlugin
     * ----------------------------------------------------------------
     */
    _gsScope._gsDefine.plugin({
        propName: "directionalRotation",
        version: "0.3.1",
        API: 2,

        //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
        init: function(target, value, tween, index) {
            if (typeof(value) !== "object") {
                value = {
                    rotation: value
                };
            }
            this.finals = {};
            var cap = (value.useRadians === true) ? Math.PI * 2 : 360,
                min = 0.000001,
                p, v, start, end, dif, split;
            for (p in value) {
                if (p !== "useRadians") {
                    end = value[p];
                    if (typeof(end) === "function") {
                        end = end(index, target);
                    }
                    split = (end + "").split("_");
                    v = split[0];
                    start = parseFloat((typeof(target[p]) !== "function") ? target[p] : target[((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3))]());
                    end = this.finals[p] = (typeof(v) === "string" && v.charAt(1) === "=") ? start + parseInt(v.charAt(0) + "1", 10) * Number(v.substr(2)) : Number(v) || 0;
                    dif = end - start;
                    if (split.length) {
                        v = split.join("_");
                        if (v.indexOf("short") !== -1) {
                            dif = dif % cap;
                            if (dif !== dif % (cap / 2)) {
                                dif = (dif < 0) ? dif + cap : dif - cap;
                            }
                        }
                        if (v.indexOf("_cw") !== -1 && dif < 0) {
                            dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                        } else if (v.indexOf("ccw") !== -1 && dif > 0) {
                            dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                        }
                    }
                    if (dif > min || dif < -min) {
                        this._addTween(target, p, start, start + dif, p);
                        this._overwriteProps.push(p);
                    }
                }
            }
            return true;
        },

        //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
        set: function(ratio) {
            var pt;
            if (ratio !== 1) {
                this._super.setRatio.call(this, ratio);
            } else {
                pt = this._firstPT;
                while (pt) {
                    if (pt.f) {
                        pt.t[pt.p](this.finals[pt.p]);
                    } else {
                        pt.t[pt.p] = this.finals[pt.p];
                    }
                    pt = pt._next;
                }
            }
        }

    })._autoCSS = true;











    /*
     * ----------------------------------------------------------------
     * EasePack
     * ----------------------------------------------------------------
     */
    _gsScope._gsDefine("easing.Back", ["easing.Ease"], function(Ease) {

        var w = (_gsScope.GreenSockGlobals || _gsScope),
            gs = w.com.greensock,
            _2PI = Math.PI * 2,
            _HALF_PI = Math.PI / 2,
            _class = gs._class,
            _create = function(n, f) {
                var C = _class("easing." + n, function() {}, true),
                    p = C.prototype = new Ease();
                p.constructor = C;
                p.getRatio = f;
                return C;
            },
            _easeReg = Ease.register || function() {}, //put an empty function in place just as a safety measure in case someone loads an OLD version of TweenLite.js where Ease.register doesn't exist.
            _wrap = function(name, EaseOut, EaseIn, EaseInOut, aliases) {
                var C = _class("easing." + name, {
                    easeOut: new EaseOut(),
                    easeIn: new EaseIn(),
                    easeInOut: new EaseInOut()
                }, true);
                _easeReg(C, name);
                return C;
            },
            EasePoint = function(time, value, next) {
                this.t = time;
                this.v = value;
                if (next) {
                    this.next = next;
                    next.prev = this;
                    this.c = next.v - value;
                    this.gap = next.t - time;
                }
            },

            //Back
            _createBack = function(n, f) {
                var C = _class("easing." + n, function(overshoot) {
                        this._p1 = (overshoot || overshoot === 0) ? overshoot : 1.70158;
                        this._p2 = this._p1 * 1.525;
                    }, true),
                    p = C.prototype = new Ease();
                p.constructor = C;
                p.getRatio = f;
                p.config = function(overshoot) {
                    return new C(overshoot);
                };
                return C;
            },

            Back = _wrap("Back",
                _createBack("BackOut", function(p) {
                    return ((p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1);
                }),
                _createBack("BackIn", function(p) {
                    return p * p * ((this._p1 + 1) * p - this._p1);
                }),
                _createBack("BackInOut", function(p) {
                    return ((p *= 2) < 1) ? 0.5 * p * p * ((this._p2 + 1) * p - this._p2) : 0.5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);
                })
            ),


            //SlowMo
            SlowMo = _class("easing.SlowMo", function(linearRatio, power, yoyoMode) {
                power = (power || power === 0) ? power : 0.7;
                if (linearRatio == null) {
                    linearRatio = 0.7;
                } else if (linearRatio > 1) {
                    linearRatio = 1;
                }
                this._p = (linearRatio !== 1) ? power : 0;
                this._p1 = (1 - linearRatio) / 2;
                this._p2 = linearRatio;
                this._p3 = this._p1 + this._p2;
                this._calcEnd = (yoyoMode === true);
            }, true),
            p = SlowMo.prototype = new Ease(),
            SteppedEase, ExpoScaleEase, RoughEase, _createElastic;

        p.constructor = SlowMo;
        p.getRatio = function(p) {
            var r = p + (0.5 - p) * this._p;
            if (p < this._p1) {
                return this._calcEnd ? 1 - ((p = 1 - (p / this._p1)) * p) : r - ((p = 1 - (p / this._p1)) * p * p * p * r);
            } else if (p > this._p3) {
                return this._calcEnd ? (p === 1 ? 0 : 1 - (p = (p - this._p3) / this._p1) * p) : r + ((p - r) * (p = (p - this._p3) / this._p1) * p * p * p); //added p === 1 ? 0 to avoid floating point rounding errors from affecting the final value, like 1 - 0.7 = 0.30000000000000004 instead of 0.3
            }
            return this._calcEnd ? 1 : r;
        };
        SlowMo.ease = new SlowMo(0.7, 0.7);

        p.config = SlowMo.config = function(linearRatio, power, yoyoMode) {
            return new SlowMo(linearRatio, power, yoyoMode);
        };


        //SteppedEase
        SteppedEase = _class("easing.SteppedEase", function(steps, immediateStart) {
            steps = steps || 1;
            this._p1 = 1 / steps;
            this._p2 = steps + (immediateStart ? 0 : 1);
            this._p3 = immediateStart ? 1 : 0;
        }, true);
        p = SteppedEase.prototype = new Ease();
        p.constructor = SteppedEase;
        p.getRatio = function(p) {
            if (p < 0) {
                p = 0;
            } else if (p >= 1) {
                p = 0.999999999;
            }
            return (((this._p2 * p) | 0) + this._p3) * this._p1;
        };
        p.config = SteppedEase.config = function(steps, immediateStart) {
            return new SteppedEase(steps, immediateStart);
        };

        //ExpoScaleEase
        ExpoScaleEase = _class("easing.ExpoScaleEase", function(start, end, ease) {
            this._p1 = Math.log(end / start);
            this._p2 = end - start;
            this._p3 = start;
            this._ease = ease;
        }, true);
        p = ExpoScaleEase.prototype = new Ease();
        p.constructor = ExpoScaleEase;
        p.getRatio = function(p) {
            if (this._ease) {
                p = this._ease.getRatio(p);
            }
            return (this._p3 * Math.exp(this._p1 * p) - this._p3) / this._p2;
        };
        p.config = ExpoScaleEase.config = function(start, end, ease) {
            return new ExpoScaleEase(start, end, ease);
        };


        //RoughEase
        RoughEase = _class("easing.RoughEase", function(vars) {
            vars = vars || {};
            var taper = vars.taper || "none",
                a = [],
                cnt = 0,
                points = (vars.points || 20) | 0,
                i = points,
                randomize = (vars.randomize !== false),
                clamp = (vars.clamp === true),
                template = (vars.template instanceof Ease) ? vars.template : null,
                strength = (typeof(vars.strength) === "number") ? vars.strength * 0.4 : 0.4,
                x, y, bump, invX, obj, pnt;
            while (--i > -1) {
                x = randomize ? Math.random() : (1 / points) * i;
                y = template ? template.getRatio(x) : x;
                if (taper === "none") {
                    bump = strength;
                } else if (taper === "out") {
                    invX = 1 - x;
                    bump = invX * invX * strength;
                } else if (taper === "in") {
                    bump = x * x * strength;
                } else if (x < 0.5) { //"both" (start)
                    invX = x * 2;
                    bump = invX * invX * 0.5 * strength;
                } else { //"both" (end)
                    invX = (1 - x) * 2;
                    bump = invX * invX * 0.5 * strength;
                }
                if (randomize) {
                    y += (Math.random() * bump) - (bump * 0.5);
                } else if (i % 2) {
                    y += bump * 0.5;
                } else {
                    y -= bump * 0.5;
                }
                if (clamp) {
                    if (y > 1) {
                        y = 1;
                    } else if (y < 0) {
                        y = 0;
                    }
                }
                a[cnt++] = {
                    x: x,
                    y: y
                };
            }
            a.sort(function(a, b) {
                return a.x - b.x;
            });

            pnt = new EasePoint(1, 1, null);
            i = points;
            while (--i > -1) {
                obj = a[i];
                pnt = new EasePoint(obj.x, obj.y, pnt);
            }

            this._prev = new EasePoint(0, 0, (pnt.t !== 0) ? pnt : pnt.next);
        }, true);
        p = RoughEase.prototype = new Ease();
        p.constructor = RoughEase;
        p.getRatio = function(p) {
            var pnt = this._prev;
            if (p > pnt.t) {
                while (pnt.next && p >= pnt.t) {
                    pnt = pnt.next;
                }
                pnt = pnt.prev;
            } else {
                while (pnt.prev && p <= pnt.t) {
                    pnt = pnt.prev;
                }
            }
            this._prev = pnt;
            return (pnt.v + ((p - pnt.t) / pnt.gap) * pnt.c);
        };
        p.config = function(vars) {
            return new RoughEase(vars);
        };
        RoughEase.ease = new RoughEase();


        //Bounce
        _wrap("Bounce",
            _create("BounceOut", function(p) {
                if (p < 1 / 2.75) {
                    return 7.5625 * p * p;
                } else if (p < 2 / 2.75) {
                    return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
                } else if (p < 2.5 / 2.75) {
                    return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
                }
                return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
            }),
            _create("BounceIn", function(p) {
                if ((p = 1 - p) < 1 / 2.75) {
                    return 1 - (7.5625 * p * p);
                } else if (p < 2 / 2.75) {
                    return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);
                } else if (p < 2.5 / 2.75) {
                    return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);
                }
                return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);
            }),
            _create("BounceInOut", function(p) {
                var invert = (p < 0.5);
                if (invert) {
                    p = 1 - (p * 2);
                } else {
                    p = (p * 2) - 1;
                }
                if (p < 1 / 2.75) {
                    p = 7.5625 * p * p;
                } else if (p < 2 / 2.75) {
                    p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
                } else if (p < 2.5 / 2.75) {
                    p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
                } else {
                    p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
                }
                return invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;
            })
        );


        //CIRC
        _wrap("Circ",
            _create("CircOut", function(p) {
                return Math.sqrt(1 - (p = p - 1) * p);
            }),
            _create("CircIn", function(p) {
                return -(Math.sqrt(1 - (p * p)) - 1);
            }),
            _create("CircInOut", function(p) {
                return ((p *= 2) < 1) ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);
            })
        );


        //Elastic
        _createElastic = function(n, f, def) {
            var C = _class("easing." + n, function(amplitude, period) {
                    this._p1 = (amplitude >= 1) ? amplitude : 1; //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
                    this._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);
                    this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);
                    this._p2 = _2PI / this._p2; //precalculate to optimize
                }, true),
                p = C.prototype = new Ease();
            p.constructor = C;
            p.getRatio = f;
            p.config = function(amplitude, period) {
                return new C(amplitude, period);
            };
            return C;
        };
        _wrap("Elastic",
            _createElastic("ElasticOut", function(p) {
                return this._p1 * Math.pow(2, -10 * p) * Math.sin((p - this._p3) * this._p2) + 1;
            }, 0.3),
            _createElastic("ElasticIn", function(p) {
                return -(this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2));
            }, 0.3),
            _createElastic("ElasticInOut", function(p) {
                return ((p *= 2) < 1) ? -0.5 * (this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2)) : this._p1 * Math.pow(2, -10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2) * 0.5 + 1;
            }, 0.45)
        );


        //Expo
        _wrap("Expo",
            _create("ExpoOut", function(p) {
                return 1 - Math.pow(2, -10 * p);
            }),
            _create("ExpoIn", function(p) {
                return Math.pow(2, 10 * (p - 1)) - 0.001;
            }),
            _create("ExpoInOut", function(p) {
                return ((p *= 2) < 1) ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
            })
        );


        //Sine
        _wrap("Sine",
            _create("SineOut", function(p) {
                return Math.sin(p * _HALF_PI);
            }),
            _create("SineIn", function(p) {
                return -Math.cos(p * _HALF_PI) + 1;
            }),
            _create("SineInOut", function(p) {
                return -0.5 * (Math.cos(Math.PI * p) - 1);
            })
        );

        _class("easing.EaseLookup", {
            find: function(s) {
                return Ease.map[s];
            }
        }, true);

        //register the non-standard eases
        _easeReg(w.SlowMo, "SlowMo", "ease,");
        _easeReg(RoughEase, "RoughEase", "ease,");
        _easeReg(SteppedEase, "SteppedEase", "ease,");

        return Back;

    }, true);


});

if (_gsScope._gsDefine) {
    _gsScope._gsQueue.pop()();
} //necessary in case TweenLite was already loaded separately.











/*
 * ----------------------------------------------------------------
 * Base classes like TweenLite, SimpleTimeline, Ease, Ticker, etc.
 * ----------------------------------------------------------------
 */
(function(window, moduleName) {

    "use strict";
    var _exports = {},
        _doc = window.document,
        _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
    if (_globals.TweenLite) {
        return _globals.TweenLite; //in case the core set of classes is already loaded, don't instantiate twice.
    }
    var _namespace = function(ns) {
            var a = ns.split("."),
                p = _globals,
                i;
            for (i = 0; i < a.length; i++) {
                p[a[i]] = p = p[a[i]] || {};
            }
            return p;
        },
        gs = _namespace("com.greensock"),
        _tinyNum = 0.0000000001,
        _slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
            var b = [],
                l = a.length,
                i;
            for (i = 0; i !== l; b.push(a[i++])) {}
            return b;
        },
        _emptyFunc = function() {},
        _isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, "(obj instanceof Array)" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)
            var toString = Object.prototype.toString,
                array = toString.call([]);
            return function(obj) {
                return obj != null && (obj instanceof Array || (typeof(obj) === "object" && !!obj.push && toString.call(obj) === array));
            };
        }()),
        a, i, p, _ticker, _tickerActive,
        _defLookup = {},

        /**
         * @constructor
         * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.
         * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is
         * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin
         * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.
         *
         * Every definition will be added to a "com.greensock" global object (typically window, but if a window.GreenSockGlobals object is found,
         * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,
         * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so
         * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything
         * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock
         * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could
         * sandbox the banner one like:
         *
         * <script>
         *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a "gs" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, "gs" or "banner" or whatever.
         * </script>
         * <script src="js/greensock/v1.7/TweenMax.js"></script>
         * <script>
         *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)
         * </script>
         * <script src="js/greensock/v1.6/TweenMax.js"></script>
         * <script>
         *     gs.TweenLite.to(...); //would use v1.7
         *     TweenLite.to(...); //would use v1.6
         * </script>
         *
         * @param {!string} ns The namespace of the class definition, leaving off "com.greensock." as that's assumed. For example, "TweenLite" or "plugins.CSSPlugin" or "easing.Back".
         * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus "com.greensock." prefix). For example ["TweenLite","plugins.TweenPlugin","core.Animation"]
         * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.
         * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)
         */
        Definition = function(ns, dependencies, func, global) {
            this.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses
            _defLookup[ns] = this;
            this.gsClass = null;
            this.func = func;
            var _classes = [];
            this.check = function(init) {
                var i = dependencies.length,
                    missing = i,
                    cur, a, n, cl;
                while (--i > -1) {
                    if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
                        _classes[i] = cur.gsClass;
                        missing--;
                    } else if (init) {
                        cur.sc.push(this);
                    }
                }
                if (missing === 0 && func) {
                    a = ("com.greensock." + ns).split(".");
                    n = a.pop();
                    cl = _namespace(a.join("."))[n] = this.gsClass = func.apply(func, _classes);

                    //exports to multiple environments
                    if (global) {
                        _globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)
                        if (typeof(module) !== "undefined" && module.exports) { //node
                            if (ns === moduleName) {
                                module.exports = _exports[moduleName] = cl;
                                for (i in _exports) {
                                    cl[i] = _exports[i];
                                }
                            } else if (_exports[moduleName]) {
                                _exports[moduleName][n] = cl;
                            }
                        } else if (typeof(define) === "function" && define.amd) { //AMD
                            define((window.GreenSockAMDPath ? window.GreenSockAMDPath + "/" : "") + ns.split(".").pop(), [], function() {
                                return cl;
                            });
                        }
                    }
                    for (i = 0; i < this.sc.length; i++) {
                        this.sc[i].check();
                    }
                }
            };
            this.check(true);
        },

        //used to create Definition instances (which basically registers a class that has dependencies).
        _gsDefine = window._gsDefine = function(ns, dependencies, func, global) {
            return new Definition(ns, dependencies, func, global);
        },

        //a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).
        _class = gs._class = function(ns, func, global) {
            func = func || function() {};
            _gsDefine(ns, [], function() {
                return func;
            }, global);
            return func;
        };

    _gsDefine.globals = _globals;



    /*
     * ----------------------------------------------------------------
     * Ease
     * ----------------------------------------------------------------
     */
    var _baseParams = [0, 0, 1, 1],
        Ease = _class("easing.Ease", function(func, extraParams, type, power) {
            this._func = func;
            this._type = type || 0;
            this._power = power || 0;
            this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
        }, true),
        _easeMap = Ease.map = {},
        _easeReg = Ease.register = function(ease, names, types, create) {
            var na = names.split(","),
                i = na.length,
                ta = (types || "easeIn,easeOut,easeInOut").split(","),
                e, name, j, type;
            while (--i > -1) {
                name = na[i];
                e = create ? _class("easing." + name, null, true) : gs.easing[name] || {};
                j = ta.length;
                while (--j > -1) {
                    type = ta[j];
                    _easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();
                }
            }
        };

    p = Ease.prototype;
    p._calcEnd = false;
    p.getRatio = function(p) {
        if (this._func) {
            this._params[0] = p;
            return this._func.apply(null, this._params);
        }
        var t = this._type,
            pw = this._power,
            r = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;
        if (pw === 1) {
            r *= r;
        } else if (pw === 2) {
            r *= r * r;
        } else if (pw === 3) {
            r *= r * r * r;
        } else if (pw === 4) {
            r *= r * r * r * r;
        }
        return (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);
    };

    //create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)
    a = ["Linear", "Quad", "Cubic", "Quart", "Quint,Strong"];
    i = a.length;
    while (--i > -1) {
        p = a[i] + ",Power" + i;
        _easeReg(new Ease(null, null, 1, i), p, "easeOut", true);
        _easeReg(new Ease(null, null, 2, i), p, "easeIn" + ((i === 0) ? ",easeNone" : ""));
        _easeReg(new Ease(null, null, 3, i), p, "easeInOut");
    }
    _easeMap.linear = gs.easing.Linear.easeIn;
    _easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks


    /*
     * ----------------------------------------------------------------
     * EventDispatcher
     * ----------------------------------------------------------------
     */
    var EventDispatcher = _class("events.EventDispatcher", function(target) {
        this._listeners = {};
        this._eventTarget = target || this;
    });
    p = EventDispatcher.prototype;

    p.addEventListener = function(type, callback, scope, useParam, priority) {
        priority = priority || 0;
        var list = this._listeners[type],
            index = 0,
            listener, i;
        if (this === _ticker && !_tickerActive) {
            _ticker.wake();
        }
        if (list == null) {
            this._listeners[type] = list = [];
        }
        i = list.length;
        while (--i > -1) {
            listener = list[i];
            if (listener.c === callback && listener.s === scope) {
                list.splice(i, 1);
            } else if (index === 0 && listener.pr < priority) {
                index = i + 1;
            }
        }
        list.splice(index, 0, {
            c: callback,
            s: scope,
            up: useParam,
            pr: priority
        });
    };

    p.removeEventListener = function(type, callback) {
        var list = this._listeners[type],
            i;
        if (list) {
            i = list.length;
            while (--i > -1) {
                if (list[i].c === callback) {
                    list.splice(i, 1);
                    return;
                }
            }
        }
    };

    p.dispatchEvent = function(type) {
        var list = this._listeners[type],
            i, t, listener;
        if (list) {
            i = list.length;
            if (i > 1) {
                list = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)
            }
            t = this._eventTarget;
            while (--i > -1) {
                listener = list[i];
                if (listener) {
                    if (listener.up) {
                        listener.c.call(listener.s || t, {
                            type: type,
                            target: t
                        });
                    } else {
                        listener.c.call(listener.s || t);
                    }
                }
            }
        }
    };


    /*
     * ----------------------------------------------------------------
     * Ticker
     * ----------------------------------------------------------------
     */
    var _reqAnimFrame = window.requestAnimationFrame,
        _cancelAnimFrame = window.cancelAnimationFrame,
        _getTime = Date.now || function() {
            return new Date().getTime();
        },
        _lastUpdate = _getTime();

    //now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.
    a = ["ms", "moz", "webkit", "o"];
    i = a.length;
    while (--i > -1 && !_reqAnimFrame) {
        _reqAnimFrame = window[a[i] + "RequestAnimationFrame"];
        _cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
    }

    _class("Ticker", function(fps, useRAF) {
        var _self = this,
            _startTime = _getTime(),
            _useRAF = (useRAF !== false && _reqAnimFrame) ? "auto" : false,
            _lagThreshold = 500,
            _adjustedLag = 33,
            _tickWord = "tick", //helps reduce gc burden
            _fps, _req, _id, _gap, _nextTime,
            _tick = function(manual) {
                var elapsed = _getTime() - _lastUpdate,
                    overlap, dispatch;
                if (elapsed > _lagThreshold) {
                    _startTime += elapsed - _adjustedLag;
                }
                _lastUpdate += elapsed;
                _self.time = (_lastUpdate - _startTime) / 1000;
                overlap = _self.time - _nextTime;
                if (!_fps || overlap > 0 || manual === true) {
                    _self.frame++;
                    _nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);
                    dispatch = true;
                }
                if (manual !== true) { //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
                    _id = _req(_tick);
                }
                if (dispatch) {
                    _self.dispatchEvent(_tickWord);
                }
            };

        EventDispatcher.call(_self);
        _self.time = _self.frame = 0;
        _self.tick = function() {
            _tick(true);
        };

        _self.lagSmoothing = function(threshold, adjustedLag) {
            if (!arguments.length) { //if lagSmoothing() is called with no arguments, treat it like a getter that returns a boolean indicating if it's enabled or not. This is purposely undocumented and is for internal use.
                return (_lagThreshold < 1 / _tinyNum);
            }
            _lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited
            _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
        };

        _self.sleep = function() {
            if (_id == null) {
                return;
            }
            if (!_useRAF || !_cancelAnimFrame) {
                clearTimeout(_id);
            } else {
                _cancelAnimFrame(_id);
            }
            _req = _emptyFunc;
            _id = null;
            if (_self === _ticker) {
                _tickerActive = false;
            }
        };

        _self.wake = function(seamless) {
            if (_id !== null) {
                _self.sleep();
            } else if (seamless) {
                _startTime += -_lastUpdate + (_lastUpdate = _getTime());
            } else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().
                _lastUpdate = _getTime() - _lagThreshold + 5;
            }
            _req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) {
                return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0);
            } : _reqAnimFrame;
            if (_self === _ticker) {
                _tickerActive = true;
            }
            _tick(2);
        };

        _self.fps = function(value) {
            if (!arguments.length) {
                return _fps;
            }
            _fps = value;
            _gap = 1 / (_fps || 60);
            _nextTime = this.time + _gap;
            _self.wake();
        };

        _self.useRAF = function(value) {
            if (!arguments.length) {
                return _useRAF;
            }
            _self.sleep();
            _useRAF = value;
            _self.fps(_fps);
        };
        _self.fps(fps);

        //a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.
        setTimeout(function() {
            if (_useRAF === "auto" && _self.frame < 5 && (_doc || {}).visibilityState !== "hidden") {
                _self.useRAF(false);
            }
        }, 1500);
    });

    p = gs.Ticker.prototype = new gs.events.EventDispatcher();
    p.constructor = gs.Ticker;


    /*
     * ----------------------------------------------------------------
     * Animation
     * ----------------------------------------------------------------
     */
    var Animation = _class("core.Animation", function(duration, vars) {
        this.vars = vars = vars || {};
        this._duration = this._totalDuration = duration || 0;
        this._delay = Number(vars.delay) || 0;
        this._timeScale = 1;
        this._active = (vars.immediateRender === true);
        this.data = vars.data;
        this._reversed = (vars.reversed === true);

        if (!_rootTimeline) {
            return;
        }
        if (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.
            _ticker.wake();
        }

        var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
        tl.add(this, tl._time);

        if (this.vars.paused) {
            this.paused(true);
        }
    });

    _ticker = Animation.ticker = new gs.Ticker();
    p = Animation.prototype;
    p._dirty = p._gc = p._initted = p._paused = false;
    p._totalTime = p._time = 0;
    p._rawPrevTime = -1;
    p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
    p._paused = false;


    //some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.
    var _checkTimeout = function() {
        if (_tickerActive && _getTime() - _lastUpdate > 2000 && ((_doc || {}).visibilityState !== "hidden" || !_ticker.lagSmoothing())) { //note: if the tab is hidden, we should still wake if lagSmoothing has been disabled.
            _ticker.wake();
        }
        var t = setTimeout(_checkTimeout, 2000);
        if (t.unref) {
            // allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.
            t.unref();
        }
    };
    _checkTimeout();


    p.play = function(from, suppressEvents) {
        if (from != null) {
            this.seek(from, suppressEvents);
        }
        return this.reversed(false).paused(false);
    };

    p.pause = function(atTime, suppressEvents) {
        if (atTime != null) {
            this.seek(atTime, suppressEvents);
        }
        return this.paused(true);
    };

    p.resume = function(from, suppressEvents) {
        if (from != null) {
            this.seek(from, suppressEvents);
        }
        return this.paused(false);
    };

    p.seek = function(time, suppressEvents) {
        return this.totalTime(Number(time), suppressEvents !== false);
    };

    p.restart = function(includeDelay, suppressEvents) {
        return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);
    };

    p.reverse = function(from, suppressEvents) {
        if (from != null) {
            this.seek((from || this.totalDuration()), suppressEvents);
        }
        return this.reversed(true).paused(false);
    };

    p.render = function(time, suppressEvents, force) {
        //stub - we override this method in subclasses.
    };

    p.invalidate = function() {
        this._time = this._totalTime = 0;
        this._initted = this._gc = false;
        this._rawPrevTime = -1;
        if (this._gc || !this.timeline) {
            this._enabled(true);
        }
        return this;
    };

    p.isActive = function() {
        var tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.
            startTime = this._startTime,
            rawTime;
        return (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 0.0000001));
    };

    p._enabled = function(enabled, ignoreTimeline) {
        if (!_tickerActive) {
            _ticker.wake();
        }
        this._gc = !enabled;
        this._active = this.isActive();
        if (ignoreTimeline !== true) {
            if (enabled && !this.timeline) {
                this._timeline.add(this, this._startTime - this._delay);
            } else if (!enabled && this.timeline) {
                this._timeline._remove(this, true);
            }
        }
        return false;
    };


    p._kill = function(vars, target) {
        return this._enabled(false, false);
    };

    p.kill = function(vars, target) {
        this._kill(vars, target);
        return this;
    };

    p._uncache = function(includeSelf) {
        var tween = includeSelf ? this : this.timeline;
        while (tween) {
            tween._dirty = true;
            tween = tween.timeline;
        }
        return this;
    };

    p._swapSelfInParams = function(params) {
        var i = params.length,
            copy = params.concat();
        while (--i > -1) {
            if (params[i] === "{self}") {
                copy[i] = this;
            }
        }
        return copy;
    };

    p._callback = function(type) {
        var v = this.vars,
            callback = v[type],
            params = v[type + "Params"],
            scope = v[type + "Scope"] || v.callbackScope || this,
            l = params ? params.length : 0;
        switch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + "Scope"] || v.callbackScope || this, v[type + "Params"] || _blankArray);
            case 0:
                callback.call(scope);
                break;
            case 1:
                callback.call(scope, params[0]);
                break;
            case 2:
                callback.call(scope, params[0], params[1]);
                break;
            default:
                callback.apply(scope, params);
        }
    };

    //----Animation getters/setters --------------------------------------------------------

    p.eventCallback = function(type, callback, params, scope) {
        if ((type || "").substr(0, 2) === "on") {
            var v = this.vars;
            if (arguments.length === 1) {
                return v[type];
            }
            if (callback == null) {
                delete v[type];
            } else {
                v[type] = callback;
                v[type + "Params"] = (_isArray(params) && params.join("").indexOf("{self}") !== -1) ? this._swapSelfInParams(params) : params;
                v[type + "Scope"] = scope;
            }
            if (type === "onUpdate") {
                this._onUpdate = callback;
            }
        }
        return this;
    };

    p.delay = function(value) {
        if (!arguments.length) {
            return this._delay;
        }
        if (this._timeline.smoothChildTiming) {
            this.startTime(this._startTime + value - this._delay);
        }
        this._delay = value;
        return this;
    };

    p.duration = function(value) {
        if (!arguments.length) {
            this._dirty = false;
            return this._duration;
        }
        this._duration = this._totalDuration = value;
        this._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.
        if (this._timeline.smoothChildTiming)
            if (this._time > 0)
                if (this._time < this._duration)
                    if (value !== 0) {
                        this.totalTime(this._totalTime * (value / this._duration), true);
                    }
        return this;
    };

    p.totalDuration = function(value) {
        this._dirty = false;
        return (!arguments.length) ? this._totalDuration : this.duration(value);
    };

    p.time = function(value, suppressEvents) {
        if (!arguments.length) {
            return this._time;
        }
        if (this._dirty) {
            this.totalDuration();
        }
        return this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);
    };

    p.totalTime = function(time, suppressEvents, uncapped) {
        if (!_tickerActive) {
            _ticker.wake();
        }
        if (!arguments.length) {
            return this._totalTime;
        }
        if (this._timeline) {
            if (time < 0 && !uncapped) {
                time += this.totalDuration();
            }
            if (this._timeline.smoothChildTiming) {
                if (this._dirty) {
                    this.totalDuration();
                }
                var totalDuration = this._totalDuration,
                    tl = this._timeline;
                if (time > totalDuration && !uncapped) {
                    time = totalDuration;
                }
                this._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);
                if (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
                    this._uncache(false);
                }
                //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.
                if (tl._timeline) {
                    while (tl._timeline) {
                        if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
                            tl.totalTime(tl._totalTime, true);
                        }
                        tl = tl._timeline;
                    }
                }
            }
            if (this._gc) {
                this._enabled(true, false);
            }
            if (this._totalTime !== time || this._duration === 0) {
                if (_lazyTweens.length) {
                    _lazyRender();
                }
                this.render(time, suppressEvents, false);
                if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
                    _lazyRender();
                }
            }
        }
        return this;
    };

    p.progress = p.totalProgress = function(value, suppressEvents) {
        var duration = this.duration();
        return (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);
    };

    p.startTime = function(value) {
        if (!arguments.length) {
            return this._startTime;
        }
        if (value !== this._startTime) {
            this._startTime = value;
            if (this.timeline)
                if (this.timeline._sortChildren) {
                    this.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
                }
        }
        return this;
    };

    p.endTime = function(includeRepeats) {
        return this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;
    };

    p.timeScale = function(value) {
        if (!arguments.length) {
            return this._timeScale;
        }
        var pauseTime, t;
        value = value || _tinyNum; //can't allow zero because it'll throw the math off
        if (this._timeline && this._timeline.smoothChildTiming) {
            pauseTime = this._pauseTime;
            t = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();
            this._startTime = t - ((t - this._startTime) * this._timeScale / value);
        }
        this._timeScale = value;
        t = this.timeline;
        while (t && t.timeline) { //must update the duration/totalDuration of all ancestor timelines immediately in case in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
            t._dirty = true;
            t.totalDuration();
            t = t.timeline;
        }
        return this;
    };

    p.reversed = function(value) {
        if (!arguments.length) {
            return this._reversed;
        }
        if (value != this._reversed) {
            this._reversed = value;
            this.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);
        }
        return this;
    };

    p.paused = function(value) {
        if (!arguments.length) {
            return this._paused;
        }
        var tl = this._timeline,
            raw, elapsed;
        if (value != this._paused)
            if (tl) {
                if (!_tickerActive && !value) {
                    _ticker.wake();
                }
                raw = tl.rawTime();
                elapsed = raw - this._pauseTime;
                if (!value && tl.smoothChildTiming) {
                    this._startTime += elapsed;
                    this._uncache(false);
                }
                this._pauseTime = value ? raw : null;
                this._paused = value;
                this._active = this.isActive();
                if (!value && elapsed !== 0 && this._initted && this.duration()) {
                    raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;
                    this.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.
                }
            }
        if (this._gc && !value) {
            this._enabled(true, false);
        }
        return this;
    };


    /*
     * ----------------------------------------------------------------
     * SimpleTimeline
     * ----------------------------------------------------------------
     */
    var SimpleTimeline = _class("core.SimpleTimeline", function(vars) {
        Animation.call(this, 0, vars);
        this.autoRemoveChildren = this.smoothChildTiming = true;
    });

    p = SimpleTimeline.prototype = new Animation();
    p.constructor = SimpleTimeline;
    p.kill()._gc = false;
    p._first = p._last = p._recent = null;
    p._sortChildren = false;

    p.add = p.insert = function(child, position, align, stagger) {
        var prevTween, st;
        child._startTime = Number(position || 0) + child._delay;
        if (child._paused)
            if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).
                child._pauseTime = this.rawTime() - (child._timeline.rawTime() - child._pauseTime);
            }
        if (child.timeline) {
            child.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.
        }
        child.timeline = child._timeline = this;
        if (child._gc) {
            child._enabled(true, true);
        }
        prevTween = this._last;
        if (this._sortChildren) {
            st = child._startTime;
            while (prevTween && prevTween._startTime > st) {
                prevTween = prevTween._prev;
            }
        }
        if (prevTween) {
            child._next = prevTween._next;
            prevTween._next = child;
        } else {
            child._next = this._first;
            this._first = child;
        }
        if (child._next) {
            child._next._prev = child;
        } else {
            this._last = child;
        }
        child._prev = prevTween;
        this._recent = child;
        if (this._timeline) {
            this._uncache(true);
        }
        return this;
    };

    p._remove = function(tween, skipDisable) {
        if (tween.timeline === this) {
            if (!skipDisable) {
                tween._enabled(false, true);
            }

            if (tween._prev) {
                tween._prev._next = tween._next;
            } else if (this._first === tween) {
                this._first = tween._next;
            }
            if (tween._next) {
                tween._next._prev = tween._prev;
            } else if (this._last === tween) {
                this._last = tween._prev;
            }
            tween._next = tween._prev = tween.timeline = null;
            if (tween === this._recent) {
                this._recent = this._last;
            }

            if (this._timeline) {
                this._uncache(true);
            }
        }
        return this;
    };

    p.render = function(time, suppressEvents, force) {
        var tween = this._first,
            next;
        this._totalTime = this._time = this._rawPrevTime = time;
        while (tween) {
            next = tween._next; //record it here because the value could change after rendering...
            if (tween._active || (time >= tween._startTime && !tween._paused && !tween._gc)) {
                if (!tween._reversed) {
                    tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                } else {
                    tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                }
            }
            tween = next;
        }
    };

    p.rawTime = function() {
        if (!_tickerActive) {
            _ticker.wake();
        }
        return this._totalTime;
    };

    /*
     * ----------------------------------------------------------------
     * TweenLite
     * ----------------------------------------------------------------
     */
    var TweenLite = _class("TweenLite", function(target, duration, vars) {
            Animation.call(this, duration, vars);
            this.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)

            if (target == null) {
                throw "Cannot tween a null target.";
            }

            this.target = target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;

            var isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),
                overwrite = this.vars.overwrite,
                i, targ, targets;

            this._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === "number") ? overwrite >> 0 : _overwriteLookup[overwrite];

            if ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== "number") {
                this._targets = targets = _slice(target); //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                this._propLookup = [];
                this._siblings = [];
                for (i = 0; i < targets.length; i++) {
                    targ = targets[i];
                    if (!targ) {
                        targets.splice(i--, 1);
                        continue;
                    } else if (typeof(targ) === "string") {
                        targ = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings
                        if (typeof(targ) === "string") {
                            targets.splice(i + 1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)
                        }
                        continue;
                    } else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.
                        targets.splice(i--, 1);
                        this._targets = targets = targets.concat(_slice(targ));
                        continue;
                    }
                    this._siblings[i] = _register(targ, this, false);
                    if (overwrite === 1)
                        if (this._siblings[i].length > 1) {
                            _applyOverwrite(targ, this, null, 1, this._siblings[i]);
                        }
                }

            } else {
                this._propLookup = {};
                this._siblings = _register(target, this, false);
                if (overwrite === 1)
                    if (this._siblings.length > 1) {
                        _applyOverwrite(target, this, null, 1, this._siblings);
                    }
            }
            if (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {
                this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
                this.render(Math.min(0, -this._delay)); //in case delay is negative
            }
        }, true),
        _isSelector = function(v) {
            return (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check "nodeType" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.
        },
        _autoCSS = function(vars, target) {
            var css = {},
                p;
            for (p in vars) {
                if (!_reservedProps[p] && (!(p in target) || p === "transform" || p === "x" || p === "y" || p === "width" || p === "height" || p === "className" || p === "border") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only "x" and "y" properties. We should also prioritize editing css width/height rather than the element's properties.
                    css[p] = vars[p];
                    delete vars[p];
                }
            }
            vars.css = css;
        };

    p = TweenLite.prototype = new Animation();
    p.constructor = TweenLite;
    p.kill()._gc = false;

    //----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------

    p.ratio = 0;
    p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
    p._notifyPluginsOfEnabled = p._lazy = false;

    TweenLite.version = "1.20.5";
    TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
    TweenLite.defaultOverwrite = "auto";
    TweenLite.ticker = _ticker;
    TweenLite.autoSleep = 120;
    TweenLite.lagSmoothing = function(threshold, adjustedLag) {
        _ticker.lagSmoothing(threshold, adjustedLag);
    };

    TweenLite.selector = window.$ || window.jQuery || function(e) {
        var selector = window.$ || window.jQuery;
        if (selector) {
            TweenLite.selector = selector;
            return selector(e);
        }
        if (!_doc) { //in some dev environments (like Angular 6), GSAP gets loaded before the document is defined! So re-query it here if/when necessary.
            _doc = window.document;
        }
        return (!_doc) ? e : (_doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById((e.charAt(0) === "#") ? e.substr(1) : e));
    };

    var _lazyTweens = [],
        _lazyLookup = {},
        _numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
        _relExp = /[\+-]=-?[\.\d]/,
        //_nonNumbersExp = /(?:([\-+](?!(\d|=)))|[^\d\-+=e]|(e(?![\-+][\d])))+/ig,
        _setRatio = function(v) {
            var pt = this._firstPT,
                min = 0.000001,
                val;
            while (pt) {
                val = !pt.blob ? pt.c * v + pt.s : (v === 1 && this.end != null) ? this.end : v ? this.join("") : this.start;
                if (pt.m) {
                    val = pt.m.call(this._tween, val, this._target || pt.t, this._tween);
                } else if (val < min)
                    if (val > -min && !pt.blob) { //prevents issues with converting very small numbers to strings in the browser
                        val = 0;
                    }
                if (!pt.f) {
                    pt.t[pt.p] = val;
                } else if (pt.fp) {
                    pt.t[pt.p](pt.fp, val);
                } else {
                    pt.t[pt.p](val);
                }
                pt = pt._next;
            }
        },
        //compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, "rgb(0,0,0)" and "rgb(100,50,0)" would become ["rgb(", 0, ",", 50, ",0)"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a "start" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join("")).
        _blobDif = function(start, end, filter, pt) {
            var a = [],
                charIndex = 0,
                s = "",
                color = 0,
                startNums, endNums, num, i, l, nonNumbers, currentNum;
            a.start = start;
            a.end = end;
            start = a[0] = start + ""; //ensure values are strings
            end = a[1] = end + "";
            if (filter) {
                filter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
                start = a[0];
                end = a[1];
            }
            a.length = 0;
            startNums = start.match(_numbersExp) || [];
            endNums = end.match(_numbersExp) || [];
            if (pt) {
                pt._next = null;
                pt.blob = 1;
                a._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)
            }
            l = endNums.length;
            for (i = 0; i < l; i++) {
                currentNum = endNums[i];
                nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex) - charIndex);
                s += (nonNumbers || !i) ? nonNumbers : ","; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
                charIndex += nonNumbers.length;
                if (color) { //sense rgba() values and round them.
                    color = (color + 1) % 5;
                } else if (nonNumbers.substr(-5) === "rgba(") {
                    color = 1;
                }
                if (currentNum === startNums[i] || startNums.length <= i) {
                    s += currentNum;
                } else {
                    if (s) {
                        a.push(s);
                        s = "";
                    }
                    num = parseFloat(startNums[i]);
                    a.push(num);
                    a._firstPT = {
                        _next: a._firstPT,
                        t: a,
                        p: a.length - 1,
                        s: num,
                        c: ((currentNum.charAt(1) === "=") ? parseInt(currentNum.charAt(0) + "1", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0,
                        f: 0,
                        m: (color && color < 4) ? Math.round : 0
                    };
                    //note: we don't set _prev because we'll never need to remove individual PropTweens from this list.
                }
                charIndex += currentNum.length;
            }
            s += end.substr(charIndex);
            if (s) {
                a.push(s);
            }
            a.setRatio = _setRatio;
            if (_relExp.test(end)) { //if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
                a.end = null;
            }
            return a;
        },
        //note: "funcParam" is only necessary for function-based getters/setters that require an extra parameter like getAttribute("width") and setAttribute("width", value). In this example, funcParam would be "width". Used by AttrPlugin for example.
        _addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {
            if (typeof(end) === "function") {
                end = end(index || 0, target);
            }
            var type = typeof(target[prop]),
                getterName = (type !== "function") ? "" : ((prop.indexOf("set") || typeof(target["get" + prop.substr(3)]) !== "function") ? prop : "get" + prop.substr(3)),
                s = (start !== "get") ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),
                isRelative = (typeof(end) === "string" && end.charAt(1) === "="),
                pt = {
                    t: target,
                    p: prop,
                    s: s,
                    f: (type === "function"),
                    pg: 0,
                    n: overwriteProp || prop,
                    m: (!mod ? 0 : (typeof(mod) === "function") ? mod : Math.round),
                    pr: 0,
                    c: isRelative ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0
                },
                blob;

            if (typeof(s) !== "number" || (typeof(end) !== "number" && !isRelative)) {
                if (funcParam || isNaN(s) || (!isRelative && isNaN(end)) || typeof(s) === "boolean" || typeof(end) === "boolean") {
                    //a blob (string that has multiple numbers in it)
                    pt.fp = funcParam;
                    blob = _blobDif(s, (isRelative ? (parseFloat(pt.s) + pt.c) + (pt.s + "").replace(/[0-9\-\.]/g, "") : end), stringFilter || TweenLite.defaultStringFilter, pt);
                    pt = {
                        t: blob,
                        p: "setRatio",
                        s: 0,
                        c: 1,
                        f: 2,
                        pg: 0,
                        n: overwriteProp || prop,
                        pr: 0,
                        m: 0
                    }; //"2" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.
                } else {
                    pt.s = parseFloat(s);
                    if (!isRelative) {
                        pt.c = (parseFloat(end) - pt.s) || 0;
                    }
                }
            }
            if (pt.c) { //only add it to the linked list if there's a change.
                if ((pt._next = this._firstPT)) {
                    pt._next._prev = pt;
                }
                this._firstPT = pt;
                return pt;
            }
        },
        _internals = TweenLite._internals = {
            isArray: _isArray,
            isSelector: _isSelector,
            lazyTweens: _lazyTweens,
            blobDif: _blobDif
        }, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.
        _plugins = TweenLite._plugins = {},
        _tweenLookup = _internals.tweenLookup = {},
        _tweenLookupNum = 0,
        _reservedProps = _internals.reservedProps = {
            ease: 1,
            delay: 1,
            overwrite: 1,
            onComplete: 1,
            onCompleteParams: 1,
            onCompleteScope: 1,
            useFrames: 1,
            runBackwards: 1,
            startAt: 1,
            onUpdate: 1,
            onUpdateParams: 1,
            onUpdateScope: 1,
            onStart: 1,
            onStartParams: 1,
            onStartScope: 1,
            onReverseComplete: 1,
            onReverseCompleteParams: 1,
            onReverseCompleteScope: 1,
            onRepeat: 1,
            onRepeatParams: 1,
            onRepeatScope: 1,
            easeParams: 1,
            yoyo: 1,
            immediateRender: 1,
            repeat: 1,
            repeatDelay: 1,
            data: 1,
            paused: 1,
            reversed: 1,
            autoCSS: 1,
            lazy: 1,
            onOverwrite: 1,
            callbackScope: 1,
            stringFilter: 1,
            id: 1,
            yoyoEase: 1
        },
        _overwriteLookup = {
            none: 0,
            all: 1,
            auto: 2,
            concurrent: 3,
            allOnStart: 4,
            preexisting: 5,
            "true": 1,
            "false": 0
        },
        _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),
        _rootTimeline = Animation._rootTimeline = new SimpleTimeline(),
        _nextGCFrame = 30,
        _lazyRender = _internals.lazyRender = function() {
            var i = _lazyTweens.length,
                tween;
            _lazyLookup = {};
            while (--i > -1) {
                tween = _lazyTweens[i];
                if (tween && tween._lazy !== false) {
                    tween.render(tween._lazy[0], tween._lazy[1], true);
                    tween._lazy = false;
                }
            }
            _lazyTweens.length = 0;
        };

    _rootTimeline._startTime = _ticker.time;
    _rootFramesTimeline._startTime = _ticker.frame;
    _rootTimeline._active = _rootFramesTimeline._active = true;
    setTimeout(_lazyRender, 1); //on some mobile devices, there isn't a "tick" before code runs which means any lazy renders wouldn't run before the next official "tick".

    Animation._updateRoot = TweenLite.render = function() {
        var i, a, p;
        if (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.
            _lazyRender();
        }
        _rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);
        _rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);
        if (_lazyTweens.length) {
            _lazyRender();
        }
        if (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to
            _nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
            for (p in _tweenLookup) {
                a = _tweenLookup[p].tweens;
                i = a.length;
                while (--i > -1) {
                    if (a[i]._gc) {
                        a.splice(i, 1);
                    }
                }
                if (a.length === 0) {
                    delete _tweenLookup[p];
                }
            }
            //if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly
            p = _rootTimeline._first;
            if (!p || p._paused)
                if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {
                    while (p && p._paused) {
                        p = p._next;
                    }
                    if (!p) {
                        _ticker.sleep();
                    }
                }
        }
    };

    _ticker.addEventListener("tick", Animation._updateRoot);

    var _register = function(target, tween, scrub) {
            var id = target._gsTweenID,
                a, i;
            if (!_tweenLookup[id || (target._gsTweenID = id = "t" + (_tweenLookupNum++))]) {
                _tweenLookup[id] = {
                    target: target,
                    tweens: []
                };
            }
            if (tween) {
                a = _tweenLookup[id].tweens;
                a[(i = a.length)] = tween;
                if (scrub) {
                    while (--i > -1) {
                        if (a[i] === tween) {
                            a.splice(i, 1);
                        }
                    }
                }
            }
            return _tweenLookup[id].tweens;
        },
        _onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {
            var func = overwrittenTween.vars.onOverwrite,
                r1, r2;
            if (func) {
                r1 = func(overwrittenTween, overwritingTween, target, killedProps);
            }
            func = TweenLite.onOverwrite;
            if (func) {
                r2 = func(overwrittenTween, overwritingTween, target, killedProps);
            }
            return (r1 !== false && r2 !== false);
        },
        _applyOverwrite = function(target, tween, props, mode, siblings) {
            var i, changed, curTween, l;
            if (mode === 1 || mode >= 4) {
                l = siblings.length;
                for (i = 0; i < l; i++) {
                    if ((curTween = siblings[i]) !== tween) {
                        if (!curTween._gc) {
                            if (curTween._kill(null, target, tween)) {
                                changed = true;
                            }
                        }
                    } else if (mode === 5) {
                        break;
                    }
                }
                return changed;
            }
            //NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)
            var startTime = tween._startTime + _tinyNum,
                overlaps = [],
                oCount = 0,
                zeroDur = (tween._duration === 0),
                globalStart;
            i = siblings.length;
            while (--i > -1) {
                if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {
                    //ignore
                } else if (curTween._timeline !== tween._timeline) {
                    globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
                    if (_checkOverlap(curTween, globalStart, zeroDur) === 0) {
                        overlaps[oCount++] = curTween;
                    }
                } else if (curTween._startTime <= startTime)
                    if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime)
                        if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {
                            overlaps[oCount++] = curTween;
                        }
            }

            i = oCount;
            while (--i > -1) {
                curTween = overlaps[i];
                if (mode === 2)
                    if (curTween._kill(props, target, tween)) {
                        changed = true;
                    }
                if (mode !== 2 || (!curTween._firstPT && curTween._initted)) {
                    if (mode !== 2 && !_onOverwrite(curTween, tween)) {
                        continue;
                    }
                    if (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.
                        changed = true;
                    }
                }
            }
            return changed;
        },
        _checkOverlap = function(tween, reference, zeroDur) {
            var tl = tween._timeline,
                ts = tl._timeScale,
                t = tween._startTime;
            while (tl._timeline) {
                t += tl._startTime;
                ts *= tl._timeScale;
                if (tl._paused) {
                    return -100;
                }
                tl = tl._timeline;
            }
            t /= ts;
            return (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;
        };


    //---- TweenLite instance methods -----------------------------------------------------------------------------

    p._init = function() {
        var v = this.vars,
            op = this._overwrittenProps,
            dur = this._duration,
            immediate = !!v.immediateRender,
            ease = v.ease,
            i, initPlugins, pt, p, startVars, l;
        if (v.startAt) {
            if (this._startAt) {
                this._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:"+=100"}, {x:"-=100"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.
                this._startAt.kill();
            }
            startVars = {};
            for (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);
                startVars[p] = v.startAt[p];
            }
            startVars.data = "isStart";
            startVars.overwrite = false;
            startVars.immediateRender = true;
            startVars.lazy = (immediate && v.lazy !== false);
            startVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).
            startVars.onUpdate = v.onUpdate;
            startVars.onUpdateParams = v.onUpdateParams;
            startVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;
            this._startAt = TweenLite.to(this.target || {}, 0, startVars);
            if (immediate) {
                if (this._time > 0) {
                    this._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).
                } else if (dur !== 0) {
                    return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
                }
            }
        } else if (v.runBackwards && dur !== 0) {
            //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
            if (this._startAt) {
                this._startAt.render(-1, true);
                this._startAt.kill();
                this._startAt = null;
            } else {
                if (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
                    immediate = false;
                }
                pt = {};
                for (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.
                    if (!_reservedProps[p] || p === "autoCSS") {
                        pt[p] = v[p];
                    }
                }
                pt.overwrite = 0;
                pt.data = "isFromStart"; //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
                pt.lazy = (immediate && v.lazy !== false);
                pt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
                this._startAt = TweenLite.to(this.target, 0, pt);
                if (!immediate) {
                    this._startAt._init(); //ensures that the initial values are recorded
                    this._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.
                    if (this.vars.immediateRender) {
                        this._startAt = null;
                    }
                } else if (this._time === 0) {
                    return;
                }
            }
        }
        this._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === "function") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;
        if (v.easeParams instanceof Array && ease.config) {
            this._ease = ease.config.apply(ease, v.easeParams);
        }
        this._easeType = this._ease._type;
        this._easePower = this._ease._power;
        this._firstPT = null;

        if (this._targets) {
            l = this._targets.length;
            for (i = 0; i < l; i++) {
                if (this._initProps(this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i)) {
                    initPlugins = true;
                }
            }
        } else {
            initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);
        }

        if (initPlugins) {
            TweenLite._onPluginEvent("_onInitAllProps", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite
        }
        if (op)
            if (!this._firstPT)
                if (typeof(this.target) !== "function") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.
                    this._enabled(false, false);
                }
        if (v.runBackwards) {
            pt = this._firstPT;
            while (pt) {
                pt.s += pt.c;
                pt.c = -pt.c;
                pt = pt._next;
            }
        }
        this._onUpdate = v.onUpdate;
        this._initted = true;
    };

    p._initProps = function(target, propLookup, siblings, overwrittenProps, index) {
        var p, i, initPlugins, plugin, pt, v;
        if (target == null) {
            return false;
        }

        if (_lazyLookup[target._gsTweenID]) {
            _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
        }

        if (!this.vars.css)
            if (target.style)
                if (target !== window && target.nodeType)
                    if (_plugins.css)
                        if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check "nodeType" on the window inside an iframe.
                            _autoCSS(this.vars, target);
                        }
        for (p in this.vars) {
            v = this.vars[p];
            if (_reservedProps[p]) {
                if (v)
                    if ((v instanceof Array) || (v.push && _isArray(v)))
                        if (v.join("").indexOf("{self}") !== -1) {
                            this.vars[p] = v = this._swapSelfInParams(v, this);
                        }

            } else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {

                //t - target 		[object]
                //p - property 		[string]
                //s - start			[number]
                //c - change		[number]
                //f - isFunction	[boolean]
                //n - name			[string]
                //pg - isPlugin 	[boolean]
                //pr - priority		[number]
                //m - mod           [function | 0]
                this._firstPT = pt = {
                    _next: this._firstPT,
                    t: plugin,
                    p: "setRatio",
                    s: 0,
                    c: 1,
                    f: 1,
                    n: p,
                    pg: 1,
                    pr: plugin._priority,
                    m: 0
                };
                i = plugin._overwriteProps.length;
                while (--i > -1) {
                    propLookup[plugin._overwriteProps[i]] = this._firstPT;
                }
                if (plugin._priority || plugin._onInitAllProps) {
                    initPlugins = true;
                }
                if (plugin._onDisable || plugin._onEnable) {
                    this._notifyPluginsOfEnabled = true;
                }
                if (pt._next) {
                    pt._next._prev = pt;
                }

            } else {
                propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index);
            }
        }

        if (overwrittenProps)
            if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)
                return this._initProps(target, propLookup, siblings, overwrittenProps, index);
            }
        if (this._overwrite > 1)
            if (this._firstPT)
                if (siblings.length > 1)
                    if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {
                        this._kill(propLookup, target);
                        return this._initProps(target, propLookup, siblings, overwrittenProps, index);
                    }
        if (this._firstPT)
            if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.
                _lazyLookup[target._gsTweenID] = true;
            }
        return initPlugins;
    };

    p.render = function(time, suppressEvents, force) {
        var prevTime = this._time,
            duration = this._duration,
            prevRawPrevTime = this._rawPrevTime,
            isComplete, callback, pt, rawPrevTime;
        if (time >= duration - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
            this._totalTime = this._time = duration;
            this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
            if (!this._reversed) {
                isComplete = true;
                callback = "onComplete";
                force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
            }
            if (duration === 0)
                if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                    if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
                        time = 0;
                    }
                    if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause"))
                        if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
                            force = true;
                            if (prevRawPrevTime > _tinyNum) {
                                callback = "onReverseComplete";
                            }
                        }
                    this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                }

        } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
            this._totalTime = this._time = 0;
            this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
            if (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
                callback = "onReverseComplete";
                isComplete = this._reversed;
            }
            if (time < 0) {
                this._active = false;
                if (duration === 0)
                    if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                        if (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === "isPause")) {
                            force = true;
                        }
                        this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    }
            }
            if (!this._initted || (this._startAt && this._startAt.progress())) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.
                force = true;
            }
        } else {
            this._totalTime = this._time = time;

            if (this._easeType) {
                var r = time / duration,
                    type = this._easeType,
                    pow = this._easePower;
                if (type === 1 || (type === 3 && r >= 0.5)) {
                    r = 1 - r;
                }
                if (type === 3) {
                    r *= 2;
                }
                if (pow === 1) {
                    r *= r;
                } else if (pow === 2) {
                    r *= r * r;
                } else if (pow === 3) {
                    r *= r * r * r;
                } else if (pow === 4) {
                    r *= r * r * r * r;
                }

                if (type === 1) {
                    this.ratio = 1 - r;
                } else if (type === 2) {
                    this.ratio = r;
                } else if (time / duration < 0.5) {
                    this.ratio = r / 2;
                } else {
                    this.ratio = 1 - (r / 2);
                }

            } else {
                this.ratio = this._ease.getRatio(time / duration);
            }
        }

        if (this._time === prevTime && !force) {
            return;
        } else if (!this._initted) {
            this._init();
            if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
                return;
            } else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) {
                this._time = this._totalTime = prevTime;
                this._rawPrevTime = prevRawPrevTime;
                _lazyTweens.push(this);
                this._lazy = [time, suppressEvents];
                return;
            }
            //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
            if (this._time && !isComplete) {
                this.ratio = this._ease.getRatio(this._time / duration);
            } else if (isComplete && this._ease._calcEnd) {
                this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
            }
        }
        if (this._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.
            this._lazy = false;
        }
        if (!this._active)
            if (!this._paused && this._time !== prevTime && time >= 0) {
                this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
            }
        if (prevTime === 0) {
            if (this._startAt) {
                if (time >= 0) {
                    this._startAt.render(time, true, force);
                } else if (!callback) {
                    callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
                }
            }
            if (this.vars.onStart)
                if (this._time !== 0 || duration === 0)
                    if (!suppressEvents) {
                        this._callback("onStart");
                    }
        }
        pt = this._firstPT;
        while (pt) {
            if (pt.f) {
                pt.t[pt.p](pt.c * this.ratio + pt.s);
            } else {
                pt.t[pt.p] = pt.c * this.ratio + pt.s;
            }
            pt = pt._next;
        }

        if (this._onUpdate) {
            if (time < 0)
                if (this._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                    this._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
                }
            if (!suppressEvents)
                if (this._time !== prevTime || isComplete || force) {
                    this._callback("onUpdate");
                }
        }
        if (callback)
            if (!this._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate
                if (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.
                    this._startAt.render(time, true, force);
                }
                if (isComplete) {
                    if (this._timeline.autoRemoveChildren) {
                        this._enabled(false, false);
                    }
                    this._active = false;
                }
                if (!suppressEvents && this.vars[callback]) {
                    this._callback(callback);
                }
                if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
                    this._rawPrevTime = 0;
                }
            }
    };

    p._kill = function(vars, target, overwritingTween) {
        if (vars === "all") {
            vars = null;
        }
        if (vars == null)
            if (target == null || target === this.target) {
                this._lazy = false;
                return this._enabled(false, false);
            }
        target = (typeof(target) !== "string") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;
        var simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),
            i, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;
        if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
            i = target.length;
            while (--i > -1) {
                if (this._kill(vars, target[i], overwritingTween)) {
                    changed = true;
                }
            }
        } else {
            if (this._targets) {
                i = this._targets.length;
                while (--i > -1) {
                    if (target === this._targets[i]) {
                        propLookup = this._propLookup[i] || {};
                        this._overwrittenProps = this._overwrittenProps || [];
                        overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
                        break;
                    }
                }
            } else if (target !== this.target) {
                return false;
            } else {
                propLookup = this._propLookup;
                overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
            }

            if (propLookup) {
                killProps = vars || propLookup;
                record = (vars !== overwrittenProps && overwrittenProps !== "all" && vars !== propLookup && (typeof(vars) !== "object" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)
                if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
                    for (p in killProps) {
                        if (propLookup[p]) {
                            if (!killed) {
                                killed = [];
                            }
                            killed.push(p);
                        }
                    }
                    if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).
                        return false;
                    }
                }

                for (p in killProps) {
                    if ((pt = propLookup[p])) {
                        if (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.
                            if (pt.f) {
                                pt.t[pt.p](pt.s);
                            } else {
                                pt.t[pt.p] = pt.s;
                            }
                            changed = true;
                        }
                        if (pt.pg && pt.t._kill(killProps)) {
                            changed = true; //some plugins need to be notified so they can perform cleanup tasks first
                        }
                        if (!pt.pg || pt.t._overwriteProps.length === 0) {
                            if (pt._prev) {
                                pt._prev._next = pt._next;
                            } else if (pt === this._firstPT) {
                                this._firstPT = pt._next;
                            }
                            if (pt._next) {
                                pt._next._prev = pt._prev;
                            }
                            pt._next = pt._prev = null;
                        }
                        delete propLookup[p];
                    }
                    if (record) {
                        overwrittenProps[p] = 1;
                    }
                }
                if (!this._firstPT && this._initted) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
                    this._enabled(false, false);
                }
            }
        }
        return changed;
    };

    p.invalidate = function() {
        if (this._notifyPluginsOfEnabled) {
            TweenLite._onPluginEvent("_onDisable", this);
        }
        this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;
        this._notifyPluginsOfEnabled = this._active = this._lazy = false;
        this._propLookup = (this._targets) ? {} : [];
        Animation.prototype.invalidate.call(this);
        if (this.vars.immediateRender) {
            this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
            this.render(Math.min(0, -this._delay)); //in case delay is negative.
        }
        return this;
    };

    p._enabled = function(enabled, ignoreTimeline) {
        if (!_tickerActive) {
            _ticker.wake();
        }
        if (enabled && this._gc) {
            var targets = this._targets,
                i;
            if (targets) {
                i = targets.length;
                while (--i > -1) {
                    this._siblings[i] = _register(targets[i], this, true);
                }
            } else {
                this._siblings = _register(this.target, this, true);
            }
        }
        Animation.prototype._enabled.call(this, enabled, ignoreTimeline);
        if (this._notifyPluginsOfEnabled)
            if (this._firstPT) {
                return TweenLite._onPluginEvent((enabled ? "_onEnable" : "_onDisable"), this);
            }
        return false;
    };


    //----TweenLite static methods -----------------------------------------------------

    TweenLite.to = function(target, duration, vars) {
        return new TweenLite(target, duration, vars);
    };

    TweenLite.from = function(target, duration, vars) {
        vars.runBackwards = true;
        vars.immediateRender = (vars.immediateRender != false);
        return new TweenLite(target, duration, vars);
    };

    TweenLite.fromTo = function(target, duration, fromVars, toVars) {
        toVars.startAt = fromVars;
        toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
        return new TweenLite(target, duration, toVars);
    };

    TweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {
        return new TweenLite(callback, 0, {
            delay: delay,
            onComplete: callback,
            onCompleteParams: params,
            callbackScope: scope,
            onReverseComplete: callback,
            onReverseCompleteParams: params,
            immediateRender: false,
            lazy: false,
            useFrames: useFrames,
            overwrite: 0
        });
    };

    TweenLite.set = function(target, vars) {
        return new TweenLite(target, 0, vars);
    };

    TweenLite.getTweensOf = function(target, onlyActive) {
        if (target == null) {
            return [];
        }
        target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;
        var i, a, j, t;
        if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
            i = target.length;
            a = [];
            while (--i > -1) {
                a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
            }
            i = a.length;
            //now get rid of any duplicates (tweens of arrays of objects could cause duplicates)
            while (--i > -1) {
                t = a[i];
                j = i;
                while (--j > -1) {
                    if (t === a[j]) {
                        a.splice(i, 1);
                    }
                }
            }
        } else if (target._gsTweenID) {
            a = _register(target).concat();
            i = a.length;
            while (--i > -1) {
                if (a[i]._gc || (onlyActive && !a[i].isActive())) {
                    a.splice(i, 1);
                }
            }
        }
        return a || [];
    };

    TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {
        if (typeof(onlyActive) === "object") {
            vars = onlyActive; //for backwards compatibility (before "onlyActive" parameter was inserted)
            onlyActive = false;
        }
        var a = TweenLite.getTweensOf(target, onlyActive),
            i = a.length;
        while (--i > -1) {
            a[i]._kill(vars, target);
        }
    };



    /*
     * ----------------------------------------------------------------
     * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)
     * ----------------------------------------------------------------
     */
    var TweenPlugin = _class("plugins.TweenPlugin", function(props, priority) {
        this._overwriteProps = (props || "").split(",");
        this._propName = this._overwriteProps[0];
        this._priority = priority || 0;
        this._super = TweenPlugin.prototype;
    }, true);

    p = TweenPlugin.prototype;
    TweenPlugin.version = "1.19.0";
    TweenPlugin.API = 2;
    p._firstPT = null;
    p._addTween = _addPropTween;
    p.setRatio = _setRatio;

    p._kill = function(lookup) {
        var a = this._overwriteProps,
            pt = this._firstPT,
            i;
        if (lookup[this._propName] != null) {
            this._overwriteProps = [];
        } else {
            i = a.length;
            while (--i > -1) {
                if (lookup[a[i]] != null) {
                    a.splice(i, 1);
                }
            }
        }
        while (pt) {
            if (lookup[pt.n] != null) {
                if (pt._next) {
                    pt._next._prev = pt._prev;
                }
                if (pt._prev) {
                    pt._prev._next = pt._next;
                    pt._prev = null;
                } else if (this._firstPT === pt) {
                    this._firstPT = pt._next;
                }
            }
            pt = pt._next;
        }
        return false;
    };

    p._mod = p._roundProps = function(lookup) {
        var pt = this._firstPT,
            val;
        while (pt) {
            val = lookup[this._propName] || (pt.n != null && lookup[pt.n.split(this._propName + "_").join("")]);
            if (val && typeof(val) === "function") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.
                if (pt.f === 2) {
                    pt.t._applyPT.m = val;
                } else {
                    pt.m = val;
                }
            }
            pt = pt._next;
        }
    };

    TweenLite._onPluginEvent = function(type, tween) {
        var pt = tween._firstPT,
            changed, pt2, first, last, next;
        if (type === "_onInitAllProps") {
            //sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.
            while (pt) {
                next = pt._next;
                pt2 = first;
                while (pt2 && pt2.pr > pt.pr) {
                    pt2 = pt2._next;
                }
                if ((pt._prev = pt2 ? pt2._prev : last)) {
                    pt._prev._next = pt;
                } else {
                    first = pt;
                }
                if ((pt._next = pt2)) {
                    pt2._prev = pt;
                } else {
                    last = pt;
                }
                pt = next;
            }
            pt = tween._firstPT = first;
        }
        while (pt) {
            if (pt.pg)
                if (typeof(pt.t[type]) === "function")
                    if (pt.t[type]()) {
                        changed = true;
                    }
            pt = pt._next;
        }
        return changed;
    };

    TweenPlugin.activate = function(plugins) {
        var i = plugins.length;
        while (--i > -1) {
            if (plugins[i].API === TweenPlugin.API) {
                _plugins[(new plugins[i]())._propName] = plugins[i];
            }
        }
        return true;
    };

    //provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.
    _gsDefine.plugin = function(config) {
        if (!config || !config.propName || !config.init || !config.API) {
            throw "illegal plugin definition.";
        }
        var propName = config.propName,
            priority = config.priority || 0,
            overwriteProps = config.overwriteProps,
            map = {
                init: "_onInitTween",
                set: "setRatio",
                kill: "_kill",
                round: "_mod",
                mod: "_mod",
                initAll: "_onInitAllProps"
            },
            Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin",
                function() {
                    TweenPlugin.call(this, propName, priority);
                    this._overwriteProps = overwriteProps || [];
                }, (config.global === true)),
            p = Plugin.prototype = new TweenPlugin(propName),
            prop;
        p.constructor = Plugin;
        Plugin.API = config.API;
        for (prop in map) {
            if (typeof(config[prop]) === "function") {
                p[map[prop]] = config[prop];
            }
        }
        Plugin.version = config.version;
        TweenPlugin.activate([Plugin]);
        return Plugin;
    };


    //now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.
    a = window._gsQueue;
    if (a) {
        for (i = 0; i < a.length; i++) {
            a[i]();
        }
        for (p in _defLookup) {
            if (!_defLookup[p].func) {
                window.console.log("GSAP encountered missing dependency: " + p);
            }
        }
    }

    _tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated

})((typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window, "TweenMax");
/**
 * EvEmitter v1.1.0
 * Lil' event emitter
 * MIT License
 */

/* jshint unused: true, undef: true, strict: true */

(function(global, factory) {
    // universal module definition
    /* jshint strict: false */
    /* globals define, module, window */
    if (typeof define == 'function' && define.amd) {
        // AMD - RequireJS
        define(factory);
    } else if (typeof module == 'object' && module.exports) {
        // CommonJS - Browserify, Webpack
        module.exports = factory();
    } else {
        // Browser globals
        global.EvEmitter = factory();
    }

}(typeof window != 'undefined' ? window : this, function() {

    "use strict";

    function EvEmitter() {}

    var proto = EvEmitter.prototype;

    proto.on = function(eventName, listener) {
        if (!eventName || !listener) {
            return;
        }
        // set events hash
        var events = this._events = this._events || {};
        // set listeners array
        var listeners = events[eventName] = events[eventName] || [];
        // only add once
        if (listeners.indexOf(listener) == -1) {
            listeners.push(listener);
        }

        return this;
    };

    proto.once = function(eventName, listener) {
        if (!eventName || !listener) {
            return;
        }
        // add event
        this.on(eventName, listener);
        // set once flag
        // set onceEvents hash
        var onceEvents = this._onceEvents = this._onceEvents || {};
        // set onceListeners object
        var onceListeners = onceEvents[eventName] = onceEvents[eventName] || {};
        // set flag
        onceListeners[listener] = true;

        return this;
    };

    proto.off = function(eventName, listener) {
        var listeners = this._events && this._events[eventName];
        if (!listeners || !listeners.length) {
            return;
        }
        var index = listeners.indexOf(listener);
        if (index != -1) {
            listeners.splice(index, 1);
        }

        return this;
    };

    proto.emitEvent = function(eventName, args) {
        var listeners = this._events && this._events[eventName];
        if (!listeners || !listeners.length) {
            return;
        }
        // copy over to avoid interference if .off() in listener
        listeners = listeners.slice(0);
        args = args || [];
        // once stuff
        var onceListeners = this._onceEvents && this._onceEvents[eventName];

        for (var i = 0; i < listeners.length; i++) {
            var listener = listeners[i]
            var isOnce = onceListeners && onceListeners[listener];
            if (isOnce) {
                // remove listener
                // remove before trigger to prevent recursion
                this.off(eventName, listener);
                // unset once flag
                delete onceListeners[listener];
            }
            // trigger listener
            listener.apply(this, args);
        }

        return this;
    };

    proto.allOff = function() {
        delete this._events;
        delete this._onceEvents;
    };

    return EvEmitter;

}));

/*!
 * imagesLoaded v4.1.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

(function(window, factory) {
    'use strict';
    // universal module definition

    /*global define: false, module: false, require: false */

    if (typeof define == 'function' && define.amd) {
        // AMD
        define([
            'ev-emitter/ev-emitter'
        ], function(EvEmitter) {
            return factory(window, EvEmitter);
        });
    } else if (typeof module == 'object' && module.exports) {
        // CommonJS
        module.exports = factory(
            window,
            require('ev-emitter')
        );
    } else {
        // browser global
        window.imagesLoaded = factory(
            window,
            window.EvEmitter
        );
    }

})(typeof window !== 'undefined' ? window : this,

    // --------------------------  factory -------------------------- //

    function factory(window, EvEmitter) {

        'use strict';

        var $ = window.jQuery;
        var console = window.console;

        // -------------------------- helpers -------------------------- //

        // extend objects
        function extend(a, b) {
            for (var prop in b) {
                a[prop] = b[prop];
            }
            return a;
        }

        var arraySlice = Array.prototype.slice;

        // turn element or nodeList into an array
        function makeArray(obj) {
            if (Array.isArray(obj)) {
                // use object if already an array
                return obj;
            }

            var isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';
            if (isArrayLike) {
                // convert nodeList to array
                return arraySlice.call(obj);
            }

            // array of single index
            return [obj];
        }

        // -------------------------- imagesLoaded -------------------------- //

        /**
         * @param {Array, Element, NodeList, String} elem
         * @param {Object or Function} options - if function, use as callback
         * @param {Function} onAlways - callback function
         */
        function ImagesLoaded(elem, options, onAlways) {
            // coerce ImagesLoaded() without new, to be new ImagesLoaded()
            if (!(this instanceof ImagesLoaded)) {
                return new ImagesLoaded(elem, options, onAlways);
            }
            // use elem as selector string
            var queryElem = elem;
            if (typeof elem == 'string') {
                queryElem = document.querySelectorAll(elem);
            }
            // bail if bad element
            if (!queryElem) {
                console.error('Bad element for imagesLoaded ' + (queryElem || elem));
                return;
            }

            this.elements = makeArray(queryElem);
            this.options = extend({}, this.options);
            // shift arguments if no options set
            if (typeof options == 'function') {
                onAlways = options;
            } else {
                extend(this.options, options);
            }

            if (onAlways) {
                this.on('always', onAlways);
            }

            this.getImages();

            if ($) {
                // add jQuery Deferred object
                this.jqDeferred = new $.Deferred();
            }

            // HACK check async to allow time to bind listeners
            setTimeout(this.check.bind(this));
        }

        ImagesLoaded.prototype = Object.create(EvEmitter.prototype);

        ImagesLoaded.prototype.options = {};

        ImagesLoaded.prototype.getImages = function() {
            this.images = [];

            // filter & find items if we have an item selector
            this.elements.forEach(this.addElementImages, this);
        };

        /**
         * @param {Node} element
         */
        ImagesLoaded.prototype.addElementImages = function(elem) {
            // filter siblings
            if (elem.nodeName == 'IMG') {
                this.addImage(elem);
            }
            // get background image on element
            if (this.options.background === true) {
                this.addElementBackgroundImages(elem);
            }

            // find children
            // no non-element nodes, #143
            var nodeType = elem.nodeType;
            if (!nodeType || !elementNodeTypes[nodeType]) {
                return;
            }
            var childImgs = elem.querySelectorAll('img');
            // concat childElems to filterFound array
            for (var i = 0; i < childImgs.length; i++) {
                var img = childImgs[i];
                this.addImage(img);
            }

            // get child background images
            if (typeof this.options.background == 'string') {
                var children = elem.querySelectorAll(this.options.background);
                for (i = 0; i < children.length; i++) {
                    var child = children[i];
                    this.addElementBackgroundImages(child);
                }
            }
        };

        var elementNodeTypes = {
            1: true,
            9: true,
            11: true
        };

        ImagesLoaded.prototype.addElementBackgroundImages = function(elem) {
            var style = getComputedStyle(elem);
            if (!style) {
                // Firefox returns null if in a hidden iframe https://bugzil.la/548397
                return;
            }
            // get url inside url("...")
            var reURL = /url\((['"])?(.*?)\1\)/gi;
            var matches = reURL.exec(style.backgroundImage);
            while (matches !== null) {
                var url = matches && matches[2];
                if (url) {
                    this.addBackground(url, elem);
                }
                matches = reURL.exec(style.backgroundImage);
            }
        };

        /**
         * @param {Image} img
         */
        ImagesLoaded.prototype.addImage = function(img) {
            var loadingImage = new LoadingImage(img);
            this.images.push(loadingImage);
        };

        ImagesLoaded.prototype.addBackground = function(url, elem) {
            var background = new Background(url, elem);
            this.images.push(background);
        };

        ImagesLoaded.prototype.check = function() {
            var _this = this;
            this.progressedCount = 0;
            this.hasAnyBroken = false;
            // complete if no images
            if (!this.images.length) {
                this.complete();
                return;
            }

            function onProgress(image, elem, message) {
                // HACK - Chrome triggers event before object properties have changed. #83
                setTimeout(function() {
                    _this.progress(image, elem, message);
                });
            }

            this.images.forEach(function(loadingImage) {
                loadingImage.once('progress', onProgress);
                loadingImage.check();
            });
        };

        ImagesLoaded.prototype.progress = function(image, elem, message) {
            this.progressedCount++;
            this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
            // progress event
            this.emitEvent('progress', [this, image, elem]);
            if (this.jqDeferred && this.jqDeferred.notify) {
                this.jqDeferred.notify(this, image);
            }
            // check if completed
            if (this.progressedCount == this.images.length) {
                this.complete();
            }

            if (this.options.debug && console) {
                console.log('progress: ' + message, image, elem);
            }
        };

        ImagesLoaded.prototype.complete = function() {
            var eventName = this.hasAnyBroken ? 'fail' : 'done';
            this.isComplete = true;
            this.emitEvent(eventName, [this]);
            this.emitEvent('always', [this]);
            if (this.jqDeferred) {
                var jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';
                this.jqDeferred[jqMethod](this);
            }
        };

        // --------------------------  -------------------------- //

        function LoadingImage(img) {
            this.img = img;
        }

        LoadingImage.prototype = Object.create(EvEmitter.prototype);

        LoadingImage.prototype.check = function() {
            // If complete is true and browser supports natural sizes,
            // try to check for image status manually.
            var isComplete = this.getIsImageComplete();
            if (isComplete) {
                // report based on naturalWidth
                this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
                return;
            }

            // If none of the checks above matched, simulate loading on detached element.
            this.proxyImage = new Image();
            this.proxyImage.addEventListener('load', this);
            this.proxyImage.addEventListener('error', this);
            // bind to image as well for Firefox. #191
            this.img.addEventListener('load', this);
            this.img.addEventListener('error', this);
            this.proxyImage.src = this.img.src;
        };

        LoadingImage.prototype.getIsImageComplete = function() {
            // check for non-zero, non-undefined naturalWidth
            // fixes Safari+InfiniteScroll+Masonry bug infinite-scroll#671
            return this.img.complete && this.img.naturalWidth;
        };

        LoadingImage.prototype.confirm = function(isLoaded, message) {
            this.isLoaded = isLoaded;
            this.emitEvent('progress', [this, this.img, message]);
        };

        // ----- events ----- //

        // trigger specified handler for event type
        LoadingImage.prototype.handleEvent = function(event) {
            var method = 'on' + event.type;
            if (this[method]) {
                this[method](event);
            }
        };

        LoadingImage.prototype.onload = function() {
            this.confirm(true, 'onload');
            this.unbindEvents();
        };

        LoadingImage.prototype.onerror = function() {
            this.confirm(false, 'onerror');
            this.unbindEvents();
        };

        LoadingImage.prototype.unbindEvents = function() {
            this.proxyImage.removeEventListener('load', this);
            this.proxyImage.removeEventListener('error', this);
            this.img.removeEventListener('load', this);
            this.img.removeEventListener('error', this);
        };

        // -------------------------- Background -------------------------- //

        function Background(url, element) {
            this.url = url;
            this.element = element;
            this.img = new Image();
        }

        // inherit LoadingImage prototype
        Background.prototype = Object.create(LoadingImage.prototype);

        Background.prototype.check = function() {
            this.img.addEventListener('load', this);
            this.img.addEventListener('error', this);
            this.img.src = this.url;
            // check if image is already complete
            var isComplete = this.getIsImageComplete();
            if (isComplete) {
                this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
                this.unbindEvents();
            }
        };

        Background.prototype.unbindEvents = function() {
            this.img.removeEventListener('load', this);
            this.img.removeEventListener('error', this);
        };

        Background.prototype.confirm = function(isLoaded, message) {
            this.isLoaded = isLoaded;
            this.emitEvent('progress', [this, this.element, message]);
        };

        // -------------------------- jQuery -------------------------- //

        ImagesLoaded.makeJQueryPlugin = function(jQuery) {
            jQuery = jQuery || window.jQuery;
            if (!jQuery) {
                return;
            }
            // set local variable
            $ = jQuery;
            // $().imagesLoaded()
            $.fn.imagesLoaded = function(options, callback) {
                var instance = new ImagesLoaded(this, options, callback);
                return instance.jqDeferred.promise($(this));
            };
        };
        // try making plugin
        ImagesLoaded.makeJQueryPlugin();

        // --------------------------  -------------------------- //

        return ImagesLoaded;

    });

/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

(function(factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function($) {

    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ('onwheel' in document || document.documentMode >= 9) ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ($.event.fixHooks) {
        for (var i = toFix.length; i;) {
            $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if (this.addEventListener) {
                for (var i = toBind.length; i;) {
                    this.addEventListener(toBind[--i], handler, false);
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if (this.removeEventListener) {
                for (var i = toBind.length; i;) {
                    this.removeEventListener(toBind[--i], handler, false);
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent = event || window.event,
            args = slice.call(arguments, 1),
            delta = 0,
            deltaX = 0,
            deltaY = 0,
            absDelta = 0,
            offsetX = 0,
            offsetY = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ('detail' in orgEvent) {
            deltaY = orgEvent.detail * -1;
        }
        if ('wheelDelta' in orgEvent) {
            deltaY = orgEvent.wheelDelta;
        }
        if ('wheelDeltaY' in orgEvent) {
            deltaY = orgEvent.wheelDeltaY;
        }
        if ('wheelDeltaX' in orgEvent) {
            deltaX = orgEvent.wheelDeltaX * -1;
        }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ('deltaY' in orgEvent) {
            deltaY = orgEvent.deltaY * -1;
            delta = deltaY;
        }
        if ('deltaX' in orgEvent) {
            deltaX = orgEvent.deltaX;
            if (deltaY === 0) {
                delta = deltaX * -1;
            }
        }

        // No change actually happened, no reason to go any further
        if (deltaY === 0 && deltaX === 0) {
            return;
        }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if (orgEvent.deltaMode === 1) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if (orgEvent.deltaMode === 2) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));

        if (!lowestDelta || absDelta < lowestDelta) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
            // Divide all the things by 40!
            delta /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);
        deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);
        deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if (special.settings.normalizeOffset && this.getBoundingClientRect) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) {
            clearTimeout(nullLowestDeltaTimeout);
        }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));

/*!
 * JavaScript Cookie v2.2.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;
(function(factory) {
    var registeredInModuleLoader = false;
    if (typeof define === 'function' && define.amd) {
        define(factory);
        registeredInModuleLoader = true;
    }
    if (typeof exports === 'object') {
        module.exports = factory();
        registeredInModuleLoader = true;
    }
    if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function() {
            window.Cookies = OldCookies;
            return api;
        };
    }
}(function() {
    function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
            var attributes = arguments[i];
            for (var key in attributes) {
                result[key] = attributes[key];
            }
        }
        return result;
    }

    function init(converter) {
        function api(key, value, attributes) {
            var result;
            if (typeof document === 'undefined') {
                return;
            }

            // Write

            if (arguments.length > 1) {
                attributes = extend({
                    path: '/'
                }, api.defaults, attributes);

                if (typeof attributes.expires === 'number') {
                    var expires = new Date();
                    expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
                    attributes.expires = expires;
                }

                // We're using "expires" because "max-age" is not supported by IE
                attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

                try {
                    result = JSON.stringify(value);
                    if (/^[\{\[]/.test(result)) {
                        value = result;
                    }
                } catch (e) {}

                if (!converter.write) {
                    value = encodeURIComponent(String(value))
                        .replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                } else {
                    value = converter.write(value, key);
                }

                key = encodeURIComponent(String(key));
                key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
                key = key.replace(/[\(\)]/g, escape);

                var stringifiedAttributes = '';

                for (var attributeName in attributes) {
                    if (!attributes[attributeName]) {
                        continue;
                    }
                    stringifiedAttributes += '; ' + attributeName;
                    if (attributes[attributeName] === true) {
                        continue;
                    }
                    stringifiedAttributes += '=' + attributes[attributeName];
                }
                return (document.cookie = key + '=' + value + stringifiedAttributes);
            }

            // Read

            if (!key) {
                result = {};
            }

            // To prevent the for loop in the first place assign an empty array
            // in case there are no cookies at all. Also prevents odd result when
            // calling "get()"
            var cookies = document.cookie ? document.cookie.split('; ') : [];
            var rdecode = /(%[0-9A-Z]{2})+/g;
            var i = 0;

            for (; i < cookies.length; i++) {
                var parts = cookies[i].split('=');
                var cookie = parts.slice(1).join('=');

                if (!this.json && cookie.charAt(0) === '"') {
                    cookie = cookie.slice(1, -1);
                }

                try {
                    var name = parts[0].replace(rdecode, decodeURIComponent);
                    cookie = converter.read ?
                        converter.read(cookie, name) : converter(cookie, name) ||
                        cookie.replace(rdecode, decodeURIComponent);

                    if (this.json) {
                        try {
                            cookie = JSON.parse(cookie);
                        } catch (e) {}
                    }

                    if (key === name) {
                        result = cookie;
                        break;
                    }

                    if (!key) {
                        result[name] = cookie;
                    }
                } catch (e) {}
            }

            return result;
        }

        api.set = api;
        api.get = function(key) {
            return api.call(api, key);
        };
        api.getJSON = function() {
            return api.apply({
                json: true
            }, [].slice.call(arguments));
        };
        api.defaults = {};

        api.remove = function(key, attributes) {
            api(key, '', extend(attributes, {
                expires: -1
            }));
        };

        api.withConverter = init;

        return api;
    }

    return init(function() {});
}));

/*! nouislider - 11.1.0 - 2018-04-02 11:18:13 */

(function(factory) {

    if (typeof define === 'function' && define.amd) {

        // AMD. Register as an anonymous module.
        define([], factory);

    } else if (typeof exports === 'object') {

        // Node/CommonJS
        module.exports = factory();

    } else {

        // Browser globals
        window.noUiSlider = factory();
    }

}(function() {

    'use strict';

    var VERSION = '11.1.0';


    function isValidFormatter(entry) {
        return typeof entry === 'object' && typeof entry.to === 'function' && typeof entry.from === 'function';
    }

    function removeElement(el) {
        el.parentElement.removeChild(el);
    }

    function isSet(value) {
        return value !== null && value !== undefined;
    }

    // Bindable version
    function preventDefault(e) {
        e.preventDefault();
    }

    // Removes duplicates from an array.
    function unique(array) {
        return array.filter(function(a) {
            return !this[a] ? this[a] = true : false;
        }, {});
    }

    // Round a value to the closest 'to'.
    function closest(value, to) {
        return Math.round(value / to) * to;
    }

    // Current position of an element relative to the document.
    function offset(elem, orientation) {

        var rect = elem.getBoundingClientRect();
        var doc = elem.ownerDocument;
        var docElem = doc.documentElement;
        var pageOffset = getPageOffset(doc);

        // getBoundingClientRect contains left scroll in Chrome on Android.
        // I haven't found a feature detection that proves this. Worst case
        // scenario on mis-match: the 'tap' feature on horizontal sliders breaks.
        if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {
            pageOffset.x = 0;
        }

        return orientation ? (rect.top + pageOffset.y - docElem.clientTop) : (rect.left + pageOffset.x - docElem.clientLeft);
    }

    // Checks whether a value is numerical.
    function isNumeric(a) {
        return typeof a === 'number' && !isNaN(a) && isFinite(a);
    }

    // Sets a class and removes it after [duration] ms.
    function addClassFor(element, className, duration) {
        if (duration > 0) {
            addClass(element, className);
            setTimeout(function() {
                removeClass(element, className);
            }, duration);
        }
    }

    // Limits a value to 0 - 100
    function limit(a) {
        return Math.max(Math.min(a, 100), 0);
    }

    // Wraps a variable as an array, if it isn't one yet.
    // Note that an input array is returned by reference!
    function asArray(a) {
        return Array.isArray(a) ? a : [a];
    }

    // Counts decimals
    function countDecimals(numStr) {
        numStr = String(numStr);
        var pieces = numStr.split(".");
        return pieces.length > 1 ? pieces[1].length : 0;
    }

    // http://youmightnotneedjquery.com/#add_class
    function addClass(el, className) {
        if (el.classList) {
            el.classList.add(className);
        } else {
            el.className += ' ' + className;
        }
    }

    // http://youmightnotneedjquery.com/#remove_class
    function removeClass(el, className) {
        if (el.classList) {
            el.classList.remove(className);
        } else {
            el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    }

    // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/
    function hasClass(el, className) {
        return el.classList ? el.classList.contains(className) : new RegExp('\\b' + className + '\\b').test(el.className);
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes
    function getPageOffset(doc) {

        var supportPageOffset = window.pageXOffset !== undefined;
        var isCSS1Compat = ((doc.compatMode || "") === "CSS1Compat");
        var x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? doc.documentElement.scrollLeft : doc.body.scrollLeft;
        var y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? doc.documentElement.scrollTop : doc.body.scrollTop;

        return {
            x: x,
            y: y
        };
    }

    // we provide a function to compute constants instead
    // of accessing window.* as soon as the module needs it
    // so that we do not compute anything if not needed
    function getActions() {

        // Determine the events to bind. IE11 implements pointerEvents without
        // a prefix, which breaks compatibility with the IE10 implementation.
        return window.navigator.pointerEnabled ? {
            start: 'pointerdown',
            move: 'pointermove',
            end: 'pointerup'
        } : window.navigator.msPointerEnabled ? {
            start: 'MSPointerDown',
            move: 'MSPointerMove',
            end: 'MSPointerUp'
        } : {
            start: 'mousedown touchstart',
            move: 'mousemove touchmove',
            end: 'mouseup touchend'
        };
    }

    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
    // Issue #785
    function getSupportsPassive() {

        var supportsPassive = false;

        try {

            var opts = Object.defineProperty({}, 'passive', {
                get: function() {
                    supportsPassive = true;
                }
            });

            window.addEventListener('test', null, opts);

        } catch (e) {}

        return supportsPassive;
    }

    function getSupportsTouchActionNone() {
        return window.CSS && CSS.supports && CSS.supports('touch-action', 'none');
    }


    // Value calculation

    // Determine the size of a sub-range in relation to a full range.
    function subRangeRatio(pa, pb) {
        return (100 / (pb - pa));
    }

    // (percentage) How many percent is this value of this range?
    function fromPercentage(range, value) {
        return (value * 100) / (range[1] - range[0]);
    }

    // (percentage) Where is this value on this range?
    function toPercentage(range, value) {
        return fromPercentage(range, range[0] < 0 ?
            value + Math.abs(range[0]) :
            value - range[0]);
    }

    // (value) How much is this percentage on this range?
    function isPercentage(range, value) {
        return ((value * (range[1] - range[0])) / 100) + range[0];
    }


    // Range conversion

    function getJ(value, arr) {

        var j = 1;

        while (value >= arr[j]) {
            j += 1;
        }

        return j;
    }

    // (percentage) Input a value, find where, on a scale of 0-100, it applies.
    function toStepping(xVal, xPct, value) {

        if (value >= xVal.slice(-1)[0]) {
            return 100;
        }

        var j = getJ(value, xVal);
        var va = xVal[j - 1];
        var vb = xVal[j];
        var pa = xPct[j - 1];
        var pb = xPct[j];

        return pa + (toPercentage([va, vb], value) / subRangeRatio(pa, pb));
    }

    // (value) Input a percentage, find where it is on the specified range.
    function fromStepping(xVal, xPct, value) {

        // There is no range group that fits 100
        if (value >= 100) {
            return xVal.slice(-1)[0];
        }

        var j = getJ(value, xPct);
        var va = xVal[j - 1];
        var vb = xVal[j];
        var pa = xPct[j - 1];
        var pb = xPct[j];

        return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));
    }

    // (percentage) Get the step that applies at a certain value.
    function getStep(xPct, xSteps, snap, value) {

        if (value === 100) {
            return value;
        }

        var j = getJ(value, xPct);
        var a = xPct[j - 1];
        var b = xPct[j];

        // If 'snap' is set, steps are used as fixed points on the slider.
        if (snap) {

            // Find the closest position, a or b.
            if ((value - a) > ((b - a) / 2)) {
                return b;
            }

            return a;
        }

        if (!xSteps[j - 1]) {
            return value;
        }

        return xPct[j - 1] + closest(
            value - xPct[j - 1],
            xSteps[j - 1]
        );
    }


    // Entry parsing

    function handleEntryPoint(index, value, that) {

        var percentage;

        // Wrap numerical input in an array.
        if (typeof value === "number") {
            value = [value];
        }

        // Reject any invalid input, by testing whether value is an array.
        if (!Array.isArray(value)) {
            throw new Error("noUiSlider (" + VERSION + "): 'range' contains invalid value.");
        }

        // Covert min/max syntax to 0 and 100.
        if (index === 'min') {
            percentage = 0;
        } else if (index === 'max') {
            percentage = 100;
        } else {
            percentage = parseFloat(index);
        }

        // Check for correct input.
        if (!isNumeric(percentage) || !isNumeric(value[0])) {
            throw new Error("noUiSlider (" + VERSION + "): 'range' value isn't numeric.");
        }

        // Store values.
        that.xPct.push(percentage);
        that.xVal.push(value[0]);

        // NaN will evaluate to false too, but to keep
        // logging clear, set step explicitly. Make sure
        // not to override the 'step' setting with false.
        if (!percentage) {
            if (!isNaN(value[1])) {
                that.xSteps[0] = value[1];
            }
        } else {
            that.xSteps.push(isNaN(value[1]) ? false : value[1]);
        }

        that.xHighestCompleteStep.push(0);
    }

    function handleStepPoint(i, n, that) {

        // Ignore 'false' stepping.
        if (!n) {
            return true;
        }

        // Factor to range ratio
        that.xSteps[i] = fromPercentage([that.xVal[i], that.xVal[i + 1]], n) / subRangeRatio(that.xPct[i], that.xPct[i + 1]);

        var totalSteps = (that.xVal[i + 1] - that.xVal[i]) / that.xNumSteps[i];
        var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);
        var step = that.xVal[i] + (that.xNumSteps[i] * highestStep);

        that.xHighestCompleteStep[i] = step;
    }


    // Interface

    function Spectrum(entry, snap, singleStep) {

        this.xPct = [];
        this.xVal = [];
        this.xSteps = [singleStep || false];
        this.xNumSteps = [false];
        this.xHighestCompleteStep = [];

        this.snap = snap;

        var index;
        var ordered = []; // [0, 'min'], [1, '50%'], [2, 'max']

        // Map the object keys to an array.
        for (index in entry) {
            if (entry.hasOwnProperty(index)) {
                ordered.push([entry[index], index]);
            }
        }

        // Sort all entries by value (numeric sort).
        if (ordered.length && typeof ordered[0][0] === "object") {
            ordered.sort(function(a, b) {
                return a[0][0] - b[0][0];
            });
        } else {
            ordered.sort(function(a, b) {
                return a[0] - b[0];
            });
        }


        // Convert all entries to subranges.
        for (index = 0; index < ordered.length; index++) {
            handleEntryPoint(ordered[index][1], ordered[index][0], this);
        }

        // Store the actual step values.
        // xSteps is sorted in the same order as xPct and xVal.
        this.xNumSteps = this.xSteps.slice(0);

        // Convert all numeric steps to the percentage of the subrange they represent.
        for (index = 0; index < this.xNumSteps.length; index++) {
            handleStepPoint(index, this.xNumSteps[index], this);
        }
    }

    Spectrum.prototype.getMargin = function(value) {

        var step = this.xNumSteps[0];

        if (step && ((value / step) % 1) !== 0) {
            throw new Error("noUiSlider (" + VERSION + "): 'limit', 'margin' and 'padding' must be divisible by step.");
        }

        return this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false;
    };

    Spectrum.prototype.toStepping = function(value) {

        value = toStepping(this.xVal, this.xPct, value);

        return value;
    };

    Spectrum.prototype.fromStepping = function(value) {

        return fromStepping(this.xVal, this.xPct, value);
    };

    Spectrum.prototype.getStep = function(value) {

        value = getStep(this.xPct, this.xSteps, this.snap, value);

        return value;
    };

    Spectrum.prototype.getNearbySteps = function(value) {

        var j = getJ(value, this.xPct);

        return {
            stepBefore: {
                startValue: this.xVal[j - 2],
                step: this.xNumSteps[j - 2],
                highestStep: this.xHighestCompleteStep[j - 2]
            },
            thisStep: {
                startValue: this.xVal[j - 1],
                step: this.xNumSteps[j - 1],
                highestStep: this.xHighestCompleteStep[j - 1]
            },
            stepAfter: {
                startValue: this.xVal[j - 0],
                step: this.xNumSteps[j - 0],
                highestStep: this.xHighestCompleteStep[j - 0]
            }
        };
    };

    Spectrum.prototype.countStepDecimals = function() {
        var stepDecimals = this.xNumSteps.map(countDecimals);
        return Math.max.apply(null, stepDecimals);
    };

    // Outside testing
    Spectrum.prototype.convert = function(value) {
        return this.getStep(this.toStepping(value));
    };

    /*	Every input option is tested and parsed. This'll prevent
    	endless validation in internal methods. These tests are
    	structured with an item for every option available. An
    	option can be marked as required by setting the 'r' flag.
    	The testing function is provided with three arguments:
    		- The provided value for the option;
    		- A reference to the options object;
    		- The name for the option;

    	The testing function returns false when an error is detected,
    	or true when everything is OK. It can also modify the option
    	object, to make sure all values can be correctly looped elsewhere. */

    var defaultFormatter = {
        'to': function(value) {
            return value !== undefined && value.toFixed(2);
        },
        'from': Number
    };

    function validateFormat(entry) {

        // Any object with a to and from method is supported.
        if (isValidFormatter(entry)) {
            return true;
        }

        throw new Error("noUiSlider (" + VERSION + "): 'format' requires 'to' and 'from' methods.");
    }

    function testStep(parsed, entry) {

        if (!isNumeric(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'step' is not numeric.");
        }

        // The step option can still be used to set stepping
        // for linear sliders. Overwritten if set in 'range'.
        parsed.singleStep = entry;
    }

    function testRange(parsed, entry) {

        // Filter incorrect input.
        if (typeof entry !== 'object' || Array.isArray(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'range' is not an object.");
        }

        // Catch missing start or end.
        if (entry.min === undefined || entry.max === undefined) {
            throw new Error("noUiSlider (" + VERSION + "): Missing 'min' or 'max' in 'range'.");
        }

        // Catch equal start or end.
        if (entry.min === entry.max) {
            throw new Error("noUiSlider (" + VERSION + "): 'range' 'min' and 'max' cannot be equal.");
        }

        parsed.spectrum = new Spectrum(entry, parsed.snap, parsed.singleStep);
    }

    function testStart(parsed, entry) {

        entry = asArray(entry);

        // Validate input. Values aren't tested, as the public .val method
        // will always provide a valid location.
        if (!Array.isArray(entry) || !entry.length) {
            throw new Error("noUiSlider (" + VERSION + "): 'start' option is incorrect.");
        }

        // Store the number of handles.
        parsed.handles = entry.length;

        // When the slider is initialized, the .val method will
        // be called with the start options.
        parsed.start = entry;
    }

    function testSnap(parsed, entry) {

        // Enforce 100% stepping within subranges.
        parsed.snap = entry;

        if (typeof entry !== 'boolean') {
            throw new Error("noUiSlider (" + VERSION + "): 'snap' option must be a boolean.");
        }
    }

    function testAnimate(parsed, entry) {

        // Enforce 100% stepping within subranges.
        parsed.animate = entry;

        if (typeof entry !== 'boolean') {
            throw new Error("noUiSlider (" + VERSION + "): 'animate' option must be a boolean.");
        }
    }

    function testAnimationDuration(parsed, entry) {

        parsed.animationDuration = entry;

        if (typeof entry !== 'number') {
            throw new Error("noUiSlider (" + VERSION + "): 'animationDuration' option must be a number.");
        }
    }

    function testConnect(parsed, entry) {

        var connect = [false];
        var i;

        // Map legacy options
        if (entry === 'lower') {
            entry = [true, false];
        } else if (entry === 'upper') {
            entry = [false, true];
        }

        // Handle boolean options
        if (entry === true || entry === false) {

            for (i = 1; i < parsed.handles; i++) {
                connect.push(entry);
            }

            connect.push(false);
        }

        // Reject invalid input
        else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {
            throw new Error("noUiSlider (" + VERSION + "): 'connect' option doesn't match handle count.");
        } else {
            connect = entry;
        }

        parsed.connect = connect;
    }

    function testOrientation(parsed, entry) {

        // Set orientation to an a numerical value for easy
        // array selection.
        switch (entry) {
            case 'horizontal':
                parsed.ort = 0;
                break;
            case 'vertical':
                parsed.ort = 1;
                break;
            default:
                throw new Error("noUiSlider (" + VERSION + "): 'orientation' option is invalid.");
        }
    }

    function testMargin(parsed, entry) {

        if (!isNumeric(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'margin' option must be numeric.");
        }

        // Issue #582
        if (entry === 0) {
            return;
        }

        parsed.margin = parsed.spectrum.getMargin(entry);

        if (!parsed.margin) {
            throw new Error("noUiSlider (" + VERSION + "): 'margin' option is only supported on linear sliders.");
        }
    }

    function testLimit(parsed, entry) {

        if (!isNumeric(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'limit' option must be numeric.");
        }

        parsed.limit = parsed.spectrum.getMargin(entry);

        if (!parsed.limit || parsed.handles < 2) {
            throw new Error("noUiSlider (" + VERSION + "): 'limit' option is only supported on linear sliders with 2 or more handles.");
        }
    }

    function testPadding(parsed, entry) {

        if (!isNumeric(entry) && !Array.isArray(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be numeric or array of exactly 2 numbers.");
        }

        if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be numeric or array of exactly 2 numbers.");
        }

        if (entry === 0) {
            return;
        }

        if (!Array.isArray(entry)) {
            entry = [entry, entry];
        }

        // 'getMargin' returns false for invalid values.
        parsed.padding = [parsed.spectrum.getMargin(entry[0]), parsed.spectrum.getMargin(entry[1])];

        if (parsed.padding[0] === false || parsed.padding[1] === false) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option is only supported on linear sliders.");
        }

        if (parsed.padding[0] < 0 || parsed.padding[1] < 0) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be a positive number(s).");
        }

        if (parsed.padding[0] + parsed.padding[1] >= 100) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option must not exceed 100% of the range.");
        }
    }

    function testDirection(parsed, entry) {

        // Set direction as a numerical value for easy parsing.
        // Invert connection for RTL sliders, so that the proper
        // handles get the connect/background classes.
        switch (entry) {
            case 'ltr':
                parsed.dir = 0;
                break;
            case 'rtl':
                parsed.dir = 1;
                break;
            default:
                throw new Error("noUiSlider (" + VERSION + "): 'direction' option was not recognized.");
        }
    }

    function testBehaviour(parsed, entry) {

        // Make sure the input is a string.
        if (typeof entry !== 'string') {
            throw new Error("noUiSlider (" + VERSION + "): 'behaviour' must be a string containing options.");
        }

        // Check if the string contains any keywords.
        // None are required.
        var tap = entry.indexOf('tap') >= 0;
        var drag = entry.indexOf('drag') >= 0;
        var fixed = entry.indexOf('fixed') >= 0;
        var snap = entry.indexOf('snap') >= 0;
        var hover = entry.indexOf('hover') >= 0;

        if (fixed) {

            if (parsed.handles !== 2) {
                throw new Error("noUiSlider (" + VERSION + "): 'fixed' behaviour must be used with 2 handles");
            }

            // Use margin to enforce fixed state
            testMargin(parsed, parsed.start[1] - parsed.start[0]);
        }

        parsed.events = {
            tap: tap || snap,
            drag: drag,
            fixed: fixed,
            snap: snap,
            hover: hover
        };
    }

    function testTooltips(parsed, entry) {

        if (entry === false) {
            return;
        } else if (entry === true) {

            parsed.tooltips = [];

            for (var i = 0; i < parsed.handles; i++) {
                parsed.tooltips.push(true);
            }
        } else {

            parsed.tooltips = asArray(entry);

            if (parsed.tooltips.length !== parsed.handles) {
                throw new Error("noUiSlider (" + VERSION + "): must pass a formatter for all handles.");
            }

            parsed.tooltips.forEach(function(formatter) {
                if (typeof formatter !== 'boolean' && (typeof formatter !== 'object' || typeof formatter.to !== 'function')) {
                    throw new Error("noUiSlider (" + VERSION + "): 'tooltips' must be passed a formatter or 'false'.");
                }
            });
        }
    }

    function testAriaFormat(parsed, entry) {
        parsed.ariaFormat = entry;
        validateFormat(entry);
    }

    function testFormat(parsed, entry) {
        parsed.format = entry;
        validateFormat(entry);
    }

    function testCssPrefix(parsed, entry) {

        if (typeof entry !== 'string' && entry !== false) {
            throw new Error("noUiSlider (" + VERSION + "): 'cssPrefix' must be a string or `false`.");
        }

        parsed.cssPrefix = entry;
    }

    function testCssClasses(parsed, entry) {

        if (typeof entry !== 'object') {
            throw new Error("noUiSlider (" + VERSION + "): 'cssClasses' must be an object.");
        }

        if (typeof parsed.cssPrefix === 'string') {
            parsed.cssClasses = {};

            for (var key in entry) {
                if (!entry.hasOwnProperty(key)) {
                    continue;
                }

                parsed.cssClasses[key] = parsed.cssPrefix + entry[key];
            }
        } else {
            parsed.cssClasses = entry;
        }
    }

    // Test all developer settings and parse to assumption-safe values.
    function testOptions(options) {

        // To prove a fix for #537, freeze options here.
        // If the object is modified, an error will be thrown.
        // Object.freeze(options);

        var parsed = {
            margin: 0,
            limit: 0,
            padding: 0,
            animate: true,
            animationDuration: 300,
            ariaFormat: defaultFormatter,
            format: defaultFormatter
        };

        // Tests are executed in the order they are presented here.
        var tests = {
            'step': {
                r: false,
                t: testStep
            },
            'start': {
                r: true,
                t: testStart
            },
            'connect': {
                r: true,
                t: testConnect
            },
            'direction': {
                r: true,
                t: testDirection
            },
            'snap': {
                r: false,
                t: testSnap
            },
            'animate': {
                r: false,
                t: testAnimate
            },
            'animationDuration': {
                r: false,
                t: testAnimationDuration
            },
            'range': {
                r: true,
                t: testRange
            },
            'orientation': {
                r: false,
                t: testOrientation
            },
            'margin': {
                r: false,
                t: testMargin
            },
            'limit': {
                r: false,
                t: testLimit
            },
            'padding': {
                r: false,
                t: testPadding
            },
            'behaviour': {
                r: true,
                t: testBehaviour
            },
            'ariaFormat': {
                r: false,
                t: testAriaFormat
            },
            'format': {
                r: false,
                t: testFormat
            },
            'tooltips': {
                r: false,
                t: testTooltips
            },
            'cssPrefix': {
                r: true,
                t: testCssPrefix
            },
            'cssClasses': {
                r: true,
                t: testCssClasses
            }
        };

        var defaults = {
            'connect': false,
            'direction': 'ltr',
            'behaviour': 'tap',
            'orientation': 'horizontal',
            'cssPrefix': 'noUi-',
            'cssClasses': {
                target: 'target',
                base: 'base',
                origin: 'origin',
                handle: 'handle',
                handleLower: 'handle-lower',
                handleUpper: 'handle-upper',
                horizontal: 'horizontal',
                vertical: 'vertical',
                background: 'background',
                connect: 'connect',
                connects: 'connects',
                ltr: 'ltr',
                rtl: 'rtl',
                draggable: 'draggable',
                drag: 'state-drag',
                tap: 'state-tap',
                active: 'active',
                tooltip: 'tooltip',
                pips: 'pips',
                pipsHorizontal: 'pips-horizontal',
                pipsVertical: 'pips-vertical',
                marker: 'marker',
                markerHorizontal: 'marker-horizontal',
                markerVertical: 'marker-vertical',
                markerNormal: 'marker-normal',
                markerLarge: 'marker-large',
                markerSub: 'marker-sub',
                value: 'value',
                valueHorizontal: 'value-horizontal',
                valueVertical: 'value-vertical',
                valueNormal: 'value-normal',
                valueLarge: 'value-large',
                valueSub: 'value-sub'
            }
        };

        // AriaFormat defaults to regular format, if any.
        if (options.format && !options.ariaFormat) {
            options.ariaFormat = options.format;
        }

        // Run all options through a testing mechanism to ensure correct
        // input. It should be noted that options might get modified to
        // be handled properly. E.g. wrapping integers in arrays.
        Object.keys(tests).forEach(function(name) {

            // If the option isn't set, but it is required, throw an error.
            if (!isSet(options[name]) && defaults[name] === undefined) {

                if (tests[name].r) {
                    throw new Error("noUiSlider (" + VERSION + "): '" + name + "' is required.");
                }

                return true;
            }

            tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);
        });

        // Forward pips options
        parsed.pips = options.pips;

        // All recent browsers accept unprefixed transform.
        // We need -ms- for IE9 and -webkit- for older Android;
        // Assume use of -webkit- if unprefixed and -ms- are not supported.
        // https://caniuse.com/#feat=transforms2d
        var d = document.createElement("div");
        var msPrefix = d.style.msTransform !== undefined;
        var noPrefix = d.style.transform !== undefined;

        parsed.transformRule = noPrefix ? 'transform' : (msPrefix ? 'msTransform' : 'webkitTransform');

        // Pips don't move, so we can place them using left/top.
        var styles = [
            ['left', 'top'],
            ['right', 'bottom']
        ];

        parsed.style = styles[parsed.dir][parsed.ort];

        return parsed;
    }


    function scope(target, options, originalOptions) {

        var actions = getActions();
        var supportsTouchActionNone = getSupportsTouchActionNone();
        var supportsPassive = supportsTouchActionNone && getSupportsPassive();

        // All variables local to 'scope' are prefixed with 'scope_'
        var scope_Target = target;
        var scope_Locations = [];
        var scope_Base;
        var scope_Handles;
        var scope_HandleNumbers = [];
        var scope_ActiveHandlesCount = 0;
        var scope_Connects;
        var scope_Spectrum = options.spectrum;
        var scope_Values = [];
        var scope_Events = {};
        var scope_Self;
        var scope_Pips;
        var scope_Document = target.ownerDocument;
        var scope_DocumentElement = scope_Document.documentElement;
        var scope_Body = scope_Document.body;


        // For horizontal sliders in standard ltr documents,
        // make .noUi-origin overflow to the left so the document doesn't scroll.
        var scope_DirOffset = (scope_Document.dir === 'rtl') || (options.ort === 1) ? 0 : 100;

        /*! In this file: Construction of DOM elements; */

        // Creates a node, adds it to target, returns the new node.
        function addNodeTo(addTarget, className) {

            var div = scope_Document.createElement('div');

            if (className) {
                addClass(div, className);
            }

            addTarget.appendChild(div);

            return div;
        }

        // Append a origin to the base
        function addOrigin(base, handleNumber) {

            var origin = addNodeTo(base, options.cssClasses.origin);
            var handle = addNodeTo(origin, options.cssClasses.handle);

            handle.setAttribute('data-handle', handleNumber);

            // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
            // 0 = focusable and reachable
            handle.setAttribute('tabindex', '0');
            handle.setAttribute('role', 'slider');
            handle.setAttribute('aria-orientation', options.ort ? 'vertical' : 'horizontal');

            if (handleNumber === 0) {
                addClass(handle, options.cssClasses.handleLower);
            } else if (handleNumber === options.handles - 1) {
                addClass(handle, options.cssClasses.handleUpper);
            }

            return origin;
        }

        // Insert nodes for connect elements
        function addConnect(base, add) {

            if (!add) {
                return false;
            }

            return addNodeTo(base, options.cssClasses.connect);
        }

        // Add handles to the slider base.
        function addElements(connectOptions, base) {

            var connectBase = addNodeTo(base, options.cssClasses.connects);

            scope_Handles = [];
            scope_Connects = [];

            scope_Connects.push(addConnect(connectBase, connectOptions[0]));

            // [::::O====O====O====]
            // connectOptions = [0, 1, 1, 1]

            for (var i = 0; i < options.handles; i++) {
                // Keep a list of all added handles.
                scope_Handles.push(addOrigin(base, i));
                scope_HandleNumbers[i] = i;
                scope_Connects.push(addConnect(connectBase, connectOptions[i + 1]));
            }
        }

        // Initialize a single slider.
        function addSlider(addTarget) {

            // Apply classes and data to the target.
            addClass(addTarget, options.cssClasses.target);

            if (options.dir === 0) {
                addClass(addTarget, options.cssClasses.ltr);
            } else {
                addClass(addTarget, options.cssClasses.rtl);
            }

            if (options.ort === 0) {
                addClass(addTarget, options.cssClasses.horizontal);
            } else {
                addClass(addTarget, options.cssClasses.vertical);
            }

            scope_Base = addNodeTo(addTarget, options.cssClasses.base);
        }


        function addTooltip(handle, handleNumber) {

            if (!options.tooltips[handleNumber]) {
                return false;
            }

            return addNodeTo(handle.firstChild, options.cssClasses.tooltip);
        }

        // The tooltips option is a shorthand for using the 'update' event.
        function tooltips() {

            // Tooltips are added with options.tooltips in original order.
            var tips = scope_Handles.map(addTooltip);

            bindEvent('update', function(values, handleNumber, unencoded) {

                if (!tips[handleNumber]) {
                    return;
                }

                var formattedValue = values[handleNumber];

                if (options.tooltips[handleNumber] !== true) {
                    formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);
                }

                tips[handleNumber].innerHTML = formattedValue;
            });
        }


        function aria() {

            bindEvent('update', function(values, handleNumber, unencoded, tap, positions) {

                // Update Aria Values for all handles, as a change in one changes min and max values for the next.
                scope_HandleNumbers.forEach(function(index) {

                    var handle = scope_Handles[index];

                    var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);
                    var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);

                    var now = positions[index];
                    var text = options.ariaFormat.to(unencoded[index]);

                    handle.children[0].setAttribute('aria-valuemin', min.toFixed(1));
                    handle.children[0].setAttribute('aria-valuemax', max.toFixed(1));
                    handle.children[0].setAttribute('aria-valuenow', now.toFixed(1));
                    handle.children[0].setAttribute('aria-valuetext', text);
                });
            });
        }


        function getGroup(mode, values, stepped) {

            // Use the range.
            if (mode === 'range' || mode === 'steps') {
                return scope_Spectrum.xVal;
            }

            if (mode === 'count') {

                if (values < 2) {
                    throw new Error("noUiSlider (" + VERSION + "): 'values' (>= 2) required for mode 'count'.");
                }

                // Divide 0 - 100 in 'count' parts.
                var interval = values - 1;
                var spread = (100 / interval);

                values = [];

                // List these parts and have them handled as 'positions'.
                while (interval--) {
                    values[interval] = (interval * spread);
                }

                values.push(100);

                mode = 'positions';
            }

            if (mode === 'positions') {

                // Map all percentages to on-range values.
                return values.map(function(value) {
                    return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);
                });
            }

            if (mode === 'values') {

                // If the value must be stepped, it needs to be converted to a percentage first.
                if (stepped) {

                    return values.map(function(value) {

                        // Convert to percentage, apply step, return to value.
                        return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));
                    });

                }

                // Otherwise, we can simply use the values.
                return values;
            }
        }

        function generateSpread(density, mode, group) {

            function safeIncrement(value, increment) {
                // Avoid floating point variance by dropping the smallest decimal places.
                return (value + increment).toFixed(7) / 1;
            }

            var indexes = {};
            var firstInRange = scope_Spectrum.xVal[0];
            var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];
            var ignoreFirst = false;
            var ignoreLast = false;
            var prevPct = 0;

            // Create a copy of the group, sort it and filter away all duplicates.
            group = unique(group.slice().sort(function(a, b) {
                return a - b;
            }));

            // Make sure the range starts with the first element.
            if (group[0] !== firstInRange) {
                group.unshift(firstInRange);
                ignoreFirst = true;
            }

            // Likewise for the last one.
            if (group[group.length - 1] !== lastInRange) {
                group.push(lastInRange);
                ignoreLast = true;
            }

            group.forEach(function(current, index) {

                // Get the current step and the lower + upper positions.
                var step;
                var i;
                var q;
                var low = current;
                var high = group[index + 1];
                var newPct;
                var pctDifference;
                var pctPos;
                var type;
                var steps;
                var realSteps;
                var stepsize;

                // When using 'steps' mode, use the provided steps.
                // Otherwise, we'll step on to the next subrange.
                if (mode === 'steps') {
                    step = scope_Spectrum.xNumSteps[index];
                }

                // Default to a 'full' step.
                if (!step) {
                    step = high - low;
                }

                // Low can be 0, so test for false. If high is undefined,
                // we are at the last subrange. Index 0 is already handled.
                if (low === false || high === undefined) {
                    return;
                }

                // Make sure step isn't 0, which would cause an infinite loop (#654)
                step = Math.max(step, 0.0000001);

                // Find all steps in the subrange.
                for (i = low; i <= high; i = safeIncrement(i, step)) {

                    // Get the percentage value for the current step,
                    // calculate the size for the subrange.
                    newPct = scope_Spectrum.toStepping(i);
                    pctDifference = newPct - prevPct;

                    steps = pctDifference / density;
                    realSteps = Math.round(steps);

                    // This ratio represents the amount of percentage-space a point indicates.
                    // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-devided.
                    // Round the percentage offset to an even number, then divide by two
                    // to spread the offset on both sides of the range.
                    stepsize = pctDifference / realSteps;

                    // Divide all points evenly, adding the correct number to this subrange.
                    // Run up to <= so that 100% gets a point, event if ignoreLast is set.
                    for (q = 1; q <= realSteps; q += 1) {

                        // The ratio between the rounded value and the actual size might be ~1% off.
                        // Correct the percentage offset by the number of points
                        // per subrange. density = 1 will result in 100 points on the
                        // full range, 2 for 50, 4 for 25, etc.
                        pctPos = prevPct + (q * stepsize);
                        indexes[pctPos.toFixed(5)] = ['x', 0];
                    }

                    // Determine the point type.
                    type = (group.indexOf(i) > -1) ? 1 : (mode === 'steps' ? 2 : 0);

                    // Enforce the 'ignoreFirst' option by overwriting the type for 0.
                    if (!index && ignoreFirst) {
                        type = 0;
                    }

                    if (!(i === high && ignoreLast)) {
                        // Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.
                        indexes[newPct.toFixed(5)] = [i, type];
                    }

                    // Update the percentage count.
                    prevPct = newPct;
                }
            });

            return indexes;
        }

        function addMarking(spread, filterFunc, formatter) {

            var element = scope_Document.createElement('div');

            var valueSizeClasses = [
                options.cssClasses.valueNormal,
                options.cssClasses.valueLarge,
                options.cssClasses.valueSub
            ];
            var markerSizeClasses = [
                options.cssClasses.markerNormal,
                options.cssClasses.markerLarge,
                options.cssClasses.markerSub
            ];
            var valueOrientationClasses = [
                options.cssClasses.valueHorizontal,
                options.cssClasses.valueVertical
            ];
            var markerOrientationClasses = [
                options.cssClasses.markerHorizontal,
                options.cssClasses.markerVertical
            ];

            addClass(element, options.cssClasses.pips);
            addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);

            function getClasses(type, source) {
                var a = source === options.cssClasses.value;
                var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;
                var sizeClasses = a ? valueSizeClasses : markerSizeClasses;

                return source + ' ' + orientationClasses[options.ort] + ' ' + sizeClasses[type];
            }

            function addSpread(offset, values) {

                // Apply the filter function, if it is set.
                values[1] = (values[1] && filterFunc) ? filterFunc(values[0], values[1]) : values[1];

                // Add a marker for every point
                var node = addNodeTo(element, false);
                node.className = getClasses(values[1], options.cssClasses.marker);
                node.style[options.style] = offset + '%';

                // Values are only appended for points marked '1' or '2'.
                if (values[1]) {
                    node = addNodeTo(element, false);
                    node.className = getClasses(values[1], options.cssClasses.value);
                    node.setAttribute('data-value', values[0]);
                    node.style[options.style] = offset + '%';
                    node.innerText = formatter.to(values[0]);
                }
            }

            // Append all points.
            Object.keys(spread).forEach(function(a) {
                addSpread(a, spread[a]);
            });

            return element;
        }

        function removePips() {
            if (scope_Pips) {
                removeElement(scope_Pips);
                scope_Pips = null;
            }
        }

        function pips(grid) {

            // Fix #669
            removePips();

            var mode = grid.mode;
            var density = grid.density || 1;
            var filter = grid.filter || false;
            var values = grid.values || false;
            var stepped = grid.stepped || false;
            var group = getGroup(mode, values, stepped);
            var spread = generateSpread(density, mode, group);
            var format = grid.format || {
                to: Math.round
            };

            scope_Pips = scope_Target.appendChild(addMarking(
                spread,
                filter,
                format
            ));

            return scope_Pips;
        }

        /*! In this file: Browser events (not slider events like slide, change); */

        // Shorthand for base dimensions.
        function baseSize() {
            var rect = scope_Base.getBoundingClientRect();
            var alt = 'offset' + ['Width', 'Height'][options.ort];
            return options.ort === 0 ? (rect.width || scope_Base[alt]) : (rect.height || scope_Base[alt]);
        }

        // Handler for attaching events trough a proxy.
        function attachEvent(events, element, callback, data) {

            // This function can be used to 'filter' events to the slider.
            // element is a node, not a nodeList

            var method = function(e) {

                e = fixEvent(e, data.pageOffset, data.target || element);

                // fixEvent returns false if this event has a different target
                // when handling (multi-) touch events;
                if (!e) {
                    return false;
                }

                // doNotReject is passed by all end events to make sure released touches
                // are not rejected, leaving the slider "stuck" to the cursor;
                if (scope_Target.hasAttribute('disabled') && !data.doNotReject) {
                    return false;
                }

                // Stop if an active 'tap' transition is taking place.
                if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) {
                    return false;
                }

                // Ignore right or middle clicks on start #454
                if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {
                    return false;
                }

                // Ignore right or middle clicks on start #454
                if (data.hover && e.buttons) {
                    return false;
                }

                // 'supportsPassive' is only true if a browser also supports touch-action: none in CSS.
                // iOS safari does not, so it doesn't get to benefit from passive scrolling. iOS does support
                // touch-action: manipulation, but that allows panning, which breaks
                // sliders after zooming/on non-responsive pages.
                // See: https://bugs.webkit.org/show_bug.cgi?id=133112
                if (!supportsPassive) {
                    e.preventDefault();
                }

                e.calcPoint = e.points[options.ort];

                // Call the event handler with the event [ and additional data ].
                callback(e, data);
            };

            var methods = [];

            // Bind a closure on the target for every event type.
            events.split(' ').forEach(function(eventName) {
                element.addEventListener(eventName, method, supportsPassive ? {
                    passive: true
                } : false);
                methods.push([eventName, method]);
            });

            return methods;
        }

        // Provide a clean event with standardized offset values.
        function fixEvent(e, pageOffset, eventTarget) {

            // Filter the event to register the type, which can be
            // touch, mouse or pointer. Offset changes need to be
            // made on an event specific basis.
            var touch = e.type.indexOf('touch') === 0;
            var mouse = e.type.indexOf('mouse') === 0;
            var pointer = e.type.indexOf('pointer') === 0;

            var x;
            var y;

            // IE10 implemented pointer events with a prefix;
            if (e.type.indexOf('MSPointer') === 0) {
                pointer = true;
            }

            // In the event that multitouch is activated, the only thing one handle should be concerned
            // about is the touches that originated on top of it.
            if (touch) {

                // Returns true if a touch originated on the target.
                var isTouchOnTarget = function(checkTouch) {
                    return checkTouch.target === eventTarget || eventTarget.contains(checkTouch.target);
                };

                // In the case of touchstart events, we need to make sure there is still no more than one
                // touch on the target so we look amongst all touches.
                if (e.type === 'touchstart') {

                    var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget);

                    // Do not support more than one touch per handle.
                    if (targetTouches.length > 1) {
                        return false;
                    }

                    x = targetTouches[0].pageX;
                    y = targetTouches[0].pageY;

                } else {

                    // In the other cases, find on changedTouches is enough.
                    var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget);

                    // Cancel if the target touch has not moved.
                    if (!targetTouch) {
                        return false;
                    }

                    x = targetTouch.pageX;
                    y = targetTouch.pageY;
                }
            }

            pageOffset = pageOffset || getPageOffset(scope_Document);

            if (mouse || pointer) {
                x = e.clientX + pageOffset.x;
                y = e.clientY + pageOffset.y;
            }

            e.pageOffset = pageOffset;
            e.points = [x, y];
            e.cursor = mouse || pointer; // Fix #435

            return e;
        }

        // Translate a coordinate in the document to a percentage on the slider
        function calcPointToPercentage(calcPoint) {
            var location = calcPoint - offset(scope_Base, options.ort);
            var proposal = (location * 100) / baseSize();

            // Clamp proposal between 0% and 100%
            // Out-of-bound coordinates may occur when .noUi-base pseudo-elements
            // are used (e.g. contained handles feature)
            proposal = limit(proposal);

            return options.dir ? 100 - proposal : proposal;
        }

        // Find handle closest to a certain percentage on the slider
        function getClosestHandle(proposal) {

            var closest = 100;
            var handleNumber = false;

            scope_Handles.forEach(function(handle, index) {

                // Disabled handles are ignored
                if (handle.hasAttribute('disabled')) {
                    return;
                }

                var pos = Math.abs(scope_Locations[index] - proposal);

                if (pos < closest || (pos === 100 && closest === 100)) {
                    handleNumber = index;
                    closest = pos;
                }
            });

            return handleNumber;
        }

        // Fire 'end' when a mouse or pen leaves the document.
        function documentLeave(event, data) {
            if (event.type === "mouseout" && event.target.nodeName === "HTML" && event.relatedTarget === null) {
                eventEnd(event, data);
            }
        }

        // Handle movement on document for handle and range drag.
        function eventMove(event, data) {

            // Fix #498
            // Check value of .buttons in 'start' to work around a bug in IE10 mobile (data.buttonsProperty).
            // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero
            // IE9 has .buttons and .which zero on mousemove.
            // Firefox breaks the spec MDN defines.
            if (navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {
                return eventEnd(event, data);
            }

            // Check if we are moving up or down
            var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);

            // Convert the movement into a percentage of the slider width/height
            var proposal = (movement * 100) / data.baseSize;

            moveHandles(movement > 0, proposal, data.locations, data.handleNumbers);
        }

        // Unbind move events on document, call callbacks.
        function eventEnd(event, data) {

            // The handle is no longer active, so remove the class.
            if (data.handle) {
                removeClass(data.handle, options.cssClasses.active);
                scope_ActiveHandlesCount -= 1;
            }

            // Unbind the move and end events, which are added on 'start'.
            data.listeners.forEach(function(c) {
                scope_DocumentElement.removeEventListener(c[0], c[1]);
            });

            if (scope_ActiveHandlesCount === 0) {
                // Remove dragging class.
                removeClass(scope_Target, options.cssClasses.drag);
                setZindex();

                // Remove cursor styles and text-selection events bound to the body.
                if (event.cursor) {
                    scope_Body.style.cursor = '';
                    scope_Body.removeEventListener('selectstart', preventDefault);
                }
            }

            data.handleNumbers.forEach(function(handleNumber) {
                fireEvent('change', handleNumber);
                fireEvent('set', handleNumber);
                fireEvent('end', handleNumber);
            });
        }

        // Bind move events on document.
        function eventStart(event, data) {

            var handle;
            if (data.handleNumbers.length === 1) {

                var handleOrigin = scope_Handles[data.handleNumbers[0]];

                // Ignore 'disabled' handles
                if (handleOrigin.hasAttribute('disabled')) {
                    return false;
                }

                handle = handleOrigin.children[0];
                scope_ActiveHandlesCount += 1;

                // Mark the handle as 'active' so it can be styled.
                addClass(handle, options.cssClasses.active);
            }

            // A drag should never propagate up to the 'tap' event.
            event.stopPropagation();

            // Record the event listeners.
            var listeners = [];

            // Attach the move and end events.
            var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {
                // The event target has changed so we need to propagate the original one so that we keep
                // relying on it to extract target touches.
                target: event.target,
                handle: handle,
                listeners: listeners,
                startCalcPoint: event.calcPoint,
                baseSize: baseSize(),
                pageOffset: event.pageOffset,
                handleNumbers: data.handleNumbers,
                buttonsProperty: event.buttons,
                locations: scope_Locations.slice()
            });

            var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {
                target: event.target,
                handle: handle,
                listeners: listeners,
                doNotReject: true,
                handleNumbers: data.handleNumbers
            });

            var outEvent = attachEvent("mouseout", scope_DocumentElement, documentLeave, {
                target: event.target,
                handle: handle,
                listeners: listeners,
                doNotReject: true,
                handleNumbers: data.handleNumbers
            });

            // We want to make sure we pushed the listeners in the listener list rather than creating
            // a new one as it has already been passed to the event handlers.
            listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent));

            // Text selection isn't an issue on touch devices,
            // so adding cursor styles can be skipped.
            if (event.cursor) {

                // Prevent the 'I' cursor and extend the range-drag cursor.
                scope_Body.style.cursor = getComputedStyle(event.target).cursor;

                // Mark the target with a dragging state.
                if (scope_Handles.length > 1) {
                    addClass(scope_Target, options.cssClasses.drag);
                }

                // Prevent text selection when dragging the handles.
                // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,
                // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,
                // meaning the only holdout is iOS Safari. This doesn't matter: text selection isn't triggered there.
                // The 'cursor' flag is false.
                // See: http://caniuse.com/#search=selectstart
                scope_Body.addEventListener('selectstart', preventDefault, false);
            }

            data.handleNumbers.forEach(function(handleNumber) {
                fireEvent('start', handleNumber);
            });
        }

        // Move closest handle to tapped location.
        function eventTap(event) {

            // The tap event shouldn't propagate up
            event.stopPropagation();

            var proposal = calcPointToPercentage(event.calcPoint);
            var handleNumber = getClosestHandle(proposal);

            // Tackle the case that all handles are 'disabled'.
            if (handleNumber === false) {
                return false;
            }

            // Flag the slider as it is now in a transitional state.
            // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.
            if (!options.events.snap) {
                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            }

            setHandle(handleNumber, proposal, true, true);

            setZindex();

            fireEvent('slide', handleNumber, true);
            fireEvent('update', handleNumber, true);
            fireEvent('change', handleNumber, true);
            fireEvent('set', handleNumber, true);

            if (options.events.snap) {
                eventStart(event, {
                    handleNumbers: [handleNumber]
                });
            }
        }

        // Fires a 'hover' event for a hovered mouse/pen position.
        function eventHover(event) {

            var proposal = calcPointToPercentage(event.calcPoint);

            var to = scope_Spectrum.getStep(proposal);
            var value = scope_Spectrum.fromStepping(to);

            Object.keys(scope_Events).forEach(function(targetEvent) {
                if ('hover' === targetEvent.split('.')[0]) {
                    scope_Events[targetEvent].forEach(function(callback) {
                        callback.call(scope_Self, value);
                    });
                }
            });
        }

        // Attach events to several slider parts.
        function bindSliderEvents(behaviour) {

            // Attach the standard drag event to the handles.
            if (!behaviour.fixed) {

                scope_Handles.forEach(function(handle, index) {

                    // These events are only bound to the visual handle
                    // element, not the 'real' origin element.
                    attachEvent(actions.start, handle.children[0], eventStart, {
                        handleNumbers: [index]
                    });
                });
            }

            // Attach the tap event to the slider base.
            if (behaviour.tap) {
                attachEvent(actions.start, scope_Base, eventTap, {});
            }

            // Fire hover events
            if (behaviour.hover) {
                attachEvent(actions.move, scope_Base, eventHover, {
                    hover: true
                });
            }

            // Make the range draggable.
            if (behaviour.drag) {

                scope_Connects.forEach(function(connect, index) {

                    if (connect === false || index === 0 || index === scope_Connects.length - 1) {
                        return;
                    }

                    var handleBefore = scope_Handles[index - 1];
                    var handleAfter = scope_Handles[index];
                    var eventHolders = [connect];

                    addClass(connect, options.cssClasses.draggable);

                    // When the range is fixed, the entire range can
                    // be dragged by the handles. The handle in the first
                    // origin will propagate the start event upward,
                    // but it needs to be bound manually on the other.
                    if (behaviour.fixed) {
                        eventHolders.push(handleBefore.children[0]);
                        eventHolders.push(handleAfter.children[0]);
                    }

                    eventHolders.forEach(function(eventHolder) {
                        attachEvent(actions.start, eventHolder, eventStart, {
                            handles: [handleBefore, handleAfter],
                            handleNumbers: [index - 1, index]
                        });
                    });
                });
            }
        }

        /*! In this file: Slider events (not browser events); */

        // Attach an event to this slider, possibly including a namespace
        function bindEvent(namespacedEvent, callback) {
            scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];
            scope_Events[namespacedEvent].push(callback);

            // If the event bound is 'update,' fire it immediately for all handles.
            if (namespacedEvent.split('.')[0] === 'update') {
                scope_Handles.forEach(function(a, index) {
                    fireEvent('update', index);
                });
            }
        }

        // Undo attachment of event
        function removeEvent(namespacedEvent) {

            var event = namespacedEvent && namespacedEvent.split('.')[0];
            var namespace = event && namespacedEvent.substring(event.length);

            Object.keys(scope_Events).forEach(function(bind) {

                var tEvent = bind.split('.')[0];
                var tNamespace = bind.substring(tEvent.length);

                if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {
                    delete scope_Events[bind];
                }
            });
        }

        // External event handling
        function fireEvent(eventName, handleNumber, tap) {

            Object.keys(scope_Events).forEach(function(targetEvent) {

                var eventType = targetEvent.split('.')[0];

                if (eventName === eventType) {
                    scope_Events[targetEvent].forEach(function(callback) {

                        callback.call(
                            // Use the slider public API as the scope ('this')
                            scope_Self,
                            // Return values as array, so arg_1[arg_2] is always valid.
                            scope_Values.map(options.format.to),
                            // Handle index, 0 or 1
                            handleNumber,
                            // Unformatted slider values
                            scope_Values.slice(),
                            // Event is fired by tap, true or false
                            tap || false,
                            // Left offset of the handle, in relation to the slider
                            scope_Locations.slice()
                        );
                    });
                }
            });
        }

        /*! In this file: Mechanics for slider operation */

        function toPct(pct) {
            return pct + '%';
        }

        // Split out the handle positioning logic so the Move event can use it, too
        function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue) {

            // For sliders with multiple handles, limit movement to the other handle.
            // Apply the margin option by adding it to the handle positions.
            if (scope_Handles.length > 1) {

                if (lookBackward && handleNumber > 0) {
                    to = Math.max(to, reference[handleNumber - 1] + options.margin);
                }

                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    to = Math.min(to, reference[handleNumber + 1] - options.margin);
                }
            }

            // The limit option has the opposite effect, limiting handles to a
            // maximum distance from another. Limit must be > 0, as otherwise
            // handles would be unmoveable.
            if (scope_Handles.length > 1 && options.limit) {

                if (lookBackward && handleNumber > 0) {
                    to = Math.min(to, reference[handleNumber - 1] + options.limit);
                }

                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    to = Math.max(to, reference[handleNumber + 1] - options.limit);
                }
            }

            // The padding option keeps the handles a certain distance from the
            // edges of the slider. Padding must be > 0.
            if (options.padding) {

                if (handleNumber === 0) {
                    to = Math.max(to, options.padding[0]);
                }

                if (handleNumber === scope_Handles.length - 1) {
                    to = Math.min(to, 100 - options.padding[1]);
                }
            }

            to = scope_Spectrum.getStep(to);

            // Limit percentage to the 0 - 100 range
            to = limit(to);

            // Return false if handle can't move
            if (to === reference[handleNumber] && !getValue) {
                return false;
            }

            return to;
        }

        // Uses slider orientation to create CSS rules. a = base value;
        function inRuleOrder(v, a) {
            var o = options.ort;
            return (o ? a : v) + ', ' + (o ? v : a);
        }

        // Moves handle(s) by a percentage
        // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])
        function moveHandles(upward, proposal, locations, handleNumbers) {

            var proposals = locations.slice();

            var b = [!upward, upward];
            var f = [upward, !upward];

            // Copy handleNumbers so we don't change the dataset
            handleNumbers = handleNumbers.slice();

            // Check to see which handle is 'leading'.
            // If that one can't move the second can't either.
            if (upward) {
                handleNumbers.reverse();
            }

            // Step 1: get the maximum percentage that any of the handles can move
            if (handleNumbers.length > 1) {

                handleNumbers.forEach(function(handleNumber, o) {

                    var to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o], false);

                    // Stop if one of the handles can't move.
                    if (to === false) {
                        proposal = 0;
                    } else {
                        proposal = to - proposals[handleNumber];
                        proposals[handleNumber] = to;
                    }
                });
            }

            // If using one handle, check backward AND forward
            else {
                b = f = [true];
            }

            var state = false;

            // Step 2: Try to set the handles with the found percentage
            handleNumbers.forEach(function(handleNumber, o) {
                state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o]) || state;
            });

            // Step 3: If a handle moved, fire events
            if (state) {
                handleNumbers.forEach(function(handleNumber) {
                    fireEvent('update', handleNumber);
                    fireEvent('slide', handleNumber);
                });
            }
        }

        // Takes a base value and an offset. This offset is used for the connect bar size.
        // In the initial design for this feature, the origin element was 1% wide.
        // Unfortunately, a rounding bug in Chrome makes it impossible to implement this feature
        // in this manner: https://bugs.chromium.org/p/chromium/issues/detail?id=798223
        function transformDirection(a, b) {
            return options.dir ? 100 - a - b : a;
        }

        // Updates scope_Locations and scope_Values, updates visual state
        function updateHandlePosition(handleNumber, to) {

            // Update locations.
            scope_Locations[handleNumber] = to;

            // Convert the value to the slider stepping/range.
            scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);

            var rule = 'translate(' + inRuleOrder(toPct(transformDirection(to, 0) - scope_DirOffset), '0') + ')';
            scope_Handles[handleNumber].style[options.transformRule] = rule;

            updateConnect(handleNumber);
            updateConnect(handleNumber + 1);
        }

        // Handles before the slider middle are stacked later = higher,
        // Handles after the middle later is lower
        // [[7] [8] .......... | .......... [5] [4]
        function setZindex() {

            scope_HandleNumbers.forEach(function(handleNumber) {
                var dir = (scope_Locations[handleNumber] > 50 ? -1 : 1);
                var zIndex = 3 + (scope_Handles.length + (dir * handleNumber));
                scope_Handles[handleNumber].style.zIndex = zIndex;
            });
        }

        // Test suggested values and apply margin, step.
        function setHandle(handleNumber, to, lookBackward, lookForward) {

            to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false);

            if (to === false) {
                return false;
            }

            updateHandlePosition(handleNumber, to);

            return true;
        }

        // Updates style attribute for connect nodes
        function updateConnect(index) {

            // Skip connects set to false
            if (!scope_Connects[index]) {
                return;
            }

            var l = 0;
            var h = 100;

            if (index !== 0) {
                l = scope_Locations[index - 1];
            }

            if (index !== scope_Connects.length - 1) {
                h = scope_Locations[index];
            }

            // We use two rules:
            // 'translate' to change the left/top offset;
            // 'scale' to change the width of the element;
            // As the element has a width of 100%, a translation of 100% is equal to 100% of the parent (.noUi-base)
            var connectWidth = h - l;
            var translateRule = 'translate(' + inRuleOrder(toPct(transformDirection(l, connectWidth)), '0') + ')';
            var scaleRule = 'scale(' + inRuleOrder(connectWidth / 100, '1') + ')';

            scope_Connects[index].style[options.transformRule] = translateRule + ' ' + scaleRule;
        }

        /*! In this file: All methods eventually exposed in slider.noUiSlider... */

        // Parses value passed to .set method. Returns current value if not parse-able.
        function resolveToValue(to, handleNumber) {

            // Setting with null indicates an 'ignore'.
            // Inputting 'false' is invalid.
            if (to === null || to === false || to === undefined) {
                return scope_Locations[handleNumber];
            }

            // If a formatted number was passed, attempt to decode it.
            if (typeof to === 'number') {
                to = String(to);
            }

            to = options.format.from(to);
            to = scope_Spectrum.toStepping(to);

            // If parsing the number failed, use the current value.
            if (to === false || isNaN(to)) {
                return scope_Locations[handleNumber];
            }

            return to;
        }

        // Set the slider value.
        function valueSet(input, fireSetEvent) {

            var values = asArray(input);
            var isInit = scope_Locations[0] === undefined;

            // Event fires by default
            fireSetEvent = (fireSetEvent === undefined ? true : !!fireSetEvent);

            // Animation is optional.
            // Make sure the initial values were set before using animated placement.
            if (options.animate && !isInit) {
                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            }

            // First pass, without lookAhead but with lookBackward. Values are set from left to right.
            scope_HandleNumbers.forEach(function(handleNumber) {
                setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false);
            });

            // Second pass. Now that all base values are set, apply constraints
            scope_HandleNumbers.forEach(function(handleNumber) {
                setHandle(handleNumber, scope_Locations[handleNumber], true, true);
            });

            setZindex();

            scope_HandleNumbers.forEach(function(handleNumber) {

                fireEvent('update', handleNumber);

                // Fire the event only for handles that received a new value, as per #579
                if (values[handleNumber] !== null && fireSetEvent) {
                    fireEvent('set', handleNumber);
                }
            });
        }

        // Reset slider to initial values
        function valueReset(fireSetEvent) {
            valueSet(options.start, fireSetEvent);
        }

        // Get the slider value.
        function valueGet() {

            var values = scope_Values.map(options.format.to);

            // If only one handle is used, return a single value.
            if (values.length === 1) {
                return values[0];
            }

            return values;
        }

        // Removes classes from the root and empties it.
        function destroy() {

            for (var key in options.cssClasses) {
                if (!options.cssClasses.hasOwnProperty(key)) {
                    continue;
                }
                removeClass(scope_Target, options.cssClasses[key]);
            }

            while (scope_Target.firstChild) {
                scope_Target.removeChild(scope_Target.firstChild);
            }

            delete scope_Target.noUiSlider;
        }

        // Get the current step size for the slider.
        function getCurrentStep() {

            // Check all locations, map them to their stepping point.
            // Get the step point, then find it in the input list.
            return scope_Locations.map(function(location, index) {

                var nearbySteps = scope_Spectrum.getNearbySteps(location);
                var value = scope_Values[index];
                var increment = nearbySteps.thisStep.step;
                var decrement = null;

                // If the next value in this step moves into the next step,
                // the increment is the start of the next step - the current value
                if (increment !== false) {
                    if (value + increment > nearbySteps.stepAfter.startValue) {
                        increment = nearbySteps.stepAfter.startValue - value;
                    }
                }


                // If the value is beyond the starting point
                if (value > nearbySteps.thisStep.startValue) {
                    decrement = nearbySteps.thisStep.step;
                } else if (nearbySteps.stepBefore.step === false) {
                    decrement = false;
                }

                // If a handle is at the start of a step, it always steps back into the previous step first
                else {
                    decrement = value - nearbySteps.stepBefore.highestStep;
                }


                // Now, if at the slider edges, there is not in/decrement
                if (location === 100) {
                    increment = null;
                } else if (location === 0) {
                    decrement = null;
                }

                // As per #391, the comparison for the decrement step can have some rounding issues.
                var stepDecimals = scope_Spectrum.countStepDecimals();

                // Round per #391
                if (increment !== null && increment !== false) {
                    increment = Number(increment.toFixed(stepDecimals));
                }

                if (decrement !== null && decrement !== false) {
                    decrement = Number(decrement.toFixed(stepDecimals));
                }

                return [decrement, increment];
            });
        }

        // Updateable: margin, limit, padding, step, range, animate, snap
        function updateOptions(optionsToUpdate, fireSetEvent) {

            // Spectrum is created using the range, snap, direction and step options.
            // 'snap' and 'step' can be updated.
            // If 'snap' and 'step' are not passed, they should remain unchanged.
            var v = valueGet();

            var updateAble = ['margin', 'limit', 'padding', 'range', 'animate', 'snap', 'step', 'format'];

            // Only change options that we're actually passed to update.
            updateAble.forEach(function(name) {
                if (optionsToUpdate[name] !== undefined) {
                    originalOptions[name] = optionsToUpdate[name];
                }
            });

            var newOptions = testOptions(originalOptions);

            // Load new options into the slider state
            updateAble.forEach(function(name) {
                if (optionsToUpdate[name] !== undefined) {
                    options[name] = newOptions[name];
                }
            });

            scope_Spectrum = newOptions.spectrum;

            // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)
            options.margin = newOptions.margin;
            options.limit = newOptions.limit;
            options.padding = newOptions.padding;

            // Update pips, removes existing.
            if (options.pips) {
                pips(options.pips);
            }

            // Invalidate the current positioning so valueSet forces an update.
            scope_Locations = [];
            valueSet(optionsToUpdate.start || v, fireSetEvent);
        }

        /*! In this file: Calls to functions. All other scope_ files define functions only; */

        // Create the base element, initialize HTML and set classes.
        // Add handles and connect elements.
        addSlider(scope_Target);
        addElements(options.connect, scope_Base);

        // Attach user events.
        bindSliderEvents(options.events);

        // Use the public value method to set the start values.
        valueSet(options.start);

        scope_Self = {
            destroy: destroy,
            steps: getCurrentStep,
            on: bindEvent,
            off: removeEvent,
            get: valueGet,
            set: valueSet,
            reset: valueReset,
            // Exposed for unit testing, don't use this in your application.
            __moveHandles: function(a, b, c) {
                moveHandles(a, b, scope_Locations, c);
            },
            options: originalOptions, // Issue #600, #678
            updateOptions: updateOptions,
            target: scope_Target, // Issue #597
            removePips: removePips,
            pips: pips // Issue #594
        };

        if (options.pips) {
            pips(options.pips);
        }

        if (options.tooltips) {
            tooltips();
        }

        aria();

        return scope_Self;

    }


    // Run the standard initializer
    function initialize(target, originalOptions) {

        if (!target || !target.nodeName) {
            throw new Error("noUiSlider (" + VERSION + "): create requires a single element, got: " + target);
        }

        // Throw an error if the slider was already initialized.
        if (target.noUiSlider) {
            throw new Error("noUiSlider (" + VERSION + "): Slider was already initialized.");
        }

        // Test the options and create the slider environment;
        var options = testOptions(originalOptions, target);
        var api = scope(target, options, originalOptions);

        target.noUiSlider = api;

        return api;
    }

    // Use an object instead of a function for future expandability;
    return {
        version: VERSION,
        create: initialize
    };

}));
/*!
 * Paper.js v0.11.5 - The Swiss Army Knife of Vector Graphics Scripting.
 * http://paperjs.org/
 *
 * Copyright (c) 2011 - 2016, Juerg Lehni & Jonathan Puckey
 * http://scratchdisk.com/ & http://jonathanpuckey.com/
 *
 * Distributed under the MIT license. See LICENSE file for details.
 *
 * All rights reserved.
 *
 * Date: Thu Oct 5 16:16:29 2017 +0200
 *
 ***
 *
 * Straps.js - Class inheritance library with support for bean-style accessors
 *
 * Copyright (c) 2006 - 2016 Juerg Lehni
 * http://scratchdisk.com/
 *
 * Distributed under the MIT license.
 *
 ***
 *
 * Acorn.js
 * http://marijnhaverbeke.nl/acorn/
 *
 * Acorn is a tiny, fast JavaScript parser written in JavaScript,
 * created by Marijn Haverbeke and released under an MIT license.
 *
 */

var paper = function(self, undefined) {

    self = self || require('./node/self.js');
    var window = self.window,
        document = self.document;

    var Base = new function() {
        var hidden = /^(statics|enumerable|beans|preserve)$/,
            array = [],
            slice = array.slice,
            create = Object.create,
            describe = Object.getOwnPropertyDescriptor,
            define = Object.defineProperty,

            forEach = array.forEach || function(iter, bind) {
                for (var i = 0, l = this.length; i < l; i++) {
                    iter.call(bind, this[i], i, this);
                }
            },

            forIn = function(iter, bind) {
                for (var i in this) {
                    if (this.hasOwnProperty(i))
                        iter.call(bind, this[i], i, this);
                }
            },

            set = Object.assign || function(dst) {
                for (var i = 1, l = arguments.length; i < l; i++) {
                    var src = arguments[i];
                    for (var key in src) {
                        if (src.hasOwnProperty(key))
                            dst[key] = src[key];
                    }
                }
                return dst;
            },

            each = function(obj, iter, bind) {
                if (obj) {
                    var desc = describe(obj, 'length');
                    (desc && typeof desc.value === 'number' ? forEach : forIn)
                    .call(obj, iter, bind = bind || obj);
                }
                return bind;
            };

        function inject(dest, src, enumerable, beans, preserve) {
            var beansNames = {};

            function field(name, val) {
                val = val || (val = describe(src, name)) &&
                    (val.get ? val : val.value);
                if (typeof val === 'string' && val[0] === '#')
                    val = dest[val.substring(1)] || val;
                var isFunc = typeof val === 'function',
                    res = val,
                    prev = preserve || isFunc && !val.base ?
                    (val && val.get ? name in dest : dest[name]) :
                    null,
                    bean;
                if (!preserve || !prev) {
                    if (isFunc && prev)
                        val.base = prev;
                    if (isFunc && beans !== false &&
                        (bean = name.match(/^([gs]et|is)(([A-Z])(.*))$/)))
                        beansNames[bean[3].toLowerCase() + bean[4]] = bean[2];
                    if (!res || isFunc || !res.get || typeof res.get !== 'function' ||
                        !Base.isPlainObject(res)) {
                        res = {
                            value: res,
                            writable: true
                        };
                    }
                    if ((describe(dest, name) ||
                            {
                                configurable: true
                            }).configurable) {
                        res.configurable = true;
                        res.enumerable = enumerable != null ? enumerable : !bean;
                    }
                    define(dest, name, res);
                }
            }
            if (src) {
                for (var name in src) {
                    if (src.hasOwnProperty(name) && !hidden.test(name))
                        field(name);
                }
                for (var name in beansNames) {
                    var part = beansNames[name],
                        set = dest['set' + part],
                        get = dest['get' + part] || set && dest['is' + part];
                    if (get && (beans === true || get.length === 0))
                        field(name, {
                            get: get,
                            set: set
                        });
                }
            }
            return dest;
        }

        function Base() {
            for (var i = 0, l = arguments.length; i < l; i++) {
                var src = arguments[i];
                if (src)
                    set(this, src);
            }
            return this;
        }

        return inject(Base, {
            inject: function(src) {
                if (src) {
                    var statics = src.statics === true ? src : src.statics,
                        beans = src.beans,
                        preserve = src.preserve;
                    if (statics !== src)
                        inject(this.prototype, src, src.enumerable, beans, preserve);
                    inject(this, statics, null, beans, preserve);
                }
                for (var i = 1, l = arguments.length; i < l; i++)
                    this.inject(arguments[i]);
                return this;
            },

            extend: function() {
                var base = this,
                    ctor,
                    proto;
                for (var i = 0, obj, l = arguments.length; i < l && !(ctor && proto); i++) {
                    obj = arguments[i];
                    ctor = ctor || obj.initialize;
                    proto = proto || obj.prototype;
                }
                ctor = ctor || function() {
                    base.apply(this, arguments);
                };
                proto = ctor.prototype = proto || create(this.prototype);
                define(proto, 'constructor', {
                    value: ctor,
                    writable: true,
                    configurable: true
                });
                inject(ctor, this);
                if (arguments.length)
                    this.inject.apply(ctor, arguments);
                ctor.base = base;
                return ctor;
            }
        }).inject({
            enumerable: false,

            initialize: Base,

            set: Base,

            inject: function() {
                for (var i = 0, l = arguments.length; i < l; i++) {
                    var src = arguments[i];
                    if (src) {
                        inject(this, src, src.enumerable, src.beans, src.preserve);
                    }
                }
                return this;
            },

            extend: function() {
                var res = create(this);
                return res.inject.apply(res, arguments);
            },

            each: function(iter, bind) {
                return each(this, iter, bind);
            },

            clone: function() {
                return new this.constructor(this);
            },

            statics: {
                set: set,
                each: each,
                create: create,
                define: define,
                describe: describe,

                clone: function(obj) {
                    return set(new obj.constructor(), obj);
                },

                isPlainObject: function(obj) {
                    var ctor = obj != null && obj.constructor;
                    return ctor && (ctor === Object || ctor === Base ||
                        ctor.name === 'Object');
                },

                pick: function(a, b) {
                    return a !== undefined ? a : b;
                },

                slice: function(list, begin, end) {
                    return slice.call(list, begin, end);
                }
            }
        });
    };

    if (typeof module !== 'undefined')
        module.exports = Base;

    Base.inject({
        enumerable: false,

        toString: function() {
            return this._id != null ?
                (this._class || 'Object') + (this._name ?
                    " '" + this._name + "'" :
                    ' @' + this._id) :
                '{ ' + Base.each(this, function(value, key) {
                    if (!/^_/.test(key)) {
                        var type = typeof value;
                        this.push(key + ': ' + (type === 'number' ?
                            Formatter.instance.number(value) :
                            type === 'string' ? "'" + value + "'" : value));
                    }
                }, []).join(', ') + ' }';
        },

        getClassName: function() {
            return this._class || '';
        },

        importJSON: function(json) {
            return Base.importJSON(json, this);
        },

        exportJSON: function(options) {
            return Base.exportJSON(this, options);
        },

        toJSON: function() {
            return Base.serialize(this);
        },

        set: function(props, exclude) {
            if (props)
                Base.filter(this, props, exclude, this._prioritize);
            return this;
        }
    }, {

        beans: false,
        statics: {
            exports: {},

            extend: function extend() {
                var res = extend.base.apply(this, arguments),
                    name = res.prototype._class;
                if (name && !Base.exports[name])
                    Base.exports[name] = res;
                return res;
            },

            equals: function(obj1, obj2) {
                if (obj1 === obj2)
                    return true;
                if (obj1 && obj1.equals)
                    return obj1.equals(obj2);
                if (obj2 && obj2.equals)
                    return obj2.equals(obj1);
                if (obj1 && obj2 &&
                    typeof obj1 === 'object' && typeof obj2 === 'object') {
                    if (Array.isArray(obj1) && Array.isArray(obj2)) {
                        var length = obj1.length;
                        if (length !== obj2.length)
                            return false;
                        while (length--) {
                            if (!Base.equals(obj1[length], obj2[length]))
                                return false;
                        }
                    } else {
                        var keys = Object.keys(obj1),
                            length = keys.length;
                        if (length !== Object.keys(obj2).length)
                            return false;
                        while (length--) {
                            var key = keys[length];
                            if (!(obj2.hasOwnProperty(key) &&
                                    Base.equals(obj1[key], obj2[key])))
                                return false;
                        }
                    }
                    return true;
                }
                return false;
            },

            read: function(list, start, options, amount) {
                if (this === Base) {
                    var value = this.peek(list, start);
                    list.__index++;
                    return value;
                }
                var proto = this.prototype,
                    readIndex = proto._readIndex,
                    begin = start || readIndex && list.__index || 0,
                    length = list.length,
                    obj = list[begin];
                amount = amount || length - begin;
                if (obj instanceof this ||
                    options && options.readNull && obj == null && amount <= 1) {
                    if (readIndex)
                        list.__index = begin + 1;
                    return obj && options && options.clone ? obj.clone() : obj;
                }
                obj = Base.create(proto);
                if (readIndex)
                    obj.__read = true;
                obj = obj.initialize.apply(obj, begin > 0 || begin + amount < length ?
                    Base.slice(list, begin, begin + amount) :
                    list) || obj;
                if (readIndex) {
                    list.__index = begin + obj.__read;
                    var filtered = obj.__filtered;
                    if (filtered) {
                        list.__filtered = filtered;
                        obj.__filtered = undefined;
                    }
                    obj.__read = undefined;
                }
                return obj;
            },

            peek: function(list, start) {
                return list[list.__index = start || list.__index || 0];
            },

            remain: function(list) {
                return list.length - (list.__index || 0);
            },

            readList: function(list, start, options, amount) {
                var res = [],
                    entry,
                    begin = start || 0,
                    end = amount ? begin + amount : list.length;
                for (var i = begin; i < end; i++) {
                    res.push(Array.isArray(entry = list[i]) ?
                        this.read(entry, 0, options) :
                        this.read(list, i, options, 1));
                }
                return res;
            },

            readNamed: function(list, name, start, options, amount) {
                var value = this.getNamed(list, name),
                    hasObject = value !== undefined;
                if (hasObject) {
                    var filtered = list.__filtered;
                    if (!filtered) {
                        filtered = list.__filtered = Base.create(list[0]);
                        filtered.__unfiltered = list[0];
                    }
                    filtered[name] = undefined;
                }
                var l = hasObject ? [value] : list,
                    res = this.read(l, start, options, amount);
                return res;
            },

            getNamed: function(list, name) {
                var arg = list[0];
                if (list._hasObject === undefined)
                    list._hasObject = list.length === 1 && Base.isPlainObject(arg);
                if (list._hasObject)
                    return name ? arg[name] : list.__filtered || arg;
            },

            hasNamed: function(list, name) {
                return !!this.getNamed(list, name);
            },

            filter: function(dest, source, exclude, prioritize) {
                var processed;

                function handleKey(key) {
                    if (!(exclude && key in exclude) &&
                        !(processed && key in processed)) {
                        var value = source[key];
                        if (value !== undefined)
                            dest[key] = value;
                    }
                }

                if (prioritize) {
                    var keys = {};
                    for (var i = 0, key, l = prioritize.length; i < l; i++) {
                        if ((key = prioritize[i]) in source) {
                            handleKey(key);
                            keys[key] = true;
                        }
                    }
                    processed = keys;
                }

                Object.keys(source.__unfiltered || source).forEach(handleKey);
                return dest;
            },

            isPlainValue: function(obj, asString) {
                return Base.isPlainObject(obj) || Array.isArray(obj) ||
                    asString && typeof obj === 'string';
            },

            serialize: function(obj, options, compact, dictionary) {
                options = options || {};

                var isRoot = !dictionary,
                    res;
                if (isRoot) {
                    options.formatter = new Formatter(options.precision);
                    dictionary = {
                        length: 0,
                        definitions: {},
                        references: {},
                        add: function(item, create) {
                            var id = '#' + item._id,
                                ref = this.references[id];
                            if (!ref) {
                                this.length++;
                                var res = create.call(item),
                                    name = item._class;
                                if (name && res[0] !== name)
                                    res.unshift(name);
                                this.definitions[id] = res;
                                ref = this.references[id] = [id];
                            }
                            return ref;
                        }
                    };
                }
                if (obj && obj._serialize) {
                    res = obj._serialize(options, dictionary);
                    var name = obj._class;
                    if (name && !obj._compactSerialize && (isRoot || !compact) &&
                        res[0] !== name) {
                        res.unshift(name);
                    }
                } else if (Array.isArray(obj)) {
                    res = [];
                    for (var i = 0, l = obj.length; i < l; i++)
                        res[i] = Base.serialize(obj[i], options, compact, dictionary);
                } else if (Base.isPlainObject(obj)) {
                    res = {};
                    var keys = Object.keys(obj);
                    for (var i = 0, l = keys.length; i < l; i++) {
                        var key = keys[i];
                        res[key] = Base.serialize(obj[key], options, compact,
                            dictionary);
                    }
                } else if (typeof obj === 'number') {
                    res = options.formatter.number(obj, options.precision);
                } else {
                    res = obj;
                }
                return isRoot && dictionary.length > 0 ?
                    [
                        ['dictionary', dictionary.definitions], res
                    ] :
                    res;
            },

            deserialize: function(json, create, _data, _setDictionary, _isRoot) {
                var res = json,
                    isFirst = !_data,
                    hasDictionary = isFirst && json && json.length &&
                    json[0][0] === 'dictionary';
                _data = _data || {};
                if (Array.isArray(json)) {
                    var type = json[0],
                        isDictionary = type === 'dictionary';
                    if (json.length == 1 && /^#/.test(type)) {
                        return _data.dictionary[type];
                    }
                    type = Base.exports[type];
                    res = [];
                    for (var i = type ? 1 : 0, l = json.length; i < l; i++) {
                        res.push(Base.deserialize(json[i], create, _data,
                            isDictionary, hasDictionary));
                    }
                    if (type) {
                        var args = res;
                        if (create) {
                            res = create(type, args, isFirst || _isRoot);
                        } else {
                            res = Base.create(type.prototype);
                            type.apply(res, args);
                        }
                    }
                } else if (Base.isPlainObject(json)) {
                    res = {};
                    if (_setDictionary)
                        _data.dictionary = res;
                    for (var key in json)
                        res[key] = Base.deserialize(json[key], create, _data);
                }
                return hasDictionary ? res[1] : res;
            },

            exportJSON: function(obj, options) {
                var json = Base.serialize(obj, options);
                return options && options.asString == false ?
                    json :
                    JSON.stringify(json);
            },

            importJSON: function(json, target) {
                return Base.deserialize(
                    typeof json === 'string' ? JSON.parse(json) : json,
                    function(ctor, args, isRoot) {
                        var useTarget = isRoot && target &&
                            target.constructor === ctor,
                            obj = useTarget ? target :
                            Base.create(ctor.prototype);
                        if (args.length === 1 && obj instanceof Item &&
                            (useTarget || !(obj instanceof Layer))) {
                            var arg = args[0];
                            if (Base.isPlainObject(arg))
                                arg.insert = false;
                        }
                        (useTarget ? obj.set : ctor).apply(obj, args);
                        if (useTarget)
                            target = null;
                        return obj;
                    });
            },

            splice: function(list, items, index, remove) {
                var amount = items && items.length,
                    append = index === undefined;
                index = append ? list.length : index;
                if (index > list.length)
                    index = list.length;
                for (var i = 0; i < amount; i++)
                    items[i]._index = index + i;
                if (append) {
                    list.push.apply(list, items);
                    return [];
                } else {
                    var args = [index, remove];
                    if (items)
                        args.push.apply(args, items);
                    var removed = list.splice.apply(list, args);
                    for (var i = 0, l = removed.length; i < l; i++)
                        removed[i]._index = undefined;
                    for (var i = index + amount, l = list.length; i < l; i++)
                        list[i]._index = i;
                    return removed;
                }
            },

            capitalize: function(str) {
                return str.replace(/\b[a-z]/g, function(match) {
                    return match.toUpperCase();
                });
            },

            camelize: function(str) {
                return str.replace(/-(.)/g, function(match, chr) {
                    return chr.toUpperCase();
                });
            },

            hyphenate: function(str) {
                return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
            }
        }
    });

    var Emitter = {
        on: function(type, func) {
            if (typeof type !== 'string') {
                Base.each(type, function(value, key) {
                    this.on(key, value);
                }, this);
            } else {
                var types = this._eventTypes,
                    entry = types && types[type],
                    handlers = this._callbacks = this._callbacks || {};
                handlers = handlers[type] = handlers[type] || [];
                if (handlers.indexOf(func) === -1) {
                    handlers.push(func);
                    if (entry && entry.install && handlers.length === 1)
                        entry.install.call(this, type);
                }
            }
            return this;
        },

        off: function(type, func) {
            if (typeof type !== 'string') {
                Base.each(type, function(value, key) {
                    this.off(key, value);
                }, this);
                return;
            }
            var types = this._eventTypes,
                entry = types && types[type],
                handlers = this._callbacks && this._callbacks[type],
                index;
            if (handlers) {
                if (!func || (index = handlers.indexOf(func)) !== -1 &&
                    handlers.length === 1) {
                    if (entry && entry.uninstall)
                        entry.uninstall.call(this, type);
                    delete this._callbacks[type];
                } else if (index !== -1) {
                    handlers.splice(index, 1);
                }
            }
            return this;
        },

        once: function(type, func) {
            return this.on(type, function() {
                func.apply(this, arguments);
                this.off(type, func);
            });
        },

        emit: function(type, event) {
            var handlers = this._callbacks && this._callbacks[type];
            if (!handlers)
                return false;
            var args = Base.slice(arguments, 1),
                setTarget = event && event.target && !event.currentTarget;
            handlers = handlers.slice();
            if (setTarget)
                event.currentTarget = this;
            for (var i = 0, l = handlers.length; i < l; i++) {
                if (handlers[i].apply(this, args) == false) {
                    if (event && event.stop)
                        event.stop();
                    break;
                }
            }
            if (setTarget)
                delete event.currentTarget;
            return true;
        },

        responds: function(type) {
            return !!(this._callbacks && this._callbacks[type]);
        },

        attach: '#on',
        detach: '#off',
        fire: '#emit',

        _installEvents: function(install) {
            var types = this._eventTypes,
                handlers = this._callbacks,
                key = install ? 'install' : 'uninstall';
            if (types) {
                for (var type in handlers) {
                    if (handlers[type].length > 0) {
                        var entry = types[type],
                            func = entry && entry[key];
                        if (func)
                            func.call(this, type);
                    }
                }
            }
        },

        statics: {
            inject: function inject(src) {
                var events = src._events;
                if (events) {
                    var types = {};
                    Base.each(events, function(entry, key) {
                        var isString = typeof entry === 'string',
                            name = isString ? entry : key,
                            part = Base.capitalize(name),
                            type = name.substring(2).toLowerCase();
                        types[type] = isString ? {} : entry;
                        name = '_' + name;
                        src['get' + part] = function() {
                            return this[name];
                        };
                        src['set' + part] = function(func) {
                            var prev = this[name];
                            if (prev)
                                this.off(type, prev);
                            if (func)
                                this.on(type, func);
                            this[name] = func;
                        };
                    });
                    src._eventTypes = types;
                }
                return inject.base.apply(this, arguments);
            }
        }
    };

    var PaperScope = Base.extend({
        _class: 'PaperScope',

        initialize: function PaperScope() {
            paper = this;
            this.settings = new Base({
                applyMatrix: true,
                insertItems: true,
                handleSize: 4,
                hitTolerance: 0
            });
            this.project = null;
            this.projects = [];
            this.tools = [];
            this._id = PaperScope._id++;
            PaperScope._scopes[this._id] = this;
            var proto = PaperScope.prototype;
            if (!this.support) {
                var ctx = CanvasProvider.getContext(1, 1) || {};
                proto.support = {
                    nativeDash: 'setLineDash' in ctx || 'mozDash' in ctx,
                    nativeBlendModes: BlendMode.nativeModes
                };
                CanvasProvider.release(ctx);
            }
            if (!this.agent) {
                var user = self.navigator.userAgent.toLowerCase(),
                    os = (/(darwin|win|mac|linux|freebsd|sunos)/.exec(user) || [])[0],
                    platform = os === 'darwin' ? 'mac' : os,
                    agent = proto.agent = proto.browser = {
                        platform: platform
                    };
                if (platform)
                    agent[platform] = true;
                user.replace(
                    /(opera|chrome|safari|webkit|firefox|msie|trident|atom|node)\/?\s*([.\d]+)(?:.*version\/([.\d]+))?(?:.*rv\:v?([.\d]+))?/g,
                    function(match, n, v1, v2, rv) {
                        if (!agent.chrome) {
                            var v = n === 'opera' ? v2 :
                                /^(node|trident)$/.test(n) ? rv : v1;
                            agent.version = v;
                            agent.versionNumber = parseFloat(v);
                            n = n === 'trident' ? 'msie' : n;
                            agent.name = n;
                            agent[n] = true;
                        }
                    }
                );
                if (agent.chrome)
                    delete agent.webkit;
                if (agent.atom)
                    delete agent.chrome;
            }
        },

        version: "0.11.5",

        getView: function() {
            var project = this.project;
            return project && project._view;
        },

        getPaper: function() {
            return this;
        },

        execute: function(code, options) {
            paper.PaperScript.execute(code, this, options);
            View.updateFocus();
        },

        install: function(scope) {
            var that = this;
            Base.each(['project', 'view', 'tool'], function(key) {
                Base.define(scope, key, {
                    configurable: true,
                    get: function() {
                        return that[key];
                    }
                });
            });
            for (var key in this)
                if (!/^_/.test(key) && this[key])
                    scope[key] = this[key];
        },

        setup: function(element) {
            paper = this;
            this.project = new Project(element);
            return this;
        },

        createCanvas: function(width, height) {
            return CanvasProvider.getCanvas(width, height);
        },

        activate: function() {
            paper = this;
        },

        clear: function() {
            var projects = this.projects,
                tools = this.tools;
            for (var i = projects.length - 1; i >= 0; i--)
                projects[i].remove();
            for (var i = tools.length - 1; i >= 0; i--)
                tools[i].remove();
        },

        remove: function() {
            this.clear();
            delete PaperScope._scopes[this._id];
        },

        statics: new function() {
            function handleAttribute(name) {
                name += 'Attribute';
                return function(el, attr) {
                    return el[name](attr) || el[name]('data-paper-' + attr);
                };
            }

            return {
                _scopes: {},
                _id: 0,

                get: function(id) {
                    return this._scopes[id] || null;
                },

                getAttribute: handleAttribute('get'),
                hasAttribute: handleAttribute('has')
            };
        }
    });

    var PaperScopeItem = Base.extend(Emitter, {

        initialize: function(activate) {
            this._scope = paper;
            this._index = this._scope[this._list].push(this) - 1;
            if (activate || !this._scope[this._reference])
                this.activate();
        },

        activate: function() {
            if (!this._scope)
                return false;
            var prev = this._scope[this._reference];
            if (prev && prev !== this)
                prev.emit('deactivate');
            this._scope[this._reference] = this;
            this.emit('activate', prev);
            return true;
        },

        isActive: function() {
            return this._scope[this._reference] === this;
        },

        remove: function() {
            if (this._index == null)
                return false;
            Base.splice(this._scope[this._list], null, this._index, 1);
            if (this._scope[this._reference] == this)
                this._scope[this._reference] = null;
            this._scope = null;
            return true;
        },

        getView: function() {
            return this._scope.getView();
        }
    });

    var Formatter = Base.extend({
        initialize: function(precision) {
            this.precision = Base.pick(precision, 5);
            this.multiplier = Math.pow(10, this.precision);
        },

        number: function(val) {
            return this.precision < 16 ?
                Math.round(val * this.multiplier) / this.multiplier : val;
        },

        pair: function(val1, val2, separator) {
            return this.number(val1) + (separator || ',') + this.number(val2);
        },

        point: function(val, separator) {
            return this.number(val.x) + (separator || ',') + this.number(val.y);
        },

        size: function(val, separator) {
            return this.number(val.width) + (separator || ',') +
                this.number(val.height);
        },

        rectangle: function(val, separator) {
            return this.point(val, separator) + (separator || ',') +
                this.size(val, separator);
        }
    });

    Formatter.instance = new Formatter();

    var Numerical = new function() {

        var abscissas = [
            [0.5773502691896257645091488],
            [0, 0.7745966692414833770358531],
            [0.3399810435848562648026658, 0.8611363115940525752239465],
            [0, 0.5384693101056830910363144, 0.9061798459386639927976269],
            [0.2386191860831969086305017, 0.6612093864662645136613996, 0.9324695142031520278123016],
            [0, 0.4058451513773971669066064, 0.7415311855993944398638648, 0.9491079123427585245261897],
            [0.1834346424956498049394761, 0.5255324099163289858177390, 0.7966664774136267395915539, 0.9602898564975362316835609],
            [0, 0.3242534234038089290385380, 0.6133714327005903973087020, 0.8360311073266357942994298, 0.9681602395076260898355762],
            [0.1488743389816312108848260, 0.4333953941292471907992659, 0.6794095682990244062343274, 0.8650633666889845107320967, 0.9739065285171717200779640],
            [0, 0.2695431559523449723315320, 0.5190961292068118159257257, 0.7301520055740493240934163, 0.8870625997680952990751578, 0.9782286581460569928039380],
            [0.1252334085114689154724414, 0.3678314989981801937526915, 0.5873179542866174472967024, 0.7699026741943046870368938, 0.9041172563704748566784659, 0.9815606342467192506905491],
            [0, 0.2304583159551347940655281, 0.4484927510364468528779129, 0.6423493394403402206439846, 0.8015780907333099127942065, 0.9175983992229779652065478, 0.9841830547185881494728294],
            [0.1080549487073436620662447, 0.3191123689278897604356718, 0.5152486363581540919652907, 0.6872929048116854701480198, 0.8272013150697649931897947, 0.9284348836635735173363911, 0.9862838086968123388415973],
            [0, 0.2011940939974345223006283, 0.3941513470775633698972074, 0.5709721726085388475372267, 0.7244177313601700474161861, 0.8482065834104272162006483, 0.9372733924007059043077589, 0.9879925180204854284895657],
            [0.0950125098376374401853193, 0.2816035507792589132304605, 0.4580167776572273863424194, 0.6178762444026437484466718, 0.7554044083550030338951012, 0.8656312023878317438804679, 0.9445750230732325760779884, 0.9894009349916499325961542]
        ];

        var weights = [
            [1],
            [0.8888888888888888888888889, 0.5555555555555555555555556],
            [0.6521451548625461426269361, 0.3478548451374538573730639],
            [0.5688888888888888888888889, 0.4786286704993664680412915, 0.2369268850561890875142640],
            [0.4679139345726910473898703, 0.3607615730481386075698335, 0.1713244923791703450402961],
            [0.4179591836734693877551020, 0.3818300505051189449503698, 0.2797053914892766679014678, 0.1294849661688696932706114],
            [0.3626837833783619829651504, 0.3137066458778872873379622, 0.2223810344533744705443560, 0.1012285362903762591525314],
            [0.3302393550012597631645251, 0.3123470770400028400686304, 0.2606106964029354623187429, 0.1806481606948574040584720, 0.0812743883615744119718922],
            [0.2955242247147528701738930, 0.2692667193099963550912269, 0.2190863625159820439955349, 0.1494513491505805931457763, 0.0666713443086881375935688],
            [0.2729250867779006307144835, 0.2628045445102466621806889, 0.2331937645919904799185237, 0.1862902109277342514260976, 0.1255803694649046246346943, 0.0556685671161736664827537],
            [0.2491470458134027850005624, 0.2334925365383548087608499, 0.2031674267230659217490645, 0.1600783285433462263346525, 0.1069393259953184309602547, 0.0471753363865118271946160],
            [0.2325515532308739101945895, 0.2262831802628972384120902, 0.2078160475368885023125232, 0.1781459807619457382800467, 0.1388735102197872384636018, 0.0921214998377284479144218, 0.0404840047653158795200216],
            [0.2152638534631577901958764, 0.2051984637212956039659241, 0.1855383974779378137417166, 0.1572031671581935345696019, 0.1215185706879031846894148, 0.0801580871597602098056333, 0.0351194603317518630318329],
            [0.2025782419255612728806202, 0.1984314853271115764561183, 0.1861610000155622110268006, 0.1662692058169939335532009, 0.1395706779261543144478048, 0.1071592204671719350118695, 0.0703660474881081247092674, 0.0307532419961172683546284],
            [0.1894506104550684962853967, 0.1826034150449235888667637, 0.1691565193950025381893121, 0.1495959888165767320815017, 0.1246289712555338720524763, 0.0951585116824927848099251, 0.0622535239386478928628438, 0.0271524594117540948517806]
        ];

        var abs = Math.abs,
            sqrt = Math.sqrt,
            pow = Math.pow,
            log2 = Math.log2 || function(x) {
                return Math.log(x) * Math.LOG2E;
            },
            EPSILON = 1e-12,
            MACHINE_EPSILON = 1.12e-16;

        function clamp(value, min, max) {
            return value < min ? min : value > max ? max : value;
        }

        function getDiscriminant(a, b, c) {
            function split(v) {
                var x = v * 134217729,
                    y = v - x,
                    hi = y + x,
                    lo = v - hi;
                return [hi, lo];
            }

            var D = b * b - a * c,
                E = b * b + a * c;
            if (abs(D) * 3 < E) {
                var ad = split(a),
                    bd = split(b),
                    cd = split(c),
                    p = b * b,
                    dp = (bd[0] * bd[0] - p + 2 * bd[0] * bd[1]) + bd[1] * bd[1],
                    q = a * c,
                    dq = (ad[0] * cd[0] - q + ad[0] * cd[1] + ad[1] * cd[0]) +
                    ad[1] * cd[1];
                D = (p - q) + (dp - dq);
            }
            return D;
        }

        function getNormalizationFactor() {
            var norm = Math.max.apply(Math, arguments);
            return norm && (norm < 1e-8 || norm > 1e8) ?
                pow(2, -Math.round(log2(norm))) :
                0;
        }

        return {
            EPSILON: EPSILON,
            MACHINE_EPSILON: MACHINE_EPSILON,
            CURVETIME_EPSILON: 1e-8,
            GEOMETRIC_EPSILON: 1e-7,
            TRIGONOMETRIC_EPSILON: 1e-8,
            KAPPA: 4 * (sqrt(2) - 1) / 3,

            isZero: function(val) {
                return val >= -EPSILON && val <= EPSILON;
            },

            clamp: clamp,

            integrate: function(f, a, b, n) {
                var x = abscissas[n - 2],
                    w = weights[n - 2],
                    A = (b - a) * 0.5,
                    B = A + a,
                    i = 0,
                    m = (n + 1) >> 1,
                    sum = n & 1 ? w[i++] * f(B) : 0;
                while (i < m) {
                    var Ax = A * x[i];
                    sum += w[i++] * (f(B + Ax) + f(B - Ax));
                }
                return A * sum;
            },

            findRoot: function(f, df, x, a, b, n, tolerance) {
                for (var i = 0; i < n; i++) {
                    var fx = f(x),
                        dx = fx / df(x),
                        nx = x - dx;
                    if (abs(dx) < tolerance) {
                        x = nx;
                        break;
                    }
                    if (fx > 0) {
                        b = x;
                        x = nx <= a ? (a + b) * 0.5 : nx;
                    } else {
                        a = x;
                        x = nx >= b ? (a + b) * 0.5 : nx;
                    }
                }
                return clamp(x, a, b);
            },

            solveQuadratic: function(a, b, c, roots, min, max) {
                var x1, x2 = Infinity;
                if (abs(a) < EPSILON) {
                    if (abs(b) < EPSILON)
                        return abs(c) < EPSILON ? -1 : 0;
                    x1 = -c / b;
                } else {
                    b *= -0.5;
                    var D = getDiscriminant(a, b, c);
                    if (D && abs(D) < MACHINE_EPSILON) {
                        var f = getNormalizationFactor(abs(a), abs(b), abs(c));
                        if (f) {
                            a *= f;
                            b *= f;
                            c *= f;
                            D = getDiscriminant(a, b, c);
                        }
                    }
                    if (D >= -MACHINE_EPSILON) {
                        var Q = D < 0 ? 0 : sqrt(D),
                            R = b + (b < 0 ? -Q : Q);
                        if (R === 0) {
                            x1 = c / a;
                            x2 = -x1;
                        } else {
                            x1 = R / a;
                            x2 = c / R;
                        }
                    }
                }
                var count = 0,
                    boundless = min == null,
                    minB = min - EPSILON,
                    maxB = max + EPSILON;
                if (isFinite(x1) && (boundless || x1 > minB && x1 < maxB))
                    roots[count++] = boundless ? x1 : clamp(x1, min, max);
                if (x2 !== x1 &&
                    isFinite(x2) && (boundless || x2 > minB && x2 < maxB))
                    roots[count++] = boundless ? x2 : clamp(x2, min, max);
                return count;
            },

            solveCubic: function(a, b, c, d, roots, min, max) {
                var f = getNormalizationFactor(abs(a), abs(b), abs(c), abs(d)),
                    x, b1, c2, qd, q;
                if (f) {
                    a *= f;
                    b *= f;
                    c *= f;
                    d *= f;
                }

                function evaluate(x0) {
                    x = x0;
                    var tmp = a * x;
                    b1 = tmp + b;
                    c2 = b1 * x + c;
                    qd = (tmp + b1) * x + c2;
                    q = c2 * x + d;
                }

                if (abs(a) < EPSILON) {
                    a = b;
                    b1 = c;
                    c2 = d;
                    x = Infinity;
                } else if (abs(d) < EPSILON) {
                    b1 = b;
                    c2 = c;
                    x = 0;
                } else {
                    evaluate(-(b / a) / 3);
                    var t = q / a,
                        r = pow(abs(t), 1 / 3),
                        s = t < 0 ? -1 : 1,
                        td = -qd / a,
                        rd = td > 0 ? 1.324717957244746 * Math.max(r, sqrt(td)) : r,
                        x0 = x - s * rd;
                    if (x0 !== x) {
                        do {
                            evaluate(x0);
                            x0 = qd === 0 ? x : x - q / qd / (1 + MACHINE_EPSILON);
                        } while (s * x0 > s * x);
                        if (abs(a) * x * x > abs(d / x)) {
                            c2 = -d / x;
                            b1 = (c2 - c) / x;
                        }
                    }
                }
                var count = Numerical.solveQuadratic(a, b1, c2, roots, min, max),
                    boundless = min == null;
                if (isFinite(x) && (count === 0 ||
                        count > 0 && x !== roots[0] && x !== roots[1]) &&
                    (boundless || x > min - EPSILON && x < max + EPSILON))
                    roots[count++] = boundless ? x : clamp(x, min, max);
                return count;
            }
        };
    };

    var UID = {
        _id: 1,
        _pools: {},

        get: function(name) {
            if (name) {
                var pool = this._pools[name];
                if (!pool)
                    pool = this._pools[name] = {
                        _id: 1
                    };
                return pool._id++;
            } else {
                return this._id++;
            }
        }
    };

    var Point = Base.extend({
        _class: 'Point',
        _readIndex: true,

        initialize: function Point(arg0, arg1) {
            var type = typeof arg0,
                reading = this.__read,
                read = 0;
            if (type === 'number') {
                var hasY = typeof arg1 === 'number';
                this._set(arg0, hasY ? arg1 : arg0);
                if (reading)
                    read = hasY ? 2 : 1;
            } else if (type === 'undefined' || arg0 === null) {
                this._set(0, 0);
                if (reading)
                    read = arg0 === null ? 1 : 0;
            } else {
                var obj = type === 'string' ? arg0.split(/[\s,]+/) || [] : arg0;
                read = 1;
                if (Array.isArray(obj)) {
                    this._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));
                } else if ('x' in obj) {
                    this._set(obj.x || 0, obj.y || 0);
                } else if ('width' in obj) {
                    this._set(obj.width || 0, obj.height || 0);
                } else if ('angle' in obj) {
                    this._set(obj.length || 0, 0);
                    this.setAngle(obj.angle || 0);
                } else {
                    this._set(0, 0);
                    read = 0;
                }
            }
            if (reading)
                this.__read = read;
            return this;
        },

        set: '#initialize',

        _set: function(x, y) {
            this.x = x;
            this.y = y;
            return this;
        },

        equals: function(point) {
            return this === point || point &&
                (this.x === point.x && this.y === point.y ||
                    Array.isArray(point) &&
                    this.x === point[0] && this.y === point[1]) ||
                false;
        },

        clone: function() {
            return new Point(this.x, this.y);
        },

        toString: function() {
            var f = Formatter.instance;
            return '{ x: ' + f.number(this.x) + ', y: ' + f.number(this.y) + ' }';
        },

        _serialize: function(options) {
            var f = options.formatter;
            return [f.number(this.x), f.number(this.y)];
        },

        getLength: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        },

        setLength: function(length) {
            if (this.isZero()) {
                var angle = this._angle || 0;
                this._set(
                    Math.cos(angle) * length,
                    Math.sin(angle) * length
                );
            } else {
                var scale = length / this.getLength();
                if (Numerical.isZero(scale))
                    this.getAngle();
                this._set(
                    this.x * scale,
                    this.y * scale
                );
            }
        },
        getAngle: function() {
            return this.getAngleInRadians.apply(this, arguments) * 180 / Math.PI;
        },

        setAngle: function(angle) {
            this.setAngleInRadians.call(this, angle * Math.PI / 180);
        },

        getAngleInDegrees: '#getAngle',
        setAngleInDegrees: '#setAngle',

        getAngleInRadians: function() {
            if (!arguments.length) {
                return this.isZero() ?
                    this._angle || 0 :
                    this._angle = Math.atan2(this.y, this.x);
            } else {
                var point = Point.read(arguments),
                    div = this.getLength() * point.getLength();
                if (Numerical.isZero(div)) {
                    return NaN;
                } else {
                    var a = this.dot(point) / div;
                    return Math.acos(a < -1 ? -1 : a > 1 ? 1 : a);
                }
            }
        },

        setAngleInRadians: function(angle) {
            this._angle = angle;
            if (!this.isZero()) {
                var length = this.getLength();
                this._set(
                    Math.cos(angle) * length,
                    Math.sin(angle) * length
                );
            }
        },

        getQuadrant: function() {
            return this.x >= 0 ? this.y >= 0 ? 1 : 4 : this.y >= 0 ? 2 : 3;
        }
    }, {
        beans: false,

        getDirectedAngle: function() {
            var point = Point.read(arguments);
            return Math.atan2(this.cross(point), this.dot(point)) * 180 / Math.PI;
        },

        getDistance: function() {
            var point = Point.read(arguments),
                x = point.x - this.x,
                y = point.y - this.y,
                d = x * x + y * y,
                squared = Base.read(arguments);
            return squared ? d : Math.sqrt(d);
        },

        normalize: function(length) {
            if (length === undefined)
                length = 1;
            var current = this.getLength(),
                scale = current !== 0 ? length / current : 0,
                point = new Point(this.x * scale, this.y * scale);
            if (scale >= 0)
                point._angle = this._angle;
            return point;
        },

        rotate: function(angle, center) {
            if (angle === 0)
                return this.clone();
            angle = angle * Math.PI / 180;
            var point = center ? this.subtract(center) : this,
                sin = Math.sin(angle),
                cos = Math.cos(angle);
            point = new Point(
                point.x * cos - point.y * sin,
                point.x * sin + point.y * cos
            );
            return center ? point.add(center) : point;
        },

        transform: function(matrix) {
            return matrix ? matrix._transformPoint(this) : this;
        },

        add: function() {
            var point = Point.read(arguments);
            return new Point(this.x + point.x, this.y + point.y);
        },

        subtract: function() {
            var point = Point.read(arguments);
            return new Point(this.x - point.x, this.y - point.y);
        },

        multiply: function() {
            var point = Point.read(arguments);
            return new Point(this.x * point.x, this.y * point.y);
        },

        divide: function() {
            var point = Point.read(arguments);
            return new Point(this.x / point.x, this.y / point.y);
        },

        modulo: function() {
            var point = Point.read(arguments);
            return new Point(this.x % point.x, this.y % point.y);
        },

        negate: function() {
            return new Point(-this.x, -this.y);
        },

        isInside: function() {
            return Rectangle.read(arguments).contains(this);
        },

        isClose: function() {
            var point = Point.read(arguments),
                tolerance = Base.read(arguments);
            return this.getDistance(point) <= tolerance;
        },

        isCollinear: function() {
            var point = Point.read(arguments);
            return Point.isCollinear(this.x, this.y, point.x, point.y);
        },

        isColinear: '#isCollinear',

        isOrthogonal: function() {
            var point = Point.read(arguments);
            return Point.isOrthogonal(this.x, this.y, point.x, point.y);
        },

        isZero: function() {
            var isZero = Numerical.isZero;
            return isZero(this.x) && isZero(this.y);
        },

        isNaN: function() {
            return isNaN(this.x) || isNaN(this.y);
        },

        isInQuadrant: function(q) {
            return this.x * (q > 1 && q < 4 ? -1 : 1) >= 0 &&
                this.y * (q > 2 ? -1 : 1) >= 0;
        },

        dot: function() {
            var point = Point.read(arguments);
            return this.x * point.x + this.y * point.y;
        },

        cross: function() {
            var point = Point.read(arguments);
            return this.x * point.y - this.y * point.x;
        },

        project: function() {
            var point = Point.read(arguments),
                scale = point.isZero() ? 0 : this.dot(point) / point.dot(point);
            return new Point(
                point.x * scale,
                point.y * scale
            );
        },

        statics: {
            min: function() {
                var point1 = Point.read(arguments),
                    point2 = Point.read(arguments);
                return new Point(
                    Math.min(point1.x, point2.x),
                    Math.min(point1.y, point2.y)
                );
            },

            max: function() {
                var point1 = Point.read(arguments),
                    point2 = Point.read(arguments);
                return new Point(
                    Math.max(point1.x, point2.x),
                    Math.max(point1.y, point2.y)
                );
            },

            random: function() {
                return new Point(Math.random(), Math.random());
            },

            isCollinear: function(x1, y1, x2, y2) {
                return Math.abs(x1 * y2 - y1 * x2) <=
                    Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2)) *
                    1e-8;
            },

            isOrthogonal: function(x1, y1, x2, y2) {
                return Math.abs(x1 * x2 + y1 * y2) <=
                    Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2)) *
                    1e-8;
            }
        }
    }, Base.each(['round', 'ceil', 'floor', 'abs'], function(key) {
        var op = Math[key];
        this[key] = function() {
            return new Point(op(this.x), op(this.y));
        };
    }, {}));

    var LinkedPoint = Point.extend({
        initialize: function Point(x, y, owner, setter) {
            this._x = x;
            this._y = y;
            this._owner = owner;
            this._setter = setter;
        },

        _set: function(x, y, _dontNotify) {
            this._x = x;
            this._y = y;
            if (!_dontNotify)
                this._owner[this._setter](this);
            return this;
        },

        getX: function() {
            return this._x;
        },

        setX: function(x) {
            this._x = x;
            this._owner[this._setter](this);
        },

        getY: function() {
            return this._y;
        },

        setY: function(y) {
            this._y = y;
            this._owner[this._setter](this);
        },

        isSelected: function() {
            return !!(this._owner._selection & this._getSelection());
        },

        setSelected: function(selected) {
            this._owner._changeSelection(this._getSelection(), selected);
        },

        _getSelection: function() {
            return this._setter === 'setPosition' ? 4 : 0;
        }
    });

    var Size = Base.extend({
        _class: 'Size',
        _readIndex: true,

        initialize: function Size(arg0, arg1) {
            var type = typeof arg0,
                reading = this.__read,
                read = 0;
            if (type === 'number') {
                var hasHeight = typeof arg1 === 'number';
                this._set(arg0, hasHeight ? arg1 : arg0);
                if (reading)
                    read = hasHeight ? 2 : 1;
            } else if (type === 'undefined' || arg0 === null) {
                this._set(0, 0);
                if (reading)
                    read = arg0 === null ? 1 : 0;
            } else {
                var obj = type === 'string' ? arg0.split(/[\s,]+/) || [] : arg0;
                read = 1;
                if (Array.isArray(obj)) {
                    this._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));
                } else if ('width' in obj) {
                    this._set(obj.width || 0, obj.height || 0);
                } else if ('x' in obj) {
                    this._set(obj.x || 0, obj.y || 0);
                } else {
                    this._set(0, 0);
                    read = 0;
                }
            }
            if (reading)
                this.__read = read;
            return this;
        },

        set: '#initialize',

        _set: function(width, height) {
            this.width = width;
            this.height = height;
            return this;
        },

        equals: function(size) {
            return size === this || size && (this.width === size.width &&
                this.height === size.height ||
                Array.isArray(size) && this.width === size[0] &&
                this.height === size[1]) || false;
        },

        clone: function() {
            return new Size(this.width, this.height);
        },

        toString: function() {
            var f = Formatter.instance;
            return '{ width: ' + f.number(this.width) +
                ', height: ' + f.number(this.height) + ' }';
        },

        _serialize: function(options) {
            var f = options.formatter;
            return [f.number(this.width),
                f.number(this.height)
            ];
        },

        add: function() {
            var size = Size.read(arguments);
            return new Size(this.width + size.width, this.height + size.height);
        },

        subtract: function() {
            var size = Size.read(arguments);
            return new Size(this.width - size.width, this.height - size.height);
        },

        multiply: function() {
            var size = Size.read(arguments);
            return new Size(this.width * size.width, this.height * size.height);
        },

        divide: function() {
            var size = Size.read(arguments);
            return new Size(this.width / size.width, this.height / size.height);
        },

        modulo: function() {
            var size = Size.read(arguments);
            return new Size(this.width % size.width, this.height % size.height);
        },

        negate: function() {
            return new Size(-this.width, -this.height);
        },

        isZero: function() {
            var isZero = Numerical.isZero;
            return isZero(this.width) && isZero(this.height);
        },

        isNaN: function() {
            return isNaN(this.width) || isNaN(this.height);
        },

        statics: {
            min: function(size1, size2) {
                return new Size(
                    Math.min(size1.width, size2.width),
                    Math.min(size1.height, size2.height));
            },

            max: function(size1, size2) {
                return new Size(
                    Math.max(size1.width, size2.width),
                    Math.max(size1.height, size2.height));
            },

            random: function() {
                return new Size(Math.random(), Math.random());
            }
        }
    }, Base.each(['round', 'ceil', 'floor', 'abs'], function(key) {
        var op = Math[key];
        this[key] = function() {
            return new Size(op(this.width), op(this.height));
        };
    }, {}));

    var LinkedSize = Size.extend({
        initialize: function Size(width, height, owner, setter) {
            this._width = width;
            this._height = height;
            this._owner = owner;
            this._setter = setter;
        },

        _set: function(width, height, _dontNotify) {
            this._width = width;
            this._height = height;
            if (!_dontNotify)
                this._owner[this._setter](this);
            return this;
        },

        getWidth: function() {
            return this._width;
        },

        setWidth: function(width) {
            this._width = width;
            this._owner[this._setter](this);
        },

        getHeight: function() {
            return this._height;
        },

        setHeight: function(height) {
            this._height = height;
            this._owner[this._setter](this);
        }
    });

    var Rectangle = Base.extend({
        _class: 'Rectangle',
        _readIndex: true,
        beans: true,

        initialize: function Rectangle(arg0, arg1, arg2, arg3) {
            var type = typeof arg0,
                read;
            if (type === 'number') {
                this._set(arg0, arg1, arg2, arg3);
                read = 4;
            } else if (type === 'undefined' || arg0 === null) {
                this._set(0, 0, 0, 0);
                read = arg0 === null ? 1 : 0;
            } else if (arguments.length === 1) {
                if (Array.isArray(arg0)) {
                    this._set.apply(this, arg0);
                    read = 1;
                } else if (arg0.x !== undefined || arg0.width !== undefined) {
                    this._set(arg0.x || 0, arg0.y || 0,
                        arg0.width || 0, arg0.height || 0);
                    read = 1;
                } else if (arg0.from === undefined && arg0.to === undefined) {
                    this._set(0, 0, 0, 0);
                    Base.filter(this, arg0);
                    read = 1;
                }
            }
            if (read === undefined) {
                var frm = Point.readNamed(arguments, 'from'),
                    next = Base.peek(arguments),
                    x = frm.x,
                    y = frm.y,
                    width,
                    height;
                if (next && next.x !== undefined ||
                    Base.hasNamed(arguments, 'to')) {
                    var to = Point.readNamed(arguments, 'to');
                    width = to.x - x;
                    height = to.y - y;
                    if (width < 0) {
                        x = to.x;
                        width = -width;
                    }
                    if (height < 0) {
                        y = to.y;
                        height = -height;
                    }
                } else {
                    var size = Size.read(arguments);
                    width = size.width;
                    height = size.height;
                }
                this._set(x, y, width, height);
                read = arguments.__index;
                var filtered = arguments.__filtered;
                if (filtered)
                    this.__filtered = filtered;
            }
            if (this.__read)
                this.__read = read;
            return this;
        },

        set: '#initialize',

        _set: function(x, y, width, height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            return this;
        },

        clone: function() {
            return new Rectangle(this.x, this.y, this.width, this.height);
        },

        equals: function(rect) {
            var rt = Base.isPlainValue(rect) ?
                Rectangle.read(arguments) :
                rect;
            return rt === this ||
                rt && this.x === rt.x && this.y === rt.y &&
                this.width === rt.width && this.height === rt.height ||
                false;
        },

        toString: function() {
            var f = Formatter.instance;
            return '{ x: ' + f.number(this.x) +
                ', y: ' + f.number(this.y) +
                ', width: ' + f.number(this.width) +
                ', height: ' + f.number(this.height) +
                ' }';
        },

        _serialize: function(options) {
            var f = options.formatter;
            return [f.number(this.x),
                f.number(this.y),
                f.number(this.width),
                f.number(this.height)
            ];
        },

        getPoint: function(_dontLink) {
            var ctor = _dontLink ? Point : LinkedPoint;
            return new ctor(this.x, this.y, this, 'setPoint');
        },

        setPoint: function() {
            var point = Point.read(arguments);
            this.x = point.x;
            this.y = point.y;
        },

        getSize: function(_dontLink) {
            var ctor = _dontLink ? Size : LinkedSize;
            return new ctor(this.width, this.height, this, 'setSize');
        },

        _fw: 1,
        _fh: 1,

        setSize: function() {
            var size = Size.read(arguments),
                sx = this._sx,
                sy = this._sy,
                w = size.width,
                h = size.height;
            if (sx) {
                this.x += (this.width - w) * sx;
            }
            if (sy) {
                this.y += (this.height - h) * sy;
            }
            this.width = w;
            this.height = h;
            this._fw = this._fh = 1;
        },

        getLeft: function() {
            return this.x;
        },

        setLeft: function(left) {
            if (!this._fw) {
                var amount = left - this.x;
                this.width -= this._sx === 0.5 ? amount * 2 : amount;
            }
            this.x = left;
            this._sx = this._fw = 0;
        },

        getTop: function() {
            return this.y;
        },

        setTop: function(top) {
            if (!this._fh) {
                var amount = top - this.y;
                this.height -= this._sy === 0.5 ? amount * 2 : amount;
            }
            this.y = top;
            this._sy = this._fh = 0;
        },

        getRight: function() {
            return this.x + this.width;
        },

        setRight: function(right) {
            if (!this._fw) {
                var amount = right - this.x;
                this.width = this._sx === 0.5 ? amount * 2 : amount;
            }
            this.x = right - this.width;
            this._sx = 1;
            this._fw = 0;
        },

        getBottom: function() {
            return this.y + this.height;
        },

        setBottom: function(bottom) {
            if (!this._fh) {
                var amount = bottom - this.y;
                this.height = this._sy === 0.5 ? amount * 2 : amount;
            }
            this.y = bottom - this.height;
            this._sy = 1;
            this._fh = 0;
        },

        getCenterX: function() {
            return this.x + this.width / 2;
        },

        setCenterX: function(x) {
            if (this._fw || this._sx === 0.5) {
                this.x = x - this.width / 2;
            } else {
                if (this._sx) {
                    this.x += (x - this.x) * 2 * this._sx;
                }
                this.width = (x - this.x) * 2;
            }
            this._sx = 0.5;
            this._fw = 0;
        },

        getCenterY: function() {
            return this.y + this.height / 2;
        },

        setCenterY: function(y) {
            if (this._fh || this._sy === 0.5) {
                this.y = y - this.height / 2;
            } else {
                if (this._sy) {
                    this.y += (y - this.y) * 2 * this._sy;
                }
                this.height = (y - this.y) * 2;
            }
            this._sy = 0.5;
            this._fh = 0;
        },

        getCenter: function(_dontLink) {
            var ctor = _dontLink ? Point : LinkedPoint;
            return new ctor(this.getCenterX(), this.getCenterY(), this, 'setCenter');
        },

        setCenter: function() {
            var point = Point.read(arguments);
            this.setCenterX(point.x);
            this.setCenterY(point.y);
            return this;
        },

        getArea: function() {
            return this.width * this.height;
        },

        isEmpty: function() {
            return this.width === 0 || this.height === 0;
        },

        contains: function(arg) {
            return arg && arg.width !== undefined ||
                (Array.isArray(arg) ? arg : arguments).length === 4 ?
                this._containsRectangle(Rectangle.read(arguments)) :
                this._containsPoint(Point.read(arguments));
        },

        _containsPoint: function(point) {
            var x = point.x,
                y = point.y;
            return x >= this.x && y >= this.y &&
                x <= this.x + this.width &&
                y <= this.y + this.height;
        },

        _containsRectangle: function(rect) {
            var x = rect.x,
                y = rect.y;
            return x >= this.x && y >= this.y &&
                x + rect.width <= this.x + this.width &&
                y + rect.height <= this.y + this.height;
        },

        intersects: function() {
            var rect = Rectangle.read(arguments),
                epsilon = Base.read(arguments) || 0;
            return rect.x + rect.width > this.x - epsilon &&
                rect.y + rect.height > this.y - epsilon &&
                rect.x < this.x + this.width + epsilon &&
                rect.y < this.y + this.height + epsilon;
        },

        intersect: function() {
            var rect = Rectangle.read(arguments),
                x1 = Math.max(this.x, rect.x),
                y1 = Math.max(this.y, rect.y),
                x2 = Math.min(this.x + this.width, rect.x + rect.width),
                y2 = Math.min(this.y + this.height, rect.y + rect.height);
            return new Rectangle(x1, y1, x2 - x1, y2 - y1);
        },

        unite: function() {
            var rect = Rectangle.read(arguments),
                x1 = Math.min(this.x, rect.x),
                y1 = Math.min(this.y, rect.y),
                x2 = Math.max(this.x + this.width, rect.x + rect.width),
                y2 = Math.max(this.y + this.height, rect.y + rect.height);
            return new Rectangle(x1, y1, x2 - x1, y2 - y1);
        },

        include: function() {
            var point = Point.read(arguments);
            var x1 = Math.min(this.x, point.x),
                y1 = Math.min(this.y, point.y),
                x2 = Math.max(this.x + this.width, point.x),
                y2 = Math.max(this.y + this.height, point.y);
            return new Rectangle(x1, y1, x2 - x1, y2 - y1);
        },

        expand: function() {
            var amount = Size.read(arguments),
                hor = amount.width,
                ver = amount.height;
            return new Rectangle(this.x - hor / 2, this.y - ver / 2,
                this.width + hor, this.height + ver);
        },

        scale: function(hor, ver) {
            return this.expand(this.width * hor - this.width,
                this.height * (ver === undefined ? hor : ver) - this.height);
        }
    }, Base.each([
            ['Top', 'Left'],
            ['Top', 'Right'],
            ['Bottom', 'Left'],
            ['Bottom', 'Right'],
            ['Left', 'Center'],
            ['Top', 'Center'],
            ['Right', 'Center'],
            ['Bottom', 'Center']
        ],
        function(parts, index) {
            var part = parts.join(''),
                xFirst = /^[RL]/.test(part);
            if (index >= 4)
                parts[1] += xFirst ? 'Y' : 'X';
            var x = parts[xFirst ? 0 : 1],
                y = parts[xFirst ? 1 : 0],
                getX = 'get' + x,
                getY = 'get' + y,
                setX = 'set' + x,
                setY = 'set' + y,
                get = 'get' + part,
                set = 'set' + part;
            this[get] = function(_dontLink) {
                var ctor = _dontLink ? Point : LinkedPoint;
                return new ctor(this[getX](), this[getY](), this, set);
            };
            this[set] = function() {
                var point = Point.read(arguments);
                this[setX](point.x);
                this[setY](point.y);
            };
        }, {
            beans: true
        }
    ));

    var LinkedRectangle = Rectangle.extend({
            initialize: function Rectangle(x, y, width, height, owner, setter) {
                this._set(x, y, width, height, true);
                this._owner = owner;
                this._setter = setter;
            },

            _set: function(x, y, width, height, _dontNotify) {
                this._x = x;
                this._y = y;
                this._width = width;
                this._height = height;
                if (!_dontNotify)
                    this._owner[this._setter](this);
                return this;
            }
        },
        new function() {
            var proto = Rectangle.prototype;

            return Base.each(['x', 'y', 'width', 'height'], function(key) {
                var part = Base.capitalize(key),
                    internal = '_' + key;
                this['get' + part] = function() {
                    return this[internal];
                };

                this['set' + part] = function(value) {
                    this[internal] = value;
                    if (!this._dontNotify)
                        this._owner[this._setter](this);
                };
            }, Base.each(['Point', 'Size', 'Center',
                    'Left', 'Top', 'Right', 'Bottom', 'CenterX', 'CenterY',
                    'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',
                    'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'
                ],
                function(key) {
                    var name = 'set' + key;
                    this[name] = function() {
                        this._dontNotify = true;
                        proto[name].apply(this, arguments);
                        this._dontNotify = false;
                        this._owner[this._setter](this);
                    };
                }, {
                    isSelected: function() {
                        return !!(this._owner._selection & 2);
                    },

                    setSelected: function(selected) {
                        var owner = this._owner;
                        if (owner._changeSelection) {
                            owner._changeSelection(2, selected);
                        }
                    }
                }));
        });

    var Matrix = Base.extend({
        _class: 'Matrix',

        initialize: function Matrix(arg, _dontNotify) {
            var count = arguments.length,
                ok = true;
            if (count >= 6) {
                this._set.apply(this, arguments);
            } else if (count === 1 || count === 2) {
                if (arg instanceof Matrix) {
                    this._set(arg._a, arg._b, arg._c, arg._d, arg._tx, arg._ty,
                        _dontNotify);
                } else if (Array.isArray(arg)) {
                    this._set.apply(this,
                        _dontNotify ? arg.concat([_dontNotify]) : arg);
                } else {
                    ok = false;
                }
            } else if (!count) {
                this.reset();
            } else {
                ok = false;
            }
            if (!ok) {
                throw new Error('Unsupported matrix parameters');
            }
            return this;
        },

        set: '#initialize',

        _set: function(a, b, c, d, tx, ty, _dontNotify) {
            this._a = a;
            this._b = b;
            this._c = c;
            this._d = d;
            this._tx = tx;
            this._ty = ty;
            if (!_dontNotify)
                this._changed();
            return this;
        },

        _serialize: function(options, dictionary) {
            return Base.serialize(this.getValues(), options, true, dictionary);
        },

        _changed: function() {
            var owner = this._owner;
            if (owner) {
                if (owner._applyMatrix) {
                    owner.transform(null, true);
                } else {
                    owner._changed(9);
                }
            }
        },

        clone: function() {
            return new Matrix(this._a, this._b, this._c, this._d,
                this._tx, this._ty);
        },

        equals: function(mx) {
            return mx === this || mx && this._a === mx._a && this._b === mx._b &&
                this._c === mx._c && this._d === mx._d &&
                this._tx === mx._tx && this._ty === mx._ty;
        },

        toString: function() {
            var f = Formatter.instance;
            return '[[' + [f.number(this._a), f.number(this._c),
                    f.number(this._tx)
                ].join(', ') + '], [' +
                [f.number(this._b), f.number(this._d),
                    f.number(this._ty)
                ].join(', ') + ']]';
        },

        reset: function(_dontNotify) {
            this._a = this._d = 1;
            this._b = this._c = this._tx = this._ty = 0;
            if (!_dontNotify)
                this._changed();
            return this;
        },

        apply: function(recursively, _setApplyMatrix) {
            var owner = this._owner;
            if (owner) {
                owner.transform(null, true, Base.pick(recursively, true),
                    _setApplyMatrix);
                return this.isIdentity();
            }
            return false;
        },

        translate: function() {
            var point = Point.read(arguments),
                x = point.x,
                y = point.y;
            this._tx += x * this._a + y * this._c;
            this._ty += x * this._b + y * this._d;
            this._changed();
            return this;
        },

        scale: function() {
            var scale = Point.read(arguments),
                center = Point.read(arguments, 0, {
                    readNull: true
                });
            if (center)
                this.translate(center);
            this._a *= scale.x;
            this._b *= scale.x;
            this._c *= scale.y;
            this._d *= scale.y;
            if (center)
                this.translate(center.negate());
            this._changed();
            return this;
        },

        rotate: function(angle) {
            angle *= Math.PI / 180;
            var center = Point.read(arguments, 1),
                x = center.x,
                y = center.y,
                cos = Math.cos(angle),
                sin = Math.sin(angle),
                tx = x - x * cos + y * sin,
                ty = y - x * sin - y * cos,
                a = this._a,
                b = this._b,
                c = this._c,
                d = this._d;
            this._a = cos * a + sin * c;
            this._b = cos * b + sin * d;
            this._c = -sin * a + cos * c;
            this._d = -sin * b + cos * d;
            this._tx += tx * a + ty * c;
            this._ty += tx * b + ty * d;
            this._changed();
            return this;
        },

        shear: function() {
            var shear = Point.read(arguments),
                center = Point.read(arguments, 0, {
                    readNull: true
                });
            if (center)
                this.translate(center);
            var a = this._a,
                b = this._b;
            this._a += shear.y * this._c;
            this._b += shear.y * this._d;
            this._c += shear.x * a;
            this._d += shear.x * b;
            if (center)
                this.translate(center.negate());
            this._changed();
            return this;
        },

        skew: function() {
            var skew = Point.read(arguments),
                center = Point.read(arguments, 0, {
                    readNull: true
                }),
                toRadians = Math.PI / 180,
                shear = new Point(Math.tan(skew.x * toRadians),
                    Math.tan(skew.y * toRadians));
            return this.shear(shear, center);
        },

        append: function(mx, _dontNotify) {
            if (mx) {
                var a1 = this._a,
                    b1 = this._b,
                    c1 = this._c,
                    d1 = this._d,
                    a2 = mx._a,
                    b2 = mx._c,
                    c2 = mx._b,
                    d2 = mx._d,
                    tx2 = mx._tx,
                    ty2 = mx._ty;
                this._a = a2 * a1 + c2 * c1;
                this._c = b2 * a1 + d2 * c1;
                this._b = a2 * b1 + c2 * d1;
                this._d = b2 * b1 + d2 * d1;
                this._tx += tx2 * a1 + ty2 * c1;
                this._ty += tx2 * b1 + ty2 * d1;
                if (!_dontNotify)
                    this._changed();
            }
            return this;
        },

        prepend: function(mx, _dontNotify) {
            if (mx) {
                var a1 = this._a,
                    b1 = this._b,
                    c1 = this._c,
                    d1 = this._d,
                    tx1 = this._tx,
                    ty1 = this._ty,
                    a2 = mx._a,
                    b2 = mx._c,
                    c2 = mx._b,
                    d2 = mx._d,
                    tx2 = mx._tx,
                    ty2 = mx._ty;
                this._a = a2 * a1 + b2 * b1;
                this._c = a2 * c1 + b2 * d1;
                this._b = c2 * a1 + d2 * b1;
                this._d = c2 * c1 + d2 * d1;
                this._tx = a2 * tx1 + b2 * ty1 + tx2;
                this._ty = c2 * tx1 + d2 * ty1 + ty2;
                if (!_dontNotify)
                    this._changed();
            }
            return this;
        },

        appended: function(mx) {
            return this.clone().append(mx);
        },

        prepended: function(mx) {
            return this.clone().prepend(mx);
        },

        invert: function() {
            var a = this._a,
                b = this._b,
                c = this._c,
                d = this._d,
                tx = this._tx,
                ty = this._ty,
                det = a * d - b * c,
                res = null;
            if (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {
                this._a = d / det;
                this._b = -b / det;
                this._c = -c / det;
                this._d = a / det;
                this._tx = (c * ty - d * tx) / det;
                this._ty = (b * tx - a * ty) / det;
                res = this;
            }
            return res;
        },

        inverted: function() {
            return this.clone().invert();
        },

        concatenate: '#append',
        preConcatenate: '#prepend',
        chain: '#appended',

        _shiftless: function() {
            return new Matrix(this._a, this._b, this._c, this._d, 0, 0);
        },

        _orNullIfIdentity: function() {
            return this.isIdentity() ? null : this;
        },

        isIdentity: function() {
            return this._a === 1 && this._b === 0 && this._c === 0 && this._d === 1 &&
                this._tx === 0 && this._ty === 0;
        },

        isInvertible: function() {
            var det = this._a * this._d - this._c * this._b;
            return det && !isNaN(det) && isFinite(this._tx) && isFinite(this._ty);
        },

        isSingular: function() {
            return !this.isInvertible();
        },

        transform: function(src, dst, count) {
            return arguments.length < 3 ?
                this._transformPoint(Point.read(arguments)) :
                this._transformCoordinates(src, dst, count);
        },

        _transformPoint: function(point, dest, _dontNotify) {
            var x = point.x,
                y = point.y;
            if (!dest)
                dest = new Point();
            return dest._set(
                x * this._a + y * this._c + this._tx,
                x * this._b + y * this._d + this._ty,
                _dontNotify);
        },

        _transformCoordinates: function(src, dst, count) {
            for (var i = 0, max = 2 * count; i < max; i += 2) {
                var x = src[i],
                    y = src[i + 1];
                dst[i] = x * this._a + y * this._c + this._tx;
                dst[i + 1] = x * this._b + y * this._d + this._ty;
            }
            return dst;
        },

        _transformCorners: function(rect) {
            var x1 = rect.x,
                y1 = rect.y,
                x2 = x1 + rect.width,
                y2 = y1 + rect.height,
                coords = [x1, y1, x2, y1, x2, y2, x1, y2];
            return this._transformCoordinates(coords, coords, 4);
        },

        _transformBounds: function(bounds, dest, _dontNotify) {
            var coords = this._transformCorners(bounds),
                min = coords.slice(0, 2),
                max = min.slice();
            for (var i = 2; i < 8; i++) {
                var val = coords[i],
                    j = i & 1;
                if (val < min[j]) {
                    min[j] = val;
                } else if (val > max[j]) {
                    max[j] = val;
                }
            }
            if (!dest)
                dest = new Rectangle();
            return dest._set(min[0], min[1], max[0] - min[0], max[1] - min[1],
                _dontNotify);
        },

        inverseTransform: function() {
            return this._inverseTransform(Point.read(arguments));
        },

        _inverseTransform: function(point, dest, _dontNotify) {
            var a = this._a,
                b = this._b,
                c = this._c,
                d = this._d,
                tx = this._tx,
                ty = this._ty,
                det = a * d - b * c,
                res = null;
            if (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {
                var x = point.x - this._tx,
                    y = point.y - this._ty;
                if (!dest)
                    dest = new Point();
                res = dest._set(
                    (x * d - y * c) / det,
                    (y * a - x * b) / det,
                    _dontNotify);
            }
            return res;
        },

        decompose: function() {
            var a = this._a,
                b = this._b,
                c = this._c,
                d = this._d,
                det = a * d - b * c,
                sqrt = Math.sqrt,
                atan2 = Math.atan2,
                degrees = 180 / Math.PI,
                rotate,
                scale,
                skew;
            if (a !== 0 || b !== 0) {
                var r = sqrt(a * a + b * b);
                rotate = Math.acos(a / r) * (b > 0 ? 1 : -1);
                scale = [r, det / r];
                skew = [atan2(a * c + b * d, r * r), 0];
            } else if (c !== 0 || d !== 0) {
                var s = sqrt(c * c + d * d);
                rotate = Math.asin(c / s) * (d > 0 ? 1 : -1);
                scale = [det / s, s];
                skew = [0, atan2(a * c + b * d, s * s)];
            } else {
                rotate = 0;
                skew = scale = [0, 0];
            }
            return {
                translation: this.getTranslation(),
                rotation: rotate * degrees,
                scaling: new Point(scale),
                skewing: new Point(skew[0] * degrees, skew[1] * degrees)
            };
        },

        getValues: function() {
            return [this._a, this._b, this._c, this._d, this._tx, this._ty];
        },

        getTranslation: function() {
            return new Point(this._tx, this._ty);
        },

        getScaling: function() {
            return (this.decompose() || {}).scaling;
        },

        getRotation: function() {
            return (this.decompose() || {}).rotation;
        },

        applyToContext: function(ctx) {
            if (!this.isIdentity()) {
                ctx.transform(this._a, this._b, this._c, this._d,
                    this._tx, this._ty);
            }
        }
    }, Base.each(['a', 'b', 'c', 'd', 'tx', 'ty'], function(key) {
        var part = Base.capitalize(key),
            prop = '_' + key;
        this['get' + part] = function() {
            return this[prop];
        };
        this['set' + part] = function(value) {
            this[prop] = value;
            this._changed();
        };
    }, {}));

    var Line = Base.extend({
        _class: 'Line',

        initialize: function Line(arg0, arg1, arg2, arg3, arg4) {
            var asVector = false;
            if (arguments.length >= 4) {
                this._px = arg0;
                this._py = arg1;
                this._vx = arg2;
                this._vy = arg3;
                asVector = arg4;
            } else {
                this._px = arg0.x;
                this._py = arg0.y;
                this._vx = arg1.x;
                this._vy = arg1.y;
                asVector = arg2;
            }
            if (!asVector) {
                this._vx -= this._px;
                this._vy -= this._py;
            }
        },

        getPoint: function() {
            return new Point(this._px, this._py);
        },

        getVector: function() {
            return new Point(this._vx, this._vy);
        },

        getLength: function() {
            return this.getVector().getLength();
        },

        intersect: function(line, isInfinite) {
            return Line.intersect(
                this._px, this._py, this._vx, this._vy,
                line._px, line._py, line._vx, line._vy,
                true, isInfinite);
        },

        getSide: function(point, isInfinite) {
            return Line.getSide(
                this._px, this._py, this._vx, this._vy,
                point.x, point.y, true, isInfinite);
        },

        getDistance: function(point) {
            return Math.abs(this.getSignedDistance(point));
        },

        getSignedDistance: function(point) {
            return Line.getSignedDistance(this._px, this._py, this._vx, this._vy,
                point.x, point.y, true);
        },

        isCollinear: function(line) {
            return Point.isCollinear(this._vx, this._vy, line._vx, line._vy);
        },

        isOrthogonal: function(line) {
            return Point.isOrthogonal(this._vx, this._vy, line._vx, line._vy);
        },

        statics: {
            intersect: function(p1x, p1y, v1x, v1y, p2x, p2y, v2x, v2y, asVector,
                isInfinite) {
                if (!asVector) {
                    v1x -= p1x;
                    v1y -= p1y;
                    v2x -= p2x;
                    v2y -= p2y;
                }
                var cross = v1x * v2y - v1y * v2x;
                if (!Numerical.isZero(cross)) {
                    var dx = p1x - p2x,
                        dy = p1y - p2y,
                        u1 = (v2x * dy - v2y * dx) / cross,
                        u2 = (v1x * dy - v1y * dx) / cross,
                        epsilon = 1e-12,
                        uMin = -epsilon,
                        uMax = 1 + epsilon;
                    if (isInfinite ||
                        uMin < u1 && u1 < uMax && uMin < u2 && u2 < uMax) {
                        if (!isInfinite) {
                            u1 = u1 <= 0 ? 0 : u1 >= 1 ? 1 : u1;
                        }
                        return new Point(
                            p1x + u1 * v1x,
                            p1y + u1 * v1y);
                    }
                }
            },

            getSide: function(px, py, vx, vy, x, y, asVector, isInfinite) {
                if (!asVector) {
                    vx -= px;
                    vy -= py;
                }
                var v2x = x - px,
                    v2y = y - py,
                    ccw = v2x * vy - v2y * vx;
                if (!isInfinite && Numerical.isZero(ccw)) {
                    ccw = (v2x * vx + v2x * vx) / (vx * vx + vy * vy);
                    if (ccw >= 0 && ccw <= 1)
                        ccw = 0;
                }
                return ccw < 0 ? -1 : ccw > 0 ? 1 : 0;
            },

            getSignedDistance: function(px, py, vx, vy, x, y, asVector) {
                if (!asVector) {
                    vx -= px;
                    vy -= py;
                }
                return vx === 0 ? vy > 0 ? x - px : px - x :
                    vy === 0 ? vx < 0 ? y - py : py - y :
                    ((x - px) * vy - (y - py) * vx) / Math.sqrt(vx * vx + vy * vy);
            },

            getDistance: function(px, py, vx, vy, x, y, asVector) {
                return Math.abs(
                    Line.getSignedDistance(px, py, vx, vy, x, y, asVector));
            }
        }
    });

    var Project = PaperScopeItem.extend({
        _class: 'Project',
        _list: 'projects',
        _reference: 'project',
        _compactSerialize: true,

        initialize: function Project(element) {
            PaperScopeItem.call(this, true);
            this._children = [];
            this._namedChildren = {};
            this._activeLayer = null;
            this._currentStyle = new Style(null, null, this);
            this._view = View.create(this,
                element || CanvasProvider.getCanvas(1, 1));
            this._selectionItems = {};
            this._selectionCount = 0;
            this._updateVersion = 0;
        },

        _serialize: function(options, dictionary) {
            return Base.serialize(this._children, options, true, dictionary);
        },

        _changed: function(flags, item) {
            if (flags & 1) {
                var view = this._view;
                if (view) {
                    view._needsUpdate = true;
                    if (!view._requested && view._autoUpdate)
                        view.requestUpdate();
                }
            }
            var changes = this._changes;
            if (changes && item) {
                var changesById = this._changesById,
                    id = item._id,
                    entry = changesById[id];
                if (entry) {
                    entry.flags |= flags;
                } else {
                    changes.push(changesById[id] = {
                        item: item,
                        flags: flags
                    });
                }
            }
        },

        clear: function() {
            var children = this._children;
            for (var i = children.length - 1; i >= 0; i--)
                children[i].remove();
        },

        isEmpty: function() {
            return !this._children.length;
        },

        remove: function remove() {
            if (!remove.base.call(this))
                return false;
            if (this._view)
                this._view.remove();
            return true;
        },

        getView: function() {
            return this._view;
        },

        getCurrentStyle: function() {
            return this._currentStyle;
        },

        setCurrentStyle: function(style) {
            this._currentStyle.set(style);
        },

        getIndex: function() {
            return this._index;
        },

        getOptions: function() {
            return this._scope.settings;
        },

        getLayers: function() {
            return this._children;
        },

        getActiveLayer: function() {
            return this._activeLayer || new Layer({
                project: this,
                insert: true
            });
        },

        getSymbolDefinitions: function() {
            var definitions = [],
                ids = {};
            this.getItems({
                class: SymbolItem,
                match: function(item) {
                    var definition = item._definition,
                        id = definition._id;
                    if (!ids[id]) {
                        ids[id] = true;
                        definitions.push(definition);
                    }
                    return false;
                }
            });
            return definitions;
        },

        getSymbols: 'getSymbolDefinitions',

        getSelectedItems: function() {
            var selectionItems = this._selectionItems,
                items = [];
            for (var id in selectionItems) {
                var item = selectionItems[id],
                    selection = item._selection;
                if ((selection & 1) && item.isInserted()) {
                    items.push(item);
                } else if (!selection) {
                    this._updateSelection(item);
                }
            }
            return items;
        },

        _updateSelection: function(item) {
            var id = item._id,
                selectionItems = this._selectionItems;
            if (item._selection) {
                if (selectionItems[id] !== item) {
                    this._selectionCount++;
                    selectionItems[id] = item;
                }
            } else if (selectionItems[id] === item) {
                this._selectionCount--;
                delete selectionItems[id];
            }
        },

        selectAll: function() {
            var children = this._children;
            for (var i = 0, l = children.length; i < l; i++)
                children[i].setFullySelected(true);
        },

        deselectAll: function() {
            var selectionItems = this._selectionItems;
            for (var i in selectionItems)
                selectionItems[i].setFullySelected(false);
        },

        addLayer: function(layer) {
            return this.insertLayer(undefined, layer);
        },

        insertLayer: function(index, layer) {
            if (layer instanceof Layer) {
                layer._remove(false, true);
                Base.splice(this._children, [layer], index, 0);
                layer._setProject(this, true);
                var name = layer._name;
                if (name)
                    layer.setName(name);
                if (this._changes)
                    layer._changed(5);
                if (!this._activeLayer)
                    this._activeLayer = layer;
            } else {
                layer = null;
            }
            return layer;
        },

        _insertItem: function(index, item, _created) {
            item = this.insertLayer(index, item) ||
                (this._activeLayer || this._insertItem(undefined,
                    new Layer(Item.NO_INSERT), true))
                .insertChild(index, item);
            if (_created && item.activate)
                item.activate();
            return item;
        },

        getItems: function(options) {
            return Item._getItems(this, options);
        },

        getItem: function(options) {
            return Item._getItems(this, options, null, null, true)[0] || null;
        },

        importJSON: function(json) {
            this.activate();
            var layer = this._activeLayer;
            return Base.importJSON(json, layer && layer.isEmpty() && layer);
        },

        removeOn: function(type) {
            var sets = this._removeSets;
            if (sets) {
                if (type === 'mouseup')
                    sets.mousedrag = null;
                var set = sets[type];
                if (set) {
                    for (var id in set) {
                        var item = set[id];
                        for (var key in sets) {
                            var other = sets[key];
                            if (other && other != set)
                                delete other[item._id];
                        }
                        item.remove();
                    }
                    sets[type] = null;
                }
            }
        },

        draw: function(ctx, matrix, pixelRatio) {
            this._updateVersion++;
            ctx.save();
            matrix.applyToContext(ctx);
            var children = this._children,
                param = new Base({
                    offset: new Point(0, 0),
                    pixelRatio: pixelRatio,
                    viewMatrix: matrix.isIdentity() ? null : matrix,
                    matrices: [new Matrix()],
                    updateMatrix: true
                });
            for (var i = 0, l = children.length; i < l; i++) {
                children[i].draw(ctx, param);
            }
            ctx.restore();

            if (this._selectionCount > 0) {
                ctx.save();
                ctx.strokeWidth = 1;
                var items = this._selectionItems,
                    size = this._scope.settings.handleSize,
                    version = this._updateVersion;
                for (var id in items) {
                    items[id]._drawSelection(ctx, matrix, size, items, version);
                }
                ctx.restore();
            }
        }
    });

    var Item = Base.extend(Emitter, {
            statics: {
                extend: function extend(src) {
                    if (src._serializeFields)
                        src._serializeFields = Base.set({},
                            this.prototype._serializeFields, src._serializeFields);
                    return extend.base.apply(this, arguments);
                },

                NO_INSERT: {
                    insert: false
                }
            },

            _class: 'Item',
            _name: null,
            _applyMatrix: true,
            _canApplyMatrix: true,
            _canScaleStroke: false,
            _pivot: null,
            _visible: true,
            _blendMode: 'normal',
            _opacity: 1,
            _locked: false,
            _guide: false,
            _clipMask: false,
            _selection: 0,
            _selectBounds: true,
            _selectChildren: false,
            _serializeFields: {
                name: null,
                applyMatrix: null,
                matrix: new Matrix(),
                pivot: null,
                visible: true,
                blendMode: 'normal',
                opacity: 1,
                locked: false,
                guide: false,
                clipMask: false,
                selected: false,
                data: {}
            },
            _prioritize: ['applyMatrix']
        },
        new function() {
            var handlers = ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onClick',
                'onDoubleClick', 'onMouseMove', 'onMouseEnter', 'onMouseLeave'
            ];
            return Base.each(handlers,
                function(name) {
                    this._events[name] = {
                        install: function(type) {
                            this.getView()._countItemEvent(type, 1);
                        },

                        uninstall: function(type) {
                            this.getView()._countItemEvent(type, -1);
                        }
                    };
                }, {
                    _events: {
                        onFrame: {
                            install: function() {
                                this.getView()._animateItem(this, true);
                            },

                            uninstall: function() {
                                this.getView()._animateItem(this, false);
                            }
                        },

                        onLoad: {},
                        onError: {}
                    },
                    statics: {
                        _itemHandlers: handlers
                    }
                }
            );
        }, {
            initialize: function Item() {},

            _initialize: function(props, point) {
                var hasProps = props && Base.isPlainObject(props),
                    internal = hasProps && props.internal === true,
                    matrix = this._matrix = new Matrix(),
                    project = hasProps && props.project || paper.project,
                    settings = paper.settings;
                this._id = internal ? null : UID.get();
                this._parent = this._index = null;
                this._applyMatrix = this._canApplyMatrix && settings.applyMatrix;
                if (point)
                    matrix.translate(point);
                matrix._owner = this;
                this._style = new Style(project._currentStyle, this, project);
                if (internal || hasProps && props.insert == false ||
                    !settings.insertItems && !(hasProps && props.insert === true)) {
                    this._setProject(project);
                } else {
                    (hasProps && props.parent || project)
                    ._insertItem(undefined, this, true);
                }
                if (hasProps && props !== Item.NO_INSERT) {
                    this.set(props, {
                        internal: true,
                        insert: true,
                        project: true,
                        parent: true
                    });
                }
                return hasProps;
            },

            _serialize: function(options, dictionary) {
                var props = {},
                    that = this;

                function serialize(fields) {
                    for (var key in fields) {
                        var value = that[key];
                        if (!Base.equals(value, key === 'leading' ?
                                fields.fontSize * 1.2 : fields[key])) {
                            props[key] = Base.serialize(value, options,
                                key !== 'data', dictionary);
                        }
                    }
                }

                serialize(this._serializeFields);
                if (!(this instanceof Group))
                    serialize(this._style._defaults);
                return [this._class, props];
            },

            _changed: function(flags) {
                var symbol = this._symbol,
                    cacheParent = this._parent || symbol,
                    project = this._project;
                if (flags & 8) {
                    this._bounds = this._position = this._decomposed =
                        this._globalMatrix = undefined;
                }
                if (cacheParent &&
                    (flags & 40)) {
                    Item._clearBoundsCache(cacheParent);
                }
                if (flags & 2) {
                    Item._clearBoundsCache(this);
                }
                if (project)
                    project._changed(flags, this);
                if (symbol)
                    symbol._changed(flags);
            },

            getId: function() {
                return this._id;
            },

            getName: function() {
                return this._name;
            },

            setName: function(name) {

                if (this._name)
                    this._removeNamed();
                if (name === (+name) + '')
                    throw new Error(
                        'Names consisting only of numbers are not supported.');
                var owner = this._getOwner();
                if (name && owner) {
                    var children = owner._children,
                        namedChildren = owner._namedChildren;
                    (namedChildren[name] = namedChildren[name] || []).push(this);
                    if (!(name in children))
                        children[name] = this;
                }
                this._name = name || undefined;
                this._changed(128);
            },

            getStyle: function() {
                return this._style;
            },

            setStyle: function(style) {
                this.getStyle().set(style);
            }
        }, Base.each(['locked', 'visible', 'blendMode', 'opacity', 'guide'],
            function(name) {
                var part = Base.capitalize(name),
                    key = '_' + name,
                    flags = {
                        locked: 128,
                        visible: 137
                    };
                this['get' + part] = function() {
                    return this[key];
                };
                this['set' + part] = function(value) {
                    if (value != this[key]) {
                        this[key] = value;
                        this._changed(flags[name] || 129);
                    }
                };
            }, {}), {
            beans: true,

            getSelection: function() {
                return this._selection;
            },

            setSelection: function(selection) {
                if (selection !== this._selection) {
                    this._selection = selection;
                    var project = this._project;
                    if (project) {
                        project._updateSelection(this);
                        this._changed(129);
                    }
                }
            },

            _changeSelection: function(flag, selected) {
                var selection = this._selection;
                this.setSelection(selected ? selection | flag : selection & ~flag);
            },

            isSelected: function() {
                if (this._selectChildren) {
                    var children = this._children;
                    for (var i = 0, l = children.length; i < l; i++)
                        if (children[i].isSelected())
                            return true;
                }
                return !!(this._selection & 1);
            },

            setSelected: function(selected) {
                if (this._selectChildren) {
                    var children = this._children;
                    for (var i = 0, l = children.length; i < l; i++)
                        children[i].setSelected(selected);
                }
                this._changeSelection(1, selected);
            },

            isFullySelected: function() {
                var children = this._children,
                    selected = !!(this._selection & 1);
                if (children && selected) {
                    for (var i = 0, l = children.length; i < l; i++)
                        if (!children[i].isFullySelected())
                            return false;
                    return true;
                }
                return selected;
            },

            setFullySelected: function(selected) {
                var children = this._children;
                if (children) {
                    for (var i = 0, l = children.length; i < l; i++)
                        children[i].setFullySelected(selected);
                }
                this._changeSelection(1, selected);
            },

            isClipMask: function() {
                return this._clipMask;
            },

            setClipMask: function(clipMask) {
                if (this._clipMask != (clipMask = !!clipMask)) {
                    this._clipMask = clipMask;
                    if (clipMask) {
                        this.setFillColor(null);
                        this.setStrokeColor(null);
                    }
                    this._changed(129);
                    if (this._parent)
                        this._parent._changed(1024);
                }
            },

            getData: function() {
                if (!this._data)
                    this._data = {};
                return this._data;
            },

            setData: function(data) {
                this._data = data;
            },

            getPosition: function(_dontLink) {
                var position = this._position,
                    ctor = _dontLink ? Point : LinkedPoint;
                if (!position) {
                    var pivot = this._pivot;
                    position = this._position = pivot ?
                        this._matrix._transformPoint(pivot) :
                        this.getBounds().getCenter(true);
                }
                return new ctor(position.x, position.y, this, 'setPosition');
            },

            setPosition: function() {
                this.translate(Point.read(arguments).subtract(this.getPosition(true)));
            },

            getPivot: function() {
                var pivot = this._pivot;
                return pivot ?
                    new LinkedPoint(pivot.x, pivot.y, this, 'setPivot') :
                    null;
            },

            setPivot: function() {
                this._pivot = Point.read(arguments, 0, {
                    clone: true,
                    readNull: true
                });
                this._position = undefined;
            }
        }, Base.each({
                getStrokeBounds: {
                    stroke: true
                },
                getHandleBounds: {
                    handle: true
                },
                getInternalBounds: {
                    internal: true
                }
            },
            function(options, key) {
                this[key] = function(matrix) {
                    return this.getBounds(matrix, options);
                };
            }, {
                beans: true,

                getBounds: function(matrix, options) {
                    var hasMatrix = options || matrix instanceof Matrix,
                        opts = Base.set({}, hasMatrix ? options : matrix,
                            this._boundsOptions);
                    if (!opts.stroke || this.getStrokeScaling())
                        opts.cacheItem = this;
                    var rect = this._getCachedBounds(hasMatrix && matrix, opts).rect;
                    return !arguments.length ?
                        new LinkedRectangle(rect.x, rect.y, rect.width, rect.height,
                            this, 'setBounds') :
                        rect;
                },

                setBounds: function() {
                    var rect = Rectangle.read(arguments),
                        bounds = this.getBounds(),
                        _matrix = this._matrix,
                        matrix = new Matrix(),
                        center = rect.getCenter();
                    matrix.translate(center);
                    if (rect.width != bounds.width || rect.height != bounds.height) {
                        if (!_matrix.isInvertible()) {
                            _matrix.set(_matrix._backup ||
                                new Matrix().translate(_matrix.getTranslation()));
                            bounds = this.getBounds();
                        }
                        matrix.scale(
                            bounds.width !== 0 ? rect.width / bounds.width : 0,
                            bounds.height !== 0 ? rect.height / bounds.height : 0);
                    }
                    center = bounds.getCenter();
                    matrix.translate(-center.x, -center.y);
                    this.transform(matrix);
                },

                _getBounds: function(matrix, options) {
                    var children = this._children;
                    if (!children || !children.length)
                        return new Rectangle();
                    Item._updateBoundsCache(this, options.cacheItem);
                    return Item._getBounds(children, matrix, options);
                },

                _getBoundsCacheKey: function(options, internal) {
                    return [
                        options.stroke ? 1 : 0,
                        options.handle ? 1 : 0,
                        internal ? 1 : 0
                    ].join('');
                },

                _getCachedBounds: function(matrix, options, noInternal) {
                    matrix = matrix && matrix._orNullIfIdentity();
                    var internal = options.internal && !noInternal,
                        cacheItem = options.cacheItem,
                        _matrix = internal ? null : this._matrix._orNullIfIdentity(),
                        cacheKey = cacheItem && (!matrix || matrix.equals(_matrix)) &&
                        this._getBoundsCacheKey(options, internal),
                        bounds = this._bounds;
                    Item._updateBoundsCache(this._parent || this._symbol, cacheItem);
                    if (cacheKey && bounds && cacheKey in bounds) {
                        var cached = bounds[cacheKey];
                        return {
                            rect: cached.rect.clone(),
                            nonscaling: cached.nonscaling
                        };
                    }
                    var res = this._getBounds(matrix || _matrix, options),
                        rect = res.rect || res,
                        style = this._style,
                        nonscaling = res.nonscaling || style.hasStroke() &&
                        !style.getStrokeScaling();
                    if (cacheKey) {
                        if (!bounds) {
                            this._bounds = bounds = {};
                        }
                        var cached = bounds[cacheKey] = {
                            rect: rect.clone(),
                            nonscaling: nonscaling,
                            internal: internal
                        };
                    }
                    return {
                        rect: rect,
                        nonscaling: nonscaling
                    };
                },

                _getStrokeMatrix: function(matrix, options) {
                    var parent = this.getStrokeScaling() ? null :
                        options && options.internal ? this :
                        this._parent || this._symbol && this._symbol._item,
                        mx = parent ? parent.getViewMatrix().invert() : matrix;
                    return mx && mx._shiftless();
                },

                statics: {
                    _updateBoundsCache: function(parent, item) {
                        if (parent && item) {
                            var id = item._id,
                                ref = parent._boundsCache = parent._boundsCache || {
                                    ids: {},
                                    list: []
                                };
                            if (!ref.ids[id]) {
                                ref.list.push(item);
                                ref.ids[id] = item;
                            }
                        }
                    },

                    _clearBoundsCache: function(item) {
                        var cache = item._boundsCache;
                        if (cache) {
                            item._bounds = item._position = item._boundsCache = undefined;
                            for (var i = 0, list = cache.list, l = list.length; i < l; i++) {
                                var other = list[i];
                                if (other !== item) {
                                    other._bounds = other._position = undefined;
                                    if (other._boundsCache)
                                        Item._clearBoundsCache(other);
                                }
                            }
                        }
                    },

                    _getBounds: function(items, matrix, options) {
                        var x1 = Infinity,
                            x2 = -x1,
                            y1 = x1,
                            y2 = x2,
                            nonscaling = false;
                        options = options || {};
                        for (var i = 0, l = items.length; i < l; i++) {
                            var item = items[i];
                            if (item._visible && !item.isEmpty()) {
                                var bounds = item._getCachedBounds(
                                        matrix && matrix.appended(item._matrix), options, true),
                                    rect = bounds.rect;
                                x1 = Math.min(rect.x, x1);
                                y1 = Math.min(rect.y, y1);
                                x2 = Math.max(rect.x + rect.width, x2);
                                y2 = Math.max(rect.y + rect.height, y2);
                                if (bounds.nonscaling)
                                    nonscaling = true;
                            }
                        }
                        return {
                            rect: isFinite(x1) ?
                                new Rectangle(x1, y1, x2 - x1, y2 - y1) :
                                new Rectangle(),
                            nonscaling: nonscaling
                        };
                    }
                }

            }), {
            beans: true,

            _decompose: function() {
                return this._applyMatrix ?
                    null :
                    this._decomposed || (this._decomposed = this._matrix.decompose());
            },

            getRotation: function() {
                var decomposed = this._decompose();
                return decomposed ? decomposed.rotation : 0;
            },

            setRotation: function(rotation) {
                var current = this.getRotation();
                if (current != null && rotation != null) {
                    var decomposed = this._decomposed;
                    this.rotate(rotation - current);
                    if (decomposed) {
                        decomposed.rotation = rotation;
                        this._decomposed = decomposed;
                    }
                }
            },

            getScaling: function() {
                var decomposed = this._decompose(),
                    s = decomposed && decomposed.scaling;
                return new LinkedPoint(s ? s.x : 1, s ? s.y : 1, this, 'setScaling');
            },

            setScaling: function() {
                var current = this.getScaling(),
                    scaling = Point.read(arguments, 0, {
                        clone: true,
                        readNull: true
                    });
                if (current && scaling && !current.equals(scaling)) {
                    var rotation = this.getRotation(),
                        decomposed = this._decomposed,
                        matrix = new Matrix(),
                        center = this.getPosition(true);
                    matrix.translate(center);
                    if (rotation)
                        matrix.rotate(rotation);
                    matrix.scale(scaling.x / current.x, scaling.y / current.y);
                    if (rotation)
                        matrix.rotate(-rotation);
                    matrix.translate(center.negate());
                    this.transform(matrix);
                    if (decomposed) {
                        decomposed.scaling = scaling;
                        this._decomposed = decomposed;
                    }
                }
            },

            getMatrix: function() {
                return this._matrix;
            },

            setMatrix: function() {
                var matrix = this._matrix;
                matrix.initialize.apply(matrix, arguments);
            },

            getGlobalMatrix: function(_dontClone) {
                var matrix = this._globalMatrix,
                    updateVersion = this._project._updateVersion;
                if (matrix && matrix._updateVersion !== updateVersion)
                    matrix = null;
                if (!matrix) {
                    matrix = this._globalMatrix = this._matrix.clone();
                    var parent = this._parent;
                    if (parent)
                        matrix.prepend(parent.getGlobalMatrix(true));
                    matrix._updateVersion = updateVersion;
                }
                return _dontClone ? matrix : matrix.clone();
            },

            getViewMatrix: function() {
                return this.getGlobalMatrix().prepend(this.getView()._matrix);
            },

            getApplyMatrix: function() {
                return this._applyMatrix;
            },

            setApplyMatrix: function(apply) {
                if (this._applyMatrix = this._canApplyMatrix && !!apply)
                    this.transform(null, true);
            },

            getTransformContent: '#getApplyMatrix',
            setTransformContent: '#setApplyMatrix',
        }, {
            getProject: function() {
                return this._project;
            },

            _setProject: function(project, installEvents) {
                if (this._project !== project) {
                    if (this._project)
                        this._installEvents(false);
                    this._project = project;
                    var children = this._children;
                    for (var i = 0, l = children && children.length; i < l; i++)
                        children[i]._setProject(project);
                    installEvents = true;
                }
                if (installEvents)
                    this._installEvents(true);
            },

            getView: function() {
                return this._project._view;
            },

            _installEvents: function _installEvents(install) {
                _installEvents.base.call(this, install);
                var children = this._children;
                for (var i = 0, l = children && children.length; i < l; i++)
                    children[i]._installEvents(install);
            },

            getLayer: function() {
                var parent = this;
                while (parent = parent._parent) {
                    if (parent instanceof Layer)
                        return parent;
                }
                return null;
            },

            getParent: function() {
                return this._parent;
            },

            setParent: function(item) {
                return item.addChild(this);
            },

            _getOwner: '#getParent',

            getChildren: function() {
                return this._children;
            },

            setChildren: function(items) {
                this.removeChildren();
                this.addChildren(items);
            },

            getFirstChild: function() {
                return this._children && this._children[0] || null;
            },

            getLastChild: function() {
                return this._children && this._children[this._children.length - 1] ||
                    null;
            },

            getNextSibling: function() {
                var owner = this._getOwner();
                return owner && owner._children[this._index + 1] || null;
            },

            getPreviousSibling: function() {
                var owner = this._getOwner();
                return owner && owner._children[this._index - 1] || null;
            },

            getIndex: function() {
                return this._index;
            },

            equals: function(item) {
                return item === this || item && this._class === item._class &&
                    this._style.equals(item._style) &&
                    this._matrix.equals(item._matrix) &&
                    this._locked === item._locked &&
                    this._visible === item._visible &&
                    this._blendMode === item._blendMode &&
                    this._opacity === item._opacity &&
                    this._clipMask === item._clipMask &&
                    this._guide === item._guide &&
                    this._equals(item) ||
                    false;
            },

            _equals: function(item) {
                return Base.equals(this._children, item._children);
            },

            clone: function(options) {
                var copy = new this.constructor(Item.NO_INSERT),
                    children = this._children,
                    insert = Base.pick(options ? options.insert : undefined,
                        options === undefined || options === true),
                    deep = Base.pick(options ? options.deep : undefined, true);
                if (children)
                    copy.copyAttributes(this);
                if (!children || deep)
                    copy.copyContent(this);
                if (!children)
                    copy.copyAttributes(this);
                if (insert)
                    copy.insertAbove(this);
                var name = this._name,
                    parent = this._parent;
                if (name && parent) {
                    var children = parent._children,
                        orig = name,
                        i = 1;
                    while (children[name])
                        name = orig + ' ' + (i++);
                    if (name !== orig)
                        copy.setName(name);
                }
                return copy;
            },

            copyContent: function(source) {
                var children = source._children;
                for (var i = 0, l = children && children.length; i < l; i++) {
                    this.addChild(children[i].clone(false), true);
                }
            },

            copyAttributes: function(source, excludeMatrix) {
                this.setStyle(source._style);
                var keys = ['_locked', '_visible', '_blendMode', '_opacity',
                    '_clipMask', '_guide'
                ];
                for (var i = 0, l = keys.length; i < l; i++) {
                    var key = keys[i];
                    if (source.hasOwnProperty(key))
                        this[key] = source[key];
                }
                if (!excludeMatrix)
                    this._matrix.set(source._matrix, true);
                this.setApplyMatrix(source._applyMatrix);
                this.setPivot(source._pivot);
                this.setSelection(source._selection);
                var data = source._data,
                    name = source._name;
                this._data = data ? Base.clone(data) : null;
                if (name)
                    this.setName(name);
            },

            rasterize: function(resolution, insert) {
                var bounds = this.getStrokeBounds(),
                    scale = (resolution || this.getView().getResolution()) / 72,
                    topLeft = bounds.getTopLeft().floor(),
                    bottomRight = bounds.getBottomRight().ceil(),
                    size = new Size(bottomRight.subtract(topLeft)),
                    raster = new Raster(Item.NO_INSERT);
                if (!size.isZero()) {
                    var canvas = CanvasProvider.getCanvas(size.multiply(scale)),
                        ctx = canvas.getContext('2d'),
                        matrix = new Matrix().scale(scale).translate(topLeft.negate());
                    ctx.save();
                    matrix.applyToContext(ctx);
                    this.draw(ctx, new Base({
                        matrices: [matrix]
                    }));
                    ctx.restore();
                    raster.setCanvas(canvas);
                }
                raster.transform(new Matrix().translate(topLeft.add(size.divide(2)))
                    .scale(1 / scale));
                if (insert === undefined || insert)
                    raster.insertAbove(this);
                return raster;
            },

            contains: function() {
                return !!this._contains(
                    this._matrix._inverseTransform(Point.read(arguments)));
            },

            _contains: function(point) {
                var children = this._children;
                if (children) {
                    for (var i = children.length - 1; i >= 0; i--) {
                        if (children[i].contains(point))
                            return true;
                    }
                    return false;
                }
                return point.isInside(this.getInternalBounds());
            },

            isInside: function() {
                return Rectangle.read(arguments).contains(this.getBounds());
            },

            _asPathItem: function() {
                return new Path.Rectangle({
                    rectangle: this.getInternalBounds(),
                    matrix: this._matrix,
                    insert: false,
                });
            },

            intersects: function(item, _matrix) {
                if (!(item instanceof Item))
                    return false;
                return this._asPathItem().getIntersections(item._asPathItem(), null,
                    _matrix, true).length > 0;
            }
        },
        new function() {
            function hitTest() {
                return this._hitTest(
                    Point.read(arguments),
                    HitResult.getOptions(arguments));
            }

            function hitTestAll() {
                var point = Point.read(arguments),
                    options = HitResult.getOptions(arguments),
                    all = [];
                this._hitTest(point, Base.set({
                    all: all
                }, options));
                return all;
            }

            function hitTestChildren(point, options, viewMatrix, _exclude) {
                var children = this._children;
                if (children) {
                    for (var i = children.length - 1; i >= 0; i--) {
                        var child = children[i];
                        var res = child !== _exclude && child._hitTest(point, options,
                            viewMatrix);
                        if (res && !options.all)
                            return res;
                    }
                }
                return null;
            }

            Project.inject({
                hitTest: hitTest,
                hitTestAll: hitTestAll,
                _hitTest: hitTestChildren
            });

            return {
                hitTest: hitTest,
                hitTestAll: hitTestAll,
                _hitTestChildren: hitTestChildren,
            };
        }, {

            _hitTest: function(point, options, parentViewMatrix) {
                if (this._locked || !this._visible || this._guide && !options.guides ||
                    this.isEmpty()) {
                    return null;
                }

                var matrix = this._matrix,
                    viewMatrix = parentViewMatrix ?
                    parentViewMatrix.appended(matrix) :
                    this.getGlobalMatrix().prepend(this.getView()._matrix),
                    tolerance = Math.max(options.tolerance, 1e-12),
                    tolerancePadding = options._tolerancePadding = new Size(
                        Path._getStrokePadding(tolerance,
                            matrix._shiftless().invert()));
                point = matrix._inverseTransform(point);
                if (!point || !this._children &&
                    !this.getBounds({
                        internal: true,
                        stroke: true,
                        handle: true
                    })
                    .expand(tolerancePadding.multiply(2))._containsPoint(point)) {
                    return null;
                }

                var checkSelf = !(options.guides && !this._guide ||
                        options.selected && !this.isSelected() ||
                        options.type && options.type !== Base.hyphenate(this._class) ||
                        options.class && !(this instanceof options.class)),
                    match = options.match,
                    that = this,
                    bounds,
                    res;

                function filter(hit) {
                    if (hit && match && !match(hit))
                        hit = null;
                    if (hit && options.all)
                        options.all.push(hit);
                    return hit;
                }

                function checkPoint(type, part) {
                    var pt = part ? bounds['get' + part]() : that.getPosition();
                    if (point.subtract(pt).divide(tolerancePadding).length <= 1) {
                        return new HitResult(type, that, {
                            name: part ? Base.hyphenate(part) : type,
                            point: pt
                        });
                    }
                }

                var checkPosition = options.position,
                    checkCenter = options.center,
                    checkBounds = options.bounds;
                if (checkSelf && this._parent &&
                    (checkPosition || checkCenter || checkBounds)) {
                    if (checkCenter || checkBounds) {
                        bounds = this.getInternalBounds();
                    }
                    res = checkPosition && checkPoint('position') ||
                        checkCenter && checkPoint('center', 'Center');
                    if (!res && checkBounds) {
                        var points = [
                            'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',
                            'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'
                        ];
                        for (var i = 0; i < 8 && !res; i++) {
                            res = checkPoint('bounds', points[i]);
                        }
                    }
                    res = filter(res);
                }

                if (!res) {
                    res = this._hitTestChildren(point, options, viewMatrix) ||
                        checkSelf &&
                        filter(this._hitTestSelf(point, options, viewMatrix,
                            this.getStrokeScaling() ? null :
                            viewMatrix._shiftless().invert())) ||
                        null;
                }
                if (res && res.point) {
                    res.point = matrix.transform(res.point);
                }
                return res;
            },

            _hitTestSelf: function(point, options) {
                if (options.fill && this.hasFill() && this._contains(point))
                    return new HitResult('fill', this);
            },

            matches: function(name, compare) {
                function matchObject(obj1, obj2) {
                    for (var i in obj1) {
                        if (obj1.hasOwnProperty(i)) {
                            var val1 = obj1[i],
                                val2 = obj2[i];
                            if (Base.isPlainObject(val1) && Base.isPlainObject(val2)) {
                                if (!matchObject(val1, val2))
                                    return false;
                            } else if (!Base.equals(val1, val2)) {
                                return false;
                            }
                        }
                    }
                    return true;
                }
                var type = typeof name;
                if (type === 'object') {
                    for (var key in name) {
                        if (name.hasOwnProperty(key) && !this.matches(key, name[key]))
                            return false;
                    }
                    return true;
                } else if (type === 'function') {
                    return name(this);
                } else if (name === 'match') {
                    return compare(this);
                } else {
                    var value = /^(empty|editable)$/.test(name) ?
                        this['is' + Base.capitalize(name)]() :
                        name === 'type' ?
                        Base.hyphenate(this._class) :
                        this[name];
                    if (name === 'class') {
                        if (typeof compare === 'function')
                            return this instanceof compare;
                        value = this._class;
                    }
                    if (typeof compare === 'function') {
                        return !!compare(value);
                    } else if (compare) {
                        if (compare.test) {
                            return compare.test(value);
                        } else if (Base.isPlainObject(compare)) {
                            return matchObject(compare, value);
                        }
                    }
                    return Base.equals(value, compare);
                }
            },

            getItems: function(options) {
                return Item._getItems(this, options, this._matrix);
            },

            getItem: function(options) {
                return Item._getItems(this, options, this._matrix, null, true)[0] ||
                    null;
            },

            statics: {
                _getItems: function _getItems(item, options, matrix, param, firstOnly) {
                    if (!param) {
                        var obj = typeof options === 'object' && options,
                            overlapping = obj && obj.overlapping,
                            inside = obj && obj.inside,
                            bounds = overlapping || inside,
                            rect = bounds && Rectangle.read([bounds]);
                        param = {
                            items: [],
                            recursive: obj && obj.recursive !== false,
                            inside: !!inside,
                            overlapping: !!overlapping,
                            rect: rect,
                            path: overlapping && new Path.Rectangle({
                                rectangle: rect,
                                insert: false
                            })
                        };
                        if (obj) {
                            options = Base.filter({}, options, {
                                recursive: true,
                                inside: true,
                                overlapping: true
                            });
                        }
                    }
                    var children = item._children,
                        items = param.items,
                        rect = param.rect;
                    matrix = rect && (matrix || new Matrix());
                    for (var i = 0, l = children && children.length; i < l; i++) {
                        var child = children[i],
                            childMatrix = matrix && matrix.appended(child._matrix),
                            add = true;
                        if (rect) {
                            var bounds = child.getBounds(childMatrix);
                            if (!rect.intersects(bounds))
                                continue;
                            if (!(rect.contains(bounds) ||
                                    param.overlapping && (bounds.contains(rect) ||
                                        param.path.intersects(child, childMatrix))))
                                add = false;
                        }
                        if (add && child.matches(options)) {
                            items.push(child);
                            if (firstOnly)
                                break;
                        }
                        if (param.recursive !== false) {
                            _getItems(child, options, childMatrix, param, firstOnly);
                        }
                        if (firstOnly && items.length > 0)
                            break;
                    }
                    return items;
                }
            }
        }, {

            importJSON: function(json) {
                var res = Base.importJSON(json, this);
                return res !== this ? this.addChild(res) : res;
            },

            addChild: function(item) {
                return this.insertChild(undefined, item);
            },

            insertChild: function(index, item) {
                var res = item ? this.insertChildren(index, [item]) : null;
                return res && res[0];
            },

            addChildren: function(items) {
                return this.insertChildren(this._children.length, items);
            },

            insertChildren: function(index, items) {
                var children = this._children;
                if (children && items && items.length > 0) {
                    items = Base.slice(items);
                    var inserted = {};
                    for (var i = items.length - 1; i >= 0; i--) {
                        var item = items[i],
                            id = item && item._id;
                        if (!item || inserted[id]) {
                            items.splice(i, 1);
                        } else {
                            item._remove(false, true);
                            inserted[id] = true;
                        }
                    }
                    Base.splice(children, items, index, 0);
                    var project = this._project,
                        notifySelf = project._changes;
                    for (var i = 0, l = items.length; i < l; i++) {
                        var item = items[i],
                            name = item._name;
                        item._parent = this;
                        item._setProject(project, true);
                        if (name)
                            item.setName(name);
                        if (notifySelf)
                            item._changed(5);
                    }
                    this._changed(11);
                } else {
                    items = null;
                }
                return items;
            },

            _insertItem: '#insertChild',

            _insertAt: function(item, offset) {
                var owner = item && item._getOwner(),
                    res = item !== this && owner ? this : null;
                if (res) {
                    res._remove(false, true);
                    owner._insertItem(item._index + offset, res);
                }
                return res;
            },

            insertAbove: function(item) {
                return this._insertAt(item, 1);
            },

            insertBelow: function(item) {
                return this._insertAt(item, 0);
            },

            sendToBack: function() {
                var owner = this._getOwner();
                return owner ? owner._insertItem(0, this) : null;
            },

            bringToFront: function() {
                var owner = this._getOwner();
                return owner ? owner._insertItem(undefined, this) : null;
            },

            appendTop: '#addChild',

            appendBottom: function(item) {
                return this.insertChild(0, item);
            },

            moveAbove: '#insertAbove',

            moveBelow: '#insertBelow',

            addTo: function(owner) {
                return owner._insertItem(undefined, this);
            },

            copyTo: function(owner) {
                return this.clone(false).addTo(owner);
            },

            reduce: function(options) {
                var children = this._children;
                if (children && children.length === 1) {
                    var child = children[0].reduce(options);
                    if (this._parent) {
                        child.insertAbove(this);
                        this.remove();
                    } else {
                        child.remove();
                    }
                    return child;
                }
                return this;
            },

            _removeNamed: function() {
                var owner = this._getOwner();
                if (owner) {
                    var children = owner._children,
                        namedChildren = owner._namedChildren,
                        name = this._name,
                        namedArray = namedChildren[name],
                        index = namedArray ? namedArray.indexOf(this) : -1;
                    if (index !== -1) {
                        if (children[name] == this)
                            delete children[name];
                        namedArray.splice(index, 1);
                        if (namedArray.length) {
                            children[name] = namedArray[0];
                        } else {
                            delete namedChildren[name];
                        }
                    }
                }
            },

            _remove: function(notifySelf, notifyParent) {
                var owner = this._getOwner(),
                    project = this._project,
                    index = this._index;
                if (owner) {
                    if (this._name)
                        this._removeNamed();
                    if (index != null) {
                        if (project._activeLayer === this)
                            project._activeLayer = this.getNextSibling() ||
                            this.getPreviousSibling();
                        Base.splice(owner._children, null, index, 1);
                    }
                    this._installEvents(false);
                    if (notifySelf && project._changes)
                        this._changed(5);
                    if (notifyParent)
                        owner._changed(11, this);
                    this._parent = null;
                    return true;
                }
                return false;
            },

            remove: function() {
                return this._remove(true, true);
            },

            replaceWith: function(item) {
                var ok = item && item.insertBelow(this);
                if (ok)
                    this.remove();
                return ok;
            },

            removeChildren: function(start, end) {
                if (!this._children)
                    return null;
                start = start || 0;
                end = Base.pick(end, this._children.length);
                var removed = Base.splice(this._children, null, start, end - start);
                for (var i = removed.length - 1; i >= 0; i--) {
                    removed[i]._remove(true, false);
                }
                if (removed.length > 0)
                    this._changed(11);
                return removed;
            },

            clear: '#removeChildren',

            reverseChildren: function() {
                if (this._children) {
                    this._children.reverse();
                    for (var i = 0, l = this._children.length; i < l; i++)
                        this._children[i]._index = i;
                    this._changed(11);
                }
            },

            isEmpty: function() {
                var children = this._children;
                return !children || !children.length;
            },

            isEditable: function() {
                var item = this;
                while (item) {
                    if (!item._visible || item._locked)
                        return false;
                    item = item._parent;
                }
                return true;
            },

            hasFill: function() {
                return this.getStyle().hasFill();
            },

            hasStroke: function() {
                return this.getStyle().hasStroke();
            },

            hasShadow: function() {
                return this.getStyle().hasShadow();
            },

            _getOrder: function(item) {
                function getList(item) {
                    var list = [];
                    do {
                        list.unshift(item);
                    } while (item = item._parent);
                    return list;
                }
                var list1 = getList(this),
                    list2 = getList(item);
                for (var i = 0, l = Math.min(list1.length, list2.length); i < l; i++) {
                    if (list1[i] != list2[i]) {
                        return list1[i]._index < list2[i]._index ? 1 : -1;
                    }
                }
                return 0;
            },

            hasChildren: function() {
                return this._children && this._children.length > 0;
            },

            isInserted: function() {
                return this._parent ? this._parent.isInserted() : false;
            },

            isAbove: function(item) {
                return this._getOrder(item) === -1;
            },

            isBelow: function(item) {
                return this._getOrder(item) === 1;
            },

            isParent: function(item) {
                return this._parent === item;
            },

            isChild: function(item) {
                return item && item._parent === this;
            },

            isDescendant: function(item) {
                var parent = this;
                while (parent = parent._parent) {
                    if (parent === item)
                        return true;
                }
                return false;
            },

            isAncestor: function(item) {
                return item ? item.isDescendant(this) : false;
            },

            isSibling: function(item) {
                return this._parent === item._parent;
            },

            isGroupedWith: function(item) {
                var parent = this._parent;
                while (parent) {
                    if (parent._parent &&
                        /^(Group|Layer|CompoundPath)$/.test(parent._class) &&
                        item.isDescendant(parent))
                        return true;
                    parent = parent._parent;
                }
                return false;
            },

        }, Base.each(['rotate', 'scale', 'shear', 'skew'], function(key) {
            var rotate = key === 'rotate';
            this[key] = function() {
                var value = (rotate ? Base : Point).read(arguments),
                    center = Point.read(arguments, 0, {
                        readNull: true
                    });
                return this.transform(new Matrix()[key](value,
                    center || this.getPosition(true)));
            };
        }, {
            translate: function() {
                var mx = new Matrix();
                return this.transform(mx.translate.apply(mx, arguments));
            },

            transform: function(matrix, _applyMatrix, _applyRecursively,
                _setApplyMatrix) {
                var _matrix = this._matrix,
                    transform = matrix && !matrix.isIdentity(),
                    applyMatrix = (_applyMatrix || this._applyMatrix) &&
                    ((!_matrix.isIdentity() || transform) ||
                        _applyMatrix && _applyRecursively && this._children);
                if (!transform && !applyMatrix)
                    return this;
                if (transform) {
                    if (!matrix.isInvertible() && _matrix.isInvertible())
                        _matrix._backup = _matrix.getValues();
                    _matrix.prepend(matrix, true);
                    var style = this._style,
                        fillColor = style.getFillColor(true),
                        strokeColor = style.getStrokeColor(true);
                    if (fillColor)
                        fillColor.transform(matrix);
                    if (strokeColor)
                        strokeColor.transform(matrix);
                }
                if (applyMatrix && (applyMatrix = this._transformContent(_matrix,
                        _applyRecursively, _setApplyMatrix))) {
                    var pivot = this._pivot;
                    if (pivot)
                        _matrix._transformPoint(pivot, pivot, true);
                    _matrix.reset(true);
                    if (_setApplyMatrix && this._canApplyMatrix)
                        this._applyMatrix = true;
                }
                var bounds = this._bounds,
                    position = this._position;
                if (transform || applyMatrix) {
                    this._changed(9);
                }
                var decomp = transform && bounds && matrix.decompose();
                if (decomp && decomp.skewing.isZero() && decomp.rotation % 90 === 0) {
                    for (var key in bounds) {
                        var cache = bounds[key];
                        if (cache.nonscaling) {
                            delete bounds[key];
                        } else if (applyMatrix || !cache.internal) {
                            var rect = cache.rect;
                            matrix._transformBounds(rect, rect);
                        }
                    }
                    this._bounds = bounds;
                    var cached = bounds[this._getBoundsCacheKey(
                        this._boundsOptions || {})];
                    if (cached) {
                        this._position = cached.rect.getCenter(true);
                    }
                } else if (transform && position && this._pivot) {
                    this._position = matrix._transformPoint(position, position);
                }
                return this;
            },

            _transformContent: function(matrix, applyRecursively, setApplyMatrix) {
                var children = this._children;
                if (children) {
                    for (var i = 0, l = children.length; i < l; i++)
                        children[i].transform(matrix, true, applyRecursively,
                            setApplyMatrix);
                    return true;
                }
            },

            globalToLocal: function() {
                return this.getGlobalMatrix(true)._inverseTransform(
                    Point.read(arguments));
            },

            localToGlobal: function() {
                return this.getGlobalMatrix(true)._transformPoint(
                    Point.read(arguments));
            },

            parentToLocal: function() {
                return this._matrix._inverseTransform(Point.read(arguments));
            },

            localToParent: function() {
                return this._matrix._transformPoint(Point.read(arguments));
            },

            fitBounds: function(rectangle, fill) {
                rectangle = Rectangle.read(arguments);
                var bounds = this.getBounds(),
                    itemRatio = bounds.height / bounds.width,
                    rectRatio = rectangle.height / rectangle.width,
                    scale = (fill ? itemRatio > rectRatio : itemRatio < rectRatio) ?
                    rectangle.width / bounds.width :
                    rectangle.height / bounds.height,
                    newBounds = new Rectangle(new Point(),
                        new Size(bounds.width * scale, bounds.height * scale));
                newBounds.setCenter(rectangle.getCenter());
                this.setBounds(newBounds);
            }
        }), {

            _setStyles: function(ctx, param, viewMatrix) {
                var style = this._style,
                    matrix = this._matrix;
                if (style.hasFill()) {
                    ctx.fillStyle = style.getFillColor().toCanvasStyle(ctx, matrix);
                }
                if (style.hasStroke()) {
                    ctx.strokeStyle = style.getStrokeColor().toCanvasStyle(ctx, matrix);
                    ctx.lineWidth = style.getStrokeWidth();
                    var strokeJoin = style.getStrokeJoin(),
                        strokeCap = style.getStrokeCap(),
                        miterLimit = style.getMiterLimit();
                    if (strokeJoin)
                        ctx.lineJoin = strokeJoin;
                    if (strokeCap)
                        ctx.lineCap = strokeCap;
                    if (miterLimit)
                        ctx.miterLimit = miterLimit;
                    if (paper.support.nativeDash) {
                        var dashArray = style.getDashArray(),
                            dashOffset = style.getDashOffset();
                        if (dashArray && dashArray.length) {
                            if ('setLineDash' in ctx) {
                                ctx.setLineDash(dashArray);
                                ctx.lineDashOffset = dashOffset;
                            } else {
                                ctx.mozDash = dashArray;
                                ctx.mozDashOffset = dashOffset;
                            }
                        }
                    }
                }
                if (style.hasShadow()) {
                    var pixelRatio = param.pixelRatio || 1,
                        mx = viewMatrix._shiftless().prepend(
                            new Matrix().scale(pixelRatio, pixelRatio)),
                        blur = mx.transform(new Point(style.getShadowBlur(), 0)),
                        offset = mx.transform(this.getShadowOffset());
                    ctx.shadowColor = style.getShadowColor().toCanvasStyle(ctx);
                    ctx.shadowBlur = blur.getLength();
                    ctx.shadowOffsetX = offset.x;
                    ctx.shadowOffsetY = offset.y;
                }
            },

            draw: function(ctx, param, parentStrokeMatrix) {
                var updateVersion = this._updateVersion = this._project._updateVersion;
                if (!this._visible || this._opacity === 0)
                    return;
                var matrices = param.matrices,
                    viewMatrix = param.viewMatrix,
                    matrix = this._matrix,
                    globalMatrix = matrices[matrices.length - 1].appended(matrix);
                if (!globalMatrix.isInvertible())
                    return;

                viewMatrix = viewMatrix ? viewMatrix.appended(globalMatrix) :
                    globalMatrix;

                matrices.push(globalMatrix);
                if (param.updateMatrix) {
                    globalMatrix._updateVersion = updateVersion;
                    this._globalMatrix = globalMatrix;
                }

                var blendMode = this._blendMode,
                    opacity = this._opacity,
                    normalBlend = blendMode === 'normal',
                    nativeBlend = BlendMode.nativeModes[blendMode],
                    direct = normalBlend && opacity === 1 ||
                    param.dontStart ||
                    param.clip ||
                    (nativeBlend || normalBlend && opacity < 1) &&
                    this._canComposite(),
                    pixelRatio = param.pixelRatio || 1,
                    mainCtx, itemOffset, prevOffset;
                if (!direct) {
                    var bounds = this.getStrokeBounds(viewMatrix);
                    if (!bounds.width || !bounds.height)
                        return;
                    prevOffset = param.offset;
                    itemOffset = param.offset = bounds.getTopLeft().floor();
                    mainCtx = ctx;
                    ctx = CanvasProvider.getContext(bounds.getSize().ceil().add(1)
                        .multiply(pixelRatio));
                    if (pixelRatio !== 1)
                        ctx.scale(pixelRatio, pixelRatio);
                }
                ctx.save();
                var strokeMatrix = parentStrokeMatrix ?
                    parentStrokeMatrix.appended(matrix) :
                    this._canScaleStroke && !this.getStrokeScaling(true) &&
                    viewMatrix,
                    clip = !direct && param.clipItem,
                    transform = !strokeMatrix || clip;
                if (direct) {
                    ctx.globalAlpha = opacity;
                    if (nativeBlend)
                        ctx.globalCompositeOperation = blendMode;
                } else if (transform) {
                    ctx.translate(-itemOffset.x, -itemOffset.y);
                }
                if (transform) {
                    (direct ? matrix : viewMatrix).applyToContext(ctx);
                }
                if (clip) {
                    param.clipItem.draw(ctx, param.extend({
                        clip: true
                    }));
                }
                if (strokeMatrix) {
                    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
                    var offset = param.offset;
                    if (offset)
                        ctx.translate(-offset.x, -offset.y);
                }
                this._draw(ctx, param, viewMatrix, strokeMatrix);
                ctx.restore();
                matrices.pop();
                if (param.clip && !param.dontFinish)
                    ctx.clip();
                if (!direct) {
                    BlendMode.process(blendMode, ctx, mainCtx, opacity,
                        itemOffset.subtract(prevOffset).multiply(pixelRatio));
                    CanvasProvider.release(ctx);
                    param.offset = prevOffset;
                }
            },

            _isUpdated: function(updateVersion) {
                var parent = this._parent;
                if (parent instanceof CompoundPath)
                    return parent._isUpdated(updateVersion);
                var updated = this._updateVersion === updateVersion;
                if (!updated && parent && parent._visible &&
                    parent._isUpdated(updateVersion)) {
                    this._updateVersion = updateVersion;
                    updated = true;
                }
                return updated;
            },

            _drawSelection: function(ctx, matrix, size, selectionItems, updateVersion) {
                var selection = this._selection,
                    itemSelected = selection & 1,
                    boundsSelected = selection & 2 ||
                    itemSelected && this._selectBounds,
                    positionSelected = selection & 4;
                if (!this._drawSelected)
                    itemSelected = false;
                if ((itemSelected || boundsSelected || positionSelected) &&
                    this._isUpdated(updateVersion)) {
                    var layer,
                        color = this.getSelectedColor(true) || (layer = this.getLayer()) &&
                        layer.getSelectedColor(true),
                        mx = matrix.appended(this.getGlobalMatrix(true)),
                        half = size / 2;
                    ctx.strokeStyle = ctx.fillStyle = color ?
                        color.toCanvasStyle(ctx) : '#009dec';
                    if (itemSelected)
                        this._drawSelected(ctx, mx, selectionItems);
                    if (positionSelected) {
                        var point = this.getPosition(true),
                            x = point.x,
                            y = point.y;
                        ctx.beginPath();
                        ctx.arc(x, y, half, 0, Math.PI * 2, true);
                        ctx.stroke();
                        var deltas = [
                                [0, -1],
                                [1, 0],
                                [0, 1],
                                [-1, 0]
                            ],
                            start = half,
                            end = size + 1;
                        for (var i = 0; i < 4; i++) {
                            var delta = deltas[i],
                                dx = delta[0],
                                dy = delta[1];
                            ctx.moveTo(x + dx * start, y + dy * start);
                            ctx.lineTo(x + dx * end, y + dy * end);
                            ctx.stroke();
                        }
                    }
                    if (boundsSelected) {
                        var coords = mx._transformCorners(this.getInternalBounds());
                        ctx.beginPath();
                        for (var i = 0; i < 8; i++) {
                            ctx[!i ? 'moveTo' : 'lineTo'](coords[i], coords[++i]);
                        }
                        ctx.closePath();
                        ctx.stroke();
                        for (var i = 0; i < 8; i++) {
                            ctx.fillRect(coords[i] - half, coords[++i] - half,
                                size, size);
                        }
                    }
                }
            },

            _canComposite: function() {
                return false;
            }
        }, Base.each(['down', 'drag', 'up', 'move'], function(key) {
            this['removeOn' + Base.capitalize(key)] = function() {
                var hash = {};
                hash[key] = true;
                return this.removeOn(hash);
            };
        }, {

            removeOn: function(obj) {
                for (var name in obj) {
                    if (obj[name]) {
                        var key = 'mouse' + name,
                            project = this._project,
                            sets = project._removeSets = project._removeSets || {};
                        sets[key] = sets[key] || {};
                        sets[key][this._id] = this;
                    }
                }
                return this;
            }
        }));

    var Group = Item.extend({
        _class: 'Group',
        _selectBounds: false,
        _selectChildren: true,
        _serializeFields: {
            children: []
        },

        initialize: function Group(arg) {
            this._children = [];
            this._namedChildren = {};
            if (!this._initialize(arg))
                this.addChildren(Array.isArray(arg) ? arg : arguments);
        },

        _changed: function _changed(flags) {
            _changed.base.call(this, flags);
            if (flags & 1026) {
                this._clipItem = undefined;
            }
        },

        _getClipItem: function() {
            var clipItem = this._clipItem;
            if (clipItem === undefined) {
                clipItem = null;
                var children = this._children;
                for (var i = 0, l = children.length; i < l; i++) {
                    if (children[i]._clipMask) {
                        clipItem = children[i];
                        break;
                    }
                }
                this._clipItem = clipItem;
            }
            return clipItem;
        },

        isClipped: function() {
            return !!this._getClipItem();
        },

        setClipped: function(clipped) {
            var child = this.getFirstChild();
            if (child)
                child.setClipMask(clipped);
        },

        _getBounds: function _getBounds(matrix, options) {
            var clipItem = this._getClipItem();
            return clipItem ?
                clipItem._getCachedBounds(
                    matrix && matrix.appended(clipItem._matrix),
                    Base.set({}, options, {
                        stroke: false
                    })) :
                _getBounds.base.call(this, matrix, options);
        },

        _hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {
            var clipItem = this._getClipItem();
            return (!clipItem || clipItem.contains(point)) &&
                _hitTestChildren.base.call(this, point, options, viewMatrix,
                    clipItem);
        },

        _draw: function(ctx, param) {
            var clip = param.clip,
                clipItem = !clip && this._getClipItem();
            param = param.extend({
                clipItem: clipItem,
                clip: false
            });
            if (clip) {
                ctx.beginPath();
                param.dontStart = param.dontFinish = true;
            } else if (clipItem) {
                clipItem.draw(ctx, param.extend({
                    clip: true
                }));
            }
            var children = this._children;
            for (var i = 0, l = children.length; i < l; i++) {
                var item = children[i];
                if (item !== clipItem)
                    item.draw(ctx, param);
            }
        }
    });

    var Layer = Group.extend({
        _class: 'Layer',

        initialize: function Layer() {
            Group.apply(this, arguments);
        },

        _getOwner: function() {
            return this._parent || this._index != null && this._project;
        },

        isInserted: function isInserted() {
            return this._parent ? isInserted.base.call(this) : this._index != null;
        },

        activate: function() {
            this._project._activeLayer = this;
        },

        _hitTestSelf: function() {}
    });

    var Shape = Item.extend({
            _class: 'Shape',
            _applyMatrix: false,
            _canApplyMatrix: false,
            _canScaleStroke: true,
            _serializeFields: {
                type: null,
                size: null,
                radius: null
            },

            initialize: function Shape(props, point) {
                this._initialize(props, point);
            },

            _equals: function(item) {
                return this._type === item._type &&
                    this._size.equals(item._size) &&
                    Base.equals(this._radius, item._radius);
            },

            copyContent: function(source) {
                this.setType(source._type);
                this.setSize(source._size);
                this.setRadius(source._radius);
            },

            getType: function() {
                return this._type;
            },

            setType: function(type) {
                this._type = type;
            },

            getShape: '#getType',
            setShape: '#setType',

            getSize: function() {
                var size = this._size;
                return new LinkedSize(size.width, size.height, this, 'setSize');
            },

            setSize: function() {
                var size = Size.read(arguments);
                if (!this._size) {
                    this._size = size.clone();
                } else if (!this._size.equals(size)) {
                    var type = this._type,
                        width = size.width,
                        height = size.height;
                    if (type === 'rectangle') {
                        this._radius.set(Size.min(this._radius, size.divide(2)));
                    } else if (type === 'circle') {
                        width = height = (width + height) / 2;
                        this._radius = width / 2;
                    } else if (type === 'ellipse') {
                        this._radius._set(width / 2, height / 2);
                    }
                    this._size._set(width, height);
                    this._changed(9);
                }
            },

            getRadius: function() {
                var rad = this._radius;
                return this._type === 'circle' ?
                    rad :
                    new LinkedSize(rad.width, rad.height, this, 'setRadius');
            },

            setRadius: function(radius) {
                var type = this._type;
                if (type === 'circle') {
                    if (radius === this._radius)
                        return;
                    var size = radius * 2;
                    this._radius = radius;
                    this._size._set(size, size);
                } else {
                    radius = Size.read(arguments);
                    if (!this._radius) {
                        this._radius = radius.clone();
                    } else {
                        if (this._radius.equals(radius))
                            return;
                        this._radius.set(radius);
                        if (type === 'rectangle') {
                            var size = Size.max(this._size, radius.multiply(2));
                            this._size.set(size);
                        } else if (type === 'ellipse') {
                            this._size._set(radius.width * 2, radius.height * 2);
                        }
                    }
                }
                this._changed(9);
            },

            isEmpty: function() {
                return false;
            },

            toPath: function(insert) {
                var path = new Path[Base.capitalize(this._type)]({
                    center: new Point(),
                    size: this._size,
                    radius: this._radius,
                    insert: false
                });
                path.copyAttributes(this);
                if (paper.settings.applyMatrix)
                    path.setApplyMatrix(true);
                if (insert === undefined || insert)
                    path.insertAbove(this);
                return path;
            },

            toShape: '#clone',

            _asPathItem: function() {
                return this.toPath(false);
            },

            _draw: function(ctx, param, viewMatrix, strokeMatrix) {
                var style = this._style,
                    hasFill = style.hasFill(),
                    hasStroke = style.hasStroke(),
                    dontPaint = param.dontFinish || param.clip,
                    untransformed = !strokeMatrix;
                if (hasFill || hasStroke || dontPaint) {
                    var type = this._type,
                        radius = this._radius,
                        isCircle = type === 'circle';
                    if (!param.dontStart)
                        ctx.beginPath();
                    if (untransformed && isCircle) {
                        ctx.arc(0, 0, radius, 0, Math.PI * 2, true);
                    } else {
                        var rx = isCircle ? radius : radius.width,
                            ry = isCircle ? radius : radius.height,
                            size = this._size,
                            width = size.width,
                            height = size.height;
                        if (untransformed && type === 'rectangle' && rx === 0 && ry === 0) {
                            ctx.rect(-width / 2, -height / 2, width, height);
                        } else {
                            var x = width / 2,
                                y = height / 2,
                                kappa = 1 - 0.5522847498307936,
                                cx = rx * kappa,
                                cy = ry * kappa,
                                c = [-x, -y + ry, -x, -y + cy, -x + cx, -y, -x + rx, -y,
                                    x - rx, -y,
                                    x - cx, -y,
                                    x, -y + cy,
                                    x, -y + ry,
                                    x, y - ry,
                                    x, y - cy,
                                    x - cx, y,
                                    x - rx, y, -x + rx, y, -x + cx, y, -x, y - cy, -x, y - ry
                                ];
                            if (strokeMatrix)
                                strokeMatrix.transform(c, c, 32);
                            ctx.moveTo(c[0], c[1]);
                            ctx.bezierCurveTo(c[2], c[3], c[4], c[5], c[6], c[7]);
                            if (x !== rx)
                                ctx.lineTo(c[8], c[9]);
                            ctx.bezierCurveTo(c[10], c[11], c[12], c[13], c[14], c[15]);
                            if (y !== ry)
                                ctx.lineTo(c[16], c[17]);
                            ctx.bezierCurveTo(c[18], c[19], c[20], c[21], c[22], c[23]);
                            if (x !== rx)
                                ctx.lineTo(c[24], c[25]);
                            ctx.bezierCurveTo(c[26], c[27], c[28], c[29], c[30], c[31]);
                        }
                    }
                    ctx.closePath();
                }
                if (!dontPaint && (hasFill || hasStroke)) {
                    this._setStyles(ctx, param, viewMatrix);
                    if (hasFill) {
                        ctx.fill(style.getFillRule());
                        ctx.shadowColor = 'rgba(0,0,0,0)';
                    }
                    if (hasStroke)
                        ctx.stroke();
                }
            },

            _canComposite: function() {
                return !(this.hasFill() && this.hasStroke());
            },

            _getBounds: function(matrix, options) {
                var rect = new Rectangle(this._size).setCenter(0, 0),
                    style = this._style,
                    strokeWidth = options.stroke && style.hasStroke() &&
                    style.getStrokeWidth();
                if (matrix)
                    rect = matrix._transformBounds(rect);
                return strokeWidth ?
                    rect.expand(Path._getStrokePadding(strokeWidth,
                        this._getStrokeMatrix(matrix, options))) :
                    rect;
            }
        },
        new function() {
            function getCornerCenter(that, point, expand) {
                var radius = that._radius;
                if (!radius.isZero()) {
                    var halfSize = that._size.divide(2);
                    for (var q = 1; q <= 4; q++) {
                        var dir = new Point(q > 1 && q < 4 ? -1 : 1, q > 2 ? -1 : 1),
                            corner = dir.multiply(halfSize),
                            center = corner.subtract(dir.multiply(radius)),
                            rect = new Rectangle(
                                expand ? corner.add(dir.multiply(expand)) : corner,
                                center);
                        if (rect.contains(point))
                            return {
                                point: center,
                                quadrant: q
                            };
                    }
                }
            }

            function isOnEllipseStroke(point, radius, padding, quadrant) {
                var vector = point.divide(radius);
                return (!quadrant || vector.isInQuadrant(quadrant)) &&
                    vector.subtract(vector.normalize()).multiply(radius)
                    .divide(padding).length <= 1;
            }

            return {
                _contains: function _contains(point) {
                    if (this._type === 'rectangle') {
                        var center = getCornerCenter(this, point);
                        return center ?
                            point.subtract(center.point).divide(this._radius)
                            .getLength() <= 1 :
                            _contains.base.call(this, point);
                    } else {
                        return point.divide(this.size).getLength() <= 0.5;
                    }
                },

                _hitTestSelf: function _hitTestSelf(point, options, viewMatrix,
                    strokeMatrix) {
                    var hit = false,
                        style = this._style,
                        hitStroke = options.stroke && style.hasStroke(),
                        hitFill = options.fill && style.hasFill();
                    if (hitStroke || hitFill) {
                        var type = this._type,
                            radius = this._radius,
                            strokeRadius = hitStroke ? style.getStrokeWidth() / 2 : 0,
                            strokePadding = options._tolerancePadding.add(
                                Path._getStrokePadding(strokeRadius, !style.getStrokeScaling() && strokeMatrix));
                        if (type === 'rectangle') {
                            var padding = strokePadding.multiply(2),
                                center = getCornerCenter(this, point, padding);
                            if (center) {
                                hit = isOnEllipseStroke(point.subtract(center.point),
                                    radius, strokePadding, center.quadrant);
                            } else {
                                var rect = new Rectangle(this._size).setCenter(0, 0),
                                    outer = rect.expand(padding),
                                    inner = rect.expand(padding.negate());
                                hit = outer._containsPoint(point) &&
                                    !inner._containsPoint(point);
                            }
                        } else {
                            hit = isOnEllipseStroke(point, radius, strokePadding);
                        }
                    }
                    return hit ? new HitResult(hitStroke ? 'stroke' : 'fill', this) :
                        _hitTestSelf.base.apply(this, arguments);
                }
            };
        }, {

            statics: new function() {
                function createShape(type, point, size, radius, args) {
                    var item = new Shape(Base.getNamed(args), point);
                    item._type = type;
                    item._size = size;
                    item._radius = radius;
                    return item;
                }

                return {
                    Circle: function() {
                        var center = Point.readNamed(arguments, 'center'),
                            radius = Base.readNamed(arguments, 'radius');
                        return createShape('circle', center, new Size(radius * 2), radius,
                            arguments);
                    },

                    Rectangle: function() {
                        var rect = Rectangle.readNamed(arguments, 'rectangle'),
                            radius = Size.min(Size.readNamed(arguments, 'radius'),
                                rect.getSize(true).divide(2));
                        return createShape('rectangle', rect.getCenter(true),
                            rect.getSize(true), radius, arguments);
                    },

                    Ellipse: function() {
                        var ellipse = Shape._readEllipse(arguments),
                            radius = ellipse.radius;
                        return createShape('ellipse', ellipse.center, radius.multiply(2),
                            radius, arguments);
                    },

                    _readEllipse: function(args) {
                        var center,
                            radius;
                        if (Base.hasNamed(args, 'radius')) {
                            center = Point.readNamed(args, 'center');
                            radius = Size.readNamed(args, 'radius');
                        } else {
                            var rect = Rectangle.readNamed(args, 'rectangle');
                            center = rect.getCenter(true);
                            radius = rect.getSize(true).divide(2);
                        }
                        return {
                            center: center,
                            radius: radius
                        };
                    }
                };
            }
        });

    var Raster = Item.extend({
        _class: 'Raster',
        _applyMatrix: false,
        _canApplyMatrix: false,
        _boundsOptions: {
            stroke: false,
            handle: false
        },
        _serializeFields: {
            crossOrigin: null,
            source: null
        },
        _prioritize: ['crossOrigin'],

        initialize: function Raster(object, position) {
            if (!this._initialize(object,
                    position !== undefined && Point.read(arguments, 1))) {
                var image = typeof object === 'string' ?
                    document.getElementById(object) : object;
                if (image) {
                    this.setImage(image);
                } else {
                    this.setSource(object);
                }
            }
            if (!this._size) {
                this._size = new Size();
                this._loaded = false;
            }
        },

        _equals: function(item) {
            return this.getSource() === item.getSource();
        },

        copyContent: function(source) {
            var image = source._image,
                canvas = source._canvas;
            if (image) {
                this._setImage(image);
            } else if (canvas) {
                var copyCanvas = CanvasProvider.getCanvas(source._size);
                copyCanvas.getContext('2d').drawImage(canvas, 0, 0);
                this._setImage(copyCanvas);
            }
            this._crossOrigin = source._crossOrigin;
        },

        getSize: function() {
            var size = this._size;
            return new LinkedSize(size ? size.width : 0, size ? size.height : 0,
                this, 'setSize');
        },

        setSize: function() {
            var size = Size.read(arguments);
            if (!size.equals(this._size)) {
                if (size.width > 0 && size.height > 0) {
                    var element = this.getElement();
                    this._setImage(CanvasProvider.getCanvas(size));
                    if (element)
                        this.getContext(true).drawImage(element, 0, 0,
                            size.width, size.height);
                } else {
                    if (this._canvas)
                        CanvasProvider.release(this._canvas);
                    this._size = size.clone();
                }
            }
        },

        getWidth: function() {
            return this._size ? this._size.width : 0;
        },

        setWidth: function(width) {
            this.setSize(width, this.getHeight());
        },

        getHeight: function() {
            return this._size ? this._size.height : 0;
        },

        setHeight: function(height) {
            this.setSize(this.getWidth(), height);
        },

        getLoaded: function() {
            return this._loaded;
        },

        isEmpty: function() {
            var size = this._size;
            return !size || size.width === 0 && size.height === 0;
        },

        getResolution: function() {
            var matrix = this._matrix,
                orig = new Point(0, 0).transform(matrix),
                u = new Point(1, 0).transform(matrix).subtract(orig),
                v = new Point(0, 1).transform(matrix).subtract(orig);
            return new Size(
                72 / u.getLength(),
                72 / v.getLength()
            );
        },

        getPpi: '#getResolution',

        getImage: function() {
            return this._image;
        },

        setImage: function(image) {
            var that = this;

            function emit(event) {
                var view = that.getView(),
                    type = event && event.type || 'load';
                if (view && that.responds(type)) {
                    paper = view._scope;
                    that.emit(type, new Event(event));
                }
            }

            this._setImage(image);
            if (this._loaded) {
                setTimeout(emit, 0);
            } else if (image) {
                DomEvent.add(image, {
                    load: function(event) {
                        that._setImage(image);
                        emit(event);
                    },
                    error: emit
                });
            }
        },

        _setImage: function(image) {
            if (this._canvas)
                CanvasProvider.release(this._canvas);
            if (image && image.getContext) {
                this._image = null;
                this._canvas = image;
                this._loaded = true;
            } else {
                this._image = image;
                this._canvas = null;
                this._loaded = !!(image && image.src && image.complete);
            }
            this._size = new Size(
                image ? image.naturalWidth || image.width : 0,
                image ? image.naturalHeight || image.height : 0);
            this._context = null;
            this._changed(521);
        },

        getCanvas: function() {
            if (!this._canvas) {
                var ctx = CanvasProvider.getContext(this._size);
                try {
                    if (this._image)
                        ctx.drawImage(this._image, 0, 0);
                    this._canvas = ctx.canvas;
                } catch (e) {
                    CanvasProvider.release(ctx);
                }
            }
            return this._canvas;
        },

        setCanvas: '#setImage',

        getContext: function(modify) {
            if (!this._context)
                this._context = this.getCanvas().getContext('2d');
            if (modify) {
                this._image = null;
                this._changed(513);
            }
            return this._context;
        },

        setContext: function(context) {
            this._context = context;
        },

        getSource: function() {
            var image = this._image;
            return image && image.src || this.toDataURL();
        },

        setSource: function(src) {
            var image = new self.Image(),
                crossOrigin = this._crossOrigin;
            if (crossOrigin)
                image.crossOrigin = crossOrigin;
            image.src = src;
            this.setImage(image);
        },

        getCrossOrigin: function() {
            var image = this._image;
            return image && image.crossOrigin || this._crossOrigin || '';
        },

        setCrossOrigin: function(crossOrigin) {
            this._crossOrigin = crossOrigin;
            var image = this._image;
            if (image)
                image.crossOrigin = crossOrigin;
        },

        getElement: function() {
            return this._canvas || this._loaded && this._image;
        }
    }, {
        beans: false,

        getSubCanvas: function() {
            var rect = Rectangle.read(arguments),
                ctx = CanvasProvider.getContext(rect.getSize());
            ctx.drawImage(this.getCanvas(), rect.x, rect.y,
                rect.width, rect.height, 0, 0, rect.width, rect.height);
            return ctx.canvas;
        },

        getSubRaster: function() {
            var rect = Rectangle.read(arguments),
                raster = new Raster(Item.NO_INSERT);
            raster._setImage(this.getSubCanvas(rect));
            raster.translate(rect.getCenter().subtract(this.getSize().divide(2)));
            raster._matrix.prepend(this._matrix);
            raster.insertAbove(this);
            return raster;
        },

        toDataURL: function() {
            var image = this._image,
                src = image && image.src;
            if (/^data:/.test(src))
                return src;
            var canvas = this.getCanvas();
            return canvas ? canvas.toDataURL.apply(canvas, arguments) : null;
        },

        drawImage: function(image) {
            var point = Point.read(arguments, 1);
            this.getContext(true).drawImage(image, point.x, point.y);
        },

        getAverageColor: function(object) {
            var bounds, path;
            if (!object) {
                bounds = this.getBounds();
            } else if (object instanceof PathItem) {
                path = object;
                bounds = object.getBounds();
            } else if (typeof object === 'object') {
                if ('width' in object) {
                    bounds = new Rectangle(object);
                } else if ('x' in object) {
                    bounds = new Rectangle(object.x - 0.5, object.y - 0.5, 1, 1);
                }
            }
            if (!bounds)
                return null;
            var sampleSize = 32,
                width = Math.min(bounds.width, sampleSize),
                height = Math.min(bounds.height, sampleSize);
            var ctx = Raster._sampleContext;
            if (!ctx) {
                ctx = Raster._sampleContext = CanvasProvider.getContext(
                    new Size(sampleSize));
            } else {
                ctx.clearRect(0, 0, sampleSize + 1, sampleSize + 1);
            }
            ctx.save();
            var matrix = new Matrix()
                .scale(width / bounds.width, height / bounds.height)
                .translate(-bounds.x, -bounds.y);
            matrix.applyToContext(ctx);
            if (path)
                path.draw(ctx, new Base({
                    clip: true,
                    matrices: [matrix]
                }));
            this._matrix.applyToContext(ctx);
            var element = this.getElement(),
                size = this._size;
            if (element)
                ctx.drawImage(element, -size.width / 2, -size.height / 2);
            ctx.restore();
            var pixels = ctx.getImageData(0.5, 0.5, Math.ceil(width),
                    Math.ceil(height)).data,
                channels = [0, 0, 0],
                total = 0;
            for (var i = 0, l = pixels.length; i < l; i += 4) {
                var alpha = pixels[i + 3];
                total += alpha;
                alpha /= 255;
                channels[0] += pixels[i] * alpha;
                channels[1] += pixels[i + 1] * alpha;
                channels[2] += pixels[i + 2] * alpha;
            }
            for (var i = 0; i < 3; i++)
                channels[i] /= total;
            return total ? Color.read(channels) : null;
        },

        getPixel: function() {
            var point = Point.read(arguments);
            var data = this.getContext().getImageData(point.x, point.y, 1, 1).data;
            return new Color('rgb', [data[0] / 255, data[1] / 255, data[2] / 255],
                data[3] / 255);
        },

        setPixel: function() {
            var point = Point.read(arguments),
                color = Color.read(arguments),
                components = color._convert('rgb'),
                alpha = color._alpha,
                ctx = this.getContext(true),
                imageData = ctx.createImageData(1, 1),
                data = imageData.data;
            data[0] = components[0] * 255;
            data[1] = components[1] * 255;
            data[2] = components[2] * 255;
            data[3] = alpha != null ? alpha * 255 : 255;
            ctx.putImageData(imageData, point.x, point.y);
        },

        createImageData: function() {
            var size = Size.read(arguments);
            return this.getContext().createImageData(size.width, size.height);
        },

        getImageData: function() {
            var rect = Rectangle.read(arguments);
            if (rect.isEmpty())
                rect = new Rectangle(this._size);
            return this.getContext().getImageData(rect.x, rect.y,
                rect.width, rect.height);
        },

        setImageData: function(data) {
            var point = Point.read(arguments, 1);
            this.getContext(true).putImageData(data, point.x, point.y);
        },

        _getBounds: function(matrix, options) {
            var rect = new Rectangle(this._size).setCenter(0, 0);
            return matrix ? matrix._transformBounds(rect) : rect;
        },

        _hitTestSelf: function(point) {
            if (this._contains(point)) {
                var that = this;
                return new HitResult('pixel', that, {
                    offset: point.add(that._size.divide(2)).round(),
                    color: {
                        get: function() {
                            return that.getPixel(this.offset);
                        }
                    }
                });
            }
        },

        _draw: function(ctx) {
            var element = this.getElement();
            if (element) {
                ctx.globalAlpha = this._opacity;
                ctx.drawImage(element, -this._size.width / 2, -this._size.height / 2);
            }
        },

        _canComposite: function() {
            return true;
        }
    });

    var SymbolItem = Item.extend({
        _class: 'SymbolItem',
        _applyMatrix: false,
        _canApplyMatrix: false,
        _boundsOptions: {
            stroke: true
        },
        _serializeFields: {
            symbol: null
        },

        initialize: function SymbolItem(arg0, arg1) {
            if (!this._initialize(arg0,
                    arg1 !== undefined && Point.read(arguments, 1)))
                this.setDefinition(arg0 instanceof SymbolDefinition ?
                    arg0 : new SymbolDefinition(arg0));
        },

        _equals: function(item) {
            return this._definition === item._definition;
        },

        copyContent: function(source) {
            this.setDefinition(source._definition);
        },

        getDefinition: function() {
            return this._definition;
        },

        setDefinition: function(definition) {
            this._definition = definition;
            this._changed(9);
        },

        getSymbol: '#getDefinition',
        setSymbol: '#setDefinition',

        isEmpty: function() {
            return this._definition._item.isEmpty();
        },

        _getBounds: function(matrix, options) {
            var item = this._definition._item;
            return item._getCachedBounds(item._matrix.prepended(matrix), options);
        },

        _hitTestSelf: function(point, options, viewMatrix) {
            var res = this._definition._item._hitTest(point, options, viewMatrix);
            if (res)
                res.item = this;
            return res;
        },

        _draw: function(ctx, param) {
            this._definition._item.draw(ctx, param);
        }

    });

    var SymbolDefinition = Base.extend({
        _class: 'SymbolDefinition',

        initialize: function SymbolDefinition(item, dontCenter) {
            this._id = UID.get();
            this.project = paper.project;
            if (item)
                this.setItem(item, dontCenter);
        },

        _serialize: function(options, dictionary) {
            return dictionary.add(this, function() {
                return Base.serialize([this._class, this._item],
                    options, false, dictionary);
            });
        },

        _changed: function(flags) {
            if (flags & 8)
                Item._clearBoundsCache(this);
            if (flags & 1)
                this.project._changed(flags);
        },

        getItem: function() {
            return this._item;
        },

        setItem: function(item, _dontCenter) {
            if (item._symbol)
                item = item.clone();
            if (this._item)
                this._item._symbol = null;
            this._item = item;
            item.remove();
            item.setSelected(false);
            if (!_dontCenter)
                item.setPosition(new Point());
            item._symbol = this;
            this._changed(9);
        },

        getDefinition: '#getItem',
        setDefinition: '#setItem',

        place: function(position) {
            return new SymbolItem(this, position);
        },

        clone: function() {
            return new SymbolDefinition(this._item.clone(false));
        },

        equals: function(symbol) {
            return symbol === this ||
                symbol && this._item.equals(symbol._item) ||
                false;
        }
    });

    var HitResult = Base.extend({
        _class: 'HitResult',

        initialize: function HitResult(type, item, values) {
            this.type = type;
            this.item = item;
            if (values)
                this.inject(values);
        },

        statics: {
            getOptions: function(args) {
                var options = args && Base.read(args);
                return Base.set({
                    type: null,
                    tolerance: paper.settings.hitTolerance,
                    fill: !options,
                    stroke: !options,
                    segments: !options,
                    handles: false,
                    ends: false,
                    position: false,
                    center: false,
                    bounds: false,
                    guides: false,
                    selected: false
                }, options);
            }
        }
    });

    var Segment = Base.extend({
        _class: 'Segment',
        beans: true,
        _selection: 0,

        initialize: function Segment(arg0, arg1, arg2, arg3, arg4, arg5) {
            var count = arguments.length,
                point, handleIn, handleOut, selection;
            if (count > 0) {
                if (arg0 == null || typeof arg0 === 'object') {
                    if (count === 1 && arg0 && 'point' in arg0) {
                        point = arg0.point;
                        handleIn = arg0.handleIn;
                        handleOut = arg0.handleOut;
                        selection = arg0.selection;
                    } else {
                        point = arg0;
                        handleIn = arg1;
                        handleOut = arg2;
                        selection = arg3;
                    }
                } else {
                    point = [arg0, arg1];
                    handleIn = arg2 !== undefined ? [arg2, arg3] : null;
                    handleOut = arg4 !== undefined ? [arg4, arg5] : null;
                }
            }
            new SegmentPoint(point, this, '_point');
            new SegmentPoint(handleIn, this, '_handleIn');
            new SegmentPoint(handleOut, this, '_handleOut');
            if (selection)
                this.setSelection(selection);
        },

        _serialize: function(options, dictionary) {
            var point = this._point,
                selection = this._selection,
                obj = selection || this.hasHandles() ?
                [point, this._handleIn, this._handleOut] :
                point;
            if (selection)
                obj.push(selection);
            return Base.serialize(obj, options, true, dictionary);
        },

        _changed: function(point) {
            var path = this._path;
            if (!path)
                return;
            var curves = path._curves,
                index = this._index,
                curve;
            if (curves) {
                if ((!point || point === this._point || point === this._handleIn) &&
                    (curve = index > 0 ? curves[index - 1] : path._closed ?
                        curves[curves.length - 1] : null))
                    curve._changed();
                if ((!point || point === this._point || point === this._handleOut) &&
                    (curve = curves[index]))
                    curve._changed();
            }
            path._changed(25);
        },

        getPoint: function() {
            return this._point;
        },

        setPoint: function() {
            this._point.set(Point.read(arguments));
        },

        getHandleIn: function() {
            return this._handleIn;
        },

        setHandleIn: function() {
            this._handleIn.set(Point.read(arguments));
        },

        getHandleOut: function() {
            return this._handleOut;
        },

        setHandleOut: function() {
            this._handleOut.set(Point.read(arguments));
        },

        hasHandles: function() {
            return !this._handleIn.isZero() || !this._handleOut.isZero();
        },

        isSmooth: function() {
            var handleIn = this._handleIn,
                handleOut = this._handleOut;
            return !handleIn.isZero() && !handleOut.isZero() &&
                handleIn.isCollinear(handleOut);
        },

        clearHandles: function() {
            this._handleIn._set(0, 0);
            this._handleOut._set(0, 0);
        },

        getSelection: function() {
            return this._selection;
        },

        setSelection: function(selection) {
            var oldSelection = this._selection,
                path = this._path;
            this._selection = selection = selection || 0;
            if (path && selection !== oldSelection) {
                path._updateSelection(this, oldSelection, selection);
                path._changed(129);
            }
        },

        _changeSelection: function(flag, selected) {
            var selection = this._selection;
            this.setSelection(selected ? selection | flag : selection & ~flag);
        },

        isSelected: function() {
            return !!(this._selection & 7);
        },

        setSelected: function(selected) {
            this._changeSelection(7, selected);
        },

        getIndex: function() {
            return this._index !== undefined ? this._index : null;
        },

        getPath: function() {
            return this._path || null;
        },

        getCurve: function() {
            var path = this._path,
                index = this._index;
            if (path) {
                if (index > 0 && !path._closed &&
                    index === path._segments.length - 1)
                    index--;
                return path.getCurves()[index] || null;
            }
            return null;
        },

        getLocation: function() {
            var curve = this.getCurve();
            return curve ?
                new CurveLocation(curve, this === curve._segment1 ? 0 : 1) :
                null;
        },

        getNext: function() {
            var segments = this._path && this._path._segments;
            return segments && (segments[this._index + 1] ||
                this._path._closed && segments[0]) || null;
        },

        smooth: function(options, _first, _last) {
            var opts = options || {},
                type = opts.type,
                factor = opts.factor,
                prev = this.getPrevious(),
                next = this.getNext(),
                p0 = (prev || this)._point,
                p1 = this._point,
                p2 = (next || this)._point,
                d1 = p0.getDistance(p1),
                d2 = p1.getDistance(p2);
            if (!type || type === 'catmull-rom') {
                var a = factor === undefined ? 0.5 : factor,
                    d1_a = Math.pow(d1, a),
                    d1_2a = d1_a * d1_a,
                    d2_a = Math.pow(d2, a),
                    d2_2a = d2_a * d2_a;
                if (!_first && prev) {
                    var A = 2 * d2_2a + 3 * d2_a * d1_a + d1_2a,
                        N = 3 * d2_a * (d2_a + d1_a);
                    this.setHandleIn(N !== 0 ?
                        new Point(
                            (d2_2a * p0._x + A * p1._x - d1_2a * p2._x) / N - p1._x,
                            (d2_2a * p0._y + A * p1._y - d1_2a * p2._y) / N - p1._y) :
                        new Point());
                }
                if (!_last && next) {
                    var A = 2 * d1_2a + 3 * d1_a * d2_a + d2_2a,
                        N = 3 * d1_a * (d1_a + d2_a);
                    this.setHandleOut(N !== 0 ?
                        new Point(
                            (d1_2a * p2._x + A * p1._x - d2_2a * p0._x) / N - p1._x,
                            (d1_2a * p2._y + A * p1._y - d2_2a * p0._y) / N - p1._y) :
                        new Point());
                }
            } else if (type === 'geometric') {
                if (prev && next) {
                    var vector = p0.subtract(p2),
                        t = factor === undefined ? 0.4 : factor,
                        k = t * d1 / (d1 + d2);
                    if (!_first)
                        this.setHandleIn(vector.multiply(k));
                    if (!_last)
                        this.setHandleOut(vector.multiply(k - t));
                }
            } else {
                throw new Error('Smoothing method \'' + type + '\' not supported.');
            }
        },

        getPrevious: function() {
            var segments = this._path && this._path._segments;
            return segments && (segments[this._index - 1] ||
                this._path._closed && segments[segments.length - 1]) || null;
        },

        isFirst: function() {
            return !this._index;
        },

        isLast: function() {
            var path = this._path;
            return path && this._index === path._segments.length - 1 || false;
        },

        reverse: function() {
            var handleIn = this._handleIn,
                handleOut = this._handleOut,
                tmp = handleIn.clone();
            handleIn.set(handleOut);
            handleOut.set(tmp);
        },

        reversed: function() {
            return new Segment(this._point, this._handleOut, this._handleIn);
        },

        remove: function() {
            return this._path ? !!this._path.removeSegment(this._index) : false;
        },

        clone: function() {
            return new Segment(this._point, this._handleIn, this._handleOut);
        },

        equals: function(segment) {
            return segment === this || segment && this._class === segment._class &&
                this._point.equals(segment._point) &&
                this._handleIn.equals(segment._handleIn) &&
                this._handleOut.equals(segment._handleOut) ||
                false;
        },

        toString: function() {
            var parts = ['point: ' + this._point];
            if (!this._handleIn.isZero())
                parts.push('handleIn: ' + this._handleIn);
            if (!this._handleOut.isZero())
                parts.push('handleOut: ' + this._handleOut);
            return '{ ' + parts.join(', ') + ' }';
        },

        transform: function(matrix) {
            this._transformCoordinates(matrix, new Array(6), true);
            this._changed();
        },

        interpolate: function(from, to, factor) {
            var u = 1 - factor,
                v = factor,
                point1 = from._point,
                point2 = to._point,
                handleIn1 = from._handleIn,
                handleIn2 = to._handleIn,
                handleOut2 = to._handleOut,
                handleOut1 = from._handleOut;
            this._point._set(
                u * point1._x + v * point2._x,
                u * point1._y + v * point2._y, true);
            this._handleIn._set(
                u * handleIn1._x + v * handleIn2._x,
                u * handleIn1._y + v * handleIn2._y, true);
            this._handleOut._set(
                u * handleOut1._x + v * handleOut2._x,
                u * handleOut1._y + v * handleOut2._y, true);
            this._changed();
        },

        _transformCoordinates: function(matrix, coords, change) {
            var point = this._point,
                handleIn = !change || !this._handleIn.isZero() ?
                this._handleIn : null,
                handleOut = !change || !this._handleOut.isZero() ?
                this._handleOut : null,
                x = point._x,
                y = point._y,
                i = 2;
            coords[0] = x;
            coords[1] = y;
            if (handleIn) {
                coords[i++] = handleIn._x + x;
                coords[i++] = handleIn._y + y;
            }
            if (handleOut) {
                coords[i++] = handleOut._x + x;
                coords[i++] = handleOut._y + y;
            }
            if (matrix) {
                matrix._transformCoordinates(coords, coords, i / 2);
                x = coords[0];
                y = coords[1];
                if (change) {
                    point._x = x;
                    point._y = y;
                    i = 2;
                    if (handleIn) {
                        handleIn._x = coords[i++] - x;
                        handleIn._y = coords[i++] - y;
                    }
                    if (handleOut) {
                        handleOut._x = coords[i++] - x;
                        handleOut._y = coords[i++] - y;
                    }
                } else {
                    if (!handleIn) {
                        coords[i++] = x;
                        coords[i++] = y;
                    }
                    if (!handleOut) {
                        coords[i++] = x;
                        coords[i++] = y;
                    }
                }
            }
            return coords;
        }
    });

    var SegmentPoint = Point.extend({
        initialize: function SegmentPoint(point, owner, key) {
            var x, y,
                selected;
            if (!point) {
                x = y = 0;
            } else if ((x = point[0]) !== undefined) {
                y = point[1];
            } else {
                var pt = point;
                if ((x = pt.x) === undefined) {
                    pt = Point.read(arguments);
                    x = pt.x;
                }
                y = pt.y;
                selected = pt.selected;
            }
            this._x = x;
            this._y = y;
            this._owner = owner;
            owner[key] = this;
            if (selected)
                this.setSelected(true);
        },

        _set: function(x, y) {
            this._x = x;
            this._y = y;
            this._owner._changed(this);
            return this;
        },

        getX: function() {
            return this._x;
        },

        setX: function(x) {
            this._x = x;
            this._owner._changed(this);
        },

        getY: function() {
            return this._y;
        },

        setY: function(y) {
            this._y = y;
            this._owner._changed(this);
        },

        isZero: function() {
            var isZero = Numerical.isZero;
            return isZero(this._x) && isZero(this._y);
        },

        isSelected: function() {
            return !!(this._owner._selection & this._getSelection());
        },

        setSelected: function(selected) {
            this._owner._changeSelection(this._getSelection(), selected);
        },

        _getSelection: function() {
            var owner = this._owner;
            return this === owner._point ? 1 :
                this === owner._handleIn ? 2 :
                this === owner._handleOut ? 4 :
                0;
        }
    });

    var Curve = Base.extend({
            _class: 'Curve',
            beans: true,

            initialize: function Curve(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
                var count = arguments.length,
                    seg1, seg2,
                    point1, point2,
                    handle1, handle2;
                if (count === 3) {
                    this._path = arg0;
                    seg1 = arg1;
                    seg2 = arg2;
                } else if (!count) {
                    seg1 = new Segment();
                    seg2 = new Segment();
                } else if (count === 1) {
                    if ('segment1' in arg0) {
                        seg1 = new Segment(arg0.segment1);
                        seg2 = new Segment(arg0.segment2);
                    } else if ('point1' in arg0) {
                        point1 = arg0.point1;
                        handle1 = arg0.handle1;
                        handle2 = arg0.handle2;
                        point2 = arg0.point2;
                    } else if (Array.isArray(arg0)) {
                        point1 = [arg0[0], arg0[1]];
                        point2 = [arg0[6], arg0[7]];
                        handle1 = [arg0[2] - arg0[0], arg0[3] - arg0[1]];
                        handle2 = [arg0[4] - arg0[6], arg0[5] - arg0[7]];
                    }
                } else if (count === 2) {
                    seg1 = new Segment(arg0);
                    seg2 = new Segment(arg1);
                } else if (count === 4) {
                    point1 = arg0;
                    handle1 = arg1;
                    handle2 = arg2;
                    point2 = arg3;
                } else if (count === 8) {
                    point1 = [arg0, arg1];
                    point2 = [arg6, arg7];
                    handle1 = [arg2 - arg0, arg3 - arg1];
                    handle2 = [arg4 - arg6, arg5 - arg7];
                }
                this._segment1 = seg1 || new Segment(point1, null, handle1);
                this._segment2 = seg2 || new Segment(point2, handle2, null);
            },

            _serialize: function(options, dictionary) {
                return Base.serialize(this.hasHandles() ?
                    [this.getPoint1(), this.getHandle1(), this.getHandle2(),
                        this.getPoint2()
                    ] :
                    [this.getPoint1(), this.getPoint2()],
                    options, true, dictionary);
            },

            _changed: function() {
                this._length = this._bounds = undefined;
            },

            clone: function() {
                return new Curve(this._segment1, this._segment2);
            },

            toString: function() {
                var parts = ['point1: ' + this._segment1._point];
                if (!this._segment1._handleOut.isZero())
                    parts.push('handle1: ' + this._segment1._handleOut);
                if (!this._segment2._handleIn.isZero())
                    parts.push('handle2: ' + this._segment2._handleIn);
                parts.push('point2: ' + this._segment2._point);
                return '{ ' + parts.join(', ') + ' }';
            },

            classify: function() {
                return Curve.classify(this.getValues());
            },

            remove: function() {
                var removed = false;
                if (this._path) {
                    var segment2 = this._segment2,
                        handleOut = segment2._handleOut;
                    removed = segment2.remove();
                    if (removed)
                        this._segment1._handleOut.set(handleOut);
                }
                return removed;
            },

            getPoint1: function() {
                return this._segment1._point;
            },

            setPoint1: function() {
                this._segment1._point.set(Point.read(arguments));
            },

            getPoint2: function() {
                return this._segment2._point;
            },

            setPoint2: function() {
                this._segment2._point.set(Point.read(arguments));
            },

            getHandle1: function() {
                return this._segment1._handleOut;
            },

            setHandle1: function() {
                this._segment1._handleOut.set(Point.read(arguments));
            },

            getHandle2: function() {
                return this._segment2._handleIn;
            },

            setHandle2: function() {
                this._segment2._handleIn.set(Point.read(arguments));
            },

            getSegment1: function() {
                return this._segment1;
            },

            getSegment2: function() {
                return this._segment2;
            },

            getPath: function() {
                return this._path;
            },

            getIndex: function() {
                return this._segment1._index;
            },

            getNext: function() {
                var curves = this._path && this._path._curves;
                return curves && (curves[this._segment1._index + 1] ||
                    this._path._closed && curves[0]) || null;
            },

            getPrevious: function() {
                var curves = this._path && this._path._curves;
                return curves && (curves[this._segment1._index - 1] ||
                    this._path._closed && curves[curves.length - 1]) || null;
            },

            isFirst: function() {
                return !this._segment1._index;
            },

            isLast: function() {
                var path = this._path;
                return path && this._segment1._index === path._curves.length - 1 ||
                    false;
            },

            isSelected: function() {
                return this.getPoint1().isSelected() &&
                    this.getHandle1().isSelected() &&
                    this.getHandle2().isSelected() &&
                    this.getPoint2().isSelected();
            },

            setSelected: function(selected) {
                this.getPoint1().setSelected(selected);
                this.getHandle1().setSelected(selected);
                this.getHandle2().setSelected(selected);
                this.getPoint2().setSelected(selected);
            },

            getValues: function(matrix) {
                return Curve.getValues(this._segment1, this._segment2, matrix);
            },

            getPoints: function() {
                var coords = this.getValues(),
                    points = [];
                for (var i = 0; i < 8; i += 2)
                    points.push(new Point(coords[i], coords[i + 1]));
                return points;
            }
        }, {
            getLength: function() {
                if (this._length == null)
                    this._length = Curve.getLength(this.getValues(), 0, 1);
                return this._length;
            },

            getArea: function() {
                return Curve.getArea(this.getValues());
            },

            getLine: function() {
                return new Line(this._segment1._point, this._segment2._point);
            },

            getPart: function(from, to) {
                return new Curve(Curve.getPart(this.getValues(), from, to));
            },

            getPartLength: function(from, to) {
                return Curve.getLength(this.getValues(), from, to);
            },

            divideAt: function(location) {
                return this.divideAtTime(location && location.curve === this ?
                    location.time : this.getTimeAt(location));
            },

            divideAtTime: function(time, _setHandles) {
                var tMin = 1e-8,
                    tMax = 1 - tMin,
                    res = null;
                if (time >= tMin && time <= tMax) {
                    var parts = Curve.subdivide(this.getValues(), time),
                        left = parts[0],
                        right = parts[1],
                        setHandles = _setHandles || this.hasHandles(),
                        seg1 = this._segment1,
                        seg2 = this._segment2,
                        path = this._path;
                    if (setHandles) {
                        seg1._handleOut._set(left[2] - left[0], left[3] - left[1]);
                        seg2._handleIn._set(right[4] - right[6], right[5] - right[7]);
                    }
                    var x = left[6],
                        y = left[7],
                        segment = new Segment(new Point(x, y),
                            setHandles && new Point(left[4] - x, left[5] - y),
                            setHandles && new Point(right[2] - x, right[3] - y));
                    if (path) {
                        path.insert(seg1._index + 1, segment);
                        res = this.getNext();
                    } else {
                        this._segment2 = segment;
                        this._changed();
                        res = new Curve(segment, seg2);
                    }
                }
                return res;
            },

            splitAt: function(location) {
                var path = this._path;
                return path ? path.splitAt(location) : null;
            },

            splitAtTime: function(time) {
                return this.splitAt(this.getLocationAtTime(time));
            },

            divide: function(offset, isTime) {
                return this.divideAtTime(offset === undefined ? 0.5 : isTime ? offset :
                    this.getTimeAt(offset));
            },

            split: function(offset, isTime) {
                return this.splitAtTime(offset === undefined ? 0.5 : isTime ? offset :
                    this.getTimeAt(offset));
            },

            reversed: function() {
                return new Curve(this._segment2.reversed(), this._segment1.reversed());
            },

            clearHandles: function() {
                this._segment1._handleOut._set(0, 0);
                this._segment2._handleIn._set(0, 0);
            },

            statics: {
                getValues: function(segment1, segment2, matrix, straight) {
                    var p1 = segment1._point,
                        h1 = segment1._handleOut,
                        h2 = segment2._handleIn,
                        p2 = segment2._point,
                        x1 = p1.x,
                        y1 = p1.y,
                        x2 = p2.x,
                        y2 = p2.y,
                        values = straight ?
                        [x1, y1, x1, y1, x2, y2, x2, y2] :
                        [
                            x1, y1,
                            x1 + h1._x, y1 + h1._y,
                            x2 + h2._x, y2 + h2._y,
                            x2, y2
                        ];
                    if (matrix)
                        matrix._transformCoordinates(values, values, 4);
                    return values;
                },

                subdivide: function(v, t) {
                    var x0 = v[0],
                        y0 = v[1],
                        x1 = v[2],
                        y1 = v[3],
                        x2 = v[4],
                        y2 = v[5],
                        x3 = v[6],
                        y3 = v[7];
                    if (t === undefined)
                        t = 0.5;
                    var u = 1 - t,
                        x4 = u * x0 + t * x1,
                        y4 = u * y0 + t * y1,
                        x5 = u * x1 + t * x2,
                        y5 = u * y1 + t * y2,
                        x6 = u * x2 + t * x3,
                        y6 = u * y2 + t * y3,
                        x7 = u * x4 + t * x5,
                        y7 = u * y4 + t * y5,
                        x8 = u * x5 + t * x6,
                        y8 = u * y5 + t * y6,
                        x9 = u * x7 + t * x8,
                        y9 = u * y7 + t * y8;
                    return [
                        [x0, y0, x4, y4, x7, y7, x9, y9],
                        [x9, y9, x8, y8, x6, y6, x3, y3]
                    ];
                },

                getMonoCurves: function(v, dir) {
                    var curves = [],
                        io = dir ? 0 : 1,
                        o0 = v[io + 0],
                        o1 = v[io + 2],
                        o2 = v[io + 4],
                        o3 = v[io + 6];
                    if ((o0 >= o1) === (o1 >= o2) && (o1 >= o2) === (o2 >= o3) ||
                        Curve.isStraight(v)) {
                        curves.push(v);
                    } else {
                        var a = 3 * (o1 - o2) - o0 + o3,
                            b = 2 * (o0 + o2) - 4 * o1,
                            c = o1 - o0,
                            tMin = 1e-8,
                            tMax = 1 - tMin,
                            roots = [],
                            n = Numerical.solveQuadratic(a, b, c, roots, tMin, tMax);
                        if (!n) {
                            curves.push(v);
                        } else {
                            roots.sort();
                            var t = roots[0],
                                parts = Curve.subdivide(v, t);
                            curves.push(parts[0]);
                            if (n > 1) {
                                t = (roots[1] - t) / (1 - t);
                                parts = Curve.subdivide(parts[1], t);
                                curves.push(parts[0]);
                            }
                            curves.push(parts[1]);
                        }
                    }
                    return curves;
                },

                solveCubic: function(v, coord, val, roots, min, max) {
                    var v0 = v[coord],
                        v1 = v[coord + 2],
                        v2 = v[coord + 4],
                        v3 = v[coord + 6],
                        res = 0;
                    if (!(v0 < val && v3 < val && v1 < val && v2 < val ||
                            v0 > val && v3 > val && v1 > val && v2 > val)) {
                        var c = 3 * (v1 - v0),
                            b = 3 * (v2 - v1) - c,
                            a = v3 - v0 - c - b;
                        res = Numerical.solveCubic(a, b, c, v0 - val, roots, min, max);
                    }
                    return res;
                },

                getTimeOf: function(v, point) {
                    var p0 = new Point(v[0], v[1]),
                        p3 = new Point(v[6], v[7]),
                        epsilon = 1e-12,
                        geomEpsilon = 1e-7,
                        t = point.isClose(p0, epsilon) ? 0 :
                        point.isClose(p3, epsilon) ? 1 :
                        null;
                    if (t === null) {
                        var coords = [point.x, point.y],
                            roots = [];
                        for (var c = 0; c < 2; c++) {
                            var count = Curve.solveCubic(v, c, coords[c], roots, 0, 1);
                            for (var i = 0; i < count; i++) {
                                var u = roots[i];
                                if (point.isClose(Curve.getPoint(v, u), geomEpsilon))
                                    return u;
                            }
                        }
                    }
                    return point.isClose(p0, geomEpsilon) ? 0 :
                        point.isClose(p3, geomEpsilon) ? 1 :
                        null;
                },

                getNearestTime: function(v, point) {
                    if (Curve.isStraight(v)) {
                        var x0 = v[0],
                            y0 = v[1],
                            x3 = v[6],
                            y3 = v[7],
                            vx = x3 - x0,
                            vy = y3 - y0,
                            det = vx * vx + vy * vy;
                        if (det === 0)
                            return 0;
                        var u = ((point.x - x0) * vx + (point.y - y0) * vy) / det;
                        return u < 1e-12 ? 0 :
                            u > 0.999999999999 ? 1 :
                            Curve.getTimeOf(v,
                                new Point(x0 + u * vx, y0 + u * vy));
                    }

                    var count = 100,
                        minDist = Infinity,
                        minT = 0;

                    function refine(t) {
                        if (t >= 0 && t <= 1) {
                            var dist = point.getDistance(Curve.getPoint(v, t), true);
                            if (dist < minDist) {
                                minDist = dist;
                                minT = t;
                                return true;
                            }
                        }
                    }

                    for (var i = 0; i <= count; i++)
                        refine(i / count);

                    var step = 1 / (count * 2);
                    while (step > 1e-8) {
                        if (!refine(minT - step) && !refine(minT + step))
                            step /= 2;
                    }
                    return minT;
                },

                getPart: function(v, from, to) {
                    var flip = from > to;
                    if (flip) {
                        var tmp = from;
                        from = to;
                        to = tmp;
                    }
                    if (from > 0)
                        v = Curve.subdivide(v, from)[1];
                    if (to < 1)
                        v = Curve.subdivide(v, (to - from) / (1 - from))[0];
                    return flip ?
                        [v[6], v[7], v[4], v[5], v[2], v[3], v[0], v[1]] :
                        v;
                },

                isFlatEnough: function(v, flatness) {
                    var x0 = v[0],
                        y0 = v[1],
                        x1 = v[2],
                        y1 = v[3],
                        x2 = v[4],
                        y2 = v[5],
                        x3 = v[6],
                        y3 = v[7],
                        ux = 3 * x1 - 2 * x0 - x3,
                        uy = 3 * y1 - 2 * y0 - y3,
                        vx = 3 * x2 - 2 * x3 - x0,
                        vy = 3 * y2 - 2 * y3 - y0;
                    return Math.max(ux * ux, vx * vx) + Math.max(uy * uy, vy * vy) <=
                        16 * flatness * flatness;
                },

                getArea: function(v) {
                    var x0 = v[0],
                        y0 = v[1],
                        x1 = v[2],
                        y1 = v[3],
                        x2 = v[4],
                        y2 = v[5],
                        x3 = v[6],
                        y3 = v[7];
                    return 3 * ((y3 - y0) * (x1 + x2) - (x3 - x0) * (y1 + y2) +
                        y1 * (x0 - x2) - x1 * (y0 - y2) +
                        y3 * (x2 + x0 / 3) - x3 * (y2 + y0 / 3)) / 20;
                },

                getBounds: function(v) {
                    var min = v.slice(0, 2),
                        max = min.slice(),
                        roots = [0, 0];
                    for (var i = 0; i < 2; i++)
                        Curve._addBounds(v[i], v[i + 2], v[i + 4], v[i + 6],
                            i, 0, min, max, roots);
                    return new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);
                },

                _addBounds: function(v0, v1, v2, v3, coord, padding, min, max, roots) {
                    function add(value, padding) {
                        var left = value - padding,
                            right = value + padding;
                        if (left < min[coord])
                            min[coord] = left;
                        if (right > max[coord])
                            max[coord] = right;
                    }

                    padding /= 2;
                    var minPad = min[coord] - padding,
                        maxPad = max[coord] + padding;
                    if (v0 < minPad || v1 < minPad || v2 < minPad || v3 < minPad ||
                        v0 > maxPad || v1 > maxPad || v2 > maxPad || v3 > maxPad) {
                        if (v1 < v0 != v1 < v3 && v2 < v0 != v2 < v3) {
                            add(v0, padding);
                            add(v3, padding);
                        } else {
                            var a = 3 * (v1 - v2) - v0 + v3,
                                b = 2 * (v0 + v2) - 4 * v1,
                                c = v1 - v0,
                                count = Numerical.solveQuadratic(a, b, c, roots),
                                tMin = 1e-8,
                                tMax = 1 - tMin;
                            add(v3, 0);
                            for (var i = 0; i < count; i++) {
                                var t = roots[i],
                                    u = 1 - t;
                                if (tMin <= t && t <= tMax)
                                    add(u * u * u * v0 +
                                        3 * u * u * t * v1 +
                                        3 * u * t * t * v2 +
                                        t * t * t * v3,
                                        padding);
                            }
                        }
                    }
                }
            }
        }, Base.each(
            ['getBounds', 'getStrokeBounds', 'getHandleBounds'],
            function(name) {
                this[name] = function() {
                    if (!this._bounds)
                        this._bounds = {};
                    var bounds = this._bounds[name];
                    if (!bounds) {
                        bounds = this._bounds[name] = Path[name](
                            [this._segment1, this._segment2], false, this._path);
                    }
                    return bounds.clone();
                };
            }, {

            }), Base.each({
            isStraight: function(p1, h1, h2, p2) {
                if (h1.isZero() && h2.isZero()) {
                    return true;
                } else {
                    var v = p2.subtract(p1);
                    if (v.isZero()) {
                        return false;
                    } else if (v.isCollinear(h1) && v.isCollinear(h2)) {
                        var l = new Line(p1, p2),
                            epsilon = 1e-7;
                        if (l.getDistance(p1.add(h1)) < epsilon &&
                            l.getDistance(p2.add(h2)) < epsilon) {
                            var div = v.dot(v),
                                s1 = v.dot(h1) / div,
                                s2 = v.dot(h2) / div;
                            return s1 >= 0 && s1 <= 1 && s2 <= 0 && s2 >= -1;
                        }
                    }
                }
                return false;
            },

            isLinear: function(p1, h1, h2, p2) {
                var third = p2.subtract(p1).divide(3);
                return h1.equals(third) && h2.negate().equals(third);
            }
        }, function(test, name) {
            this[name] = function(epsilon) {
                var seg1 = this._segment1,
                    seg2 = this._segment2;
                return test(seg1._point, seg1._handleOut, seg2._handleIn, seg2._point,
                    epsilon);
            };

            this.statics[name] = function(v, epsilon) {
                var x0 = v[0],
                    y0 = v[1],
                    x3 = v[6],
                    y3 = v[7];
                return test(
                    new Point(x0, y0),
                    new Point(v[2] - x0, v[3] - y0),
                    new Point(v[4] - x3, v[5] - y3),
                    new Point(x3, y3), epsilon);
            };
        }, {
            statics: {},

            hasHandles: function() {
                return !this._segment1._handleOut.isZero() ||
                    !this._segment2._handleIn.isZero();
            },

            hasLength: function(epsilon) {
                return (!this.getPoint1().equals(this.getPoint2()) || this.hasHandles()) &&
                    this.getLength() > (epsilon || 0);
            },

            isCollinear: function(curve) {
                return curve && this.isStraight() && curve.isStraight() &&
                    this.getLine().isCollinear(curve.getLine());
            },

            isHorizontal: function() {
                return this.isStraight() && Math.abs(this.getTangentAtTime(0.5).y) <
                    1e-8;
            },

            isVertical: function() {
                return this.isStraight() && Math.abs(this.getTangentAtTime(0.5).x) <
                    1e-8;
            }
        }), {
            beans: false,

            getLocationAt: function(offset, _isTime) {
                return this.getLocationAtTime(
                    _isTime ? offset : this.getTimeAt(offset));
            },

            getLocationAtTime: function(t) {
                return t != null && t >= 0 && t <= 1 ?
                    new CurveLocation(this, t) :
                    null;
            },

            getTimeAt: function(offset, start) {
                return Curve.getTimeAt(this.getValues(), offset, start);
            },

            getParameterAt: '#getTimeAt',

            getOffsetAtTime: function(t) {
                return this.getPartLength(0, t);
            },

            getLocationOf: function() {
                return this.getLocationAtTime(this.getTimeOf(Point.read(arguments)));
            },

            getOffsetOf: function() {
                var loc = this.getLocationOf.apply(this, arguments);
                return loc ? loc.getOffset() : null;
            },

            getTimeOf: function() {
                return Curve.getTimeOf(this.getValues(), Point.read(arguments));
            },

            getParameterOf: '#getTimeOf',

            getNearestLocation: function() {
                var point = Point.read(arguments),
                    values = this.getValues(),
                    t = Curve.getNearestTime(values, point),
                    pt = Curve.getPoint(values, t);
                return new CurveLocation(this, t, pt, null, point.getDistance(pt));
            },

            getNearestPoint: function() {
                var loc = this.getNearestLocation.apply(this, arguments);
                return loc ? loc.getPoint() : loc;
            }

        },
        new function() {
            var methods = ['getPoint', 'getTangent', 'getNormal', 'getWeightedTangent',
                'getWeightedNormal', 'getCurvature'
            ];
            return Base.each(methods,
                function(name) {
                    this[name + 'At'] = function(location, _isTime) {
                        var values = this.getValues();
                        return Curve[name](values, _isTime ? location :
                            Curve.getTimeAt(values, location));
                    };

                    this[name + 'AtTime'] = function(time) {
                        return Curve[name](this.getValues(), time);
                    };
                }, {
                    statics: {
                        _evaluateMethods: methods
                    }
                }
            );
        },
        new function() {

            function getLengthIntegrand(v) {
                var x0 = v[0],
                    y0 = v[1],
                    x1 = v[2],
                    y1 = v[3],
                    x2 = v[4],
                    y2 = v[5],
                    x3 = v[6],
                    y3 = v[7],

                    ax = 9 * (x1 - x2) + 3 * (x3 - x0),
                    bx = 6 * (x0 + x2) - 12 * x1,
                    cx = 3 * (x1 - x0),

                    ay = 9 * (y1 - y2) + 3 * (y3 - y0),
                    by = 6 * (y0 + y2) - 12 * y1,
                    cy = 3 * (y1 - y0);

                return function(t) {
                    var dx = (ax * t + bx) * t + cx,
                        dy = (ay * t + by) * t + cy;
                    return Math.sqrt(dx * dx + dy * dy);
                };
            }

            function getIterations(a, b) {
                return Math.max(2, Math.min(16, Math.ceil(Math.abs(b - a) * 32)));
            }

            function evaluate(v, t, type, normalized) {
                if (t == null || t < 0 || t > 1)
                    return null;
                var x0 = v[0],
                    y0 = v[1],
                    x1 = v[2],
                    y1 = v[3],
                    x2 = v[4],
                    y2 = v[5],
                    x3 = v[6],
                    y3 = v[7],
                    isZero = Numerical.isZero;
                if (isZero(x1 - x0) && isZero(y1 - y0)) {
                    x1 = x0;
                    y1 = y0;
                }
                if (isZero(x2 - x3) && isZero(y2 - y3)) {
                    x2 = x3;
                    y2 = y3;
                }
                var cx = 3 * (x1 - x0),
                    bx = 3 * (x2 - x1) - cx,
                    ax = x3 - x0 - cx - bx,
                    cy = 3 * (y1 - y0),
                    by = 3 * (y2 - y1) - cy,
                    ay = y3 - y0 - cy - by,
                    x, y;
                if (type === 0) {
                    x = t === 0 ? x0 : t === 1 ? x3 :
                        ((ax * t + bx) * t + cx) * t + x0;
                    y = t === 0 ? y0 : t === 1 ? y3 :
                        ((ay * t + by) * t + cy) * t + y0;
                } else {
                    var tMin = 1e-8,
                        tMax = 1 - tMin;
                    if (t < tMin) {
                        x = cx;
                        y = cy;
                    } else if (t > tMax) {
                        x = 3 * (x3 - x2);
                        y = 3 * (y3 - y2);
                    } else {
                        x = (3 * ax * t + 2 * bx) * t + cx;
                        y = (3 * ay * t + 2 * by) * t + cy;
                    }
                    if (normalized) {
                        if (x === 0 && y === 0 && (t < tMin || t > tMax)) {
                            x = x2 - x1;
                            y = y2 - y1;
                        }
                        var len = Math.sqrt(x * x + y * y);
                        if (len) {
                            x /= len;
                            y /= len;
                        }
                    }
                    if (type === 3) {
                        var x2 = 6 * ax * t + 2 * bx,
                            y2 = 6 * ay * t + 2 * by,
                            d = Math.pow(x * x + y * y, 3 / 2);
                        x = d !== 0 ? (x * y2 - y * x2) / d : 0;
                        y = 0;
                    }
                }
                return type === 2 ? new Point(y, -x) : new Point(x, y);
            }

            return {
                statics: {

                    classify: function(v) {

                        var x0 = v[0],
                            y0 = v[1],
                            x1 = v[2],
                            y1 = v[3],
                            x2 = v[4],
                            y2 = v[5],
                            x3 = v[6],
                            y3 = v[7],
                            a1 = x0 * (y3 - y2) + y0 * (x2 - x3) + x3 * y2 - y3 * x2,
                            a2 = x1 * (y0 - y3) + y1 * (x3 - x0) + x0 * y3 - y0 * x3,
                            a3 = x2 * (y1 - y0) + y2 * (x0 - x1) + x1 * y0 - y1 * x0,
                            d3 = 3 * a3,
                            d2 = d3 - a2,
                            d1 = d2 - a2 + a1,
                            l = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3),
                            s = l !== 0 ? 1 / l : 0,
                            isZero = Numerical.isZero,
                            serpentine = 'serpentine';
                        d1 *= s;
                        d2 *= s;
                        d3 *= s;

                        function type(type, t1, t2) {
                            var hasRoots = t1 !== undefined,
                                t1Ok = hasRoots && t1 > 0 && t1 < 1,
                                t2Ok = hasRoots && t2 > 0 && t2 < 1;
                            if (hasRoots && (!(t1Ok || t2Ok) ||
                                    type === 'loop' && !(t1Ok && t2Ok))) {
                                type = 'arch';
                                t1Ok = t2Ok = false;
                            }
                            return {
                                type: type,
                                roots: t1Ok || t2Ok ?
                                    t1Ok && t2Ok ?
                                    t1 < t2 ? [t1, t2] : [t2, t1] :
                                    [t1Ok ? t1 : t2] :
                                    null
                            };
                        }

                        if (isZero(d1)) {
                            return isZero(d2) ?
                                type(isZero(d3) ? 'line' : 'quadratic') :
                                type(serpentine, d3 / (3 * d2));
                        }
                        var d = 3 * d2 * d2 - 4 * d1 * d3;
                        if (isZero(d)) {
                            return type('cusp', d2 / (2 * d1));
                        }
                        var f1 = d > 0 ? Math.sqrt(d / 3) : Math.sqrt(-d),
                            f2 = 2 * d1;
                        return type(d > 0 ? serpentine : 'loop',
                            (d2 + f1) / f2,
                            (d2 - f1) / f2);
                    },

                    getLength: function(v, a, b, ds) {
                        if (a === undefined)
                            a = 0;
                        if (b === undefined)
                            b = 1;
                        if (Curve.isStraight(v)) {
                            var c = v;
                            if (b < 1) {
                                c = Curve.subdivide(c, b)[0];
                                a /= b;
                            }
                            if (a > 0) {
                                c = Curve.subdivide(c, a)[1];
                            }
                            var dx = c[6] - c[0],
                                dy = c[7] - c[1];
                            return Math.sqrt(dx * dx + dy * dy);
                        }
                        return Numerical.integrate(ds || getLengthIntegrand(v), a, b,
                            getIterations(a, b));
                    },

                    getTimeAt: function(v, offset, start) {
                        if (start === undefined)
                            start = offset < 0 ? 1 : 0;
                        if (offset === 0)
                            return start;
                        var abs = Math.abs,
                            epsilon = 1e-12,
                            forward = offset > 0,
                            a = forward ? start : 0,
                            b = forward ? 1 : start,
                            ds = getLengthIntegrand(v),
                            rangeLength = Curve.getLength(v, a, b, ds),
                            diff = abs(offset) - rangeLength;
                        if (abs(diff) < epsilon) {
                            return forward ? b : a;
                        } else if (diff > epsilon) {
                            return null;
                        }
                        var guess = offset / rangeLength,
                            length = 0;

                        function f(t) {
                            length += Numerical.integrate(ds, start, t,
                                getIterations(start, t));
                            start = t;
                            return length - offset;
                        }
                        return Numerical.findRoot(f, ds, start + guess, a, b, 32,
                            1e-12);
                    },

                    getPoint: function(v, t) {
                        return evaluate(v, t, 0, false);
                    },

                    getTangent: function(v, t) {
                        return evaluate(v, t, 1, true);
                    },

                    getWeightedTangent: function(v, t) {
                        return evaluate(v, t, 1, false);
                    },

                    getNormal: function(v, t) {
                        return evaluate(v, t, 2, true);
                    },

                    getWeightedNormal: function(v, t) {
                        return evaluate(v, t, 2, false);
                    },

                    getCurvature: function(v, t) {
                        return evaluate(v, t, 3, false).x;
                    },

                    getPeaks: function(v) {
                        var x0 = v[0],
                            y0 = v[1],
                            x1 = v[2],
                            y1 = v[3],
                            x2 = v[4],
                            y2 = v[5],
                            x3 = v[6],
                            y3 = v[7],
                            ax = -x0 + 3 * x1 - 3 * x2 + x3,
                            bx = 3 * x0 - 6 * x1 + 3 * x2,
                            cx = -3 * x0 + 3 * x1,
                            ay = -y0 + 3 * y1 - 3 * y2 + y3,
                            by = 3 * y0 - 6 * y1 + 3 * y2,
                            cy = -3 * y0 + 3 * y1,
                            tMin = 1e-8,
                            tMax = 1 - tMin,
                            roots = [];
                        Numerical.solveCubic(
                            9 * (ax * ax + ay * ay),
                            9 * (ax * bx + by * ay),
                            2 * (bx * bx + by * by) + 3 * (cx * ax + cy * ay),
                            (cx * bx + by * cy),
                            roots, tMin, tMax);
                        return roots.sort();
                    }
                }
            };
        },
        new function() {

            function addLocation(locations, include, c1, t1, c2, t2, overlap) {
                var excludeStart = !overlap && c1.getPrevious() === c2,
                    excludeEnd = !overlap && c1 !== c2 && c1.getNext() === c2,
                    tMin = 1e-8,
                    tMax = 1 - tMin;
                if (t1 !== null && t1 >= (excludeStart ? tMin : 0) &&
                    t1 <= (excludeEnd ? tMax : 1)) {
                    if (t2 !== null && t2 >= (excludeEnd ? tMin : 0) &&
                        t2 <= (excludeStart ? tMax : 1)) {
                        var loc1 = new CurveLocation(c1, t1, null, overlap),
                            loc2 = new CurveLocation(c2, t2, null, overlap);
                        loc1._intersection = loc2;
                        loc2._intersection = loc1;
                        if (!include || include(loc1)) {
                            CurveLocation.insert(locations, loc1, true);
                        }
                    }
                }
            }

            function addCurveIntersections(v1, v2, c1, c2, locations, include, flip,
                recursion, calls, tMin, tMax, uMin, uMax) {
                if (++calls >= 4096 || ++recursion >= 40)
                    return calls;
                var fatLineEpsilon = 1e-9,
                    q0x = v2[0],
                    q0y = v2[1],
                    q3x = v2[6],
                    q3y = v2[7],
                    getSignedDistance = Line.getSignedDistance,
                    d1 = getSignedDistance(q0x, q0y, q3x, q3y, v2[2], v2[3]),
                    d2 = getSignedDistance(q0x, q0y, q3x, q3y, v2[4], v2[5]),
                    factor = d1 * d2 > 0 ? 3 / 4 : 4 / 9,
                    dMin = factor * Math.min(0, d1, d2),
                    dMax = factor * Math.max(0, d1, d2),
                    dp0 = getSignedDistance(q0x, q0y, q3x, q3y, v1[0], v1[1]),
                    dp1 = getSignedDistance(q0x, q0y, q3x, q3y, v1[2], v1[3]),
                    dp2 = getSignedDistance(q0x, q0y, q3x, q3y, v1[4], v1[5]),
                    dp3 = getSignedDistance(q0x, q0y, q3x, q3y, v1[6], v1[7]),
                    hull = getConvexHull(dp0, dp1, dp2, dp3),
                    top = hull[0],
                    bottom = hull[1],
                    tMinClip,
                    tMaxClip;
                if (d1 === 0 && d2 === 0 &&
                    dp0 === 0 && dp1 === 0 && dp2 === 0 && dp3 === 0 ||
                    (tMinClip = clipConvexHull(top, bottom, dMin, dMax)) == null ||
                    (tMaxClip = clipConvexHull(top.reverse(), bottom.reverse(),
                        dMin, dMax)) == null)
                    return calls;
                var tMinNew = tMin + (tMax - tMin) * tMinClip,
                    tMaxNew = tMin + (tMax - tMin) * tMaxClip;
                if (Math.max(uMax - uMin, tMaxNew - tMinNew) < fatLineEpsilon) {
                    var t = (tMinNew + tMaxNew) / 2,
                        u = (uMin + uMax) / 2;
                    addLocation(locations, include,
                        flip ? c2 : c1, flip ? u : t,
                        flip ? c1 : c2, flip ? t : u);
                } else {
                    v1 = Curve.getPart(v1, tMinClip, tMaxClip);
                    if (tMaxClip - tMinClip > 0.8) {
                        if (tMaxNew - tMinNew > uMax - uMin) {
                            var parts = Curve.subdivide(v1, 0.5),
                                t = (tMinNew + tMaxNew) / 2;
                            calls = addCurveIntersections(
                                v2, parts[0], c2, c1, locations, include, !flip,
                                recursion, calls, uMin, uMax, tMinNew, t);
                            calls = addCurveIntersections(
                                v2, parts[1], c2, c1, locations, include, !flip,
                                recursion, calls, uMin, uMax, t, tMaxNew);
                        } else {
                            var parts = Curve.subdivide(v2, 0.5),
                                u = (uMin + uMax) / 2;
                            calls = addCurveIntersections(
                                parts[0], v1, c2, c1, locations, include, !flip,
                                recursion, calls, uMin, u, tMinNew, tMaxNew);
                            calls = addCurveIntersections(
                                parts[1], v1, c2, c1, locations, include, !flip,
                                recursion, calls, u, uMax, tMinNew, tMaxNew);
                        }
                    } else {
                        if (uMax - uMin >= fatLineEpsilon) {
                            calls = addCurveIntersections(
                                v2, v1, c2, c1, locations, include, !flip,
                                recursion, calls, uMin, uMax, tMinNew, tMaxNew);
                        } else {
                            calls = addCurveIntersections(
                                v1, v2, c1, c2, locations, include, flip,
                                recursion, calls, tMinNew, tMaxNew, uMin, uMax);
                        }
                    }
                }
                return calls;
            }

            function getConvexHull(dq0, dq1, dq2, dq3) {
                var p0 = [0, dq0],
                    p1 = [1 / 3, dq1],
                    p2 = [2 / 3, dq2],
                    p3 = [1, dq3],
                    dist1 = dq1 - (2 * dq0 + dq3) / 3,
                    dist2 = dq2 - (dq0 + 2 * dq3) / 3,
                    hull;
                if (dist1 * dist2 < 0) {
                    hull = [
                        [p0, p1, p3],
                        [p0, p2, p3]
                    ];
                } else {
                    var distRatio = dist1 / dist2;
                    hull = [
                        distRatio >= 2 ? [p0, p1, p3] :
                        distRatio <= 0.5 ? [p0, p2, p3] :
                        [p0, p1, p2, p3],
                        [p0, p3]
                    ];
                }
                return (dist1 || dist2) < 0 ? hull.reverse() : hull;
            }

            function clipConvexHull(hullTop, hullBottom, dMin, dMax) {
                if (hullTop[0][1] < dMin) {
                    return clipConvexHullPart(hullTop, true, dMin);
                } else if (hullBottom[0][1] > dMax) {
                    return clipConvexHullPart(hullBottom, false, dMax);
                } else {
                    return hullTop[0][0];
                }
            }

            function clipConvexHullPart(part, top, threshold) {
                var px = part[0][0],
                    py = part[0][1];
                for (var i = 1, l = part.length; i < l; i++) {
                    var qx = part[i][0],
                        qy = part[i][1];
                    if (top ? qy >= threshold : qy <= threshold) {
                        return qy === threshold ? qx :
                            px + (threshold - py) * (qx - px) / (qy - py);
                    }
                    px = qx;
                    py = qy;
                }
                return null;
            }

            function getCurveLineIntersections(v, px, py, vx, vy) {
                var isZero = Numerical.isZero;
                if (isZero(vx) && isZero(vy)) {
                    var t = Curve.getTimeOf(v, new Point(px, py));
                    return t === null ? [] : [t];
                }
                var angle = Math.atan2(-vy, vx),
                    sin = Math.sin(angle),
                    cos = Math.cos(angle),
                    rv = [],
                    roots = [];
                for (var i = 0; i < 8; i += 2) {
                    var x = v[i] - px,
                        y = v[i + 1] - py;
                    rv.push(
                        x * cos - y * sin,
                        x * sin + y * cos);
                }
                Curve.solveCubic(rv, 1, 0, roots, 0, 1);
                return roots;
            }

            function addCurveLineIntersections(v1, v2, c1, c2, locations, include,
                flip) {
                var x1 = v2[0],
                    y1 = v2[1],
                    x2 = v2[6],
                    y2 = v2[7],
                    roots = getCurveLineIntersections(v1, x1, y1, x2 - x1, y2 - y1);
                for (var i = 0, l = roots.length; i < l; i++) {
                    var t1 = roots[i],
                        p1 = Curve.getPoint(v1, t1),
                        t2 = Curve.getTimeOf(v2, p1);
                    if (t2 !== null) {
                        addLocation(locations, include,
                            flip ? c2 : c1, flip ? t2 : t1,
                            flip ? c1 : c2, flip ? t1 : t2);
                    }
                }
            }

            function addLineIntersection(v1, v2, c1, c2, locations, include) {
                var pt = Line.intersect(
                    v1[0], v1[1], v1[6], v1[7],
                    v2[0], v2[1], v2[6], v2[7]);
                if (pt) {
                    addLocation(locations, include,
                        c1, Curve.getTimeOf(v1, pt),
                        c2, Curve.getTimeOf(v2, pt));
                }
            }

            function getCurveIntersections(v1, v2, c1, c2, locations, include) {
                var epsilon = 1e-12,
                    min = Math.min,
                    max = Math.max;

                if (max(v1[0], v1[2], v1[4], v1[6]) + epsilon >
                    min(v2[0], v2[2], v2[4], v2[6]) &&
                    min(v1[0], v1[2], v1[4], v1[6]) - epsilon <
                    max(v2[0], v2[2], v2[4], v2[6]) &&
                    max(v1[1], v1[3], v1[5], v1[7]) + epsilon >
                    min(v2[1], v2[3], v2[5], v2[7]) &&
                    min(v1[1], v1[3], v1[5], v1[7]) - epsilon <
                    max(v2[1], v2[3], v2[5], v2[7])) {
                    var overlaps = getOverlaps(v1, v2);
                    if (overlaps) {
                        for (var i = 0; i < 2; i++) {
                            var overlap = overlaps[i];
                            addLocation(locations, include,
                                c1, overlap[0],
                                c2, overlap[1], true);
                        }
                    } else {
                        var straight1 = Curve.isStraight(v1),
                            straight2 = Curve.isStraight(v2),
                            straight = straight1 && straight2,
                            flip = straight1 && !straight2,
                            before = locations.length;
                        (straight ?
                            addLineIntersection :
                            straight1 || straight2 ?
                            addCurveLineIntersections :
                            addCurveIntersections)(
                            flip ? v2 : v1, flip ? v1 : v2,
                            flip ? c2 : c1, flip ? c1 : c2,
                            locations, include, flip,
                            0, 0, 0, 1, 0, 1);
                        if (!straight || locations.length === before) {
                            for (var i = 0; i < 4; i++) {
                                var t1 = i >> 1,
                                    t2 = i & 1,
                                    i1 = t1 * 6,
                                    i2 = t2 * 6,
                                    p1 = new Point(v1[i1], v1[i1 + 1]),
                                    p2 = new Point(v2[i2], v2[i2 + 1]);
                                if (p1.isClose(p2, epsilon)) {
                                    addLocation(locations, include,
                                        c1, t1,
                                        c2, t2);
                                }
                            }
                        }
                    }
                }
                return locations;
            }

            function getLoopIntersection(v1, c1, locations, include) {
                var info = Curve.classify(v1);
                if (info.type === 'loop') {
                    var roots = info.roots;
                    addLocation(locations, include,
                        c1, roots[0],
                        c1, roots[1]);
                }
                return locations;
            }

            function getIntersections(curves1, curves2, include, matrix1, matrix2,
                _returnFirst) {
                var self = !curves2;
                if (self)
                    curves2 = curves1;
                var length1 = curves1.length,
                    length2 = curves2.length,
                    values2 = [],
                    arrays = [],
                    locations,
                    current;
                for (var i = 0; i < length2; i++)
                    values2[i] = curves2[i].getValues(matrix2);
                for (var i = 0; i < length1; i++) {
                    var curve1 = curves1[i],
                        values1 = self ? values2[i] : curve1.getValues(matrix1),
                        path1 = curve1.getPath();
                    if (path1 !== current) {
                        current = path1;
                        locations = [];
                        arrays.push(locations);
                    }
                    if (self) {
                        getLoopIntersection(values1, curve1, locations, include);
                    }
                    for (var j = self ? i + 1 : 0; j < length2; j++) {
                        if (_returnFirst && locations.length)
                            return locations;
                        getCurveIntersections(values1, values2[j], curve1, curves2[j],
                            locations, include);
                    }
                }
                locations = [];
                for (var i = 0, l = arrays.length; i < l; i++) {
                    locations.push.apply(locations, arrays[i]);
                }
                return locations;
            }

            function getOverlaps(v1, v2) {

                function getSquaredLineLength(v) {
                    var x = v[6] - v[0],
                        y = v[7] - v[1];
                    return x * x + y * y;
                }

                var abs = Math.abs,
                    getDistance = Line.getDistance,
                    timeEpsilon = 1e-8,
                    geomEpsilon = 1e-7,
                    straight1 = Curve.isStraight(v1),
                    straight2 = Curve.isStraight(v2),
                    straightBoth = straight1 && straight2,
                    flip = getSquaredLineLength(v1) < getSquaredLineLength(v2),
                    l1 = flip ? v2 : v1,
                    l2 = flip ? v1 : v2,
                    px = l1[0],
                    py = l1[1],
                    vx = l1[6] - px,
                    vy = l1[7] - py;
                if (getDistance(px, py, vx, vy, l2[0], l2[1], true) < geomEpsilon &&
                    getDistance(px, py, vx, vy, l2[6], l2[7], true) < geomEpsilon) {
                    if (!straightBoth &&
                        getDistance(px, py, vx, vy, l1[2], l1[3], true) < geomEpsilon &&
                        getDistance(px, py, vx, vy, l1[4], l1[5], true) < geomEpsilon &&
                        getDistance(px, py, vx, vy, l2[2], l2[3], true) < geomEpsilon &&
                        getDistance(px, py, vx, vy, l2[4], l2[5], true) < geomEpsilon) {
                        straight1 = straight2 = straightBoth = true;
                    }
                } else if (straightBoth) {
                    return null;
                }
                if (straight1 ^ straight2) {
                    return null;
                }

                var v = [v1, v2],
                    pairs = [];
                for (var i = 0; i < 4 && pairs.length < 2; i++) {
                    var i1 = i & 1,
                        i2 = i1 ^ 1,
                        t1 = i >> 1,
                        t2 = Curve.getTimeOf(v[i1], new Point(
                            v[i2][t1 ? 6 : 0],
                            v[i2][t1 ? 7 : 1]));
                    if (t2 != null) {
                        var pair = i1 ? [t1, t2] : [t2, t1];
                        if (!pairs.length ||
                            abs(pair[0] - pairs[0][0]) > timeEpsilon &&
                            abs(pair[1] - pairs[0][1]) > timeEpsilon) {
                            pairs.push(pair);
                        }
                    }
                    if (i > 2 && !pairs.length)
                        break;
                }
                if (pairs.length !== 2) {
                    pairs = null;
                } else if (!straightBoth) {
                    var o1 = Curve.getPart(v1, pairs[0][0], pairs[1][0]),
                        o2 = Curve.getPart(v2, pairs[0][1], pairs[1][1]);
                    if (abs(o2[2] - o1[2]) > geomEpsilon ||
                        abs(o2[3] - o1[3]) > geomEpsilon ||
                        abs(o2[4] - o1[4]) > geomEpsilon ||
                        abs(o2[5] - o1[5]) > geomEpsilon)
                        pairs = null;
                }
                return pairs;
            }

            return {
                getIntersections: function(curve) {
                    var v1 = this.getValues(),
                        v2 = curve && curve !== this && curve.getValues();
                    return v2 ? getCurveIntersections(v1, v2, this, curve, []) :
                        getLoopIntersection(v1, this, []);
                },

                statics: {
                    getOverlaps: getOverlaps,
                    getIntersections: getIntersections,
                    getCurveLineIntersections: getCurveLineIntersections
                }
            };
        });

    var CurveLocation = Base.extend({
            _class: 'CurveLocation',

            initialize: function CurveLocation(curve, time, point, _overlap, _distance) {
                if (time >= 0.99999999) {
                    var next = curve.getNext();
                    if (next) {
                        time = 0;
                        curve = next;
                    }
                }
                this._setCurve(curve);
                this._time = time;
                this._point = point || curve.getPointAtTime(time);
                this._overlap = _overlap;
                this._distance = _distance;
                this._intersection = this._next = this._previous = null;
            },

            _setCurve: function(curve) {
                var path = curve._path;
                this._path = path;
                this._version = path ? path._version : 0;
                this._curve = curve;
                this._segment = null;
                this._segment1 = curve._segment1;
                this._segment2 = curve._segment2;
            },

            _setSegment: function(segment) {
                this._setCurve(segment.getCurve());
                this._segment = segment;
                this._time = segment === this._segment1 ? 0 : 1;
                this._point = segment._point.clone();
            },

            getSegment: function() {
                var segment = this._segment;
                if (!segment) {
                    var curve = this.getCurve(),
                        time = this.getTime();
                    if (time === 0) {
                        segment = curve._segment1;
                    } else if (time === 1) {
                        segment = curve._segment2;
                    } else if (time != null) {
                        segment = curve.getPartLength(0, time) <
                            curve.getPartLength(time, 1) ?
                            curve._segment1 :
                            curve._segment2;
                    }
                    this._segment = segment;
                }
                return segment;
            },

            getCurve: function() {
                var path = this._path,
                    that = this;
                if (path && path._version !== this._version) {
                    this._time = this._offset = this._curveOffset = this._curve = null;
                }

                function trySegment(segment) {
                    var curve = segment && segment.getCurve();
                    if (curve && (that._time = curve.getTimeOf(that._point)) != null) {
                        that._setCurve(curve);
                        return curve;
                    }
                }

                return this._curve ||
                    trySegment(this._segment) ||
                    trySegment(this._segment1) ||
                    trySegment(this._segment2.getPrevious());
            },

            getPath: function() {
                var curve = this.getCurve();
                return curve && curve._path;
            },

            getIndex: function() {
                var curve = this.getCurve();
                return curve && curve.getIndex();
            },

            getTime: function() {
                var curve = this.getCurve(),
                    time = this._time;
                return curve && time == null ?
                    this._time = curve.getTimeOf(this._point) :
                    time;
            },

            getParameter: '#getTime',

            getPoint: function() {
                return this._point;
            },

            getOffset: function() {
                var offset = this._offset;
                if (offset == null) {
                    offset = 0;
                    var path = this.getPath(),
                        index = this.getIndex();
                    if (path && index != null) {
                        var curves = path.getCurves();
                        for (var i = 0; i < index; i++)
                            offset += curves[i].getLength();
                    }
                    this._offset = offset += this.getCurveOffset();
                }
                return offset;
            },

            getCurveOffset: function() {
                var offset = this._curveOffset;
                if (offset == null) {
                    var curve = this.getCurve(),
                        time = this.getTime();
                    this._curveOffset = offset = time != null && curve &&
                        curve.getPartLength(0, time);
                }
                return offset;
            },

            getIntersection: function() {
                return this._intersection;
            },

            getDistance: function() {
                return this._distance;
            },

            divide: function() {
                var curve = this.getCurve(),
                    res = curve && curve.divideAtTime(this.getTime());
                if (res) {
                    this._setSegment(res._segment1);
                }
                return res;
            },

            split: function() {
                var curve = this.getCurve(),
                    path = curve._path,
                    res = curve && curve.splitAtTime(this.getTime());
                if (res) {
                    this._setSegment(path.getLastSegment());
                }
                return res;
            },

            equals: function(loc, _ignoreOther) {
                var res = this === loc;
                if (!res && loc instanceof CurveLocation) {
                    var c1 = this.getCurve(),
                        c2 = loc.getCurve(),
                        p1 = c1._path,
                        p2 = c2._path;
                    if (p1 === p2) {
                        var abs = Math.abs,
                            epsilon = 1e-7,
                            diff = abs(this.getOffset() - loc.getOffset()),
                            i1 = !_ignoreOther && this._intersection,
                            i2 = !_ignoreOther && loc._intersection;
                        res = (diff < epsilon ||
                                p1 && abs(p1.getLength() - diff) < epsilon) &&
                            (!i1 && !i2 || i1 && i2 && i1.equals(i2, true));
                    }
                }
                return res;
            },

            toString: function() {
                var parts = [],
                    point = this.getPoint(),
                    f = Formatter.instance;
                if (point)
                    parts.push('point: ' + point);
                var index = this.getIndex();
                if (index != null)
                    parts.push('index: ' + index);
                var time = this.getTime();
                if (time != null)
                    parts.push('time: ' + f.number(time));
                if (this._distance != null)
                    parts.push('distance: ' + f.number(this._distance));
                return '{ ' + parts.join(', ') + ' }';
            },

            isTouching: function() {
                var inter = this._intersection;
                if (inter && this.getTangent().isCollinear(inter.getTangent())) {
                    var curve1 = this.getCurve(),
                        curve2 = inter.getCurve();
                    return !(curve1.isStraight() && curve2.isStraight() &&
                        curve1.getLine().intersect(curve2.getLine()));
                }
                return false;
            },

            isCrossing: function() {
                var inter = this._intersection;
                if (!inter)
                    return false;
                var t1 = this.getTime(),
                    t2 = inter.getTime(),
                    tMin = 1e-8,
                    tMax = 1 - tMin,
                    t1Inside = t1 >= tMin && t1 <= tMax,
                    t2Inside = t2 >= tMin && t2 <= tMax;
                if (t1Inside && t2Inside)
                    return !this.isTouching();
                var c2 = this.getCurve(),
                    c1 = t1 < tMin ? c2.getPrevious() : c2,
                    c4 = inter.getCurve(),
                    c3 = t2 < tMin ? c4.getPrevious() : c4;
                if (t1 > tMax)
                    c2 = c2.getNext();
                if (t2 > tMax)
                    c4 = c4.getNext();
                if (!c1 || !c2 || !c3 || !c4)
                    return false;

                var offsets = [];

                function addOffsets(curve, end) {
                    var v = curve.getValues(),
                        roots = Curve.classify(v).roots || Curve.getPeaks(v),
                        count = roots.length,
                        t = end && count > 1 ? roots[count - 1] :
                        count > 0 ? roots[0] :
                        0.5;
                    offsets.push(Curve.getLength(v, end ? t : 0, end ? 1 : t) / 2);
                }

                function isInRange(angle, min, max) {
                    return min < max ?
                        angle > min && angle < max :
                        angle > min || angle < max;
                }

                if (!t1Inside) {
                    addOffsets(c1, true);
                    addOffsets(c2, false);
                }
                if (!t2Inside) {
                    addOffsets(c3, true);
                    addOffsets(c4, false);
                }
                var pt = this.getPoint(),
                    offset = Math.min.apply(Math, offsets),
                    v2 = t1Inside ? c2.getTangentAtTime(t1) :
                    c2.getPointAt(offset).subtract(pt),
                    v1 = t1Inside ? v2.negate() :
                    c1.getPointAt(-offset).subtract(pt),
                    v4 = t2Inside ? c4.getTangentAtTime(t2) :
                    c4.getPointAt(offset).subtract(pt),
                    v3 = t2Inside ? v4.negate() :
                    c3.getPointAt(-offset).subtract(pt),
                    a1 = v1.getAngle(),
                    a2 = v2.getAngle(),
                    a3 = v3.getAngle(),
                    a4 = v4.getAngle();
                return !!(t1Inside ?
                    (isInRange(a1, a3, a4) ^ isInRange(a2, a3, a4)) &&
                    (isInRange(a1, a4, a3) ^ isInRange(a2, a4, a3)) :
                    (isInRange(a3, a1, a2) ^ isInRange(a4, a1, a2)) &&
                    (isInRange(a3, a2, a1) ^ isInRange(a4, a2, a1)));
            },

            hasOverlap: function() {
                return !!this._overlap;
            }
        }, Base.each(Curve._evaluateMethods, function(name) {
            var get = name + 'At';
            this[name] = function() {
                var curve = this.getCurve(),
                    time = this.getTime();
                return time != null && curve && curve[get](time, true);
            };
        }, {
            preserve: true
        }),
        new function() {

            function insert(locations, loc, merge) {
                var length = locations.length,
                    l = 0,
                    r = length - 1;

                function search(index, dir) {
                    for (var i = index + dir; i >= -1 && i <= length; i += dir) {
                        var loc2 = locations[((i % length) + length) % length];
                        if (!loc.getPoint().isClose(loc2.getPoint(),
                                1e-7))
                            break;
                        if (loc.equals(loc2))
                            return loc2;
                    }
                    return null;
                }

                while (l <= r) {
                    var m = (l + r) >>> 1,
                        loc2 = locations[m],
                        found;
                    if (merge && (found = loc.equals(loc2) ? loc2 :
                            (search(m, -1) || search(m, 1)))) {
                        if (loc._overlap) {
                            found._overlap = found._intersection._overlap = true;
                        }
                        return found;
                    }
                    var path1 = loc.getPath(),
                        path2 = loc2.getPath(),
                        diff = path1 !== path2 ?
                        path1._id - path2._id :
                        (loc.getIndex() + loc.getTime()) -
                        (loc2.getIndex() + loc2.getTime());
                    if (diff < 0) {
                        r = m - 1;
                    } else {
                        l = m + 1;
                    }
                }
                locations.splice(l, 0, loc);
                return loc;
            }

            return {
                statics: {
                    insert: insert,

                    expand: function(locations) {
                        var expanded = locations.slice();
                        for (var i = locations.length - 1; i >= 0; i--) {
                            insert(expanded, locations[i]._intersection, false);
                        }
                        return expanded;
                    }
                }
            };
        });

    var PathItem = Item.extend({
        _class: 'PathItem',
        _selectBounds: false,
        _canScaleStroke: true,
        beans: true,

        initialize: function PathItem() {},

        statics: {
            create: function(arg) {
                var data,
                    segments,
                    compound;
                if (Base.isPlainObject(arg)) {
                    segments = arg.segments;
                    data = arg.pathData;
                } else if (Array.isArray(arg)) {
                    segments = arg;
                } else if (typeof arg === 'string') {
                    data = arg;
                }
                if (segments) {
                    var first = segments[0];
                    compound = first && Array.isArray(first[0]);
                } else if (data) {
                    compound = (data.match(/m/gi) || []).length > 1 ||
                        /z\s*\S+/i.test(data);
                }
                var ctor = compound ? CompoundPath : Path;
                return new ctor(arg);
            }
        },

        _asPathItem: function() {
            return this;
        },

        isClockwise: function() {
            return this.getArea() >= 0;
        },

        setClockwise: function(clockwise) {
            if (this.isClockwise() != (clockwise = !!clockwise))
                this.reverse();
        },

        setPathData: function(data) {

            var parts = data && data.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/ig),
                coords,
                relative = false,
                previous,
                control,
                current = new Point(),
                start = new Point();

            function getCoord(index, coord) {
                var val = +coords[index];
                if (relative)
                    val += current[coord];
                return val;
            }

            function getPoint(index) {
                return new Point(
                    getCoord(index, 'x'),
                    getCoord(index + 1, 'y')
                );
            }

            this.clear();

            for (var i = 0, l = parts && parts.length; i < l; i++) {
                var part = parts[i],
                    command = part[0],
                    lower = command.toLowerCase();
                coords = part.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g);
                var length = coords && coords.length;
                relative = command === lower;
                if (previous === 'z' && !/[mz]/.test(lower))
                    this.moveTo(current);
                switch (lower) {
                    case 'm':
                    case 'l':
                        var move = lower === 'm';
                        for (var j = 0; j < length; j += 2) {
                            this[move ? 'moveTo' : 'lineTo'](current = getPoint(j));
                            if (move) {
                                start = current;
                                move = false;
                            }
                        }
                        control = current;
                        break;
                    case 'h':
                    case 'v':
                        var coord = lower === 'h' ? 'x' : 'y';
                        current = current.clone();
                        for (var j = 0; j < length; j++) {
                            current[coord] = getCoord(j, coord);
                            this.lineTo(current);
                        }
                        control = current;
                        break;
                    case 'c':
                        for (var j = 0; j < length; j += 6) {
                            this.cubicCurveTo(
                                getPoint(j),
                                control = getPoint(j + 2),
                                current = getPoint(j + 4));
                        }
                        break;
                    case 's':
                        for (var j = 0; j < length; j += 4) {
                            this.cubicCurveTo(
                                /[cs]/.test(previous) ?
                                current.multiply(2).subtract(control) :
                                current,
                                control = getPoint(j),
                                current = getPoint(j + 2));
                            previous = lower;
                        }
                        break;
                    case 'q':
                        for (var j = 0; j < length; j += 4) {
                            this.quadraticCurveTo(
                                control = getPoint(j),
                                current = getPoint(j + 2));
                        }
                        break;
                    case 't':
                        for (var j = 0; j < length; j += 2) {
                            this.quadraticCurveTo(
                                control = (/[qt]/.test(previous) ?
                                    current.multiply(2).subtract(control) :
                                    current),
                                current = getPoint(j));
                            previous = lower;
                        }
                        break;
                    case 'a':
                        for (var j = 0; j < length; j += 7) {
                            this.arcTo(current = getPoint(j + 5),
                                new Size(+coords[j], +coords[j + 1]), +coords[j + 2], +coords[j + 4], +coords[j + 3]);
                        }
                        break;
                    case 'z':
                        this.closePath(1e-12);
                        current = start;
                        break;
                }
                previous = lower;
            }
        },

        _canComposite: function() {
            return !(this.hasFill() && this.hasStroke());
        },

        _contains: function(point) {
            var winding = point.isInside(
                    this.getBounds({
                        internal: true,
                        handle: true
                    })) ?
                this._getWinding(point) :
                {};
            return winding.onPath || !!(this.getFillRule() === 'evenodd' ?
                winding.windingL & 1 || winding.windingR & 1 :
                winding.winding);
        },

        getIntersections: function(path, include, _matrix, _returnFirst) {
            var self = this === path || !path,
                matrix1 = this._matrix._orNullIfIdentity(),
                matrix2 = self ? matrix1 :
                (_matrix || path._matrix)._orNullIfIdentity();
            return self || this.getBounds(matrix1).intersects(
                    path.getBounds(matrix2), 1e-12) ?
                Curve.getIntersections(
                    this.getCurves(), !self && path.getCurves(), include,
                    matrix1, matrix2, _returnFirst) :
                [];
        },

        getCrossings: function(path) {
            return this.getIntersections(path, function(inter) {
                return inter.hasOverlap() || inter.isCrossing();
            });
        },

        getNearestLocation: function() {
            var point = Point.read(arguments),
                curves = this.getCurves(),
                minDist = Infinity,
                minLoc = null;
            for (var i = 0, l = curves.length; i < l; i++) {
                var loc = curves[i].getNearestLocation(point);
                if (loc._distance < minDist) {
                    minDist = loc._distance;
                    minLoc = loc;
                }
            }
            return minLoc;
        },

        getNearestPoint: function() {
            var loc = this.getNearestLocation.apply(this, arguments);
            return loc ? loc.getPoint() : loc;
        },

        interpolate: function(from, to, factor) {
            var isPath = !this._children,
                name = isPath ? '_segments' : '_children',
                itemsFrom = from[name],
                itemsTo = to[name],
                items = this[name];
            if (!itemsFrom || !itemsTo || itemsFrom.length !== itemsTo.length) {
                throw new Error('Invalid operands in interpolate() call: ' +
                    from + ', ' + to);
            }
            var current = items.length,
                length = itemsTo.length;
            if (current < length) {
                var ctor = isPath ? Segment : Path;
                for (var i = current; i < length; i++) {
                    this.add(new ctor());
                }
            } else if (current > length) {
                this[isPath ? 'removeSegments' : 'removeChildren'](length, current);
            }
            for (var i = 0; i < length; i++) {
                items[i].interpolate(itemsFrom[i], itemsTo[i], factor);
            }
            if (isPath) {
                this.setClosed(from._closed);
                this._changed(9);
            }
        },

        compare: function(path) {
            var ok = false;
            if (path) {
                var paths1 = this._children || [this],
                    paths2 = path._children ? path._children.slice() : [path],
                    length1 = paths1.length,
                    length2 = paths2.length,
                    matched = [],
                    count = 0;
                ok = true;
                for (var i1 = length1 - 1; i1 >= 0 && ok; i1--) {
                    var path1 = paths1[i1];
                    ok = false;
                    for (var i2 = length2 - 1; i2 >= 0 && !ok; i2--) {
                        if (path1.compare(paths2[i2])) {
                            if (!matched[i2]) {
                                matched[i2] = true;
                                count++;
                            }
                            ok = true;
                        }
                    }
                }
                ok = ok && count === length2;
            }
            return ok;
        },

    });

    var Path = PathItem.extend({
            _class: 'Path',
            _serializeFields: {
                segments: [],
                closed: false
            },

            initialize: function Path(arg) {
                this._closed = false;
                this._segments = [];
                this._version = 0;
                var segments = Array.isArray(arg) ?
                    typeof arg[0] === 'object' ?
                    arg :
                    arguments :
                    arg && (arg.size === undefined && (arg.x !== undefined ||
                        arg.point !== undefined)) ?
                    arguments :
                    null;
                if (segments && segments.length > 0) {
                    this.setSegments(segments);
                } else {
                    this._curves = undefined;
                    this._segmentSelection = 0;
                    if (!segments && typeof arg === 'string') {
                        this.setPathData(arg);
                        arg = null;
                    }
                }
                this._initialize(!segments && arg);
            },

            _equals: function(item) {
                return this._closed === item._closed &&
                    Base.equals(this._segments, item._segments);
            },

            copyContent: function(source) {
                this.setSegments(source._segments);
                this._closed = source._closed;
            },

            _changed: function _changed(flags) {
                _changed.base.call(this, flags);
                if (flags & 8) {
                    this._length = this._area = undefined;
                    if (flags & 16) {
                        this._version++;
                    } else if (this._curves) {
                        for (var i = 0, l = this._curves.length; i < l; i++)
                            this._curves[i]._changed();
                    }
                } else if (flags & 32) {
                    this._bounds = undefined;
                }
            },

            getStyle: function() {
                var parent = this._parent;
                return (parent instanceof CompoundPath ? parent : this)._style;
            },

            getSegments: function() {
                return this._segments;
            },

            setSegments: function(segments) {
                var fullySelected = this.isFullySelected(),
                    length = segments && segments.length;
                this._segments.length = 0;
                this._segmentSelection = 0;
                this._curves = undefined;
                if (length) {
                    var last = segments[length - 1];
                    if (typeof last === 'boolean') {
                        this.setClosed(last);
                        length--;
                    }
                    this._add(Segment.readList(segments, 0, {}, length));
                }
                if (fullySelected)
                    this.setFullySelected(true);
            },

            getFirstSegment: function() {
                return this._segments[0];
            },

            getLastSegment: function() {
                return this._segments[this._segments.length - 1];
            },

            getCurves: function() {
                var curves = this._curves,
                    segments = this._segments;
                if (!curves) {
                    var length = this._countCurves();
                    curves = this._curves = new Array(length);
                    for (var i = 0; i < length; i++)
                        curves[i] = new Curve(this, segments[i],
                            segments[i + 1] || segments[0]);
                }
                return curves;
            },

            getFirstCurve: function() {
                return this.getCurves()[0];
            },

            getLastCurve: function() {
                var curves = this.getCurves();
                return curves[curves.length - 1];
            },

            isClosed: function() {
                return this._closed;
            },

            setClosed: function(closed) {
                if (this._closed != (closed = !!closed)) {
                    this._closed = closed;
                    if (this._curves) {
                        var length = this._curves.length = this._countCurves();
                        if (closed)
                            this._curves[length - 1] = new Curve(this,
                                this._segments[length - 1], this._segments[0]);
                    }
                    this._changed(25);
                }
            }
        }, {
            beans: true,

            getPathData: function(_matrix, _precision) {
                var segments = this._segments,
                    length = segments.length,
                    f = new Formatter(_precision),
                    coords = new Array(6),
                    first = true,
                    curX, curY,
                    prevX, prevY,
                    inX, inY,
                    outX, outY,
                    parts = [];

                function addSegment(segment, skipLine) {
                    segment._transformCoordinates(_matrix, coords);
                    curX = coords[0];
                    curY = coords[1];
                    if (first) {
                        parts.push('M' + f.pair(curX, curY));
                        first = false;
                    } else {
                        inX = coords[2];
                        inY = coords[3];
                        if (inX === curX && inY === curY &&
                            outX === prevX && outY === prevY) {
                            if (!skipLine) {
                                var dx = curX - prevX,
                                    dy = curY - prevY;
                                parts.push(
                                    dx === 0 ? 'v' + f.number(dy) :
                                    dy === 0 ? 'h' + f.number(dx) :
                                    'l' + f.pair(dx, dy));
                            }
                        } else {
                            parts.push('c' + f.pair(outX - prevX, outY - prevY) +
                                ' ' + f.pair(inX - prevX, inY - prevY) +
                                ' ' + f.pair(curX - prevX, curY - prevY));
                        }
                    }
                    prevX = curX;
                    prevY = curY;
                    outX = coords[4];
                    outY = coords[5];
                }

                if (!length)
                    return '';

                for (var i = 0; i < length; i++)
                    addSegment(segments[i]);
                if (this._closed && length > 0) {
                    addSegment(segments[0], true);
                    parts.push('z');
                }
                return parts.join('');
            },

            isEmpty: function() {
                return !this._segments.length;
            },

            _transformContent: function(matrix) {
                var segments = this._segments,
                    coords = new Array(6);
                for (var i = 0, l = segments.length; i < l; i++)
                    segments[i]._transformCoordinates(matrix, coords, true);
                return true;
            },

            _add: function(segs, index) {
                var segments = this._segments,
                    curves = this._curves,
                    amount = segs.length,
                    append = index == null,
                    index = append ? segments.length : index;
                for (var i = 0; i < amount; i++) {
                    var segment = segs[i];
                    if (segment._path)
                        segment = segs[i] = segment.clone();
                    segment._path = this;
                    segment._index = index + i;
                    if (segment._selection)
                        this._updateSelection(segment, 0, segment._selection);
                }
                if (append) {
                    segments.push.apply(segments, segs);
                } else {
                    segments.splice.apply(segments, [index, 0].concat(segs));
                    for (var i = index + amount, l = segments.length; i < l; i++)
                        segments[i]._index = i;
                }
                if (curves) {
                    var total = this._countCurves(),
                        start = index > 0 && index + amount - 1 === total ? index - 1 :
                        index,
                        insert = start,
                        end = Math.min(start + amount, total);
                    if (segs._curves) {
                        curves.splice.apply(curves, [start, 0].concat(segs._curves));
                        insert += segs._curves.length;
                    }
                    for (var i = insert; i < end; i++)
                        curves.splice(i, 0, new Curve(this, null, null));
                    this._adjustCurves(start, end);
                }
                this._changed(25);
                return segs;
            },

            _adjustCurves: function(start, end) {
                var segments = this._segments,
                    curves = this._curves,
                    curve;
                for (var i = start; i < end; i++) {
                    curve = curves[i];
                    curve._path = this;
                    curve._segment1 = segments[i];
                    curve._segment2 = segments[i + 1] || segments[0];
                    curve._changed();
                }
                if (curve = curves[this._closed && !start ? segments.length - 1 :
                        start - 1]) {
                    curve._segment2 = segments[start] || segments[0];
                    curve._changed();
                }
                if (curve = curves[end]) {
                    curve._segment1 = segments[end];
                    curve._changed();
                }
            },

            _countCurves: function() {
                var length = this._segments.length;
                return !this._closed && length > 0 ? length - 1 : length;
            },

            add: function(segment1) {
                return arguments.length > 1 && typeof segment1 !== 'number' ?
                    this._add(Segment.readList(arguments)) :
                    this._add([Segment.read(arguments)])[0];
            },

            insert: function(index, segment1) {
                return arguments.length > 2 && typeof segment1 !== 'number' ?
                    this._add(Segment.readList(arguments, 1), index) :
                    this._add([Segment.read(arguments, 1)], index)[0];
            },

            addSegment: function() {
                return this._add([Segment.read(arguments)])[0];
            },

            insertSegment: function(index) {
                return this._add([Segment.read(arguments, 1)], index)[0];
            },

            addSegments: function(segments) {
                return this._add(Segment.readList(segments));
            },

            insertSegments: function(index, segments) {
                return this._add(Segment.readList(segments), index);
            },

            removeSegment: function(index) {
                return this.removeSegments(index, index + 1)[0] || null;
            },

            removeSegments: function(start, end, _includeCurves) {
                start = start || 0;
                end = Base.pick(end, this._segments.length);
                var segments = this._segments,
                    curves = this._curves,
                    count = segments.length,
                    removed = segments.splice(start, end - start),
                    amount = removed.length;
                if (!amount)
                    return removed;
                for (var i = 0; i < amount; i++) {
                    var segment = removed[i];
                    if (segment._selection)
                        this._updateSelection(segment, segment._selection, 0);
                    segment._index = segment._path = null;
                }
                for (var i = start, l = segments.length; i < l; i++)
                    segments[i]._index = i;
                if (curves) {
                    var index = start > 0 && end === count + (this._closed ? 1 : 0) ?
                        start - 1 :
                        start,
                        curves = curves.splice(index, amount);
                    for (var i = curves.length - 1; i >= 0; i--)
                        curves[i]._path = null;
                    if (_includeCurves)
                        removed._curves = curves.slice(1);
                    this._adjustCurves(index, index);
                }
                this._changed(25);
                return removed;
            },

            clear: '#removeSegments',

            hasHandles: function() {
                var segments = this._segments;
                for (var i = 0, l = segments.length; i < l; i++) {
                    if (segments[i].hasHandles())
                        return true;
                }
                return false;
            },

            clearHandles: function() {
                var segments = this._segments;
                for (var i = 0, l = segments.length; i < l; i++)
                    segments[i].clearHandles();
            },

            getLength: function() {
                if (this._length == null) {
                    var curves = this.getCurves(),
                        length = 0;
                    for (var i = 0, l = curves.length; i < l; i++)
                        length += curves[i].getLength();
                    this._length = length;
                }
                return this._length;
            },

            getArea: function() {
                var area = this._area;
                if (area == null) {
                    var segments = this._segments,
                        closed = this._closed;
                    area = 0;
                    for (var i = 0, l = segments.length; i < l; i++) {
                        var last = i + 1 === l;
                        area += Curve.getArea(Curve.getValues(
                            segments[i], segments[last ? 0 : i + 1],
                            null, last && !closed));
                    }
                    this._area = area;
                }
                return area;
            },

            isFullySelected: function() {
                var length = this._segments.length;
                return this.isSelected() && length > 0 && this._segmentSelection ===
                    length * 7;
            },

            setFullySelected: function(selected) {
                if (selected)
                    this._selectSegments(true);
                this.setSelected(selected);
            },

            setSelection: function setSelection(selection) {
                if (!(selection & 1))
                    this._selectSegments(false);
                setSelection.base.call(this, selection);
            },

            _selectSegments: function(selected) {
                var segments = this._segments,
                    length = segments.length,
                    selection = selected ? 7 : 0;
                this._segmentSelection = selection * length;
                for (var i = 0; i < length; i++)
                    segments[i]._selection = selection;
            },

            _updateSelection: function(segment, oldSelection, newSelection) {
                segment._selection = newSelection;
                var selection = this._segmentSelection += newSelection - oldSelection;
                if (selection > 0)
                    this.setSelected(true);
            },

            divideAt: function(location) {
                var loc = this.getLocationAt(location),
                    curve;
                return loc && (curve = loc.getCurve().divideAt(loc.getCurveOffset())) ?
                    curve._segment1 :
                    null;
            },

            splitAt: function(location) {
                var loc = this.getLocationAt(location),
                    index = loc && loc.index,
                    time = loc && loc.time,
                    tMin = 1e-8,
                    tMax = 1 - tMin;
                if (time > tMax) {
                    index++;
                    time = 0;
                }
                var curves = this.getCurves();
                if (index >= 0 && index < curves.length) {
                    if (time >= tMin) {
                        curves[index++].divideAtTime(time);
                    }
                    var segs = this.removeSegments(index, this._segments.length, true),
                        path;
                    if (this._closed) {
                        this.setClosed(false);
                        path = this;
                    } else {
                        path = new Path(Item.NO_INSERT);
                        path.insertAbove(this);
                        path.copyAttributes(this);
                    }
                    path._add(segs, 0);
                    this.addSegment(segs[0]);
                    return path;
                }
                return null;
            },

            split: function(index, time) {
                var curve,
                    location = time === undefined ? index :
                    (curve = this.getCurves()[index]) &&
                    curve.getLocationAtTime(time);
                return location != null ? this.splitAt(location) : null;
            },

            join: function(path, tolerance) {
                var epsilon = tolerance || 0;
                if (path && path !== this) {
                    var segments = path._segments,
                        last1 = this.getLastSegment(),
                        last2 = path.getLastSegment();
                    if (!last2)
                        return this;
                    if (last1 && last1._point.isClose(last2._point, epsilon))
                        path.reverse();
                    var first2 = path.getFirstSegment();
                    if (last1 && last1._point.isClose(first2._point, epsilon)) {
                        last1.setHandleOut(first2._handleOut);
                        this._add(segments.slice(1));
                    } else {
                        var first1 = this.getFirstSegment();
                        if (first1 && first1._point.isClose(first2._point, epsilon))
                            path.reverse();
                        last2 = path.getLastSegment();
                        if (first1 && first1._point.isClose(last2._point, epsilon)) {
                            first1.setHandleIn(last2._handleIn);
                            this._add(segments.slice(0, segments.length - 1), 0);
                        } else {
                            this._add(segments.slice());
                        }
                    }
                    if (path._closed)
                        this._add([segments[0]]);
                    path.remove();
                }
                var first = this.getFirstSegment(),
                    last = this.getLastSegment();
                if (first !== last && first._point.isClose(last._point, epsilon)) {
                    first.setHandleIn(last._handleIn);
                    last.remove();
                    this.setClosed(true);
                }
                return this;
            },

            reduce: function(options) {
                var curves = this.getCurves(),
                    simplify = options && options.simplify,
                    tolerance = simplify ? 1e-7 : 0;
                for (var i = curves.length - 1; i >= 0; i--) {
                    var curve = curves[i];
                    if (!curve.hasHandles() && (!curve.hasLength(tolerance) ||
                            simplify && curve.isCollinear(curve.getNext())))
                        curve.remove();
                }
                return this;
            },

            reverse: function() {
                this._segments.reverse();
                for (var i = 0, l = this._segments.length; i < l; i++) {
                    var segment = this._segments[i];
                    var handleIn = segment._handleIn;
                    segment._handleIn = segment._handleOut;
                    segment._handleOut = handleIn;
                    segment._index = i;
                }
                this._curves = null;
                this._changed(9);
            },

            flatten: function(flatness) {
                var flattener = new PathFlattener(this, flatness || 0.25, 256, true),
                    parts = flattener.parts,
                    length = parts.length,
                    segments = [];
                for (var i = 0; i < length; i++) {
                    segments.push(new Segment(parts[i].curve.slice(0, 2)));
                }
                if (!this._closed && length > 0) {
                    segments.push(new Segment(parts[length - 1].curve.slice(6)));
                }
                this.setSegments(segments);
            },

            simplify: function(tolerance) {
                var segments = new PathFitter(this).fit(tolerance || 2.5);
                if (segments)
                    this.setSegments(segments);
                return !!segments;
            },

            smooth: function(options) {
                var that = this,
                    opts = options || {},
                    type = opts.type || 'asymmetric',
                    segments = this._segments,
                    length = segments.length,
                    closed = this._closed;

                function getIndex(value, _default) {
                    var index = value && value.index;
                    if (index != null) {
                        var path = value.path;
                        if (path && path !== that)
                            throw new Error(value._class + ' ' + index + ' of ' + path +
                                ' is not part of ' + that);
                        if (_default && value instanceof Curve)
                            index++;
                    } else {
                        index = typeof value === 'number' ? value : _default;
                    }
                    return Math.min(index < 0 && closed ?
                        index % length :
                        index < 0 ? index + length : index, length - 1);
                }

                var loop = closed && opts.from === undefined && opts.to === undefined,
                    from = getIndex(opts.from, 0),
                    to = getIndex(opts.to, length - 1);

                if (from > to) {
                    if (closed) {
                        from -= length;
                    } else {
                        var tmp = from;
                        from = to;
                        to = tmp;
                    }
                }
                if (/^(?:asymmetric|continuous)$/.test(type)) {
                    var asymmetric = type === 'asymmetric',
                        min = Math.min,
                        amount = to - from + 1,
                        n = amount - 1,
                        padding = loop ? min(amount, 4) : 1,
                        paddingLeft = padding,
                        paddingRight = padding,
                        knots = [];
                    if (!closed) {
                        paddingLeft = min(1, from);
                        paddingRight = min(1, length - to - 1);
                    }
                    n += paddingLeft + paddingRight;
                    if (n <= 1)
                        return;
                    for (var i = 0, j = from - paddingLeft; i <= n; i++, j++) {
                        knots[i] = segments[(j < 0 ? j + length : j) % length]._point;
                    }

                    var x = knots[0]._x + 2 * knots[1]._x,
                        y = knots[0]._y + 2 * knots[1]._y,
                        f = 2,
                        n_1 = n - 1,
                        rx = [x],
                        ry = [y],
                        rf = [f],
                        px = [],
                        py = [];
                    for (var i = 1; i < n; i++) {
                        var internal = i < n_1,
                            a = internal ? 1 : asymmetric ? 1 : 2,
                            b = internal ? 4 : asymmetric ? 2 : 7,
                            u = internal ? 4 : asymmetric ? 3 : 8,
                            v = internal ? 2 : asymmetric ? 0 : 1,
                            m = a / f;
                        f = rf[i] = b - m;
                        x = rx[i] = u * knots[i]._x + v * knots[i + 1]._x - m * x;
                        y = ry[i] = u * knots[i]._y + v * knots[i + 1]._y - m * y;
                    }

                    px[n_1] = rx[n_1] / rf[n_1];
                    py[n_1] = ry[n_1] / rf[n_1];
                    for (var i = n - 2; i >= 0; i--) {
                        px[i] = (rx[i] - px[i + 1]) / rf[i];
                        py[i] = (ry[i] - py[i + 1]) / rf[i];
                    }
                    px[n] = (3 * knots[n]._x - px[n_1]) / 2;
                    py[n] = (3 * knots[n]._y - py[n_1]) / 2;

                    for (var i = paddingLeft, max = n - paddingRight, j = from; i <= max; i++, j++) {
                        var segment = segments[j < 0 ? j + length : j],
                            pt = segment._point,
                            hx = px[i] - pt._x,
                            hy = py[i] - pt._y;
                        if (loop || i < max)
                            segment.setHandleOut(hx, hy);
                        if (loop || i > paddingLeft)
                            segment.setHandleIn(-hx, -hy);
                    }
                } else {
                    for (var i = from; i <= to; i++) {
                        segments[i < 0 ? i + length : i].smooth(opts, !loop && i === from, !loop && i === to);
                    }
                }
            },

            toShape: function(insert) {
                if (!this._closed)
                    return null;

                var segments = this._segments,
                    type,
                    size,
                    radius,
                    topCenter;

                function isCollinear(i, j) {
                    var seg1 = segments[i],
                        seg2 = seg1.getNext(),
                        seg3 = segments[j],
                        seg4 = seg3.getNext();
                    return seg1._handleOut.isZero() && seg2._handleIn.isZero() &&
                        seg3._handleOut.isZero() && seg4._handleIn.isZero() &&
                        seg2._point.subtract(seg1._point).isCollinear(
                            seg4._point.subtract(seg3._point));
                }

                function isOrthogonal(i) {
                    var seg2 = segments[i],
                        seg1 = seg2.getPrevious(),
                        seg3 = seg2.getNext();
                    return seg1._handleOut.isZero() && seg2._handleIn.isZero() &&
                        seg2._handleOut.isZero() && seg3._handleIn.isZero() &&
                        seg2._point.subtract(seg1._point).isOrthogonal(
                            seg3._point.subtract(seg2._point));
                }

                function isArc(i) {
                    var seg1 = segments[i],
                        seg2 = seg1.getNext(),
                        handle1 = seg1._handleOut,
                        handle2 = seg2._handleIn,
                        kappa = 0.5522847498307936;
                    if (handle1.isOrthogonal(handle2)) {
                        var pt1 = seg1._point,
                            pt2 = seg2._point,
                            corner = new Line(pt1, handle1, true).intersect(
                                new Line(pt2, handle2, true), true);
                        return corner && Numerical.isZero(handle1.getLength() /
                                corner.subtract(pt1).getLength() - kappa) &&
                            Numerical.isZero(handle2.getLength() /
                                corner.subtract(pt2).getLength() - kappa);
                    }
                    return false;
                }

                function getDistance(i, j) {
                    return segments[i]._point.getDistance(segments[j]._point);
                }

                if (!this.hasHandles() && segments.length === 4 &&
                    isCollinear(0, 2) && isCollinear(1, 3) && isOrthogonal(1)) {
                    type = Shape.Rectangle;
                    size = new Size(getDistance(0, 3), getDistance(0, 1));
                    topCenter = segments[1]._point.add(segments[2]._point).divide(2);
                } else if (segments.length === 8 && isArc(0) && isArc(2) && isArc(4) &&
                    isArc(6) && isCollinear(1, 5) && isCollinear(3, 7)) {
                    type = Shape.Rectangle;
                    size = new Size(getDistance(1, 6), getDistance(0, 3));
                    radius = size.subtract(new Size(getDistance(0, 7),
                        getDistance(1, 2))).divide(2);
                    topCenter = segments[3]._point.add(segments[4]._point).divide(2);
                } else if (segments.length === 4 &&
                    isArc(0) && isArc(1) && isArc(2) && isArc(3)) {
                    if (Numerical.isZero(getDistance(0, 2) - getDistance(1, 3))) {
                        type = Shape.Circle;
                        radius = getDistance(0, 2) / 2;
                    } else {
                        type = Shape.Ellipse;
                        radius = new Size(getDistance(2, 0) / 2, getDistance(3, 1) / 2);
                    }
                    topCenter = segments[1]._point;
                }

                if (type) {
                    var center = this.getPosition(true),
                        shape = new type({
                            center: center,
                            size: size,
                            radius: radius,
                            insert: false
                        });
                    shape.copyAttributes(this, true);
                    shape._matrix.prepend(this._matrix);
                    shape.rotate(topCenter.subtract(center).getAngle() + 90);
                    if (insert === undefined || insert)
                        shape.insertAbove(this);
                    return shape;
                }
                return null;
            },

            toPath: '#clone',

            compare: function compare(path) {
                if (!path || path instanceof CompoundPath)
                    return compare.base.call(this, path);
                var curves1 = this.getCurves(),
                    curves2 = path.getCurves(),
                    length1 = curves1.length,
                    length2 = curves2.length;
                if (!length1 || !length2) {
                    return length1 == length2;
                }
                var v1 = curves1[0].getValues(),
                    values2 = [],
                    pos1 = 0,
                    pos2,
                    end1 = 0,
                    end2;
                for (var i = 0; i < length2; i++) {
                    var v2 = curves2[i].getValues();
                    values2.push(v2);
                    var overlaps = Curve.getOverlaps(v1, v2);
                    if (overlaps) {
                        pos2 = !i && overlaps[0][0] > 0 ? length2 - 1 : i;
                        end2 = overlaps[0][1];
                        break;
                    }
                }
                var abs = Math.abs,
                    epsilon = 1e-8,
                    v2 = values2[pos2],
                    start2;
                while (v1 && v2) {
                    var overlaps = Curve.getOverlaps(v1, v2);
                    if (overlaps) {
                        var t1 = overlaps[0][0];
                        if (abs(t1 - end1) < epsilon) {
                            end1 = overlaps[1][0];
                            if (end1 === 1) {
                                v1 = ++pos1 < length1 ? curves1[pos1].getValues() : null;
                                end1 = 0;
                            }
                            var t2 = overlaps[0][1];
                            if (abs(t2 - end2) < epsilon) {
                                if (!start2)
                                    start2 = [pos2, t2];
                                end2 = overlaps[1][1];
                                if (end2 === 1) {
                                    if (++pos2 >= length2)
                                        pos2 = 0;
                                    v2 = values2[pos2] || curves2[pos2].getValues();
                                    end2 = 0;
                                }
                                if (!v1) {
                                    return start2[0] === pos2 && start2[1] === end2;
                                }
                                continue;
                            }
                        }
                    }
                    break;
                }
                return false;
            },

            _hitTestSelf: function(point, options, viewMatrix, strokeMatrix) {
                var that = this,
                    style = this.getStyle(),
                    segments = this._segments,
                    numSegments = segments.length,
                    closed = this._closed,
                    tolerancePadding = options._tolerancePadding,
                    strokePadding = tolerancePadding,
                    join, cap, miterLimit,
                    area, loc, res,
                    hitStroke = options.stroke && style.hasStroke(),
                    hitFill = options.fill && style.hasFill(),
                    hitCurves = options.curves,
                    strokeRadius = hitStroke ?
                    style.getStrokeWidth() / 2 :
                    hitFill && options.tolerance > 0 || hitCurves ?
                    0 : null;
                if (strokeRadius !== null) {
                    if (strokeRadius > 0) {
                        join = style.getStrokeJoin();
                        cap = style.getStrokeCap();
                        miterLimit = style.getMiterLimit();
                        strokePadding = strokePadding.add(
                            Path._getStrokePadding(strokeRadius, strokeMatrix));
                    } else {
                        join = cap = 'round';
                    }
                }

                function isCloseEnough(pt, padding) {
                    return point.subtract(pt).divide(padding).length <= 1;
                }

                function checkSegmentPoint(seg, pt, name) {
                    if (!options.selected || pt.isSelected()) {
                        var anchor = seg._point;
                        if (pt !== anchor)
                            pt = pt.add(anchor);
                        if (isCloseEnough(pt, strokePadding)) {
                            return new HitResult(name, that, {
                                segment: seg,
                                point: pt
                            });
                        }
                    }
                }

                function checkSegmentPoints(seg, ends) {
                    return (ends || options.segments) &&
                        checkSegmentPoint(seg, seg._point, 'segment') ||
                        (!ends && options.handles) && (
                            checkSegmentPoint(seg, seg._handleIn, 'handle-in') ||
                            checkSegmentPoint(seg, seg._handleOut, 'handle-out'));
                }

                function addToArea(point) {
                    area.add(point);
                }

                function checkSegmentStroke(segment) {
                    var isJoin = closed || segment._index > 0 &&
                        segment._index < numSegments - 1;
                    if ((isJoin ? join : cap) === 'round') {
                        return isCloseEnough(segment._point, strokePadding);
                    } else {
                        area = new Path({
                            internal: true,
                            closed: true
                        });
                        if (isJoin) {
                            if (!segment.isSmooth()) {
                                Path._addBevelJoin(segment, join, strokeRadius,
                                    miterLimit, null, strokeMatrix, addToArea, true);
                            }
                        } else if (cap === 'square') {
                            Path._addSquareCap(segment, cap, strokeRadius, null,
                                strokeMatrix, addToArea, true);
                        }
                        if (!area.isEmpty()) {
                            var loc;
                            return area.contains(point) ||
                                (loc = area.getNearestLocation(point)) &&
                                isCloseEnough(loc.getPoint(), tolerancePadding);
                        }
                    }
                }

                if (options.ends && !options.segments && !closed) {
                    if (res = checkSegmentPoints(segments[0], true) ||
                        checkSegmentPoints(segments[numSegments - 1], true))
                        return res;
                } else if (options.segments || options.handles) {
                    for (var i = 0; i < numSegments; i++)
                        if (res = checkSegmentPoints(segments[i]))
                            return res;
                }
                if (strokeRadius !== null) {
                    loc = this.getNearestLocation(point);
                    if (loc) {
                        var time = loc.getTime();
                        if (time === 0 || time === 1 && numSegments > 1) {
                            if (!checkSegmentStroke(loc.getSegment()))
                                loc = null;
                        } else if (!isCloseEnough(loc.getPoint(), strokePadding)) {
                            loc = null;
                        }
                    }
                    if (!loc && join === 'miter' && numSegments > 1) {
                        for (var i = 0; i < numSegments; i++) {
                            var segment = segments[i];
                            if (point.getDistance(segment._point) <=
                                miterLimit * strokeRadius &&
                                checkSegmentStroke(segment)) {
                                loc = segment.getLocation();
                                break;
                            }
                        }
                    }
                }
                return !loc && hitFill && this._contains(point) ||
                    loc && !hitStroke && !hitCurves ?
                    new HitResult('fill', this) :
                    loc ?
                    new HitResult(hitStroke ? 'stroke' : 'curve', this, {
                        location: loc,
                        point: loc.getPoint()
                    }) :
                    null;
            }

        }, Base.each(Curve._evaluateMethods,
            function(name) {
                this[name + 'At'] = function(offset) {
                    var loc = this.getLocationAt(offset);
                    return loc && loc[name]();
                };
            }, {
                beans: false,

                getLocationOf: function() {
                    var point = Point.read(arguments),
                        curves = this.getCurves();
                    for (var i = 0, l = curves.length; i < l; i++) {
                        var loc = curves[i].getLocationOf(point);
                        if (loc)
                            return loc;
                    }
                    return null;
                },

                getOffsetOf: function() {
                    var loc = this.getLocationOf.apply(this, arguments);
                    return loc ? loc.getOffset() : null;
                },

                getLocationAt: function(offset) {
                    if (typeof offset === 'number') {
                        var curves = this.getCurves(),
                            length = 0;
                        for (var i = 0, l = curves.length; i < l; i++) {
                            var start = length,
                                curve = curves[i];
                            length += curve.getLength();
                            if (length > offset) {
                                return curve.getLocationAt(offset - start);
                            }
                        }
                        if (curves.length > 0 && offset <= this.getLength()) {
                            return new CurveLocation(curves[curves.length - 1], 1);
                        }
                    } else if (offset && offset.getPath && offset.getPath() === this) {
                        return offset;
                    }
                    return null;
                }

            }),
        new function() {

            function drawHandles(ctx, segments, matrix, size) {
                var half = size / 2,
                    coords = new Array(6),
                    pX, pY;

                function drawHandle(index) {
                    var hX = coords[index],
                        hY = coords[index + 1];
                    if (pX != hX || pY != hY) {
                        ctx.beginPath();
                        ctx.moveTo(pX, pY);
                        ctx.lineTo(hX, hY);
                        ctx.stroke();
                        ctx.beginPath();
                        ctx.arc(hX, hY, half, 0, Math.PI * 2, true);
                        ctx.fill();
                    }
                }

                for (var i = 0, l = segments.length; i < l; i++) {
                    var segment = segments[i],
                        selection = segment._selection;
                    segment._transformCoordinates(matrix, coords);
                    pX = coords[0];
                    pY = coords[1];
                    if (selection & 2)
                        drawHandle(2);
                    if (selection & 4)
                        drawHandle(4);
                    ctx.fillRect(pX - half, pY - half, size, size);
                    if (!(selection & 1)) {
                        var fillStyle = ctx.fillStyle;
                        ctx.fillStyle = '#ffffff';
                        ctx.fillRect(pX - half + 1, pY - half + 1, size - 2, size - 2);
                        ctx.fillStyle = fillStyle;
                    }
                }
            }

            function drawSegments(ctx, path, matrix) {
                var segments = path._segments,
                    length = segments.length,
                    coords = new Array(6),
                    first = true,
                    curX, curY,
                    prevX, prevY,
                    inX, inY,
                    outX, outY;

                function drawSegment(segment) {
                    if (matrix) {
                        segment._transformCoordinates(matrix, coords);
                        curX = coords[0];
                        curY = coords[1];
                    } else {
                        var point = segment._point;
                        curX = point._x;
                        curY = point._y;
                    }
                    if (first) {
                        ctx.moveTo(curX, curY);
                        first = false;
                    } else {
                        if (matrix) {
                            inX = coords[2];
                            inY = coords[3];
                        } else {
                            var handle = segment._handleIn;
                            inX = curX + handle._x;
                            inY = curY + handle._y;
                        }
                        if (inX === curX && inY === curY &&
                            outX === prevX && outY === prevY) {
                            ctx.lineTo(curX, curY);
                        } else {
                            ctx.bezierCurveTo(outX, outY, inX, inY, curX, curY);
                        }
                    }
                    prevX = curX;
                    prevY = curY;
                    if (matrix) {
                        outX = coords[4];
                        outY = coords[5];
                    } else {
                        var handle = segment._handleOut;
                        outX = prevX + handle._x;
                        outY = prevY + handle._y;
                    }
                }

                for (var i = 0; i < length; i++)
                    drawSegment(segments[i]);
                if (path._closed && length > 0)
                    drawSegment(segments[0]);
            }

            return {
                _draw: function(ctx, param, viewMatrix, strokeMatrix) {
                    var dontStart = param.dontStart,
                        dontPaint = param.dontFinish || param.clip,
                        style = this.getStyle(),
                        hasFill = style.hasFill(),
                        hasStroke = style.hasStroke(),
                        dashArray = style.getDashArray(),
                        dashLength = !paper.support.nativeDash && hasStroke &&
                        dashArray && dashArray.length;

                    if (!dontStart)
                        ctx.beginPath();

                    if (hasFill || hasStroke && !dashLength || dontPaint) {
                        drawSegments(ctx, this, strokeMatrix);
                        if (this._closed)
                            ctx.closePath();
                    }

                    function getOffset(i) {
                        return dashArray[((i % dashLength) + dashLength) % dashLength];
                    }

                    if (!dontPaint && (hasFill || hasStroke)) {
                        this._setStyles(ctx, param, viewMatrix);
                        if (hasFill) {
                            ctx.fill(style.getFillRule());
                            ctx.shadowColor = 'rgba(0,0,0,0)';
                        }
                        if (hasStroke) {
                            if (dashLength) {
                                if (!dontStart)
                                    ctx.beginPath();
                                var flattener = new PathFlattener(this, 0.25, 32, false,
                                        strokeMatrix),
                                    length = flattener.length,
                                    from = -style.getDashOffset(),
                                    to,
                                    i = 0;
                                from = from % length;
                                while (from > 0) {
                                    from -= getOffset(i--) + getOffset(i--);
                                }
                                while (from < length) {
                                    to = from + getOffset(i++);
                                    if (from > 0 || to > 0)
                                        flattener.drawPart(ctx,
                                            Math.max(from, 0), Math.max(to, 0));
                                    from = to + getOffset(i++);
                                }
                            }
                            ctx.stroke();
                        }
                    }
                },

                _drawSelected: function(ctx, matrix) {
                    ctx.beginPath();
                    drawSegments(ctx, this, matrix);
                    ctx.stroke();
                    drawHandles(ctx, this._segments, matrix, paper.settings.handleSize);
                }
            };
        },
        new function() {
            function getCurrentSegment(that) {
                var segments = that._segments;
                if (!segments.length)
                    throw new Error('Use a moveTo() command first');
                return segments[segments.length - 1];
            }

            return {
                moveTo: function() {
                    var segments = this._segments;
                    if (segments.length === 1)
                        this.removeSegment(0);
                    if (!segments.length)
                        this._add([new Segment(Point.read(arguments))]);
                },

                moveBy: function() {
                    throw new Error('moveBy() is unsupported on Path items.');
                },

                lineTo: function() {
                    this._add([new Segment(Point.read(arguments))]);
                },

                cubicCurveTo: function() {
                    var handle1 = Point.read(arguments),
                        handle2 = Point.read(arguments),
                        to = Point.read(arguments),
                        current = getCurrentSegment(this);
                    current.setHandleOut(handle1.subtract(current._point));
                    this._add([new Segment(to, handle2.subtract(to))]);
                },

                quadraticCurveTo: function() {
                    var handle = Point.read(arguments),
                        to = Point.read(arguments),
                        current = getCurrentSegment(this)._point;
                    this.cubicCurveTo(
                        handle.add(current.subtract(handle).multiply(1 / 3)),
                        handle.add(to.subtract(handle).multiply(1 / 3)),
                        to
                    );
                },

                curveTo: function() {
                    var through = Point.read(arguments),
                        to = Point.read(arguments),
                        t = Base.pick(Base.read(arguments), 0.5),
                        t1 = 1 - t,
                        current = getCurrentSegment(this)._point,
                        handle = through.subtract(current.multiply(t1 * t1))
                        .subtract(to.multiply(t * t)).divide(2 * t * t1);
                    if (handle.isNaN())
                        throw new Error(
                            'Cannot put a curve through points with parameter = ' + t);
                    this.quadraticCurveTo(handle, to);
                },

                arcTo: function() {
                    var abs = Math.abs,
                        sqrt = Math.sqrt,
                        current = getCurrentSegment(this),
                        from = current._point,
                        to = Point.read(arguments),
                        through,
                        peek = Base.peek(arguments),
                        clockwise = Base.pick(peek, true),
                        center, extent, vector, matrix;
                    if (typeof clockwise === 'boolean') {
                        var middle = from.add(to).divide(2),
                            through = middle.add(middle.subtract(from).rotate(
                                clockwise ? -90 : 90));
                    } else if (Base.remain(arguments) <= 2) {
                        through = to;
                        to = Point.read(arguments);
                    } else {
                        var radius = Size.read(arguments),
                            isZero = Numerical.isZero;
                        if (isZero(radius.width) || isZero(radius.height))
                            return this.lineTo(to);
                        var rotation = Base.read(arguments),
                            clockwise = !!Base.read(arguments),
                            large = !!Base.read(arguments),
                            middle = from.add(to).divide(2),
                            pt = from.subtract(middle).rotate(-rotation),
                            x = pt.x,
                            y = pt.y,
                            rx = abs(radius.width),
                            ry = abs(radius.height),
                            rxSq = rx * rx,
                            rySq = ry * ry,
                            xSq = x * x,
                            ySq = y * y;
                        var factor = sqrt(xSq / rxSq + ySq / rySq);
                        if (factor > 1) {
                            rx *= factor;
                            ry *= factor;
                            rxSq = rx * rx;
                            rySq = ry * ry;
                        }
                        factor = (rxSq * rySq - rxSq * ySq - rySq * xSq) /
                            (rxSq * ySq + rySq * xSq);
                        if (abs(factor) < 1e-12)
                            factor = 0;
                        if (factor < 0)
                            throw new Error(
                                'Cannot create an arc with the given arguments');
                        center = new Point(rx * y / ry, -ry * x / rx)
                            .multiply((large === clockwise ? -1 : 1) * sqrt(factor))
                            .rotate(rotation).add(middle);
                        matrix = new Matrix().translate(center).rotate(rotation)
                            .scale(rx, ry);
                        vector = matrix._inverseTransform(from);
                        extent = vector.getDirectedAngle(matrix._inverseTransform(to));
                        if (!clockwise && extent > 0)
                            extent -= 360;
                        else if (clockwise && extent < 0)
                            extent += 360;
                    }
                    if (through) {
                        var l1 = new Line(from.add(through).divide(2),
                                through.subtract(from).rotate(90), true),
                            l2 = new Line(through.add(to).divide(2),
                                to.subtract(through).rotate(90), true),
                            line = new Line(from, to),
                            throughSide = line.getSide(through);
                        center = l1.intersect(l2, true);
                        if (!center) {
                            if (!throughSide)
                                return this.lineTo(to);
                            throw new Error(
                                'Cannot create an arc with the given arguments');
                        }
                        vector = from.subtract(center);
                        extent = vector.getDirectedAngle(to.subtract(center));
                        var centerSide = line.getSide(center);
                        if (centerSide === 0) {
                            extent = throughSide * abs(extent);
                        } else if (throughSide === centerSide) {
                            extent += extent < 0 ? 360 : -360;
                        }
                    }
                    var epsilon = 1e-7,
                        ext = abs(extent),
                        count = ext >= 360 ? 4 : Math.ceil((ext - epsilon) / 90),
                        inc = extent / count,
                        half = inc * Math.PI / 360,
                        z = 4 / 3 * Math.sin(half) / (1 + Math.cos(half)),
                        segments = [];
                    for (var i = 0; i <= count; i++) {
                        var pt = to,
                            out = null;
                        if (i < count) {
                            out = vector.rotate(90).multiply(z);
                            if (matrix) {
                                pt = matrix._transformPoint(vector);
                                out = matrix._transformPoint(vector.add(out))
                                    .subtract(pt);
                            } else {
                                pt = center.add(vector);
                            }
                        }
                        if (!i) {
                            current.setHandleOut(out);
                        } else {
                            var _in = vector.rotate(-90).multiply(z);
                            if (matrix) {
                                _in = matrix._transformPoint(vector.add(_in))
                                    .subtract(pt);
                            }
                            segments.push(new Segment(pt, _in, out));
                        }
                        vector = vector.rotate(inc);
                    }
                    this._add(segments);
                },

                lineBy: function() {
                    var to = Point.read(arguments),
                        current = getCurrentSegment(this)._point;
                    this.lineTo(current.add(to));
                },

                curveBy: function() {
                    var through = Point.read(arguments),
                        to = Point.read(arguments),
                        parameter = Base.read(arguments),
                        current = getCurrentSegment(this)._point;
                    this.curveTo(current.add(through), current.add(to), parameter);
                },

                cubicCurveBy: function() {
                    var handle1 = Point.read(arguments),
                        handle2 = Point.read(arguments),
                        to = Point.read(arguments),
                        current = getCurrentSegment(this)._point;
                    this.cubicCurveTo(current.add(handle1), current.add(handle2),
                        current.add(to));
                },

                quadraticCurveBy: function() {
                    var handle = Point.read(arguments),
                        to = Point.read(arguments),
                        current = getCurrentSegment(this)._point;
                    this.quadraticCurveTo(current.add(handle), current.add(to));
                },

                arcBy: function() {
                    var current = getCurrentSegment(this)._point,
                        point = current.add(Point.read(arguments)),
                        clockwise = Base.pick(Base.peek(arguments), true);
                    if (typeof clockwise === 'boolean') {
                        this.arcTo(point, clockwise);
                    } else {
                        this.arcTo(point, current.add(Point.read(arguments)));
                    }
                },

                closePath: function(tolerance) {
                    this.setClosed(true);
                    this.join(this, tolerance);
                }
            };
        }, {

            _getBounds: function(matrix, options) {
                var method = options.handle ?
                    'getHandleBounds' :
                    options.stroke ?
                    'getStrokeBounds' :
                    'getBounds';
                return Path[method](this._segments, this._closed, this, matrix, options);
            },

            statics: {
                getBounds: function(segments, closed, path, matrix, options, strokePadding) {
                    var first = segments[0];
                    if (!first)
                        return new Rectangle();
                    var coords = new Array(6),
                        prevCoords = first._transformCoordinates(matrix, new Array(6)),
                        min = prevCoords.slice(0, 2),
                        max = min.slice(),
                        roots = new Array(2);

                    function processSegment(segment) {
                        segment._transformCoordinates(matrix, coords);
                        for (var i = 0; i < 2; i++) {
                            Curve._addBounds(
                                prevCoords[i],
                                prevCoords[i + 4],
                                coords[i + 2],
                                coords[i],
                                i, strokePadding ? strokePadding[i] : 0, min, max, roots);
                        }
                        var tmp = prevCoords;
                        prevCoords = coords;
                        coords = tmp;
                    }

                    for (var i = 1, l = segments.length; i < l; i++)
                        processSegment(segments[i]);
                    if (closed)
                        processSegment(first);
                    return new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);
                },

                getStrokeBounds: function(segments, closed, path, matrix, options) {
                    var style = path.getStyle(),
                        stroke = style.hasStroke(),
                        strokeWidth = style.getStrokeWidth(),
                        strokeMatrix = stroke && path._getStrokeMatrix(matrix, options),
                        strokePadding = stroke && Path._getStrokePadding(strokeWidth,
                            strokeMatrix),
                        bounds = Path.getBounds(segments, closed, path, matrix, options,
                            strokePadding);
                    if (!stroke)
                        return bounds;
                    var strokeRadius = strokeWidth / 2,
                        join = style.getStrokeJoin(),
                        cap = style.getStrokeCap(),
                        miterLimit = style.getMiterLimit(),
                        joinBounds = new Rectangle(new Size(strokePadding));

                    function addPoint(point) {
                        bounds = bounds.include(point);
                    }

                    function addRound(segment) {
                        bounds = bounds.unite(
                            joinBounds.setCenter(segment._point.transform(matrix)));
                    }

                    function addJoin(segment, join) {
                        if (join === 'round' || segment.isSmooth()) {
                            addRound(segment);
                        } else {
                            Path._addBevelJoin(segment, join, strokeRadius, miterLimit,
                                matrix, strokeMatrix, addPoint);
                        }
                    }

                    function addCap(segment, cap) {
                        if (cap === 'round') {
                            addRound(segment);
                        } else {
                            Path._addSquareCap(segment, cap, strokeRadius, matrix,
                                strokeMatrix, addPoint);
                        }
                    }

                    var length = segments.length - (closed ? 0 : 1);
                    for (var i = 1; i < length; i++)
                        addJoin(segments[i], join);
                    if (closed) {
                        addJoin(segments[0], join);
                    } else if (length > 0) {
                        addCap(segments[0], cap);
                        addCap(segments[segments.length - 1], cap);
                    }
                    return bounds;
                },

                _getStrokePadding: function(radius, matrix) {
                    if (!matrix)
                        return [radius, radius];
                    var hor = new Point(radius, 0).transform(matrix),
                        ver = new Point(0, radius).transform(matrix),
                        phi = hor.getAngleInRadians(),
                        a = hor.getLength(),
                        b = ver.getLength();
                    var sin = Math.sin(phi),
                        cos = Math.cos(phi),
                        tan = Math.tan(phi),
                        tx = Math.atan2(b * tan, a),
                        ty = Math.atan2(b, tan * a);
                    return [Math.abs(a * Math.cos(tx) * cos + b * Math.sin(tx) * sin),
                        Math.abs(b * Math.sin(ty) * cos + a * Math.cos(ty) * sin)
                    ];
                },

                _addBevelJoin: function(segment, join, radius, miterLimit, matrix,
                    strokeMatrix, addPoint, isArea) {
                    var curve2 = segment.getCurve(),
                        curve1 = curve2.getPrevious(),
                        point = curve2.getPoint1().transform(matrix),
                        normal1 = curve1.getNormalAtTime(1).multiply(radius)
                        .transform(strokeMatrix),
                        normal2 = curve2.getNormalAtTime(0).multiply(radius)
                        .transform(strokeMatrix);
                    if (normal1.getDirectedAngle(normal2) < 0) {
                        normal1 = normal1.negate();
                        normal2 = normal2.negate();
                    }
                    if (isArea)
                        addPoint(point);
                    addPoint(point.add(normal1));
                    if (join === 'miter') {
                        var corner = new Line(point.add(normal1),
                            new Point(-normal1.y, normal1.x), true
                        ).intersect(new Line(point.add(normal2),
                            new Point(-normal2.y, normal2.x), true
                        ), true);
                        if (corner && point.getDistance(corner) <= miterLimit * radius) {
                            addPoint(corner);
                        }
                    }
                    addPoint(point.add(normal2));
                },

                _addSquareCap: function(segment, cap, radius, matrix, strokeMatrix,
                    addPoint, isArea) {
                    var point = segment._point.transform(matrix),
                        loc = segment.getLocation(),
                        normal = loc.getNormal()
                        .multiply(loc.getTime() === 0 ? radius : -radius)
                        .transform(strokeMatrix);
                    if (cap === 'square') {
                        if (isArea) {
                            addPoint(point.subtract(normal));
                            addPoint(point.add(normal));
                        }
                        point = point.add(normal.rotate(-90));
                    }
                    addPoint(point.add(normal));
                    addPoint(point.subtract(normal));
                },

                getHandleBounds: function(segments, closed, path, matrix, options) {
                    var style = path.getStyle(),
                        stroke = options.stroke && style.hasStroke(),
                        strokePadding,
                        joinPadding;
                    if (stroke) {
                        var strokeMatrix = path._getStrokeMatrix(matrix, options),
                            strokeRadius = style.getStrokeWidth() / 2,
                            joinRadius = strokeRadius;
                        if (style.getStrokeJoin() === 'miter')
                            joinRadius = strokeRadius * style.getMiterLimit();
                        if (style.getStrokeCap() === 'square')
                            joinRadius = Math.max(joinRadius, strokeRadius * Math.SQRT2);
                        strokePadding = Path._getStrokePadding(strokeRadius, strokeMatrix);
                        joinPadding = Path._getStrokePadding(joinRadius, strokeMatrix);
                    }
                    var coords = new Array(6),
                        x1 = Infinity,
                        x2 = -x1,
                        y1 = x1,
                        y2 = x2;
                    for (var i = 0, l = segments.length; i < l; i++) {
                        var segment = segments[i];
                        segment._transformCoordinates(matrix, coords);
                        for (var j = 0; j < 6; j += 2) {
                            var padding = !j ? joinPadding : strokePadding,
                                paddingX = padding ? padding[0] : 0,
                                paddingY = padding ? padding[1] : 0,
                                x = coords[j],
                                y = coords[j + 1],
                                xn = x - paddingX,
                                xx = x + paddingX,
                                yn = y - paddingY,
                                yx = y + paddingY;
                            if (xn < x1) x1 = xn;
                            if (xx > x2) x2 = xx;
                            if (yn < y1) y1 = yn;
                            if (yx > y2) y2 = yx;
                        }
                    }
                    return new Rectangle(x1, y1, x2 - x1, y2 - y1);
                }
            }
        });

    Path.inject({
        statics: new function() {

            var kappa = 0.5522847498307936,
                ellipseSegments = [
                    new Segment([-1, 0], [0, kappa], [0, -kappa]),
                    new Segment([0, -1], [-kappa, 0], [kappa, 0]),
                    new Segment([1, 0], [0, -kappa], [0, kappa]),
                    new Segment([0, 1], [kappa, 0], [-kappa, 0])
                ];

            function createPath(segments, closed, args) {
                var props = Base.getNamed(args),
                    path = new Path(props && props.insert == false && Item.NO_INSERT);
                path._add(segments);
                path._closed = closed;
                return path.set(props, {
                    insert: true
                });
            }

            function createEllipse(center, radius, args) {
                var segments = new Array(4);
                for (var i = 0; i < 4; i++) {
                    var segment = ellipseSegments[i];
                    segments[i] = new Segment(
                        segment._point.multiply(radius).add(center),
                        segment._handleIn.multiply(radius),
                        segment._handleOut.multiply(radius)
                    );
                }
                return createPath(segments, true, args);
            }

            return {
                Line: function() {
                    return createPath([
                        new Segment(Point.readNamed(arguments, 'from')),
                        new Segment(Point.readNamed(arguments, 'to'))
                    ], false, arguments);
                },

                Circle: function() {
                    var center = Point.readNamed(arguments, 'center'),
                        radius = Base.readNamed(arguments, 'radius');
                    return createEllipse(center, new Size(radius), arguments);
                },

                Rectangle: function() {
                    var rect = Rectangle.readNamed(arguments, 'rectangle'),
                        radius = Size.readNamed(arguments, 'radius', 0, {
                            readNull: true
                        }),
                        bl = rect.getBottomLeft(true),
                        tl = rect.getTopLeft(true),
                        tr = rect.getTopRight(true),
                        br = rect.getBottomRight(true),
                        segments;
                    if (!radius || radius.isZero()) {
                        segments = [
                            new Segment(bl),
                            new Segment(tl),
                            new Segment(tr),
                            new Segment(br)
                        ];
                    } else {
                        radius = Size.min(radius, rect.getSize(true).divide(2));
                        var rx = radius.width,
                            ry = radius.height,
                            hx = rx * kappa,
                            hy = ry * kappa;
                        segments = [
                            new Segment(bl.add(rx, 0), null, [-hx, 0]),
                            new Segment(bl.subtract(0, ry), [0, hy]),
                            new Segment(tl.add(0, ry), null, [0, -hy]),
                            new Segment(tl.add(rx, 0), [-hx, 0], null),
                            new Segment(tr.subtract(rx, 0), null, [hx, 0]),
                            new Segment(tr.add(0, ry), [0, -hy], null),
                            new Segment(br.subtract(0, ry), null, [0, hy]),
                            new Segment(br.subtract(rx, 0), [hx, 0])
                        ];
                    }
                    return createPath(segments, true, arguments);
                },

                RoundRectangle: '#Rectangle',

                Ellipse: function() {
                    var ellipse = Shape._readEllipse(arguments);
                    return createEllipse(ellipse.center, ellipse.radius, arguments);
                },

                Oval: '#Ellipse',

                Arc: function() {
                    var from = Point.readNamed(arguments, 'from'),
                        through = Point.readNamed(arguments, 'through'),
                        to = Point.readNamed(arguments, 'to'),
                        props = Base.getNamed(arguments),
                        path = new Path(props && props.insert == false &&
                            Item.NO_INSERT);
                    path.moveTo(from);
                    path.arcTo(through, to);
                    return path.set(props);
                },

                RegularPolygon: function() {
                    var center = Point.readNamed(arguments, 'center'),
                        sides = Base.readNamed(arguments, 'sides'),
                        radius = Base.readNamed(arguments, 'radius'),
                        step = 360 / sides,
                        three = sides % 3 === 0,
                        vector = new Point(0, three ? -radius : radius),
                        offset = three ? -1 : 0.5,
                        segments = new Array(sides);
                    for (var i = 0; i < sides; i++)
                        segments[i] = new Segment(center.add(
                            vector.rotate((i + offset) * step)));
                    return createPath(segments, true, arguments);
                },

                Star: function() {
                    var center = Point.readNamed(arguments, 'center'),
                        points = Base.readNamed(arguments, 'points') * 2,
                        radius1 = Base.readNamed(arguments, 'radius1'),
                        radius2 = Base.readNamed(arguments, 'radius2'),
                        step = 360 / points,
                        vector = new Point(0, -1),
                        segments = new Array(points);
                    for (var i = 0; i < points; i++)
                        segments[i] = new Segment(center.add(vector.rotate(step * i)
                            .multiply(i % 2 ? radius2 : radius1)));
                    return createPath(segments, true, arguments);
                }
            };
        }
    });

    var CompoundPath = PathItem.extend({
            _class: 'CompoundPath',
            _serializeFields: {
                children: []
            },
            beans: true,

            initialize: function CompoundPath(arg) {
                this._children = [];
                this._namedChildren = {};
                if (!this._initialize(arg)) {
                    if (typeof arg === 'string') {
                        this.setPathData(arg);
                    } else {
                        this.addChildren(Array.isArray(arg) ? arg : arguments);
                    }
                }
            },

            insertChildren: function insertChildren(index, items) {
                var list = items,
                    first = list[0];
                if (first && typeof first[0] === 'number')
                    list = [list];
                for (var i = items.length - 1; i >= 0; i--) {
                    var item = list[i];
                    if (list === items && !(item instanceof Path))
                        list = Base.slice(list);
                    if (Array.isArray(item)) {
                        list[i] = new Path({
                            segments: item,
                            insert: false
                        });
                    } else if (item instanceof CompoundPath) {
                        list.splice.apply(list, [i, 1].concat(item.removeChildren()));
                        item.remove();
                    }
                }
                return insertChildren.base.call(this, index, list);
            },

            reduce: function reduce(options) {
                var children = this._children;
                for (var i = children.length - 1; i >= 0; i--) {
                    var path = children[i].reduce(options);
                    if (path.isEmpty())
                        path.remove();
                }
                if (!children.length) {
                    var path = new Path(Item.NO_INSERT);
                    path.copyAttributes(this);
                    path.insertAbove(this);
                    this.remove();
                    return path;
                }
                return reduce.base.call(this);
            },

            isClosed: function() {
                var children = this._children;
                for (var i = 0, l = children.length; i < l; i++) {
                    if (!children[i]._closed)
                        return false;
                }
                return true;
            },

            setClosed: function(closed) {
                var children = this._children;
                for (var i = 0, l = children.length; i < l; i++) {
                    children[i].setClosed(closed);
                }
            },

            getFirstSegment: function() {
                var first = this.getFirstChild();
                return first && first.getFirstSegment();
            },

            getLastSegment: function() {
                var last = this.getLastChild();
                return last && last.getLastSegment();
            },

            getCurves: function() {
                var children = this._children,
                    curves = [];
                for (var i = 0, l = children.length; i < l; i++)
                    curves.push.apply(curves, children[i].getCurves());
                return curves;
            },

            getFirstCurve: function() {
                var first = this.getFirstChild();
                return first && first.getFirstCurve();
            },

            getLastCurve: function() {
                var last = this.getLastChild();
                return last && last.getLastCurve();
            },

            getArea: function() {
                var children = this._children,
                    area = 0;
                for (var i = 0, l = children.length; i < l; i++)
                    area += children[i].getArea();
                return area;
            },

            getLength: function() {
                var children = this._children,
                    length = 0;
                for (var i = 0, l = children.length; i < l; i++)
                    length += children[i].getLength();
                return length;
            },

            getPathData: function(_matrix, _precision) {
                var children = this._children,
                    paths = [];
                for (var i = 0, l = children.length; i < l; i++) {
                    var child = children[i],
                        mx = child._matrix;
                    paths.push(child.getPathData(_matrix && !mx.isIdentity() ?
                        _matrix.appended(mx) : _matrix, _precision));
                }
                return paths.join('');
            },

            _hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {
                return _hitTestChildren.base.call(this, point,
                    options.class === Path || options.type === 'path' ? options :
                    Base.set({}, options, {
                        fill: false
                    }),
                    viewMatrix);
            },

            _draw: function(ctx, param, viewMatrix, strokeMatrix) {
                var children = this._children;
                if (!children.length)
                    return;

                param = param.extend({
                    dontStart: true,
                    dontFinish: true
                });
                ctx.beginPath();
                for (var i = 0, l = children.length; i < l; i++)
                    children[i].draw(ctx, param, strokeMatrix);

                if (!param.clip) {
                    this._setStyles(ctx, param, viewMatrix);
                    var style = this._style;
                    if (style.hasFill()) {
                        ctx.fill(style.getFillRule());
                        ctx.shadowColor = 'rgba(0,0,0,0)';
                    }
                    if (style.hasStroke())
                        ctx.stroke();
                }
            },

            _drawSelected: function(ctx, matrix, selectionItems) {
                var children = this._children;
                for (var i = 0, l = children.length; i < l; i++) {
                    var child = children[i],
                        mx = child._matrix;
                    if (!selectionItems[child._id]) {
                        child._drawSelected(ctx, mx.isIdentity() ? matrix :
                            matrix.appended(mx));
                    }
                }
            }
        },
        new function() {
            function getCurrentPath(that, check) {
                var children = that._children;
                if (check && !children.length)
                    throw new Error('Use a moveTo() command first');
                return children[children.length - 1];
            }

            return Base.each(['lineTo', 'cubicCurveTo', 'quadraticCurveTo', 'curveTo',
                    'arcTo', 'lineBy', 'cubicCurveBy', 'quadraticCurveBy', 'curveBy',
                    'arcBy'
                ],
                function(key) {
                    this[key] = function() {
                        var path = getCurrentPath(this, true);
                        path[key].apply(path, arguments);
                    };
                }, {
                    moveTo: function() {
                        var current = getCurrentPath(this),
                            path = current && current.isEmpty() ? current :
                            new Path(Item.NO_INSERT);
                        if (path !== current)
                            this.addChild(path);
                        path.moveTo.apply(path, arguments);
                    },

                    moveBy: function() {
                        var current = getCurrentPath(this, true),
                            last = current && current.getLastSegment(),
                            point = Point.read(arguments);
                        this.moveTo(last ? point.add(last._point) : point);
                    },

                    closePath: function(tolerance) {
                        getCurrentPath(this, true).closePath(tolerance);
                    }
                }
            );
        }, Base.each(['reverse', 'flatten', 'simplify', 'smooth'], function(key) {
            this[key] = function(param) {
                var children = this._children,
                    res;
                for (var i = 0, l = children.length; i < l; i++) {
                    res = children[i][key](param) || res;
                }
                return res;
            };
        }, {}));

    PathItem.inject(new function() {
        var min = Math.min,
            max = Math.max,
            abs = Math.abs,
            operators = {
                unite: {
                    '1': true,
                    '2': true
                },
                intersect: {
                    '2': true
                },
                subtract: {
                    '1': true
                },
                exclude: {
                    '1': true,
                    '-1': true
                }
            };

        function preparePath(path, resolve) {
            var res = path.clone(false).reduce({
                    simplify: true
                })
                .transform(null, true, true);
            return resolve ?
                res.resolveCrossings().reorient(
                    res.getFillRule() === 'nonzero', true) :
                res;
        }

        function createResult(paths, simplify, path1, path2, options) {
            var result = new CompoundPath(Item.NO_INSERT);
            result.addChildren(paths, true);
            result = result.reduce({
                simplify: simplify
            });
            if (!(options && options.insert == false)) {
                result.insertAbove(path2 && path1.isSibling(path2) &&
                    path1.getIndex() < path2.getIndex() ? path2 : path1);
            }
            result.copyAttributes(path1, true);
            return result;
        }

        function traceBoolean(path1, path2, operation, options) {
            if (options && (options.trace == false || options.stroke) &&
                /^(subtract|intersect)$/.test(operation))
                return splitBoolean(path1, path2, operation);
            var _path1 = preparePath(path1, true),
                _path2 = path2 && path1 !== path2 && preparePath(path2, true),
                operator = operators[operation];
            operator[operation] = true;
            if (_path2 && (operator.subtract || operator.exclude) ^
                (_path2.isClockwise() ^ _path1.isClockwise()))
                _path2.reverse();
            var crossings = divideLocations(
                    CurveLocation.expand(_path1.getCrossings(_path2))),
                paths1 = _path1._children || [_path1],
                paths2 = _path2 && (_path2._children || [_path2]),
                segments = [],
                curves = [],
                paths;

            function collect(paths) {
                for (var i = 0, l = paths.length; i < l; i++) {
                    var path = paths[i];
                    segments.push.apply(segments, path._segments);
                    curves.push.apply(curves, path.getCurves());
                    path._overlapsOnly = true;
                }
            }

            if (crossings.length) {
                collect(paths1);
                if (paths2)
                    collect(paths2);
                for (var i = 0, l = crossings.length; i < l; i++) {
                    propagateWinding(crossings[i]._segment, _path1, _path2, curves,
                        operator);
                }
                for (var i = 0, l = segments.length; i < l; i++) {
                    var segment = segments[i],
                        inter = segment._intersection;
                    if (!segment._winding) {
                        propagateWinding(segment, _path1, _path2, curves, operator);
                    }
                    if (!(inter && inter._overlap))
                        segment._path._overlapsOnly = false;
                }
                paths = tracePaths(segments, operator);
            } else {
                paths = reorientPaths(
                    paths2 ? paths1.concat(paths2) : paths1.slice(),
                    function(w) {
                        return !!operator[w];
                    });
            }

            return createResult(paths, true, path1, path2, options);
        }

        function splitBoolean(path1, path2, operation) {
            var _path1 = preparePath(path1),
                _path2 = preparePath(path2),
                crossings = _path1.getCrossings(_path2),
                subtract = operation === 'subtract',
                divide = operation === 'divide',
                added = {},
                paths = [];

            function addPath(path) {
                if (!added[path._id] && (divide ||
                        _path2.contains(path.getPointAt(path.getLength() / 2)) ^
                        subtract)) {
                    paths.unshift(path);
                    return added[path._id] = true;
                }
            }

            for (var i = crossings.length - 1; i >= 0; i--) {
                var path = crossings[i].split();
                if (path) {
                    if (addPath(path))
                        path.getFirstSegment().setHandleIn(0, 0);
                    _path1.getLastSegment().setHandleOut(0, 0);
                }
            }
            addPath(_path1);
            return createResult(paths, false, path1, path2);
        }

        function linkIntersections(from, to) {
            var prev = from;
            while (prev) {
                if (prev === to)
                    return;
                prev = prev._previous;
            }
            while (from._next && from._next !== to)
                from = from._next;
            if (!from._next) {
                while (to._previous)
                    to = to._previous;
                from._next = to;
                to._previous = from;
            }
        }

        function clearCurveHandles(curves) {
            for (var i = curves.length - 1; i >= 0; i--)
                curves[i].clearHandles();
        }

        function reorientPaths(paths, isInside, clockwise) {
            var length = paths && paths.length;
            if (length) {
                var lookup = Base.each(paths, function(path, i) {
                        this[path._id] = {
                            container: null,
                            winding: path.isClockwise() ? 1 : -1,
                            index: i
                        };
                    }, {}),
                    sorted = paths.slice().sort(function(a, b) {
                        return abs(b.getArea()) - abs(a.getArea());
                    }),
                    first = sorted[0];
                if (clockwise == null)
                    clockwise = first.isClockwise();
                for (var i = 0; i < length; i++) {
                    var path1 = sorted[i],
                        entry1 = lookup[path1._id],
                        point = path1.getInteriorPoint(),
                        containerWinding = 0;
                    for (var j = i - 1; j >= 0; j--) {
                        var path2 = sorted[j];
                        if (path2.contains(point)) {
                            var entry2 = lookup[path2._id];
                            containerWinding = entry2.winding;
                            entry1.winding += containerWinding;
                            entry1.container = entry2.exclude ? entry2.container :
                                path2;
                            break;
                        }
                    }
                    if (isInside(entry1.winding) === isInside(containerWinding)) {
                        entry1.exclude = true;
                        paths[entry1.index] = null;
                    } else {
                        var container = entry1.container;
                        path1.setClockwise(container ? !container.isClockwise() :
                            clockwise);
                    }
                }
            }
            return paths;
        }

        function divideLocations(locations, include, clearLater) {
            var results = include && [],
                tMin = 1e-8,
                tMax = 1 - tMin,
                clearHandles = false,
                clearCurves = clearLater || [],
                clearLookup = clearLater && {},
                renormalizeLocs,
                prevCurve,
                prevTime;

            function getId(curve) {
                return curve._path._id + '.' + curve._segment1._index;
            }

            for (var i = (clearLater && clearLater.length) - 1; i >= 0; i--) {
                var curve = clearLater[i];
                if (curve._path)
                    clearLookup[getId(curve)] = true;
            }

            for (var i = locations.length - 1; i >= 0; i--) {
                var loc = locations[i],
                    time = loc._time,
                    origTime = time,
                    exclude = include && !include(loc),
                    curve = loc._curve,
                    segment;
                if (curve) {
                    if (curve !== prevCurve) {
                        clearHandles = !curve.hasHandles() ||
                            clearLookup && clearLookup[getId(curve)];
                        renormalizeLocs = [];
                        prevTime = null;
                        prevCurve = curve;
                    } else if (prevTime >= tMin) {
                        time /= prevTime;
                    }
                }
                if (exclude) {
                    if (renormalizeLocs)
                        renormalizeLocs.push(loc);
                    continue;
                } else if (include) {
                    results.unshift(loc);
                }
                prevTime = origTime;
                if (time < tMin) {
                    segment = curve._segment1;
                } else if (time > tMax) {
                    segment = curve._segment2;
                } else {
                    var newCurve = curve.divideAtTime(time, true);
                    if (clearHandles)
                        clearCurves.push(curve, newCurve);
                    segment = newCurve._segment1;
                    for (var j = renormalizeLocs.length - 1; j >= 0; j--) {
                        var l = renormalizeLocs[j];
                        l._time = (l._time - time) / (1 - time);
                    }
                }
                loc._setSegment(segment);
                var inter = segment._intersection,
                    dest = loc._intersection;
                if (inter) {
                    linkIntersections(inter, dest);
                    var other = inter;
                    while (other) {
                        linkIntersections(other._intersection, inter);
                        other = other._next;
                    }
                } else {
                    segment._intersection = dest;
                }
            }
            if (!clearLater)
                clearCurveHandles(clearCurves);
            return results || locations;
        }

        function getWinding(point, curves, dir, closed, dontFlip) {
            var ia = dir ? 1 : 0,
                io = ia ^ 1,
                pv = [point.x, point.y],
                pa = pv[ia],
                po = pv[io],
                windingEpsilon = 1e-9,
                qualityEpsilon = 1e-6,
                paL = pa - windingEpsilon,
                paR = pa + windingEpsilon,
                windingL = 0,
                windingR = 0,
                pathWindingL = 0,
                pathWindingR = 0,
                onPath = false,
                onAnyPath = false,
                quality = 1,
                roots = [],
                vPrev,
                vClose;

            function addWinding(v) {
                var o0 = v[io + 0],
                    o3 = v[io + 6];
                if (po < min(o0, o3) || po > max(o0, o3)) {
                    return;
                }
                var a0 = v[ia + 0],
                    a1 = v[ia + 2],
                    a2 = v[ia + 4],
                    a3 = v[ia + 6];
                if (o0 === o3) {
                    if (a0 < paR && a3 > paL || a3 < paR && a0 > paL) {
                        onPath = true;
                    }
                    return;
                }
                var t = po === o0 ? 0 :
                    po === o3 ? 1 :
                    paL > max(a0, a1, a2, a3) || paR < min(a0, a1, a2, a3) ?
                    1 :
                    Curve.solveCubic(v, io, po, roots, 0, 1) > 0 ?
                    roots[0] :
                    1,
                    a = t === 0 ? a0 :
                    t === 1 ? a3 :
                    Curve.getPoint(v, t)[dir ? 'y' : 'x'],
                    winding = o0 > o3 ? 1 : -1,
                    windingPrev = vPrev[io] > vPrev[io + 6] ? 1 : -1,
                    a3Prev = vPrev[ia + 6];
                if (po !== o0) {
                    if (a < paL) {
                        pathWindingL += winding;
                    } else if (a > paR) {
                        pathWindingR += winding;
                    } else {
                        onPath = true;
                    }
                    if (a > pa - qualityEpsilon && a < pa + qualityEpsilon)
                        quality /= 2;
                } else {
                    if (winding !== windingPrev) {
                        if (a0 < paL) {
                            pathWindingL += winding;
                        } else if (a0 > paR) {
                            pathWindingR += winding;
                        }
                    } else if (a0 != a3Prev) {
                        if (a3Prev < paR && a > paR) {
                            pathWindingR += winding;
                            onPath = true;
                        } else if (a3Prev > paL && a < paL) {
                            pathWindingL += winding;
                            onPath = true;
                        }
                    }
                    quality = 0;
                }
                vPrev = v;
                return !dontFlip && a > paL && a < paR &&
                    Curve.getTangent(v, t)[dir ? 'x' : 'y'] === 0 &&
                    getWinding(point, curves, !dir, closed, true);
            }

            function handleCurve(v) {
                var o0 = v[io + 0],
                    o1 = v[io + 2],
                    o2 = v[io + 4],
                    o3 = v[io + 6];
                if (po <= max(o0, o1, o2, o3) && po >= min(o0, o1, o2, o3)) {
                    var a0 = v[ia + 0],
                        a1 = v[ia + 2],
                        a2 = v[ia + 4],
                        a3 = v[ia + 6],
                        monoCurves = paL > max(a0, a1, a2, a3) ||
                        paR < min(a0, a1, a2, a3) ?
                        [v] : Curve.getMonoCurves(v, dir),
                        res;
                    for (var i = 0, l = monoCurves.length; i < l; i++) {
                        if (res = addWinding(monoCurves[i]))
                            return res;
                    }
                }
            }

            for (var i = 0, l = curves.length; i < l; i++) {
                var curve = curves[i],
                    path = curve._path,
                    v = curve.getValues(),
                    res;
                if (!i || curves[i - 1]._path !== path) {
                    vPrev = null;
                    if (!path._closed) {
                        vClose = Curve.getValues(
                            path.getLastCurve().getSegment2(),
                            curve.getSegment1(),
                            null, !closed);
                        if (vClose[io] !== vClose[io + 6]) {
                            vPrev = vClose;
                        }
                    }

                    if (!vPrev) {
                        vPrev = v;
                        var prev = path.getLastCurve();
                        while (prev && prev !== curve) {
                            var v2 = prev.getValues();
                            if (v2[io] !== v2[io + 6]) {
                                vPrev = v2;
                                break;
                            }
                            prev = prev.getPrevious();
                        }
                    }
                }

                if (res = handleCurve(v))
                    return res;

                if (i + 1 === l || curves[i + 1]._path !== path) {
                    if (vClose && (res = handleCurve(vClose)))
                        return res;
                    if (onPath && !pathWindingL && !pathWindingR) {
                        pathWindingL = pathWindingR = path.isClockwise(closed) ^ dir ?
                            1 : -1;
                    }
                    windingL += pathWindingL;
                    windingR += pathWindingR;
                    pathWindingL = pathWindingR = 0;
                    if (onPath) {
                        onAnyPath = true;
                        onPath = false;
                    }
                    vClose = null;
                }
            }
            windingL = abs(windingL);
            windingR = abs(windingR);
            return {
                winding: max(windingL, windingR),
                windingL: windingL,
                windingR: windingR,
                quality: quality,
                onPath: onAnyPath
            };
        }

        function propagateWinding(segment, path1, path2, curves, operator) {
            var chain = [],
                start = segment,
                totalLength = 0,
                winding;
            do {
                var curve = segment.getCurve(),
                    length = curve.getLength();
                chain.push({
                    segment: segment,
                    curve: curve,
                    length: length
                });
                totalLength += length;
                segment = segment.getNext();
            } while (segment && !segment._intersection && segment !== start);
            var offsets = [0.5, 0.25, 0.75],
                winding = {
                    winding: 0,
                    quality: -1
                },
                tMin = 1e-8,
                tMax = 1 - tMin;
            for (var i = 0; i < offsets.length && winding.quality < 0.5; i++) {
                var length = totalLength * offsets[i];
                for (var j = 0, l = chain.length; j < l; j++) {
                    var entry = chain[j],
                        curveLength = entry.length;
                    if (length <= curveLength) {
                        var curve = entry.curve,
                            path = curve._path,
                            parent = path._parent,
                            operand = parent instanceof CompoundPath ? parent : path,
                            t = Numerical.clamp(curve.getTimeAt(length), tMin, tMax),
                            pt = curve.getPointAtTime(t),
                            dir = abs(curve.getTangentAtTime(t).y) < Math.SQRT1_2;
                        var wind = !(operator.subtract && path2 && (
                                operand === path1 &&
                                path2._getWinding(pt, dir, true).winding ||
                                operand === path2 &&
                                !path1._getWinding(pt, dir, true).winding)) ?
                            getWinding(pt, curves, dir, true) :
                            {
                                winding: 0,
                                quality: 1
                            };
                        if (wind.quality > winding.quality)
                            winding = wind;
                        break;
                    }
                    length -= curveLength;
                }
            }
            for (var j = chain.length - 1; j >= 0; j--) {
                chain[j].segment._winding = winding;
            }
        }

        function tracePaths(segments, operator) {
            var paths = [],
                starts;

            function isValid(seg) {
                var winding;
                return !!(seg && !seg._visited && (!operator ||
                    operator[(winding = seg._winding || {}).winding] &&
                    !(operator.unite && winding.winding === 2 &&
                        winding.windingL && winding.windingR)));
            }

            function isStart(seg) {
                if (seg) {
                    for (var i = 0, l = starts.length; i < l; i++) {
                        if (seg === starts[i])
                            return true;
                    }
                }
                return false;
            }

            function visitPath(path) {
                var segments = path._segments;
                for (var i = 0, l = segments.length; i < l; i++) {
                    segments[i]._visited = true;
                }
            }

            function getCrossingSegments(segment, collectStarts) {
                var inter = segment._intersection,
                    start = inter,
                    crossings = [];
                if (collectStarts)
                    starts = [segment];

                function collect(inter, end) {
                    while (inter && inter !== end) {
                        var other = inter._segment,
                            path = other && other._path;
                        if (path) {
                            var next = other.getNext() || path.getFirstSegment(),
                                nextInter = next._intersection;
                            if (other !== segment && (isStart(other) ||
                                    isStart(next) ||
                                    next && (isValid(other) && (isValid(next) ||
                                        nextInter && isValid(nextInter._segment))))) {
                                crossings.push(other);
                            }
                            if (collectStarts)
                                starts.push(other);
                        }
                        inter = inter._next;
                    }
                }

                if (inter) {
                    collect(inter);
                    while (inter && inter._prev)
                        inter = inter._prev;
                    collect(inter, start);
                }
                return crossings;
            }

            segments.sort(function(seg1, seg2) {
                var inter1 = seg1._intersection,
                    inter2 = seg2._intersection,
                    over1 = !!(inter1 && inter1._overlap),
                    over2 = !!(inter2 && inter2._overlap),
                    path1 = seg1._path,
                    path2 = seg2._path;
                return over1 ^ over2 ?
                    over1 ? 1 : -1 :
                    !inter1 ^ !inter2 ?
                    inter1 ? 1 : -1 :
                    path1 !== path2 ?
                    path1._id - path2._id :
                    seg1._index - seg2._index;
            });

            for (var i = 0, l = segments.length; i < l; i++) {
                var seg = segments[i],
                    valid = isValid(seg),
                    path = null,
                    finished = false,
                    closed = true,
                    branches = [],
                    branch,
                    visited,
                    handleIn;
                if (valid && seg._path._overlapsOnly) {
                    var path1 = seg._path,
                        path2 = seg._intersection._segment._path;
                    if (path1.compare(path2)) {
                        if (path1.getArea())
                            paths.push(path1.clone(false));
                        visitPath(path1);
                        visitPath(path2);
                        valid = false;
                    }
                }
                while (valid) {
                    var first = !path,
                        crossings = getCrossingSegments(seg, first),
                        other = crossings.shift(),
                        finished = !first && (isStart(seg) || isStart(other)),
                        cross = !finished && other;
                    if (first) {
                        path = new Path(Item.NO_INSERT);
                        branch = null;
                    }
                    if (finished) {
                        if (seg.isFirst() || seg.isLast())
                            closed = seg._path._closed;
                        seg._visited = true;
                        break;
                    }
                    if (cross && branch) {
                        branches.push(branch);
                        branch = null;
                    }
                    if (!branch) {
                        if (cross)
                            crossings.push(seg);
                        branch = {
                            start: path._segments.length,
                            crossings: crossings,
                            visited: visited = [],
                            handleIn: handleIn
                        };
                    }
                    if (cross)
                        seg = other;
                    if (!isValid(seg)) {
                        path.removeSegments(branch.start);
                        for (var j = 0, k = visited.length; j < k; j++) {
                            visited[j]._visited = false;
                        }
                        visited.length = 0;
                        do {
                            seg = branch && branch.crossings.shift();
                            if (!seg || !seg._path) {
                                seg = null;
                                branch = branches.pop();
                                if (branch) {
                                    visited = branch.visited;
                                    handleIn = branch.handleIn;
                                }
                            }
                        } while (branch && !isValid(seg));
                        if (!seg)
                            break;
                    }
                    var next = seg.getNext();
                    path.add(new Segment(seg._point, handleIn,
                        next && seg._handleOut));
                    seg._visited = true;
                    visited.push(seg);
                    seg = next || seg._path.getFirstSegment();
                    handleIn = next && next._handleIn;
                }
                if (finished) {
                    if (closed) {
                        path.getFirstSegment().setHandleIn(handleIn);
                        path.setClosed(closed);
                    }
                    if (path.getArea() !== 0) {
                        paths.push(path);
                    }
                }
            }
            return paths;
        }

        return {
            _getWinding: function(point, dir, closed) {
                return getWinding(point, this.getCurves(), dir, closed);
            },

            unite: function(path, options) {
                return traceBoolean(this, path, 'unite', options);
            },

            intersect: function(path, options) {
                return traceBoolean(this, path, 'intersect', options);
            },

            subtract: function(path, options) {
                return traceBoolean(this, path, 'subtract', options);
            },

            exclude: function(path, options) {
                return traceBoolean(this, path, 'exclude', options);
            },

            divide: function(path, options) {
                return options && (options.trace == false || options.stroke) ?
                    splitBoolean(this, path, 'divide') :
                    createResult([
                        this.subtract(path, options),
                        this.intersect(path, options)
                    ], true, this, path, options);
            },

            resolveCrossings: function() {
                var children = this._children,
                    paths = children || [this];

                function hasOverlap(seg, path) {
                    var inter = seg && seg._intersection;
                    return inter && inter._overlap && inter._path === path;
                }

                var hasOverlaps = false,
                    hasCrossings = false,
                    intersections = this.getIntersections(null, function(inter) {
                        return inter.hasOverlap() && (hasOverlaps = true) ||
                            inter.isCrossing() && (hasCrossings = true);
                    }),
                    clearCurves = hasOverlaps && hasCrossings && [];
                intersections = CurveLocation.expand(intersections);
                if (hasOverlaps) {
                    var overlaps = divideLocations(intersections, function(inter) {
                        return inter.hasOverlap();
                    }, clearCurves);
                    for (var i = overlaps.length - 1; i >= 0; i--) {
                        var overlap = overlaps[i],
                            path = overlap._path,
                            seg = overlap._segment,
                            prev = seg.getPrevious(),
                            next = seg.getNext();
                        if (hasOverlap(prev, path) && hasOverlap(next, path)) {
                            seg.remove();
                            prev._handleOut._set(0, 0);
                            next._handleIn._set(0, 0);
                            if (prev !== seg && !prev.getCurve().hasLength()) {
                                next._handleIn.set(prev._handleIn);
                                prev.remove();
                            }
                        }
                    }
                }
                if (hasCrossings) {
                    divideLocations(intersections, hasOverlaps && function(inter) {
                        var curve1 = inter.getCurve(),
                            seg1 = inter.getSegment(),
                            other = inter._intersection,
                            curve2 = other._curve,
                            seg2 = other._segment;
                        if (curve1 && curve2 && curve1._path && curve2._path)
                            return true;
                        if (seg1)
                            seg1._intersection = null;
                        if (seg2)
                            seg2._intersection = null;
                    }, clearCurves);
                    if (clearCurves)
                        clearCurveHandles(clearCurves);
                    paths = tracePaths(Base.each(paths, function(path) {
                        this.push.apply(this, path._segments);
                    }, []));
                }
                var length = paths.length,
                    item;
                if (length > 1 && children) {
                    if (paths !== children)
                        this.setChildren(paths);
                    item = this;
                } else if (length === 1 && !children) {
                    if (paths[0] !== this)
                        this.setSegments(paths[0].removeSegments());
                    item = this;
                }
                if (!item) {
                    item = new CompoundPath(Item.NO_INSERT);
                    item.addChildren(paths);
                    item = item.reduce();
                    item.copyAttributes(this);
                    this.replaceWith(item);
                }
                return item;
            },

            reorient: function(nonZero, clockwise) {
                var children = this._children;
                if (children && children.length) {
                    this.setChildren(reorientPaths(this.removeChildren(),
                        function(w) {
                            return !!(nonZero ? w : w & 1);
                        },
                        clockwise));
                } else if (clockwise !== undefined) {
                    this.setClockwise(clockwise);
                }
                return this;
            },

            getInteriorPoint: function() {
                var bounds = this.getBounds(),
                    point = bounds.getCenter(true);
                if (!this.contains(point)) {
                    var curves = this.getCurves(),
                        y = point.y,
                        intercepts = [],
                        roots = [];
                    for (var i = 0, l = curves.length; i < l; i++) {
                        var v = curves[i].getValues(),
                            o0 = v[1],
                            o1 = v[3],
                            o2 = v[5],
                            o3 = v[7];
                        if (y >= min(o0, o1, o2, o3) && y <= max(o0, o1, o2, o3)) {
                            var monoCurves = Curve.getMonoCurves(v);
                            for (var j = 0, m = monoCurves.length; j < m; j++) {
                                var mv = monoCurves[j],
                                    mo0 = mv[1],
                                    mo3 = mv[7];
                                if ((mo0 !== mo3) &&
                                    (y >= mo0 && y <= mo3 || y >= mo3 && y <= mo0)) {
                                    var x = y === mo0 ? mv[0] :
                                        y === mo3 ? mv[6] :
                                        Curve.solveCubic(mv, 1, y, roots, 0, 1) ===
                                        1 ?
                                        Curve.getPoint(mv, roots[0]).x :
                                        (mv[0] + mv[6]) / 2;
                                    intercepts.push(x);
                                }
                            }
                        }
                    }
                    if (intercepts.length > 1) {
                        intercepts.sort(function(a, b) {
                            return a - b;
                        });
                        point.x = (intercepts[0] + intercepts[1]) / 2;
                    }
                }
                return point;
            }
        };
    });

    var PathFlattener = Base.extend({
        _class: 'PathFlattener',

        initialize: function(path, flatness, maxRecursion, ignoreStraight, matrix) {
            var curves = [],
                parts = [],
                length = 0,
                minSpan = 1 / (maxRecursion || 32),
                segments = path._segments,
                segment1 = segments[0],
                segment2;

            function addCurve(segment1, segment2) {
                var curve = Curve.getValues(segment1, segment2, matrix);
                curves.push(curve);
                computeParts(curve, segment1._index, 0, 1);
            }

            function computeParts(curve, index, t1, t2) {
                if ((t2 - t1) > minSpan &&
                    !(ignoreStraight && Curve.isStraight(curve)) &&
                    !Curve.isFlatEnough(curve, flatness || 0.25)) {
                    var halves = Curve.subdivide(curve, 0.5),
                        tMid = (t1 + t2) / 2;
                    computeParts(halves[0], index, t1, tMid);
                    computeParts(halves[1], index, tMid, t2);
                } else {
                    var dx = curve[6] - curve[0],
                        dy = curve[7] - curve[1],
                        dist = Math.sqrt(dx * dx + dy * dy);
                    if (dist > 0) {
                        length += dist;
                        parts.push({
                            offset: length,
                            curve: curve,
                            index: index,
                            time: t2,
                        });
                    }
                }
            }

            for (var i = 1, l = segments.length; i < l; i++) {
                segment2 = segments[i];
                addCurve(segment1, segment2);
                segment1 = segment2;
            }
            if (path._closed)
                addCurve(segment2, segments[0]);
            this.curves = curves;
            this.parts = parts;
            this.length = length;
            this.index = 0;
        },

        _get: function(offset) {
            var parts = this.parts,
                length = parts.length,
                start,
                i, j = this.index;
            for (;;) {
                i = j;
                if (!j || parts[--j].offset < offset)
                    break;
            }
            for (; i < length; i++) {
                var part = parts[i];
                if (part.offset >= offset) {
                    this.index = i;
                    var prev = parts[i - 1],
                        prevTime = prev && prev.index === part.index ? prev.time : 0,
                        prevOffset = prev ? prev.offset : 0;
                    return {
                        index: part.index,
                        time: prevTime + (part.time - prevTime) *
                            (offset - prevOffset) / (part.offset - prevOffset)
                    };
                }
            }
            return {
                index: parts[length - 1].index,
                time: 1
            };
        },

        drawPart: function(ctx, from, to) {
            var start = this._get(from),
                end = this._get(to);
            for (var i = start.index, l = end.index; i <= l; i++) {
                var curve = Curve.getPart(this.curves[i],
                    i === start.index ? start.time : 0,
                    i === end.index ? end.time : 1);
                if (i === start.index)
                    ctx.moveTo(curve[0], curve[1]);
                ctx.bezierCurveTo.apply(ctx, curve.slice(2));
            }
        }
    }, Base.each(Curve._evaluateMethods,
        function(name) {
            this[name + 'At'] = function(offset) {
                var param = this._get(offset);
                return Curve[name](this.curves[param.index], param.time);
            };
        }, {}));

    var PathFitter = Base.extend({
        initialize: function(path) {
            var points = this.points = [],
                segments = path._segments,
                closed = path._closed;
            for (var i = 0, prev, l = segments.length; i < l; i++) {
                var point = segments[i].point;
                if (!prev || !prev.equals(point)) {
                    points.push(prev = point.clone());
                }
            }
            if (closed) {
                points.unshift(points[points.length - 1]);
                points.push(points[1]);
            }
            this.closed = closed;
        },

        fit: function(error) {
            var points = this.points,
                length = points.length,
                segments = null;
            if (length > 0) {
                segments = [new Segment(points[0])];
                if (length > 1) {
                    this.fitCubic(segments, error, 0, length - 1,
                        points[1].subtract(points[0]),
                        points[length - 2].subtract(points[length - 1]));
                    if (this.closed) {
                        segments.shift();
                        segments.pop();
                    }
                }
            }
            return segments;
        },

        fitCubic: function(segments, error, first, last, tan1, tan2) {
            var points = this.points;
            if (last - first === 1) {
                var pt1 = points[first],
                    pt2 = points[last],
                    dist = pt1.getDistance(pt2) / 3;
                this.addCurve(segments, [pt1, pt1.add(tan1.normalize(dist)),
                    pt2.add(tan2.normalize(dist)), pt2
                ]);
                return;
            }
            var uPrime = this.chordLengthParameterize(first, last),
                maxError = Math.max(error, error * error),
                split,
                parametersInOrder = true;
            for (var i = 0; i <= 4; i++) {
                var curve = this.generateBezier(first, last, uPrime, tan1, tan2);
                var max = this.findMaxError(first, last, curve, uPrime);
                if (max.error < error && parametersInOrder) {
                    this.addCurve(segments, curve);
                    return;
                }
                split = max.index;
                if (max.error >= maxError)
                    break;
                parametersInOrder = this.reparameterize(first, last, uPrime, curve);
                maxError = max.error;
            }
            var tanCenter = points[split - 1].subtract(points[split + 1]);
            this.fitCubic(segments, error, first, split, tan1, tanCenter);
            this.fitCubic(segments, error, split, last, tanCenter.negate(), tan2);
        },

        addCurve: function(segments, curve) {
            var prev = segments[segments.length - 1];
            prev.setHandleOut(curve[1].subtract(curve[0]));
            segments.push(new Segment(curve[3], curve[2].subtract(curve[3])));
        },

        generateBezier: function(first, last, uPrime, tan1, tan2) {
            var epsilon = 1e-12,
                abs = Math.abs,
                points = this.points,
                pt1 = points[first],
                pt2 = points[last],
                C = [
                    [0, 0],
                    [0, 0]
                ],
                X = [0, 0];

            for (var i = 0, l = last - first + 1; i < l; i++) {
                var u = uPrime[i],
                    t = 1 - u,
                    b = 3 * u * t,
                    b0 = t * t * t,
                    b1 = b * t,
                    b2 = b * u,
                    b3 = u * u * u,
                    a1 = tan1.normalize(b1),
                    a2 = tan2.normalize(b2),
                    tmp = points[first + i]
                    .subtract(pt1.multiply(b0 + b1))
                    .subtract(pt2.multiply(b2 + b3));
                C[0][0] += a1.dot(a1);
                C[0][1] += a1.dot(a2);
                C[1][0] = C[0][1];
                C[1][1] += a2.dot(a2);
                X[0] += a1.dot(tmp);
                X[1] += a2.dot(tmp);
            }

            var detC0C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1],
                alpha1,
                alpha2;
            if (abs(detC0C1) > epsilon) {
                var detC0X = C[0][0] * X[1] - C[1][0] * X[0],
                    detXC1 = X[0] * C[1][1] - X[1] * C[0][1];
                alpha1 = detXC1 / detC0C1;
                alpha2 = detC0X / detC0C1;
            } else {
                var c0 = C[0][0] + C[0][1],
                    c1 = C[1][0] + C[1][1];
                alpha1 = alpha2 = abs(c0) > epsilon ? X[0] / c0 :
                    abs(c1) > epsilon ? X[1] / c1 :
                    0;
            }

            var segLength = pt2.getDistance(pt1),
                eps = epsilon * segLength,
                handle1,
                handle2;
            if (alpha1 < eps || alpha2 < eps) {
                alpha1 = alpha2 = segLength / 3;
            } else {
                var line = pt2.subtract(pt1);
                handle1 = tan1.normalize(alpha1);
                handle2 = tan2.normalize(alpha2);
                if (handle1.dot(line) - handle2.dot(line) > segLength * segLength) {
                    alpha1 = alpha2 = segLength / 3;
                    handle1 = handle2 = null;
                }
            }

            return [pt1,
                pt1.add(handle1 || tan1.normalize(alpha1)),
                pt2.add(handle2 || tan2.normalize(alpha2)),
                pt2
            ];
        },

        reparameterize: function(first, last, u, curve) {
            for (var i = first; i <= last; i++) {
                u[i - first] = this.findRoot(curve, this.points[i], u[i - first]);
            }
            for (var i = 1, l = u.length; i < l; i++) {
                if (u[i] <= u[i - 1])
                    return false;
            }
            return true;
        },

        findRoot: function(curve, point, u) {
            var curve1 = [],
                curve2 = [];
            for (var i = 0; i <= 2; i++) {
                curve1[i] = curve[i + 1].subtract(curve[i]).multiply(3);
            }
            for (var i = 0; i <= 1; i++) {
                curve2[i] = curve1[i + 1].subtract(curve1[i]).multiply(2);
            }
            var pt = this.evaluate(3, curve, u),
                pt1 = this.evaluate(2, curve1, u),
                pt2 = this.evaluate(1, curve2, u),
                diff = pt.subtract(point),
                df = pt1.dot(pt1) + diff.dot(pt2);
            return Numerical.isZero(df) ? u : u - diff.dot(pt1) / df;
        },

        evaluate: function(degree, curve, t) {
            var tmp = curve.slice();
            for (var i = 1; i <= degree; i++) {
                for (var j = 0; j <= degree - i; j++) {
                    tmp[j] = tmp[j].multiply(1 - t).add(tmp[j + 1].multiply(t));
                }
            }
            return tmp[0];
        },

        chordLengthParameterize: function(first, last) {
            var u = [0];
            for (var i = first + 1; i <= last; i++) {
                u[i - first] = u[i - first - 1] +
                    this.points[i].getDistance(this.points[i - 1]);
            }
            for (var i = 1, m = last - first; i <= m; i++) {
                u[i] /= u[m];
            }
            return u;
        },

        findMaxError: function(first, last, curve, u) {
            var index = Math.floor((last - first + 1) / 2),
                maxDist = 0;
            for (var i = first + 1; i < last; i++) {
                var P = this.evaluate(3, curve, u[i - first]);
                var v = P.subtract(this.points[i]);
                var dist = v.x * v.x + v.y * v.y;
                if (dist >= maxDist) {
                    maxDist = dist;
                    index = i;
                }
            }
            return {
                error: maxDist,
                index: index
            };
        }
    });

    var TextItem = Item.extend({
        _class: 'TextItem',
        _applyMatrix: false,
        _canApplyMatrix: false,
        _serializeFields: {
            content: null
        },
        _boundsOptions: {
            stroke: false,
            handle: false
        },

        initialize: function TextItem(arg) {
            this._content = '';
            this._lines = [];
            var hasProps = arg && Base.isPlainObject(arg) &&
                arg.x === undefined && arg.y === undefined;
            this._initialize(hasProps && arg, !hasProps && Point.read(arguments));
        },

        _equals: function(item) {
            return this._content === item._content;
        },

        copyContent: function(source) {
            this.setContent(source._content);
        },

        getContent: function() {
            return this._content;
        },

        setContent: function(content) {
            this._content = '' + content;
            this._lines = this._content.split(/\r\n|\n|\r/mg);
            this._changed(265);
        },

        isEmpty: function() {
            return !this._content;
        },

        getCharacterStyle: '#getStyle',
        setCharacterStyle: '#setStyle',

        getParagraphStyle: '#getStyle',
        setParagraphStyle: '#setStyle'
    });

    var PointText = TextItem.extend({
        _class: 'PointText',

        initialize: function PointText() {
            TextItem.apply(this, arguments);
        },

        getPoint: function() {
            var point = this._matrix.getTranslation();
            return new LinkedPoint(point.x, point.y, this, 'setPoint');
        },

        setPoint: function() {
            var point = Point.read(arguments);
            this.translate(point.subtract(this._matrix.getTranslation()));
        },

        _draw: function(ctx, param, viewMatrix) {
            if (!this._content)
                return;
            this._setStyles(ctx, param, viewMatrix);
            var lines = this._lines,
                style = this._style,
                hasFill = style.hasFill(),
                hasStroke = style.hasStroke(),
                leading = style.getLeading(),
                shadowColor = ctx.shadowColor;
            ctx.font = style.getFontStyle();
            ctx.textAlign = style.getJustification();
            for (var i = 0, l = lines.length; i < l; i++) {
                ctx.shadowColor = shadowColor;
                var line = lines[i];
                if (hasFill) {
                    ctx.fillText(line, 0, 0);
                    ctx.shadowColor = 'rgba(0,0,0,0)';
                }
                if (hasStroke)
                    ctx.strokeText(line, 0, 0);
                ctx.translate(0, leading);
            }
        },

        _getBounds: function(matrix, options) {
            var style = this._style,
                lines = this._lines,
                numLines = lines.length,
                justification = style.getJustification(),
                leading = style.getLeading(),
                width = this.getView().getTextWidth(style.getFontStyle(), lines),
                x = 0;
            if (justification !== 'left')
                x -= width / (justification === 'center' ? 2 : 1);
            var rect = new Rectangle(x,
                numLines ? -0.75 * leading : 0,
                width, numLines * leading);
            return matrix ? matrix._transformBounds(rect, rect) : rect;
        }
    });

    var Color = Base.extend(new function() {
            var types = {
                gray: ['gray'],
                rgb: ['red', 'green', 'blue'],
                hsb: ['hue', 'saturation', 'brightness'],
                hsl: ['hue', 'saturation', 'lightness'],
                gradient: ['gradient', 'origin', 'destination', 'highlight']
            };

            var componentParsers = {},
                colorCache = {},
                colorCtx;

            function fromCSS(string) {
                var match = string.match(/^#(\w{1,2})(\w{1,2})(\w{1,2})$/),
                    components;
                if (match) {
                    components = [0, 0, 0];
                    for (var i = 0; i < 3; i++) {
                        var value = match[i + 1];
                        components[i] = parseInt(value.length == 1 ?
                            value + value : value, 16) / 255;
                    }
                } else if (match = string.match(/^rgba?\((.*)\)$/)) {
                    components = match[1].split(',');
                    for (var i = 0, l = components.length; i < l; i++) {
                        var value = +components[i];
                        components[i] = i < 3 ? value / 255 : value;
                    }
                } else if (window) {
                    var cached = colorCache[string];
                    if (!cached) {
                        if (!colorCtx) {
                            colorCtx = CanvasProvider.getContext(1, 1);
                            colorCtx.globalCompositeOperation = 'copy';
                        }
                        colorCtx.fillStyle = 'rgba(0,0,0,0)';
                        colorCtx.fillStyle = string;
                        colorCtx.fillRect(0, 0, 1, 1);
                        var data = colorCtx.getImageData(0, 0, 1, 1).data;
                        cached = colorCache[string] = [
                            data[0] / 255,
                            data[1] / 255,
                            data[2] / 255
                        ];
                    }
                    components = cached.slice();
                } else {
                    components = [0, 0, 0];
                }
                return components;
            }

            var hsbIndices = [
                [0, 3, 1],
                [2, 0, 1],
                [1, 0, 3],
                [1, 2, 0],
                [3, 1, 0],
                [0, 1, 2]
            ];

            var converters = {
                'rgb-hsb': function(r, g, b) {
                    var max = Math.max(r, g, b),
                        min = Math.min(r, g, b),
                        delta = max - min,
                        h = delta === 0 ? 0 :
                        (max == r ? (g - b) / delta + (g < b ? 6 : 0) :
                            max == g ? (b - r) / delta + 2 :
                            (r - g) / delta + 4) * 60;
                    return [h, max === 0 ? 0 : delta / max, max];
                },

                'hsb-rgb': function(h, s, b) {
                    h = (((h / 60) % 6) + 6) % 6;
                    var i = Math.floor(h),
                        f = h - i,
                        i = hsbIndices[i],
                        v = [
                            b,
                            b * (1 - s),
                            b * (1 - s * f),
                            b * (1 - s * (1 - f))
                        ];
                    return [v[i[0]], v[i[1]], v[i[2]]];
                },

                'rgb-hsl': function(r, g, b) {
                    var max = Math.max(r, g, b),
                        min = Math.min(r, g, b),
                        delta = max - min,
                        achromatic = delta === 0,
                        h = achromatic ? 0 :
                        (max == r ? (g - b) / delta + (g < b ? 6 : 0) :
                            max == g ? (b - r) / delta + 2 :
                            (r - g) / delta + 4) * 60,
                        l = (max + min) / 2,
                        s = achromatic ? 0 : l < 0.5 ?
                        delta / (max + min) :
                        delta / (2 - max - min);
                    return [h, s, l];
                },

                'hsl-rgb': function(h, s, l) {
                    h = (((h / 360) % 1) + 1) % 1;
                    if (s === 0)
                        return [l, l, l];
                    var t3s = [h + 1 / 3, h, h - 1 / 3],
                        t2 = l < 0.5 ? l * (1 + s) : l + s - l * s,
                        t1 = 2 * l - t2,
                        c = [];
                    for (var i = 0; i < 3; i++) {
                        var t3 = t3s[i];
                        if (t3 < 0) t3 += 1;
                        if (t3 > 1) t3 -= 1;
                        c[i] = 6 * t3 < 1 ?
                            t1 + (t2 - t1) * 6 * t3 :
                            2 * t3 < 1 ?
                            t2 :
                            3 * t3 < 2 ?
                            t1 + (t2 - t1) * ((2 / 3) - t3) * 6 :
                            t1;
                    }
                    return c;
                },

                'rgb-gray': function(r, g, b) {
                    return [r * 0.2989 + g * 0.587 + b * 0.114];
                },

                'gray-rgb': function(g) {
                    return [g, g, g];
                },

                'gray-hsb': function(g) {
                    return [0, 0, g];
                },

                'gray-hsl': function(g) {
                    return [0, 0, g];
                },

                'gradient-rgb': function() {
                    return [];
                },

                'rgb-gradient': function() {
                    return [];
                }

            };

            return Base.each(types, function(properties, type) {
                componentParsers[type] = [];
                Base.each(properties, function(name, index) {
                    var part = Base.capitalize(name),
                        hasOverlap = /^(hue|saturation)$/.test(name),
                        parser = componentParsers[type][index] = name === 'gradient' ?
                        function(value) {
                            var current = this._components[0];
                            value = Gradient.read(Array.isArray(value) ? value :
                                arguments, 0, {
                                    readNull: true
                                });
                            if (current !== value) {
                                if (current)
                                    current._removeOwner(this);
                                if (value)
                                    value._addOwner(this);
                            }
                            return value;
                        } :
                        type === 'gradient' ?
                        function() {
                            return Point.read(arguments, 0, {
                                readNull: name === 'highlight',
                                clone: true
                            });
                        } :
                        function(value) {
                            return value == null || isNaN(value) ? 0 : value;
                        };

                    this['get' + part] = function() {
                        return this._type === type ||
                            hasOverlap && /^hs[bl]$/.test(this._type) ?
                            this._components[index] :
                            this._convert(type)[index];
                    };

                    this['set' + part] = function(value) {
                        if (this._type !== type &&
                            !(hasOverlap && /^hs[bl]$/.test(this._type))) {
                            this._components = this._convert(type);
                            this._properties = types[type];
                            this._type = type;
                        }
                        this._components[index] = parser.call(this, value);
                        this._changed();
                    };
                }, this);
            }, {
                _class: 'Color',
                _readIndex: true,

                initialize: function Color(arg) {
                    var args = arguments,
                        reading = this.__read,
                        read = 0,
                        type,
                        components,
                        alpha,
                        values;
                    if (Array.isArray(arg)) {
                        args = arg;
                        arg = args[0];
                    }
                    var argType = arg != null && typeof arg;
                    if (argType === 'string' && arg in types) {
                        type = arg;
                        arg = args[1];
                        if (Array.isArray(arg)) {
                            components = arg;
                            alpha = args[2];
                        } else {
                            if (reading)
                                read = 1;
                            args = Base.slice(args, 1);
                            argType = typeof arg;
                        }
                    }
                    if (!components) {
                        values = argType === 'number' ?
                            args :
                            argType === 'object' && arg.length != null ?
                            arg :
                            null;
                        if (values) {
                            if (!type)
                                type = values.length >= 3 ?
                                'rgb' :
                                'gray';
                            var length = types[type].length;
                            alpha = values[length];
                            if (reading) {
                                read += values === arguments ?
                                    length + (alpha != null ? 1 : 0) :
                                    1;
                            }
                            if (values.length > length)
                                values = Base.slice(values, 0, length);
                        } else if (argType === 'string') {
                            type = 'rgb';
                            components = fromCSS(arg);
                            if (components.length === 4) {
                                alpha = components[3];
                                components.length--;
                            }
                        } else if (argType === 'object') {
                            if (arg.constructor === Color) {
                                type = arg._type;
                                components = arg._components.slice();
                                alpha = arg._alpha;
                                if (type === 'gradient') {
                                    for (var i = 1, l = components.length; i < l; i++) {
                                        var point = components[i];
                                        if (point)
                                            components[i] = point.clone();
                                    }
                                }
                            } else if (arg.constructor === Gradient) {
                                type = 'gradient';
                                values = args;
                            } else {
                                type = 'hue' in arg ?
                                    'lightness' in arg ?
                                    'hsl' :
                                    'hsb' :
                                    'gradient' in arg || 'stops' in arg ||
                                    'radial' in arg ?
                                    'gradient' :
                                    'gray' in arg ?
                                    'gray' :
                                    'rgb';
                                var properties = types[type],
                                    parsers = componentParsers[type];
                                this._components = components = [];
                                for (var i = 0, l = properties.length; i < l; i++) {
                                    var value = arg[properties[i]];
                                    if (value == null && !i && type === 'gradient' &&
                                        'stops' in arg) {
                                        value = {
                                            stops: arg.stops,
                                            radial: arg.radial
                                        };
                                    }
                                    value = parsers[i].call(this, value);
                                    if (value != null)
                                        components[i] = value;
                                }
                                alpha = arg.alpha;
                            }
                        }
                        if (reading && type)
                            read = 1;
                    }
                    this._type = type || 'rgb';
                    if (!components) {
                        this._components = components = [];
                        var parsers = componentParsers[this._type];
                        for (var i = 0, l = parsers.length; i < l; i++) {
                            var value = parsers[i].call(this, values && values[i]);
                            if (value != null)
                                components[i] = value;
                        }
                    }
                    this._components = components;
                    this._properties = types[this._type];
                    this._alpha = alpha;
                    if (reading)
                        this.__read = read;
                    return this;
                },

                set: '#initialize',

                _serialize: function(options, dictionary) {
                    var components = this.getComponents();
                    return Base.serialize(
                        /^(gray|rgb)$/.test(this._type) ?
                        components :
                        [this._type].concat(components),
                        options, true, dictionary);
                },

                _changed: function() {
                    this._canvasStyle = null;
                    if (this._owner)
                        this._owner._changed(65);
                },

                _convert: function(type) {
                    var converter;
                    return this._type === type ?
                        this._components.slice() :
                        (converter = converters[this._type + '-' + type]) ?
                        converter.apply(this, this._components) :
                        converters['rgb-' + type].apply(this,
                            converters[this._type + '-rgb'].apply(this,
                                this._components));
                },

                convert: function(type) {
                    return new Color(type, this._convert(type), this._alpha);
                },

                getType: function() {
                    return this._type;
                },

                setType: function(type) {
                    this._components = this._convert(type);
                    this._properties = types[type];
                    this._type = type;
                },

                getComponents: function() {
                    var components = this._components.slice();
                    if (this._alpha != null)
                        components.push(this._alpha);
                    return components;
                },

                getAlpha: function() {
                    return this._alpha != null ? this._alpha : 1;
                },

                setAlpha: function(alpha) {
                    this._alpha = alpha == null ? null : Math.min(Math.max(alpha, 0), 1);
                    this._changed();
                },

                hasAlpha: function() {
                    return this._alpha != null;
                },

                equals: function(color) {
                    var col = Base.isPlainValue(color, true) ?
                        Color.read(arguments) :
                        color;
                    return col === this || col && this._class === col._class &&
                        this._type === col._type &&
                        this.getAlpha() === col.getAlpha() &&
                        Base.equals(this._components, col._components) ||
                        false;
                },

                toString: function() {
                    var properties = this._properties,
                        parts = [],
                        isGradient = this._type === 'gradient',
                        f = Formatter.instance;
                    for (var i = 0, l = properties.length; i < l; i++) {
                        var value = this._components[i];
                        if (value != null)
                            parts.push(properties[i] + ': ' +
                                (isGradient ? value : f.number(value)));
                    }
                    if (this._alpha != null)
                        parts.push('alpha: ' + f.number(this._alpha));
                    return '{ ' + parts.join(', ') + ' }';
                },

                toCSS: function(hex) {
                    var components = this._convert('rgb'),
                        alpha = hex || this._alpha == null ? 1 : this._alpha;

                    function convert(val) {
                        return Math.round((val < 0 ? 0 : val > 1 ? 1 : val) * 255);
                    }
                    components = [
                        convert(components[0]),
                        convert(components[1]),
                        convert(components[2])
                    ];
                    if (alpha < 1)
                        components.push(alpha < 0 ? 0 : alpha);
                    return hex ?
                        '#' + ((1 << 24) + (components[0] << 16) +
                            (components[1] << 8) +
                            components[2]).toString(16).slice(1) :
                        (components.length == 4 ? 'rgba(' : 'rgb(') +
                        components.join(',') + ')';
                },

                toCanvasStyle: function(ctx, matrix) {
                    if (this._canvasStyle)
                        return this._canvasStyle;
                    if (this._type !== 'gradient')
                        return this._canvasStyle = this.toCSS();
                    var components = this._components,
                        gradient = components[0],
                        stops = gradient._stops,
                        origin = components[1],
                        destination = components[2],
                        highlight = components[3],
                        inverse = matrix && matrix.inverted(),
                        canvasGradient;
                    if (inverse) {
                        origin = inverse._transformPoint(origin);
                        destination = inverse._transformPoint(destination);
                        if (highlight)
                            highlight = inverse._transformPoint(highlight);
                    }
                    if (gradient._radial) {
                        var radius = destination.getDistance(origin);
                        if (highlight) {
                            var vector = highlight.subtract(origin);
                            if (vector.getLength() > radius)
                                highlight = origin.add(vector.normalize(radius - 0.1));
                        }
                        var start = highlight || origin;
                        canvasGradient = ctx.createRadialGradient(start.x, start.y,
                            0, origin.x, origin.y, radius);
                    } else {
                        canvasGradient = ctx.createLinearGradient(origin.x, origin.y,
                            destination.x, destination.y);
                    }
                    for (var i = 0, l = stops.length; i < l; i++) {
                        var stop = stops[i],
                            offset = stop._offset;
                        canvasGradient.addColorStop(
                            offset == null ? i / (l - 1) : offset,
                            stop._color.toCanvasStyle());
                    }
                    return this._canvasStyle = canvasGradient;
                },

                transform: function(matrix) {
                    if (this._type === 'gradient') {
                        var components = this._components;
                        for (var i = 1, l = components.length; i < l; i++) {
                            var point = components[i];
                            matrix._transformPoint(point, point, true);
                        }
                        this._changed();
                    }
                },

                statics: {
                    _types: types,

                    random: function() {
                        var random = Math.random;
                        return new Color(random(), random(), random());
                    }
                }
            });
        },
        new function() {
            var operators = {
                add: function(a, b) {
                    return a + b;
                },

                subtract: function(a, b) {
                    return a - b;
                },

                multiply: function(a, b) {
                    return a * b;
                },

                divide: function(a, b) {
                    return a / b;
                }
            };

            return Base.each(operators, function(operator, name) {
                this[name] = function(color) {
                    color = Color.read(arguments);
                    var type = this._type,
                        components1 = this._components,
                        components2 = color._convert(type);
                    for (var i = 0, l = components1.length; i < l; i++)
                        components2[i] = operator(components1[i], components2[i]);
                    return new Color(type, components2,
                        this._alpha != null ?
                        operator(this._alpha, color.getAlpha()) :
                        null);
                };
            }, {});
        });

    var Gradient = Base.extend({
        _class: 'Gradient',

        initialize: function Gradient(stops, radial) {
            this._id = UID.get();
            if (stops && Base.isPlainObject(stops)) {
                this.set(stops);
                stops = radial = null;
            }
            if (this._stops == null) {
                this.setStops(stops || ['white', 'black']);
            }
            if (this._radial == null) {
                this.setRadial(typeof radial === 'string' && radial === 'radial' ||
                    radial || false);
            }
        },

        _serialize: function(options, dictionary) {
            return dictionary.add(this, function() {
                return Base.serialize([this._stops, this._radial],
                    options, true, dictionary);
            });
        },

        _changed: function() {
            for (var i = 0, l = this._owners && this._owners.length; i < l; i++) {
                this._owners[i]._changed();
            }
        },

        _addOwner: function(color) {
            if (!this._owners)
                this._owners = [];
            this._owners.push(color);
        },

        _removeOwner: function(color) {
            var index = this._owners ? this._owners.indexOf(color) : -1;
            if (index != -1) {
                this._owners.splice(index, 1);
                if (!this._owners.length)
                    this._owners = undefined;
            }
        },

        clone: function() {
            var stops = [];
            for (var i = 0, l = this._stops.length; i < l; i++) {
                stops[i] = this._stops[i].clone();
            }
            return new Gradient(stops, this._radial);
        },

        getStops: function() {
            return this._stops;
        },

        setStops: function(stops) {
            if (stops.length < 2) {
                throw new Error(
                    'Gradient stop list needs to contain at least two stops.');
            }
            var _stops = this._stops;
            if (_stops) {
                for (var i = 0, l = _stops.length; i < l; i++)
                    _stops[i]._owner = undefined;
            }
            _stops = this._stops = GradientStop.readList(stops, 0, {
                clone: true
            });
            for (var i = 0, l = _stops.length; i < l; i++)
                _stops[i]._owner = this;
            this._changed();
        },

        getRadial: function() {
            return this._radial;
        },

        setRadial: function(radial) {
            this._radial = radial;
            this._changed();
        },

        equals: function(gradient) {
            if (gradient === this)
                return true;
            if (gradient && this._class === gradient._class) {
                var stops1 = this._stops,
                    stops2 = gradient._stops,
                    length = stops1.length;
                if (length === stops2.length) {
                    for (var i = 0; i < length; i++) {
                        if (!stops1[i].equals(stops2[i]))
                            return false;
                    }
                    return true;
                }
            }
            return false;
        }
    });

    var GradientStop = Base.extend({
        _class: 'GradientStop',

        initialize: function GradientStop(arg0, arg1) {
            var color = arg0,
                offset = arg1;
            if (typeof arg0 === 'object' && arg1 === undefined) {
                if (Array.isArray(arg0) && typeof arg0[0] !== 'number') {
                    color = arg0[0];
                    offset = arg0[1];
                } else if ('color' in arg0 || 'offset' in arg0 ||
                    'rampPoint' in arg0) {
                    color = arg0.color;
                    offset = arg0.offset || arg0.rampPoint || 0;
                }
            }
            this.setColor(color);
            this.setOffset(offset);
        },

        clone: function() {
            return new GradientStop(this._color.clone(), this._offset);
        },

        _serialize: function(options, dictionary) {
            var color = this._color,
                offset = this._offset;
            return Base.serialize(offset == null ? [color] : [color, offset],
                options, true, dictionary);
        },

        _changed: function() {
            if (this._owner)
                this._owner._changed(65);
        },

        getOffset: function() {
            return this._offset;
        },

        setOffset: function(offset) {
            this._offset = offset;
            this._changed();
        },

        getRampPoint: '#getOffset',
        setRampPoint: '#setOffset',

        getColor: function() {
            return this._color;
        },

        setColor: function() {
            var color = Color.read(arguments, 0, {
                clone: true
            });
            if (color)
                color._owner = this;
            this._color = color;
            this._changed();
        },

        equals: function(stop) {
            return stop === this || stop && this._class === stop._class &&
                this._color.equals(stop._color) &&
                this._offset == stop._offset ||
                false;
        }
    });

    var Style = Base.extend(new function() {
        var itemDefaults = {
                fillColor: null,
                fillRule: 'nonzero',
                strokeColor: null,
                strokeWidth: 1,
                strokeCap: 'butt',
                strokeJoin: 'miter',
                strokeScaling: true,
                miterLimit: 10,
                dashOffset: 0,
                dashArray: [],
                shadowColor: null,
                shadowBlur: 0,
                shadowOffset: new Point(),
                selectedColor: null
            },
            groupDefaults = Base.set({}, itemDefaults, {
                fontFamily: 'sans-serif',
                fontWeight: 'normal',
                fontSize: 12,
                leading: null,
                justification: 'left'
            }),
            textDefaults = Base.set({}, groupDefaults, {
                fillColor: new Color()
            }),
            flags = {
                strokeWidth: 97,
                strokeCap: 97,
                strokeJoin: 97,
                strokeScaling: 105,
                miterLimit: 97,
                fontFamily: 9,
                fontWeight: 9,
                fontSize: 9,
                font: 9,
                leading: 9,
                justification: 9
            },
            item = {
                beans: true
            },
            fields = {
                _class: 'Style',
                beans: true,

                initialize: function Style(style, _owner, _project) {
                    this._values = {};
                    this._owner = _owner;
                    this._project = _owner && _owner._project || _project ||
                        paper.project;
                    this._defaults = !_owner || _owner instanceof Group ? groupDefaults :
                        _owner instanceof TextItem ? textDefaults :
                        itemDefaults;
                    if (style)
                        this.set(style);
                }
            };

        Base.each(groupDefaults, function(value, key) {
            var isColor = /Color$/.test(key),
                isPoint = key === 'shadowOffset',
                part = Base.capitalize(key),
                flag = flags[key],
                set = 'set' + part,
                get = 'get' + part;

            fields[set] = function(value) {
                var owner = this._owner,
                    children = owner && owner._children;
                if (children && children.length > 0 &&
                    !(owner instanceof CompoundPath)) {
                    for (var i = 0, l = children.length; i < l; i++)
                        children[i]._style[set](value);
                } else if (key in this._defaults) {
                    var old = this._values[key];
                    if (old !== value) {
                        if (isColor) {
                            if (old && old._owner !== undefined)
                                old._owner = undefined;
                            if (value && value.constructor === Color) {
                                if (value._owner)
                                    value = value.clone();
                                value._owner = owner;
                            }
                        }
                        this._values[key] = value;
                        if (owner)
                            owner._changed(flag || 65);
                    }
                }
            };

            fields[get] = function(_dontMerge) {
                var owner = this._owner,
                    children = owner && owner._children,
                    value;
                if (key in this._defaults && (!children || !children.length ||
                        _dontMerge || owner instanceof CompoundPath)) {
                    var value = this._values[key];
                    if (value === undefined) {
                        value = this._defaults[key];
                        if (value && value.clone)
                            value = value.clone();
                    } else {
                        var ctor = isColor ? Color : isPoint ? Point : null;
                        if (ctor && !(value && value.constructor === ctor)) {
                            this._values[key] = value = ctor.read([value], 0, {
                                readNull: true,
                                clone: true
                            });
                            if (value && isColor)
                                value._owner = owner;
                        }
                    }
                } else if (children) {
                    for (var i = 0, l = children.length; i < l; i++) {
                        var childValue = children[i]._style[get]();
                        if (!i) {
                            value = childValue;
                        } else if (!Base.equals(value, childValue)) {
                            return undefined;
                        }
                    }
                }
                return value;
            };

            item[get] = function(_dontMerge) {
                return this._style[get](_dontMerge);
            };

            item[set] = function(value) {
                this._style[set](value);
            };
        });

        Base.each({
            Font: 'FontFamily',
            WindingRule: 'FillRule'
        }, function(value, key) {
            var get = 'get' + key,
                set = 'set' + key;
            fields[get] = item[get] = '#get' + value;
            fields[set] = item[set] = '#set' + value;
        });

        Item.inject(item);
        return fields;
    }, {
        set: function(style) {
            var isStyle = style instanceof Style,
                values = isStyle ? style._values : style;
            if (values) {
                for (var key in values) {
                    if (key in this._defaults) {
                        var value = values[key];
                        this[key] = value && isStyle && value.clone ?
                            value.clone() : value;
                    }
                }
            }
        },

        equals: function(style) {
            function compare(style1, style2, secondary) {
                var values1 = style1._values,
                    values2 = style2._values,
                    defaults2 = style2._defaults;
                for (var key in values1) {
                    var value1 = values1[key],
                        value2 = values2[key];
                    if (!(secondary && key in values2) && !Base.equals(value1,
                            value2 === undefined ? defaults2[key] : value2))
                        return false;
                }
                return true;
            }

            return style === this || style && this._class === style._class &&
                compare(this, style) &&
                compare(style, this, true) ||
                false;
        },

        hasFill: function() {
            var color = this.getFillColor();
            return !!color && color.alpha > 0;
        },

        hasStroke: function() {
            var color = this.getStrokeColor();
            return !!color && color.alpha > 0 && this.getStrokeWidth() > 0;
        },

        hasShadow: function() {
            var color = this.getShadowColor();
            return !!color && color.alpha > 0 && (this.getShadowBlur() > 0 ||
                !this.getShadowOffset().isZero());
        },

        getView: function() {
            return this._project._view;
        },

        getFontStyle: function() {
            var fontSize = this.getFontSize();
            return this.getFontWeight() +
                ' ' + fontSize + (/[a-z]/i.test(fontSize + '') ? ' ' : 'px ') +
                this.getFontFamily();
        },

        getFont: '#getFontFamily',
        setFont: '#setFontFamily',

        getLeading: function getLeading() {
            var leading = getLeading.base.call(this),
                fontSize = this.getFontSize();
            if (/pt|em|%|px/.test(fontSize))
                fontSize = this.getView().getPixelSize(fontSize);
            return leading != null ? leading : fontSize * 1.2;
        }

    });

    var DomElement = new function() {
        function handlePrefix(el, name, set, value) {
            var prefixes = ['', 'webkit', 'moz', 'Moz', 'ms', 'o'],
                suffix = name[0].toUpperCase() + name.substring(1);
            for (var i = 0; i < 6; i++) {
                var prefix = prefixes[i],
                    key = prefix ? prefix + suffix : name;
                if (key in el) {
                    if (set) {
                        el[key] = value;
                    } else {
                        return el[key];
                    }
                    break;
                }
            }
        }

        return {
            getStyles: function(el) {
                var doc = el && el.nodeType !== 9 ? el.ownerDocument : el,
                    view = doc && doc.defaultView;
                return view && view.getComputedStyle(el, '');
            },

            getBounds: function(el, viewport) {
                var doc = el.ownerDocument,
                    body = doc.body,
                    html = doc.documentElement,
                    rect;
                try {
                    rect = el.getBoundingClientRect();
                } catch (e) {
                    rect = {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };
                }
                var x = rect.left - (html.clientLeft || body.clientLeft || 0),
                    y = rect.top - (html.clientTop || body.clientTop || 0);
                if (!viewport) {
                    var view = doc.defaultView;
                    x += view.pageXOffset || html.scrollLeft || body.scrollLeft;
                    y += view.pageYOffset || html.scrollTop || body.scrollTop;
                }
                return new Rectangle(x, y, rect.width, rect.height);
            },

            getViewportBounds: function(el) {
                var doc = el.ownerDocument,
                    view = doc.defaultView,
                    html = doc.documentElement;
                return new Rectangle(0, 0,
                    view.innerWidth || html.clientWidth,
                    view.innerHeight || html.clientHeight
                );
            },

            getOffset: function(el, viewport) {
                return DomElement.getBounds(el, viewport).getPoint();
            },

            getSize: function(el) {
                return DomElement.getBounds(el, true).getSize();
            },

            isInvisible: function(el) {
                return DomElement.getSize(el).equals(new Size(0, 0));
            },

            isInView: function(el) {
                return !DomElement.isInvisible(el) &&
                    DomElement.getViewportBounds(el).intersects(
                        DomElement.getBounds(el, true));
            },

            isInserted: function(el) {
                return document.body.contains(el);
            },

            getPrefixed: function(el, name) {
                return el && handlePrefix(el, name);
            },

            setPrefixed: function(el, name, value) {
                if (typeof name === 'object') {
                    for (var key in name)
                        handlePrefix(el, key, true, name[key]);
                } else {
                    handlePrefix(el, name, true, value);
                }
            }
        };
    };

    var DomEvent = {
        add: function(el, events) {
            if (el) {
                for (var type in events) {
                    var func = events[type],
                        parts = type.split(/[\s,]+/g);
                    for (var i = 0, l = parts.length; i < l; i++)
                        el.addEventListener(parts[i], func, false);
                }
            }
        },

        remove: function(el, events) {
            if (el) {
                for (var type in events) {
                    var func = events[type],
                        parts = type.split(/[\s,]+/g);
                    for (var i = 0, l = parts.length; i < l; i++)
                        el.removeEventListener(parts[i], func, false);
                }
            }
        },

        getPoint: function(event) {
            var pos = event.targetTouches ?
                event.targetTouches.length ?
                event.targetTouches[0] :
                event.changedTouches[0] :
                event;
            return new Point(
                pos.pageX || pos.clientX + document.documentElement.scrollLeft,
                pos.pageY || pos.clientY + document.documentElement.scrollTop
            );
        },

        getTarget: function(event) {
            return event.target || event.srcElement;
        },

        getRelatedTarget: function(event) {
            return event.relatedTarget || event.toElement;
        },

        getOffset: function(event, target) {
            return DomEvent.getPoint(event).subtract(DomElement.getOffset(
                target || DomEvent.getTarget(event)));
        }
    };

    DomEvent.requestAnimationFrame = new function() {
        var nativeRequest = DomElement.getPrefixed(window, 'requestAnimationFrame'),
            requested = false,
            callbacks = [],
            timer;

        function handleCallbacks() {
            var functions = callbacks;
            callbacks = [];
            for (var i = 0, l = functions.length; i < l; i++)
                functions[i]();
            requested = nativeRequest && callbacks.length;
            if (requested)
                nativeRequest(handleCallbacks);
        }

        return function(callback) {
            callbacks.push(callback);
            if (nativeRequest) {
                if (!requested) {
                    nativeRequest(handleCallbacks);
                    requested = true;
                }
            } else if (!timer) {
                timer = setInterval(handleCallbacks, 1000 / 60);
            }
        };
    };

    var View = Base.extend(Emitter, {
            _class: 'View',

            initialize: function View(project, element) {

                function getSize(name) {
                    return element[name] || parseInt(element.getAttribute(name), 10);
                }

                function getCanvasSize() {
                    var size = DomElement.getSize(element);
                    return size.isNaN() || size.isZero() ?
                        new Size(getSize('width'), getSize('height')) :
                        size;
                }

                var size;
                if (window && element) {
                    this._id = element.getAttribute('id');
                    if (this._id == null)
                        element.setAttribute('id', this._id = 'view-' + View._id++);
                    DomEvent.add(element, this._viewEvents);
                    var none = 'none';
                    DomElement.setPrefixed(element.style, {
                        userDrag: none,
                        userSelect: none,
                        touchCallout: none,
                        contentZooming: none,
                        tapHighlightColor: 'rgba(0,0,0,0)'
                    });

                    if (PaperScope.hasAttribute(element, 'resize')) {
                        var that = this;
                        DomEvent.add(window, this._windowEvents = {
                            resize: function() {
                                that.setViewSize(getCanvasSize());
                            }
                        });
                    }

                    size = getCanvasSize();

                    if (PaperScope.hasAttribute(element, 'stats') &&
                        typeof Stats !== 'undefined') {
                        this._stats = new Stats();
                        var stats = this._stats.domElement,
                            style = stats.style,
                            offset = DomElement.getOffset(element);
                        style.position = 'absolute';
                        style.left = offset.x + 'px';
                        style.top = offset.y + 'px';
                        document.body.appendChild(stats);
                    }
                } else {
                    size = new Size(element);
                    element = null;
                }
                this._project = project;
                this._scope = project._scope;
                this._element = element;
                if (!this._pixelRatio)
                    this._pixelRatio = window && window.devicePixelRatio || 1;
                this._setElementSize(size.width, size.height);
                this._viewSize = size;
                View._views.push(this);
                View._viewsById[this._id] = this;
                (this._matrix = new Matrix())._owner = this;
                if (!View._focused)
                    View._focused = this;
                this._frameItems = {};
                this._frameItemCount = 0;
                this._itemEvents = {
                    native: {},
                    virtual: {}
                };
                this._autoUpdate = !paper.agent.node;
                this._needsUpdate = false;
            },

            remove: function() {
                if (!this._project)
                    return false;
                if (View._focused === this)
                    View._focused = null;
                View._views.splice(View._views.indexOf(this), 1);
                delete View._viewsById[this._id];
                var project = this._project;
                if (project._view === this)
                    project._view = null;
                DomEvent.remove(this._element, this._viewEvents);
                DomEvent.remove(window, this._windowEvents);
                this._element = this._project = null;
                this.off('frame');
                this._animate = false;
                this._frameItems = {};
                return true;
            },

            _events: Base.each(
                Item._itemHandlers.concat(['onResize', 'onKeyDown', 'onKeyUp']),
                function(name) {
                    this[name] = {};
                }, {
                    onFrame: {
                        install: function() {
                            this.play();
                        },

                        uninstall: function() {
                            this.pause();
                        }
                    }
                }
            ),

            _animate: false,
            _time: 0,
            _count: 0,

            getAutoUpdate: function() {
                return this._autoUpdate;
            },

            setAutoUpdate: function(autoUpdate) {
                this._autoUpdate = autoUpdate;
                if (autoUpdate)
                    this.requestUpdate();
            },

            update: function() {},

            draw: function() {
                this.update();
            },

            requestUpdate: function() {
                if (!this._requested) {
                    var that = this;
                    DomEvent.requestAnimationFrame(function() {
                        that._requested = false;
                        if (that._animate) {
                            that.requestUpdate();
                            var element = that._element;
                            if ((!DomElement.getPrefixed(document, 'hidden') ||
                                    PaperScope.getAttribute(element, 'keepalive') ===
                                    'true') && DomElement.isInView(element)) {
                                that._handleFrame();
                            }
                        }
                        if (that._autoUpdate)
                            that.update();
                    });
                    this._requested = true;
                }
            },

            play: function() {
                this._animate = true;
                this.requestUpdate();
            },

            pause: function() {
                this._animate = false;
            },

            _handleFrame: function() {
                paper = this._scope;
                var now = Date.now() / 1000,
                    delta = this._last ? now - this._last : 0;
                this._last = now;
                this.emit('frame', new Base({
                    delta: delta,
                    time: this._time += delta,
                    count: this._count++
                }));
                if (this._stats)
                    this._stats.update();
            },

            _animateItem: function(item, animate) {
                var items = this._frameItems;
                if (animate) {
                    items[item._id] = {
                        item: item,
                        time: 0,
                        count: 0
                    };
                    if (++this._frameItemCount === 1)
                        this.on('frame', this._handleFrameItems);
                } else {
                    delete items[item._id];
                    if (--this._frameItemCount === 0) {
                        this.off('frame', this._handleFrameItems);
                    }
                }
            },

            _handleFrameItems: function(event) {
                for (var i in this._frameItems) {
                    var entry = this._frameItems[i];
                    entry.item.emit('frame', new Base(event, {
                        time: entry.time += event.delta,
                        count: entry.count++
                    }));
                }
            },

            _changed: function() {
                this._project._changed(2049);
                this._bounds = this._decomposed = undefined;
            },

            getElement: function() {
                return this._element;
            },

            getPixelRatio: function() {
                return this._pixelRatio;
            },

            getResolution: function() {
                return this._pixelRatio * 72;
            },

            getViewSize: function() {
                var size = this._viewSize;
                return new LinkedSize(size.width, size.height, this, 'setViewSize');
            },

            setViewSize: function() {
                var size = Size.read(arguments),
                    delta = size.subtract(this._viewSize);
                if (delta.isZero())
                    return;
                this._setElementSize(size.width, size.height);
                this._viewSize.set(size);
                this._changed();
                this.emit('resize', {
                    size: size,
                    delta: delta
                });
                if (this._autoUpdate) {
                    this.update();
                }
            },

            _setElementSize: function(width, height) {
                var element = this._element;
                if (element) {
                    if (element.width !== width)
                        element.width = width;
                    if (element.height !== height)
                        element.height = height;
                }
            },

            getBounds: function() {
                if (!this._bounds)
                    this._bounds = this._matrix.inverted()._transformBounds(
                        new Rectangle(new Point(), this._viewSize));
                return this._bounds;
            },

            getSize: function() {
                return this.getBounds().getSize();
            },

            isVisible: function() {
                return DomElement.isInView(this._element);
            },

            isInserted: function() {
                return DomElement.isInserted(this._element);
            },

            getPixelSize: function(size) {
                var element = this._element,
                    pixels;
                if (element) {
                    var parent = element.parentNode,
                        temp = document.createElement('div');
                    temp.style.fontSize = size;
                    parent.appendChild(temp);
                    pixels = parseFloat(DomElement.getStyles(temp).fontSize);
                    parent.removeChild(temp);
                } else {
                    pixels = parseFloat(pixels);
                }
                return pixels;
            },

            getTextWidth: function(font, lines) {
                return 0;
            }
        }, Base.each(['rotate', 'scale', 'shear', 'skew'], function(key) {
            var rotate = key === 'rotate';
            this[key] = function() {
                var value = (rotate ? Base : Point).read(arguments),
                    center = Point.read(arguments, 0, {
                        readNull: true
                    });
                return this.transform(new Matrix()[key](value,
                    center || this.getCenter(true)));
            };
        }, {
            _decompose: function() {
                return this._decomposed || (this._decomposed = this._matrix.decompose());
            },

            translate: function() {
                var mx = new Matrix();
                return this.transform(mx.translate.apply(mx, arguments));
            },

            getCenter: function() {
                return this.getBounds().getCenter();
            },

            setCenter: function() {
                var center = Point.read(arguments);
                this.translate(this.getCenter().subtract(center));
            },

            getZoom: function() {
                var decomposed = this._decompose(),
                    scaling = decomposed && decomposed.scaling;
                return scaling ? (scaling.x + scaling.y) / 2 : 0;
            },

            setZoom: function(zoom) {
                this.transform(new Matrix().scale(zoom / this.getZoom(),
                    this.getCenter()));
            },

            getRotation: function() {
                var decomposed = this._decompose();
                return decomposed && decomposed.rotation;
            },

            setRotation: function(rotation) {
                var current = this.getRotation();
                if (current != null && rotation != null) {
                    this.rotate(rotation - current);
                }
            },

            getScaling: function() {
                var decomposed = this._decompose(),
                    scaling = decomposed && decomposed.scaling;
                return scaling ?
                    new LinkedPoint(scaling.x, scaling.y, this, 'setScaling') :
                    undefined;
            },

            setScaling: function() {
                var current = this.getScaling(),
                    scaling = Point.read(arguments, 0, {
                        clone: true,
                        readNull: true
                    });
                if (current && scaling) {
                    this.scale(scaling.x / current.x, scaling.y / current.y);
                }
            },

            getMatrix: function() {
                return this._matrix;
            },

            setMatrix: function() {
                var matrix = this._matrix;
                matrix.initialize.apply(matrix, arguments);
            },

            transform: function(matrix) {
                this._matrix.append(matrix);
            },

            scrollBy: function() {
                this.translate(Point.read(arguments).negate());
            }
        }), {

            projectToView: function() {
                return this._matrix._transformPoint(Point.read(arguments));
            },

            viewToProject: function() {
                return this._matrix._inverseTransform(Point.read(arguments));
            },

            getEventPoint: function(event) {
                return this.viewToProject(DomEvent.getOffset(event, this._element));
            },

        }, {
            statics: {
                _views: [],
                _viewsById: {},
                _id: 0,

                create: function(project, element) {
                    if (document && typeof element === 'string')
                        element = document.getElementById(element);
                    var ctor = window ? CanvasView : View;
                    return new ctor(project, element);
                }
            }
        },
        new function() {
            if (!window)
                return;
            var prevFocus,
                tempFocus,
                dragging = false,
                mouseDown = false;

            function getView(event) {
                var target = DomEvent.getTarget(event);
                return target.getAttribute && View._viewsById[
                    target.getAttribute('id')];
            }

            function updateFocus() {
                var view = View._focused;
                if (!view || !view.isVisible()) {
                    for (var i = 0, l = View._views.length; i < l; i++) {
                        if ((view = View._views[i]).isVisible()) {
                            View._focused = tempFocus = view;
                            break;
                        }
                    }
                }
            }

            function handleMouseMove(view, event, point) {
                view._handleMouseEvent('mousemove', event, point);
            }

            var navigator = window.navigator,
                mousedown, mousemove, mouseup;
            if (navigator.pointerEnabled || navigator.msPointerEnabled) {
                mousedown = 'pointerdown MSPointerDown';
                mousemove = 'pointermove MSPointerMove';
                mouseup = 'pointerup pointercancel MSPointerUp MSPointerCancel';
            } else {
                mousedown = 'touchstart';
                mousemove = 'touchmove';
                mouseup = 'touchend touchcancel';
                if (!('ontouchstart' in window && navigator.userAgent.match(
                        /mobile|tablet|ip(ad|hone|od)|android|silk/i))) {
                    mousedown += ' mousedown';
                    mousemove += ' mousemove';
                    mouseup += ' mouseup';
                }
            }

            var viewEvents = {},
                docEvents = {
                    mouseout: function(event) {
                        var view = View._focused,
                            target = DomEvent.getRelatedTarget(event);
                        if (view && (!target || target.nodeName === 'HTML')) {
                            var offset = DomEvent.getOffset(event, view._element),
                                x = offset.x,
                                abs = Math.abs,
                                ax = abs(x),
                                max = 1 << 25,
                                diff = ax - max;
                            offset.x = abs(diff) < ax ? diff * (x < 0 ? -1 : 1) : x;
                            handleMouseMove(view, event, view.viewToProject(offset));
                        }
                    },

                    scroll: updateFocus
                };

            viewEvents[mousedown] = function(event) {
                var view = View._focused = getView(event);
                if (!dragging) {
                    dragging = true;
                    view._handleMouseEvent('mousedown', event);
                }
            };

            docEvents[mousemove] = function(event) {
                var view = View._focused;
                if (!mouseDown) {
                    var target = getView(event);
                    if (target) {
                        if (view !== target) {
                            if (view)
                                handleMouseMove(view, event);
                            if (!prevFocus)
                                prevFocus = view;
                            view = View._focused = tempFocus = target;
                        }
                    } else if (tempFocus && tempFocus === view) {
                        if (prevFocus && !prevFocus.isInserted())
                            prevFocus = null;
                        view = View._focused = prevFocus;
                        prevFocus = null;
                        updateFocus();
                    }
                }
                if (view)
                    handleMouseMove(view, event);
            };

            docEvents[mousedown] = function() {
                mouseDown = true;
            };

            docEvents[mouseup] = function(event) {
                var view = View._focused;
                if (view && dragging)
                    view._handleMouseEvent('mouseup', event);
                mouseDown = dragging = false;
            };

            DomEvent.add(document, docEvents);

            DomEvent.add(window, {
                load: updateFocus
            });

            var called = false,
                prevented = false,
                fallbacks = {
                    doubleclick: 'click',
                    mousedrag: 'mousemove'
                },
                wasInView = false,
                overView,
                downPoint,
                lastPoint,
                downItem,
                overItem,
                dragItem,
                clickItem,
                clickTime,
                dblClick;

            function emitMouseEvent(obj, target, type, event, point, prevPoint,
                stopItem) {
                var stopped = false,
                    mouseEvent;

                function emit(obj, type) {
                    if (obj.responds(type)) {
                        if (!mouseEvent) {
                            mouseEvent = new MouseEvent(type, event, point,
                                target || obj,
                                prevPoint ? point.subtract(prevPoint) : null);
                        }
                        if (obj.emit(type, mouseEvent)) {
                            called = true;
                            if (mouseEvent.prevented)
                                prevented = true;
                            if (mouseEvent.stopped)
                                return stopped = true;
                        }
                    } else {
                        var fallback = fallbacks[type];
                        if (fallback)
                            return emit(obj, fallback);
                    }
                }

                while (obj && obj !== stopItem) {
                    if (emit(obj, type))
                        break;
                    obj = obj._parent;
                }
                return stopped;
            }

            function emitMouseEvents(view, hitItem, type, event, point, prevPoint) {
                view._project.removeOn(type);
                prevented = called = false;
                return (dragItem && emitMouseEvent(dragItem, null, type, event,
                        point, prevPoint) ||
                    hitItem && hitItem !== dragItem &&
                    !hitItem.isDescendant(dragItem) &&
                    emitMouseEvent(hitItem, null, type, event, point, prevPoint,
                        dragItem) ||
                    emitMouseEvent(view, dragItem || hitItem || view, type, event,
                        point, prevPoint));
            }

            var itemEventsMap = {
                mousedown: {
                    mousedown: 1,
                    mousedrag: 1,
                    click: 1,
                    doubleclick: 1
                },
                mouseup: {
                    mouseup: 1,
                    mousedrag: 1,
                    click: 1,
                    doubleclick: 1
                },
                mousemove: {
                    mousedrag: 1,
                    mousemove: 1,
                    mouseenter: 1,
                    mouseleave: 1
                }
            };

            return {
                _viewEvents: viewEvents,

                _handleMouseEvent: function(type, event, point) {
                    var itemEvents = this._itemEvents,
                        hitItems = itemEvents.native[type],
                        nativeMove = type === 'mousemove',
                        tool = this._scope.tool,
                        view = this;

                    function responds(type) {
                        return itemEvents.virtual[type] || view.responds(type) ||
                            tool && tool.responds(type);
                    }

                    if (nativeMove && dragging && responds('mousedrag'))
                        type = 'mousedrag';
                    if (!point)
                        point = this.getEventPoint(event);

                    var inView = this.getBounds().contains(point),
                        hit = hitItems && inView && view._project.hitTest(point, {
                            tolerance: 0,
                            fill: true,
                            stroke: true
                        }),
                        hitItem = hit && hit.item || null,
                        handle = false,
                        mouse = {};
                    mouse[type.substr(5)] = true;

                    if (hitItems && hitItem !== overItem) {
                        if (overItem) {
                            emitMouseEvent(overItem, null, 'mouseleave', event, point);
                        }
                        if (hitItem) {
                            emitMouseEvent(hitItem, null, 'mouseenter', event, point);
                        }
                        overItem = hitItem;
                    }
                    if (wasInView ^ inView) {
                        emitMouseEvent(this, null, inView ? 'mouseenter' : 'mouseleave',
                            event, point);
                        overView = inView ? this : null;
                        handle = true;
                    }
                    if ((inView || mouse.drag) && !point.equals(lastPoint)) {
                        emitMouseEvents(this, hitItem, nativeMove ? type : 'mousemove',
                            event, point, lastPoint);
                        handle = true;
                    }
                    wasInView = inView;
                    if (mouse.down && inView || mouse.up && downPoint) {
                        emitMouseEvents(this, hitItem, type, event, point, downPoint);
                        if (mouse.down) {
                            dblClick = hitItem === clickItem &&
                                (Date.now() - clickTime < 300);
                            downItem = clickItem = hitItem;
                            if (!prevented && hitItem) {
                                var item = hitItem;
                                while (item && !item.responds('mousedrag'))
                                    item = item._parent;
                                if (item)
                                    dragItem = hitItem;
                            }
                            downPoint = point;
                        } else if (mouse.up) {
                            if (!prevented && hitItem === downItem) {
                                clickTime = Date.now();
                                emitMouseEvents(this, hitItem, dblClick ? 'doubleclick' :
                                    'click', event, point, downPoint);
                                dblClick = false;
                            }
                            downItem = dragItem = null;
                        }
                        wasInView = false;
                        handle = true;
                    }
                    lastPoint = point;
                    if (handle && tool) {
                        called = tool._handleMouseEvent(type, event, point, mouse) ||
                            called;
                    }

                    if (called && !mouse.move || mouse.down && responds('mouseup'))
                        event.preventDefault();
                },

                _handleKeyEvent: function(type, event, key, character) {
                    var scope = this._scope,
                        tool = scope.tool,
                        keyEvent;

                    function emit(obj) {
                        if (obj.responds(type)) {
                            paper = scope;
                            obj.emit(type, keyEvent = keyEvent ||
                                new KeyEvent(type, event, key, character));
                        }
                    }

                    if (this.isVisible()) {
                        emit(this);
                        if (tool && tool.responds(type))
                            emit(tool);
                    }
                },

                _countItemEvent: function(type, sign) {
                    var itemEvents = this._itemEvents,
                        native = itemEvents.native,
                        virtual = itemEvents.virtual;
                    for (var key in itemEventsMap) {
                        native[key] = (native[key] || 0) +
                            (itemEventsMap[key][type] || 0) * sign;
                    }
                    virtual[type] = (virtual[type] || 0) + sign;
                },

                statics: {
                    updateFocus: updateFocus
                }
            };
        });

    var CanvasView = View.extend({
        _class: 'CanvasView',

        initialize: function CanvasView(project, canvas) {
            if (!(canvas instanceof window.HTMLCanvasElement)) {
                var size = Size.read(arguments, 1);
                if (size.isZero())
                    throw new Error(
                        'Cannot create CanvasView with the provided argument: ' +
                        Base.slice(arguments, 1));
                canvas = CanvasProvider.getCanvas(size);
            }
            var ctx = this._context = canvas.getContext('2d');
            ctx.save();
            this._pixelRatio = 1;
            if (!/^off|false$/.test(PaperScope.getAttribute(canvas, 'hidpi'))) {
                var deviceRatio = window.devicePixelRatio || 1,
                    backingStoreRatio = DomElement.getPrefixed(ctx,
                        'backingStorePixelRatio') || 1;
                this._pixelRatio = deviceRatio / backingStoreRatio;
            }
            View.call(this, project, canvas);
            this._needsUpdate = true;
        },

        remove: function remove() {
            this._context.restore();
            return remove.base.call(this);
        },

        _setElementSize: function _setElementSize(width, height) {
            var pixelRatio = this._pixelRatio;
            _setElementSize.base.call(this, width * pixelRatio, height * pixelRatio);
            if (pixelRatio !== 1) {
                var element = this._element,
                    ctx = this._context;
                if (!PaperScope.hasAttribute(element, 'resize')) {
                    var style = element.style;
                    style.width = width + 'px';
                    style.height = height + 'px';
                }
                ctx.restore();
                ctx.save();
                ctx.scale(pixelRatio, pixelRatio);
            }
        },

        getPixelSize: function getPixelSize(size) {
            var agent = paper.agent,
                pixels;
            if (agent && agent.firefox) {
                pixels = getPixelSize.base.call(this, size);
            } else {
                var ctx = this._context,
                    prevFont = ctx.font;
                ctx.font = size + ' serif';
                pixels = parseFloat(ctx.font);
                ctx.font = prevFont;
            }
            return pixels;
        },

        getTextWidth: function(font, lines) {
            var ctx = this._context,
                prevFont = ctx.font,
                width = 0;
            ctx.font = font;
            for (var i = 0, l = lines.length; i < l; i++)
                width = Math.max(width, ctx.measureText(lines[i]).width);
            ctx.font = prevFont;
            return width;
        },

        update: function() {
            if (!this._needsUpdate)
                return false;
            var project = this._project,
                ctx = this._context,
                size = this._viewSize;
            ctx.clearRect(0, 0, size.width + 1, size.height + 1);
            if (project)
                project.draw(ctx, this._matrix, this._pixelRatio);
            this._needsUpdate = false;
            return true;
        }
    });

    var Event = Base.extend({
        _class: 'Event',

        initialize: function Event(event) {
            this.event = event;
            this.type = event && event.type;
        },

        prevented: false,
        stopped: false,

        preventDefault: function() {
            this.prevented = true;
            this.event.preventDefault();
        },

        stopPropagation: function() {
            this.stopped = true;
            this.event.stopPropagation();
        },

        stop: function() {
            this.stopPropagation();
            this.preventDefault();
        },

        getTimeStamp: function() {
            return this.event.timeStamp;
        },

        getModifiers: function() {
            return Key.modifiers;
        }
    });

    var KeyEvent = Event.extend({
        _class: 'KeyEvent',

        initialize: function KeyEvent(type, event, key, character) {
            this.type = type;
            this.event = event;
            this.key = key;
            this.character = character;
        },

        toString: function() {
            return "{ type: '" + this.type +
                "', key: '" + this.key +
                "', character: '" + this.character +
                "', modifiers: " + this.getModifiers() +
                " }";
        }
    });

    var Key = new function() {
        var keyLookup = {
                '\t': 'tab',
                ' ': 'space',
                '\b': 'backspace',
                '\x7f': 'delete',
                'Spacebar': 'space',
                'Del': 'delete',
                'Win': 'meta',
                'Esc': 'escape'
            },

            charLookup = {
                'tab': '\t',
                'space': ' ',
                'enter': '\r'
            },

            keyMap = {},
            charMap = {},
            metaFixMap,
            downKey,

            modifiers = new Base({
                shift: false,
                control: false,
                alt: false,
                meta: false,
                capsLock: false,
                space: false
            }).inject({
                option: {
                    get: function() {
                        return this.alt;
                    }
                },

                command: {
                    get: function() {
                        var agent = paper && paper.agent;
                        return agent && agent.mac ? this.meta : this.control;
                    }
                }
            });

        function getKey(event) {
            var key = event.key || event.keyIdentifier;
            key = /^U\+/.test(key) ?
                String.fromCharCode(parseInt(key.substr(2), 16)) :
                /^Arrow[A-Z]/.test(key) ? key.substr(5) :
                key === 'Unidentified' || key === undefined ?
                String.fromCharCode(event.keyCode) :
                key;
            return keyLookup[key] ||
                (key.length > 1 ? Base.hyphenate(key) : key.toLowerCase());
        }

        function handleKey(down, key, character, event) {
            var type = down ? 'keydown' : 'keyup',
                view = View._focused,
                name;
            keyMap[key] = down;
            if (down) {
                charMap[key] = character;
            } else {
                delete charMap[key];
            }
            if (key.length > 1 && (name = Base.camelize(key)) in modifiers) {
                modifiers[name] = down;
                var agent = paper && paper.agent;
                if (name === 'meta' && agent && agent.mac) {
                    if (down) {
                        metaFixMap = {};
                    } else {
                        for (var k in metaFixMap) {
                            if (k in charMap)
                                handleKey(false, k, metaFixMap[k], event);
                        }
                        metaFixMap = null;
                    }
                }
            } else if (down && metaFixMap) {
                metaFixMap[key] = character;
            }
            if (view) {
                view._handleKeyEvent(down ? 'keydown' : 'keyup', event, key,
                    character);
            }
        }

        DomEvent.add(document, {
            keydown: function(event) {
                var key = getKey(event),
                    agent = paper && paper.agent;
                if (key.length > 1 || agent && (agent.chrome && (event.altKey ||
                        agent.mac && event.metaKey ||
                        !agent.mac && event.ctrlKey))) {
                    handleKey(true, key,
                        charLookup[key] || (key.length > 1 ? '' : key), event);
                } else {
                    downKey = key;
                }
            },

            keypress: function(event) {
                if (downKey) {
                    var key = getKey(event),
                        code = event.charCode,
                        character = code >= 32 ? String.fromCharCode(code) :
                        key.length > 1 ? '' : key;
                    if (key !== downKey) {
                        key = character.toLowerCase();
                    }
                    handleKey(true, key, character, event);
                    downKey = null;
                }
            },

            keyup: function(event) {
                var key = getKey(event);
                if (key in charMap)
                    handleKey(false, key, charMap[key], event);
            }
        });

        DomEvent.add(window, {
            blur: function(event) {
                for (var key in charMap)
                    handleKey(false, key, charMap[key], event);
            }
        });

        return {
            modifiers: modifiers,

            isDown: function(key) {
                return !!keyMap[key];
            }
        };
    };

    var MouseEvent = Event.extend({
        _class: 'MouseEvent',

        initialize: function MouseEvent(type, event, point, target, delta) {
            this.type = type;
            this.event = event;
            this.point = point;
            this.target = target;
            this.delta = delta;
        },

        toString: function() {
            return "{ type: '" + this.type +
                "', point: " + this.point +
                ', target: ' + this.target +
                (this.delta ? ', delta: ' + this.delta : '') +
                ', modifiers: ' + this.getModifiers() +
                ' }';
        }
    });

    var ToolEvent = Event.extend({
        _class: 'ToolEvent',
        _item: null,

        initialize: function ToolEvent(tool, type, event) {
            this.tool = tool;
            this.type = type;
            this.event = event;
        },

        _choosePoint: function(point, toolPoint) {
            return point ? point : toolPoint ? toolPoint.clone() : null;
        },

        getPoint: function() {
            return this._choosePoint(this._point, this.tool._point);
        },

        setPoint: function(point) {
            this._point = point;
        },

        getLastPoint: function() {
            return this._choosePoint(this._lastPoint, this.tool._lastPoint);
        },

        setLastPoint: function(lastPoint) {
            this._lastPoint = lastPoint;
        },

        getDownPoint: function() {
            return this._choosePoint(this._downPoint, this.tool._downPoint);
        },

        setDownPoint: function(downPoint) {
            this._downPoint = downPoint;
        },

        getMiddlePoint: function() {
            if (!this._middlePoint && this.tool._lastPoint) {
                return this.tool._point.add(this.tool._lastPoint).divide(2);
            }
            return this._middlePoint;
        },

        setMiddlePoint: function(middlePoint) {
            this._middlePoint = middlePoint;
        },

        getDelta: function() {
            return !this._delta && this.tool._lastPoint ?
                this.tool._point.subtract(this.tool._lastPoint) :
                this._delta;
        },

        setDelta: function(delta) {
            this._delta = delta;
        },

        getCount: function() {
            return this.tool[/^mouse(down|up)$/.test(this.type) ?
                '_downCount' : '_moveCount'];
        },

        setCount: function(count) {
            this.tool[/^mouse(down|up)$/.test(this.type) ? 'downCount' : 'count'] = count;
        },

        getItem: function() {
            if (!this._item) {
                var result = this.tool._scope.project.hitTest(this.getPoint());
                if (result) {
                    var item = result.item,
                        parent = item._parent;
                    while (/^(Group|CompoundPath)$/.test(parent._class)) {
                        item = parent;
                        parent = parent._parent;
                    }
                    this._item = item;
                }
            }
            return this._item;
        },

        setItem: function(item) {
            this._item = item;
        },

        toString: function() {
            return '{ type: ' + this.type +
                ', point: ' + this.getPoint() +
                ', count: ' + this.getCount() +
                ', modifiers: ' + this.getModifiers() +
                ' }';
        }
    });

    var Tool = PaperScopeItem.extend({
        _class: 'Tool',
        _list: 'tools',
        _reference: 'tool',
        _events: ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onMouseMove',
            'onActivate', 'onDeactivate', 'onEditOptions', 'onKeyDown',
            'onKeyUp'
        ],

        initialize: function Tool(props) {
            PaperScopeItem.call(this);
            this._moveCount = -1;
            this._downCount = -1;
            this.set(props);
        },

        getMinDistance: function() {
            return this._minDistance;
        },

        setMinDistance: function(minDistance) {
            this._minDistance = minDistance;
            if (minDistance != null && this._maxDistance != null &&
                minDistance > this._maxDistance) {
                this._maxDistance = minDistance;
            }
        },

        getMaxDistance: function() {
            return this._maxDistance;
        },

        setMaxDistance: function(maxDistance) {
            this._maxDistance = maxDistance;
            if (this._minDistance != null && maxDistance != null &&
                maxDistance < this._minDistance) {
                this._minDistance = maxDistance;
            }
        },

        getFixedDistance: function() {
            return this._minDistance == this._maxDistance ?
                this._minDistance : null;
        },

        setFixedDistance: function(distance) {
            this._minDistance = this._maxDistance = distance;
        },

        _handleMouseEvent: function(type, event, point, mouse) {
            paper = this._scope;
            if (mouse.drag && !this.responds(type))
                type = 'mousemove';
            var move = mouse.move || mouse.drag,
                responds = this.responds(type),
                minDistance = this.minDistance,
                maxDistance = this.maxDistance,
                called = false,
                tool = this;

            function update(minDistance, maxDistance) {
                var pt = point,
                    toolPoint = move ? tool._point : (tool._downPoint || pt);
                if (move) {
                    if (tool._moveCount && pt.equals(toolPoint)) {
                        return false;
                    }
                    if (toolPoint && (minDistance != null || maxDistance != null)) {
                        var vector = pt.subtract(toolPoint),
                            distance = vector.getLength();
                        if (distance < (minDistance || 0))
                            return false;
                        if (maxDistance) {
                            pt = toolPoint.add(vector.normalize(
                                Math.min(distance, maxDistance)));
                        }
                    }
                    tool._moveCount++;
                }
                tool._point = pt;
                tool._lastPoint = toolPoint || pt;
                if (mouse.down) {
                    tool._moveCount = -1;
                    tool._downPoint = pt;
                    tool._downCount++;
                }
                return true;
            }

            function emit() {
                if (responds) {
                    called = tool.emit(type, new ToolEvent(tool, type, event)) ||
                        called;
                }
            }

            if (mouse.down) {
                update();
                emit();
            } else if (mouse.up) {
                update(null, maxDistance);
                emit();
            } else if (responds) {
                while (update(minDistance, maxDistance))
                    emit();
            }
            return called;
        }

    });

    var Http = {
        request: function(options) {
            var xhr = new self.XMLHttpRequest();
            xhr.open((options.method || 'get').toUpperCase(), options.url,
                Base.pick(options.async, true));
            if (options.mimeType)
                xhr.overrideMimeType(options.mimeType);
            xhr.onload = function() {
                var status = xhr.status;
                if (status === 0 || status === 200) {
                    if (options.onLoad) {
                        options.onLoad.call(xhr, xhr.responseText);
                    }
                } else {
                    xhr.onerror();
                }
            };
            xhr.onerror = function() {
                var status = xhr.status,
                    message = 'Could not load "' + options.url + '" (Status: ' +
                    status + ')';
                if (options.onError) {
                    options.onError(message, status);
                } else {
                    throw new Error(message);
                }
            };
            return xhr.send(null);
        }
    };

    var CanvasProvider = {
        canvases: [],

        getCanvas: function(width, height) {
            if (!window)
                return null;
            var canvas,
                clear = true;
            if (typeof width === 'object') {
                height = width.height;
                width = width.width;
            }
            if (this.canvases.length) {
                canvas = this.canvases.pop();
            } else {
                canvas = document.createElement('canvas');
                clear = false;
            }
            var ctx = canvas.getContext('2d');
            if (!ctx) {
                throw new Error('Canvas ' + canvas +
                    ' is unable to provide a 2D context.');
            }
            if (canvas.width === width && canvas.height === height) {
                if (clear)
                    ctx.clearRect(0, 0, width + 1, height + 1);
            } else {
                canvas.width = width;
                canvas.height = height;
            }
            ctx.save();
            return canvas;
        },

        getContext: function(width, height) {
            var canvas = this.getCanvas(width, height);
            return canvas ? canvas.getContext('2d') : null;
        },

        release: function(obj) {
            var canvas = obj && obj.canvas ? obj.canvas : obj;
            if (canvas && canvas.getContext) {
                canvas.getContext('2d').restore();
                this.canvases.push(canvas);
            }
        }
    };

    var BlendMode = new function() {
        var min = Math.min,
            max = Math.max,
            abs = Math.abs,
            sr, sg, sb, sa,
            br, bg, bb, ba,
            dr, dg, db;

        function getLum(r, g, b) {
            return 0.2989 * r + 0.587 * g + 0.114 * b;
        }

        function setLum(r, g, b, l) {
            var d = l - getLum(r, g, b);
            dr = r + d;
            dg = g + d;
            db = b + d;
            var l = getLum(dr, dg, db),
                mn = min(dr, dg, db),
                mx = max(dr, dg, db);
            if (mn < 0) {
                var lmn = l - mn;
                dr = l + (dr - l) * l / lmn;
                dg = l + (dg - l) * l / lmn;
                db = l + (db - l) * l / lmn;
            }
            if (mx > 255) {
                var ln = 255 - l,
                    mxl = mx - l;
                dr = l + (dr - l) * ln / mxl;
                dg = l + (dg - l) * ln / mxl;
                db = l + (db - l) * ln / mxl;
            }
        }

        function getSat(r, g, b) {
            return max(r, g, b) - min(r, g, b);
        }

        function setSat(r, g, b, s) {
            var col = [r, g, b],
                mx = max(r, g, b),
                mn = min(r, g, b),
                md;
            mn = mn === r ? 0 : mn === g ? 1 : 2;
            mx = mx === r ? 0 : mx === g ? 1 : 2;
            md = min(mn, mx) === 0 ? max(mn, mx) === 1 ? 2 : 1 : 0;
            if (col[mx] > col[mn]) {
                col[md] = (col[md] - col[mn]) * s / (col[mx] - col[mn]);
                col[mx] = s;
            } else {
                col[md] = col[mx] = 0;
            }
            col[mn] = 0;
            dr = col[0];
            dg = col[1];
            db = col[2];
        }

        var modes = {
            multiply: function() {
                dr = br * sr / 255;
                dg = bg * sg / 255;
                db = bb * sb / 255;
            },

            screen: function() {
                dr = br + sr - (br * sr / 255);
                dg = bg + sg - (bg * sg / 255);
                db = bb + sb - (bb * sb / 255);
            },

            overlay: function() {
                dr = br < 128 ? 2 * br * sr / 255 : 255 - 2 * (255 - br) * (255 - sr) / 255;
                dg = bg < 128 ? 2 * bg * sg / 255 : 255 - 2 * (255 - bg) * (255 - sg) / 255;
                db = bb < 128 ? 2 * bb * sb / 255 : 255 - 2 * (255 - bb) * (255 - sb) / 255;
            },

            'soft-light': function() {
                var t = sr * br / 255;
                dr = t + br * (255 - (255 - br) * (255 - sr) / 255 - t) / 255;
                t = sg * bg / 255;
                dg = t + bg * (255 - (255 - bg) * (255 - sg) / 255 - t) / 255;
                t = sb * bb / 255;
                db = t + bb * (255 - (255 - bb) * (255 - sb) / 255 - t) / 255;
            },

            'hard-light': function() {
                dr = sr < 128 ? 2 * sr * br / 255 : 255 - 2 * (255 - sr) * (255 - br) / 255;
                dg = sg < 128 ? 2 * sg * bg / 255 : 255 - 2 * (255 - sg) * (255 - bg) / 255;
                db = sb < 128 ? 2 * sb * bb / 255 : 255 - 2 * (255 - sb) * (255 - bb) / 255;
            },

            'color-dodge': function() {
                dr = br === 0 ? 0 : sr === 255 ? 255 : min(255, 255 * br / (255 - sr));
                dg = bg === 0 ? 0 : sg === 255 ? 255 : min(255, 255 * bg / (255 - sg));
                db = bb === 0 ? 0 : sb === 255 ? 255 : min(255, 255 * bb / (255 - sb));
            },

            'color-burn': function() {
                dr = br === 255 ? 255 : sr === 0 ? 0 : max(0, 255 - (255 - br) * 255 / sr);
                dg = bg === 255 ? 255 : sg === 0 ? 0 : max(0, 255 - (255 - bg) * 255 / sg);
                db = bb === 255 ? 255 : sb === 0 ? 0 : max(0, 255 - (255 - bb) * 255 / sb);
            },

            darken: function() {
                dr = br < sr ? br : sr;
                dg = bg < sg ? bg : sg;
                db = bb < sb ? bb : sb;
            },

            lighten: function() {
                dr = br > sr ? br : sr;
                dg = bg > sg ? bg : sg;
                db = bb > sb ? bb : sb;
            },

            difference: function() {
                dr = br - sr;
                if (dr < 0)
                    dr = -dr;
                dg = bg - sg;
                if (dg < 0)
                    dg = -dg;
                db = bb - sb;
                if (db < 0)
                    db = -db;
            },

            exclusion: function() {
                dr = br + sr * (255 - br - br) / 255;
                dg = bg + sg * (255 - bg - bg) / 255;
                db = bb + sb * (255 - bb - bb) / 255;
            },

            hue: function() {
                setSat(sr, sg, sb, getSat(br, bg, bb));
                setLum(dr, dg, db, getLum(br, bg, bb));
            },

            saturation: function() {
                setSat(br, bg, bb, getSat(sr, sg, sb));
                setLum(dr, dg, db, getLum(br, bg, bb));
            },

            luminosity: function() {
                setLum(br, bg, bb, getLum(sr, sg, sb));
            },

            color: function() {
                setLum(sr, sg, sb, getLum(br, bg, bb));
            },

            add: function() {
                dr = min(br + sr, 255);
                dg = min(bg + sg, 255);
                db = min(bb + sb, 255);
            },

            subtract: function() {
                dr = max(br - sr, 0);
                dg = max(bg - sg, 0);
                db = max(bb - sb, 0);
            },

            average: function() {
                dr = (br + sr) / 2;
                dg = (bg + sg) / 2;
                db = (bb + sb) / 2;
            },

            negation: function() {
                dr = 255 - abs(255 - sr - br);
                dg = 255 - abs(255 - sg - bg);
                db = 255 - abs(255 - sb - bb);
            }
        };

        var nativeModes = this.nativeModes = Base.each([
            'source-over', 'source-in', 'source-out', 'source-atop',
            'destination-over', 'destination-in', 'destination-out',
            'destination-atop', 'lighter', 'darker', 'copy', 'xor'
        ], function(mode) {
            this[mode] = true;
        }, {});

        var ctx = CanvasProvider.getContext(1, 1);
        if (ctx) {
            Base.each(modes, function(func, mode) {
                var darken = mode === 'darken',
                    ok = false;
                ctx.save();
                try {
                    ctx.fillStyle = darken ? '#300' : '#a00';
                    ctx.fillRect(0, 0, 1, 1);
                    ctx.globalCompositeOperation = mode;
                    if (ctx.globalCompositeOperation === mode) {
                        ctx.fillStyle = darken ? '#a00' : '#300';
                        ctx.fillRect(0, 0, 1, 1);
                        ok = ctx.getImageData(0, 0, 1, 1).data[0] !== darken ?
                            170 : 51;
                    }
                } catch (e) {}
                ctx.restore();
                nativeModes[mode] = ok;
            });
            CanvasProvider.release(ctx);
        }

        this.process = function(mode, srcContext, dstContext, alpha, offset) {
            var srcCanvas = srcContext.canvas,
                normal = mode === 'normal';
            if (normal || nativeModes[mode]) {
                dstContext.save();
                dstContext.setTransform(1, 0, 0, 1, 0, 0);
                dstContext.globalAlpha = alpha;
                if (!normal)
                    dstContext.globalCompositeOperation = mode;
                dstContext.drawImage(srcCanvas, offset.x, offset.y);
                dstContext.restore();
            } else {
                var process = modes[mode];
                if (!process)
                    return;
                var dstData = dstContext.getImageData(offset.x, offset.y,
                        srcCanvas.width, srcCanvas.height),
                    dst = dstData.data,
                    src = srcContext.getImageData(0, 0,
                        srcCanvas.width, srcCanvas.height).data;
                for (var i = 0, l = dst.length; i < l; i += 4) {
                    sr = src[i];
                    br = dst[i];
                    sg = src[i + 1];
                    bg = dst[i + 1];
                    sb = src[i + 2];
                    bb = dst[i + 2];
                    sa = src[i + 3];
                    ba = dst[i + 3];
                    process();
                    var a1 = sa * alpha / 255,
                        a2 = 1 - a1;
                    dst[i] = a1 * dr + a2 * br;
                    dst[i + 1] = a1 * dg + a2 * bg;
                    dst[i + 2] = a1 * db + a2 * bb;
                    dst[i + 3] = sa * alpha + a2 * ba;
                }
                dstContext.putImageData(dstData, offset.x, offset.y);
            }
        };
    };

    var SvgElement = new function() {
        var svg = 'http://www.w3.org/2000/svg',
            xmlns = 'http://www.w3.org/2000/xmlns',
            xlink = 'http://www.w3.org/1999/xlink',
            attributeNamespace = {
                href: xlink,
                xlink: xmlns,
                xmlns: xmlns + '/',
                'xmlns:xlink': xmlns + '/'
            };

        function create(tag, attributes, formatter) {
            return set(document.createElementNS(svg, tag), attributes, formatter);
        }

        function get(node, name) {
            var namespace = attributeNamespace[name],
                value = namespace ?
                node.getAttributeNS(namespace, name) :
                node.getAttribute(name);
            return value === 'null' ? null : value;
        }

        function set(node, attributes, formatter) {
            for (var name in attributes) {
                var value = attributes[name],
                    namespace = attributeNamespace[name];
                if (typeof value === 'number' && formatter)
                    value = formatter.number(value);
                if (namespace) {
                    node.setAttributeNS(namespace, name, value);
                } else {
                    node.setAttribute(name, value);
                }
            }
            return node;
        }

        return {
            svg: svg,
            xmlns: xmlns,
            xlink: xlink,

            create: create,
            get: get,
            set: set
        };
    };

    var SvgStyles = Base.each({
        fillColor: ['fill', 'color'],
        fillRule: ['fill-rule', 'string'],
        strokeColor: ['stroke', 'color'],
        strokeWidth: ['stroke-width', 'number'],
        strokeCap: ['stroke-linecap', 'string'],
        strokeJoin: ['stroke-linejoin', 'string'],
        strokeScaling: ['vector-effect', 'lookup', {
            true: 'none',
            false: 'non-scaling-stroke'
        }, function(item, value) {
            return !value &&
                (item instanceof PathItem ||
                    item instanceof Shape ||
                    item instanceof TextItem);
        }],
        miterLimit: ['stroke-miterlimit', 'number'],
        dashArray: ['stroke-dasharray', 'array'],
        dashOffset: ['stroke-dashoffset', 'number'],
        fontFamily: ['font-family', 'string'],
        fontWeight: ['font-weight', 'string'],
        fontSize: ['font-size', 'number'],
        justification: ['text-anchor', 'lookup', {
            left: 'start',
            center: 'middle',
            right: 'end'
        }],
        opacity: ['opacity', 'number'],
        blendMode: ['mix-blend-mode', 'style']
    }, function(entry, key) {
        var part = Base.capitalize(key),
            lookup = entry[2];
        this[key] = {
            type: entry[1],
            property: key,
            attribute: entry[0],
            toSVG: lookup,
            fromSVG: lookup && Base.each(lookup, function(value, name) {
                this[value] = name;
            }, {}),
            exportFilter: entry[3],
            get: 'get' + part,
            set: 'set' + part
        };
    }, {});

    new function() {
        var formatter;

        function getTransform(matrix, coordinates, center) {
            var attrs = new Base(),
                trans = matrix.getTranslation();
            if (coordinates) {
                matrix = matrix._shiftless();
                var point = matrix._inverseTransform(trans);
                attrs[center ? 'cx' : 'x'] = point.x;
                attrs[center ? 'cy' : 'y'] = point.y;
                trans = null;
            }
            if (!matrix.isIdentity()) {
                var decomposed = matrix.decompose();
                if (decomposed) {
                    var parts = [],
                        angle = decomposed.rotation,
                        scale = decomposed.scaling,
                        skew = decomposed.skewing;
                    if (trans && !trans.isZero())
                        parts.push('translate(' + formatter.point(trans) + ')');
                    if (angle)
                        parts.push('rotate(' + formatter.number(angle) + ')');
                    if (!Numerical.isZero(scale.x - 1) ||
                        !Numerical.isZero(scale.y - 1))
                        parts.push('scale(' + formatter.point(scale) + ')');
                    if (skew.x)
                        parts.push('skewX(' + formatter.number(skew.x) + ')');
                    if (skew.y)
                        parts.push('skewY(' + formatter.number(skew.y) + ')');
                    attrs.transform = parts.join(' ');
                } else {
                    attrs.transform = 'matrix(' + matrix.getValues().join(',') + ')';
                }
            }
            return attrs;
        }

        function exportGroup(item, options) {
            var attrs = getTransform(item._matrix),
                children = item._children;
            var node = SvgElement.create('g', attrs, formatter);
            for (var i = 0, l = children.length; i < l; i++) {
                var child = children[i];
                var childNode = exportSVG(child, options);
                if (childNode) {
                    if (child.isClipMask()) {
                        var clip = SvgElement.create('clipPath');
                        clip.appendChild(childNode);
                        setDefinition(child, clip, 'clip');
                        SvgElement.set(node, {
                            'clip-path': 'url(#' + clip.id + ')'
                        });
                    } else {
                        node.appendChild(childNode);
                    }
                }
            }
            return node;
        }

        function exportRaster(item, options) {
            var attrs = getTransform(item._matrix, true),
                size = item.getSize(),
                image = item.getImage();
            attrs.x -= size.width / 2;
            attrs.y -= size.height / 2;
            attrs.width = size.width;
            attrs.height = size.height;
            attrs.href = options.embedImages == false && image && image.src ||
                item.toDataURL();
            return SvgElement.create('image', attrs, formatter);
        }

        function exportPath(item, options) {
            var matchShapes = options.matchShapes;
            if (matchShapes) {
                var shape = item.toShape(false);
                if (shape)
                    return exportShape(shape, options);
            }
            var segments = item._segments,
                length = segments.length,
                type,
                attrs = getTransform(item._matrix);
            if (matchShapes && length >= 2 && !item.hasHandles()) {
                if (length > 2) {
                    type = item._closed ? 'polygon' : 'polyline';
                    var parts = [];
                    for (var i = 0; i < length; i++) {
                        parts.push(formatter.point(segments[i]._point));
                    }
                    attrs.points = parts.join(' ');
                } else {
                    type = 'line';
                    var start = segments[0]._point,
                        end = segments[1]._point;
                    attrs.set({
                        x1: start.x,
                        y1: start.y,
                        x2: end.x,
                        y2: end.y
                    });
                }
            } else {
                type = 'path';
                attrs.d = item.getPathData(null, options.precision);
            }
            return SvgElement.create(type, attrs, formatter);
        }

        function exportShape(item) {
            var type = item._type,
                radius = item._radius,
                attrs = getTransform(item._matrix, true, type !== 'rectangle');
            if (type === 'rectangle') {
                type = 'rect';
                var size = item._size,
                    width = size.width,
                    height = size.height;
                attrs.x -= width / 2;
                attrs.y -= height / 2;
                attrs.width = width;
                attrs.height = height;
                if (radius.isZero())
                    radius = null;
            }
            if (radius) {
                if (type === 'circle') {
                    attrs.r = radius;
                } else {
                    attrs.rx = radius.width;
                    attrs.ry = radius.height;
                }
            }
            return SvgElement.create(type, attrs, formatter);
        }

        function exportCompoundPath(item, options) {
            var attrs = getTransform(item._matrix);
            var data = item.getPathData(null, options.precision);
            if (data)
                attrs.d = data;
            return SvgElement.create('path', attrs, formatter);
        }

        function exportSymbolItem(item, options) {
            var attrs = getTransform(item._matrix, true),
                definition = item._definition,
                node = getDefinition(definition, 'symbol'),
                definitionItem = definition._item,
                bounds = definitionItem.getBounds();
            if (!node) {
                node = SvgElement.create('symbol', {
                    viewBox: formatter.rectangle(bounds)
                });
                node.appendChild(exportSVG(definitionItem, options));
                setDefinition(definition, node, 'symbol');
            }
            attrs.href = '#' + node.id;
            attrs.x += bounds.x;
            attrs.y += bounds.y;
            attrs.width = bounds.width;
            attrs.height = bounds.height;
            attrs.overflow = 'visible';
            return SvgElement.create('use', attrs, formatter);
        }

        function exportGradient(color) {
            var gradientNode = getDefinition(color, 'color');
            if (!gradientNode) {
                var gradient = color.getGradient(),
                    radial = gradient._radial,
                    origin = color.getOrigin(),
                    destination = color.getDestination(),
                    attrs;
                if (radial) {
                    attrs = {
                        cx: origin.x,
                        cy: origin.y,
                        r: origin.getDistance(destination)
                    };
                    var highlight = color.getHighlight();
                    if (highlight) {
                        attrs.fx = highlight.x;
                        attrs.fy = highlight.y;
                    }
                } else {
                    attrs = {
                        x1: origin.x,
                        y1: origin.y,
                        x2: destination.x,
                        y2: destination.y
                    };
                }
                attrs.gradientUnits = 'userSpaceOnUse';
                gradientNode = SvgElement.create((radial ? 'radial' : 'linear') +
                    'Gradient', attrs, formatter);
                var stops = gradient._stops;
                for (var i = 0, l = stops.length; i < l; i++) {
                    var stop = stops[i],
                        stopColor = stop._color,
                        alpha = stopColor.getAlpha(),
                        offset = stop._offset;
                    attrs = {
                        offset: offset == null ? i / (l - 1) : offset
                    };
                    if (stopColor)
                        attrs['stop-color'] = stopColor.toCSS(true);
                    if (alpha < 1)
                        attrs['stop-opacity'] = alpha;
                    gradientNode.appendChild(
                        SvgElement.create('stop', attrs, formatter));
                }
                setDefinition(color, gradientNode, 'color');
            }
            return 'url(#' + gradientNode.id + ')';
        }

        function exportText(item) {
            var node = SvgElement.create('text', getTransform(item._matrix, true),
                formatter);
            node.textContent = item._content;
            return node;
        }

        var exporters = {
            Group: exportGroup,
            Layer: exportGroup,
            Raster: exportRaster,
            Path: exportPath,
            Shape: exportShape,
            CompoundPath: exportCompoundPath,
            SymbolItem: exportSymbolItem,
            PointText: exportText
        };

        function applyStyle(item, node, isRoot) {
            var attrs = {},
                parent = !isRoot && item.getParent(),
                style = [];

            if (item._name != null)
                attrs.id = item._name;

            Base.each(SvgStyles, function(entry) {
                var get = entry.get,
                    type = entry.type,
                    value = item[get]();
                if (entry.exportFilter ?
                    entry.exportFilter(item, value) :
                    !parent || !Base.equals(parent[get](), value)) {
                    if (type === 'color' && value != null) {
                        var alpha = value.getAlpha();
                        if (alpha < 1)
                            attrs[entry.attribute + '-opacity'] = alpha;
                    }
                    if (type === 'style') {
                        style.push(entry.attribute + ': ' + value);
                    } else {
                        attrs[entry.attribute] = value == null ? 'none' :
                            type === 'color' ? value.gradient ?
                            exportGradient(value, item) :
                            value.toCSS(true) :
                            type === 'array' ? value.join(',') :
                            type === 'lookup' ? entry.toSVG[value] :
                            value;
                    }
                }
            });

            if (style.length)
                attrs.style = style.join(';');

            if (attrs.opacity === 1)
                delete attrs.opacity;

            if (!item._visible)
                attrs.visibility = 'hidden';

            return SvgElement.set(node, attrs, formatter);
        }

        var definitions;

        function getDefinition(item, type) {
            if (!definitions)
                definitions = {
                    ids: {},
                    svgs: {}
                };
            return item && definitions.svgs[type + '-' +
                (item._id || item.__id || (item.__id = UID.get('svg')))];
        }

        function setDefinition(item, node, type) {
            if (!definitions)
                getDefinition();
            var typeId = definitions.ids[type] = (definitions.ids[type] || 0) + 1;
            node.id = type + '-' + typeId;
            definitions.svgs[type + '-' + (item._id || item.__id)] = node;
        }

        function exportDefinitions(node, options) {
            var svg = node,
                defs = null;
            if (definitions) {
                svg = node.nodeName.toLowerCase() === 'svg' && node;
                for (var i in definitions.svgs) {
                    if (!defs) {
                        if (!svg) {
                            svg = SvgElement.create('svg');
                            svg.appendChild(node);
                        }
                        defs = svg.insertBefore(SvgElement.create('defs'),
                            svg.firstChild);
                    }
                    defs.appendChild(definitions.svgs[i]);
                }
                definitions = null;
            }
            return options.asString ?
                new self.XMLSerializer().serializeToString(svg) :
                svg;
        }

        function exportSVG(item, options, isRoot) {
            var exporter = exporters[item._class],
                node = exporter && exporter(item, options);
            if (node) {
                var onExport = options.onExport;
                if (onExport)
                    node = onExport(item, node, options) || node;
                var data = JSON.stringify(item._data);
                if (data && data !== '{}' && data !== 'null')
                    node.setAttribute('data-paper-data', data);
            }
            return node && applyStyle(item, node, isRoot);
        }

        function setOptions(options) {
            if (!options)
                options = {};
            formatter = new Formatter(options.precision);
            return options;
        }

        Item.inject({
            exportSVG: function(options) {
                options = setOptions(options);
                return exportDefinitions(exportSVG(this, options, true), options);
            }
        });

        Project.inject({
            exportSVG: function(options) {
                options = setOptions(options);
                var children = this._children,
                    view = this.getView(),
                    bounds = Base.pick(options.bounds, 'view'),
                    mx = options.matrix || bounds === 'view' && view._matrix,
                    matrix = mx && Matrix.read([mx]),
                    rect = bounds === 'view' ?
                    new Rectangle([0, 0], view.getViewSize()) :
                    bounds === 'content' ?
                    Item._getBounds(children, matrix, {
                        stroke: true
                    })
                    .rect :
                    Rectangle.read([bounds], 0, {
                        readNull: true
                    }),
                    attrs = {
                        version: '1.1',
                        xmlns: SvgElement.svg,
                        'xmlns:xlink': SvgElement.xlink,
                    };
                if (rect) {
                    attrs.width = rect.width;
                    attrs.height = rect.height;
                    if (rect.x || rect.y)
                        attrs.viewBox = formatter.rectangle(rect);
                }
                var node = SvgElement.create('svg', attrs, formatter),
                    parent = node;
                if (matrix && !matrix.isIdentity()) {
                    parent = node.appendChild(SvgElement.create('g',
                        getTransform(matrix), formatter));
                }
                for (var i = 0, l = children.length; i < l; i++) {
                    parent.appendChild(exportSVG(children[i], options, true));
                }
                return exportDefinitions(node, options);
            }
        });
    };

    new function() {

        var definitions = {},
            rootSize;

        function getValue(node, name, isString, allowNull, allowPercent) {
            var value = SvgElement.get(node, name),
                res = value == null ?
                allowNull ?
                null :
                isString ? '' : 0 :
                isString ?
                value :
                parseFloat(value);
            return /%\s*$/.test(value) ?
                (res / 100) * (allowPercent ? 1 :
                    rootSize[/x|^width/.test(name) ? 'width' : 'height']) :
                res;
        }

        function getPoint(node, x, y, allowNull, allowPercent) {
            x = getValue(node, x || 'x', false, allowNull, allowPercent);
            y = getValue(node, y || 'y', false, allowNull, allowPercent);
            return allowNull && (x == null || y == null) ? null :
                new Point(x, y);
        }

        function getSize(node, w, h, allowNull, allowPercent) {
            w = getValue(node, w || 'width', false, allowNull, allowPercent);
            h = getValue(node, h || 'height', false, allowNull, allowPercent);
            return allowNull && (w == null || h == null) ? null :
                new Size(w, h);
        }

        function convertValue(value, type, lookup) {
            return value === 'none' ? null :
                type === 'number' ? parseFloat(value) :
                type === 'array' ?
                value ? value.split(/[\s,]+/g).map(parseFloat) : [] :
                type === 'color' ? getDefinition(value) || value :
                type === 'lookup' ? lookup[value] :
                value;
        }

        function importGroup(node, type, options, isRoot) {
            var nodes = node.childNodes,
                isClip = type === 'clippath',
                isDefs = type === 'defs',
                item = new Group(),
                project = item._project,
                currentStyle = project._currentStyle,
                children = [];
            if (!isClip && !isDefs) {
                item = applyAttributes(item, node, isRoot);
                project._currentStyle = item._style.clone();
            }
            if (isRoot) {
                var defs = node.querySelectorAll('defs');
                for (var i = 0, l = defs.length; i < l; i++) {
                    importNode(defs[i], options, false);
                }
            }
            for (var i = 0, l = nodes.length; i < l; i++) {
                var childNode = nodes[i],
                    child;
                if (childNode.nodeType === 1 &&
                    !/^defs$/i.test(childNode.nodeName) &&
                    (child = importNode(childNode, options, false)) &&
                    !(child instanceof SymbolDefinition))
                    children.push(child);
            }
            item.addChildren(children);
            if (isClip)
                item = applyAttributes(item.reduce(), node, isRoot);
            project._currentStyle = currentStyle;
            if (isClip || isDefs) {
                item.remove();
                item = null;
            }
            return item;
        }

        function importPoly(node, type) {
            var coords = node.getAttribute('points').match(
                    /[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g),
                points = [];
            for (var i = 0, l = coords.length; i < l; i += 2)
                points.push(new Point(
                    parseFloat(coords[i]),
                    parseFloat(coords[i + 1])));
            var path = new Path(points);
            if (type === 'polygon')
                path.closePath();
            return path;
        }

        function importPath(node) {
            return PathItem.create(node.getAttribute('d'));
        }

        function importGradient(node, type) {
            var id = (getValue(node, 'href', true) || '').substring(1),
                radial = type === 'radialgradient',
                gradient;
            if (id) {
                gradient = definitions[id].getGradient();
                if (gradient._radial ^ radial) {
                    gradient = gradient.clone();
                    gradient._radial = radial;
                }
            } else {
                var nodes = node.childNodes,
                    stops = [];
                for (var i = 0, l = nodes.length; i < l; i++) {
                    var child = nodes[i];
                    if (child.nodeType === 1)
                        stops.push(applyAttributes(new GradientStop(), child));
                }
                gradient = new Gradient(stops, radial);
            }
            var origin, destination, highlight,
                scaleToBounds = getValue(node, 'gradientUnits', true) !==
                'userSpaceOnUse';
            if (radial) {
                origin = getPoint(node, 'cx', 'cy', false, scaleToBounds);
                destination = origin.add(
                    getValue(node, 'r', false, false, scaleToBounds), 0);
                highlight = getPoint(node, 'fx', 'fy', true, scaleToBounds);
            } else {
                origin = getPoint(node, 'x1', 'y1', false, scaleToBounds);
                destination = getPoint(node, 'x2', 'y2', false, scaleToBounds);
            }
            var color = applyAttributes(
                new Color(gradient, origin, destination, highlight), node);
            color._scaleToBounds = scaleToBounds;
            return null;
        }

        var importers = {
            '#document': function(node, type, options, isRoot) {
                var nodes = node.childNodes;
                for (var i = 0, l = nodes.length; i < l; i++) {
                    var child = nodes[i];
                    if (child.nodeType === 1)
                        return importNode(child, options, isRoot);
                }
            },
            g: importGroup,
            svg: importGroup,
            clippath: importGroup,
            polygon: importPoly,
            polyline: importPoly,
            path: importPath,
            lineargradient: importGradient,
            radialgradient: importGradient,

            image: function(node) {
                var raster = new Raster(getValue(node, 'href', true));
                raster.on('load', function() {
                    var size = getSize(node);
                    this.setSize(size);
                    var center = this._matrix._transformPoint(
                        getPoint(node).add(size.divide(2)));
                    this.translate(center);
                });
                return raster;
            },

            symbol: function(node, type, options, isRoot) {
                return new SymbolDefinition(
                    importGroup(node, type, options, isRoot), true);
            },

            defs: importGroup,

            use: function(node) {
                var id = (getValue(node, 'href', true) || '').substring(1),
                    definition = definitions[id],
                    point = getPoint(node);
                return definition ?
                    definition instanceof SymbolDefinition ?
                    definition.place(point) :
                    definition.clone().translate(point) :
                    null;
            },

            circle: function(node) {
                return new Shape.Circle(
                    getPoint(node, 'cx', 'cy'),
                    getValue(node, 'r'));
            },

            ellipse: function(node) {
                return new Shape.Ellipse({
                    center: getPoint(node, 'cx', 'cy'),
                    radius: getSize(node, 'rx', 'ry')
                });
            },

            rect: function(node) {
                return new Shape.Rectangle(new Rectangle(
                    getPoint(node),
                    getSize(node)
                ), getSize(node, 'rx', 'ry'));
            },

            line: function(node) {
                return new Path.Line(
                    getPoint(node, 'x1', 'y1'),
                    getPoint(node, 'x2', 'y2'));
            },

            text: function(node) {
                var text = new PointText(getPoint(node).add(
                    getPoint(node, 'dx', 'dy')));
                text.setContent(node.textContent.trim() || '');
                return text;
            }
        };

        function applyTransform(item, value, name, node) {
            if (item.transform) {
                var transforms = (node.getAttribute(name) || '').split(/\)\s*/g),
                    matrix = new Matrix();
                for (var i = 0, l = transforms.length; i < l; i++) {
                    var transform = transforms[i];
                    if (!transform)
                        break;
                    var parts = transform.split(/\(\s*/),
                        command = parts[0],
                        v = parts[1].split(/[\s,]+/g);
                    for (var j = 0, m = v.length; j < m; j++)
                        v[j] = parseFloat(v[j]);
                    switch (command) {
                        case 'matrix':
                            matrix.append(
                                new Matrix(v[0], v[1], v[2], v[3], v[4], v[5]));
                            break;
                        case 'rotate':
                            matrix.rotate(v[0], v[1], v[2]);
                            break;
                        case 'translate':
                            matrix.translate(v[0], v[1]);
                            break;
                        case 'scale':
                            matrix.scale(v);
                            break;
                        case 'skewX':
                            matrix.skew(v[0], 0);
                            break;
                        case 'skewY':
                            matrix.skew(0, v[0]);
                            break;
                    }
                }
                item.transform(matrix);
            }
        }

        function applyOpacity(item, value, name) {
            var key = name === 'fill-opacity' ? 'getFillColor' : 'getStrokeColor',
                color = item[key] && item[key]();
            if (color)
                color.setAlpha(parseFloat(value));
        }

        var attributes = Base.set(Base.each(SvgStyles, function(entry) {
            this[entry.attribute] = function(item, value) {
                if (item[entry.set]) {
                    item[entry.set](convertValue(value, entry.type, entry.fromSVG));
                    if (entry.type === 'color') {
                        var color = item[entry.get]();
                        if (color) {
                            if (color._scaleToBounds) {
                                var bounds = item.getBounds();
                                color.transform(new Matrix()
                                    .translate(bounds.getPoint())
                                    .scale(bounds.getSize()));
                            }
                        }
                    }
                }
            };
        }, {}), {
            id: function(item, value) {
                definitions[value] = item;
                if (item.setName)
                    item.setName(value);
            },

            'clip-path': function(item, value) {
                var clip = getDefinition(value);
                if (clip) {
                    clip = clip.clone();
                    clip.setClipMask(true);
                    if (item instanceof Group) {
                        item.insertChild(0, clip);
                    } else {
                        return new Group(clip, item);
                    }
                }
            },

            gradientTransform: applyTransform,
            transform: applyTransform,

            'fill-opacity': applyOpacity,
            'stroke-opacity': applyOpacity,

            visibility: function(item, value) {
                if (item.setVisible)
                    item.setVisible(value === 'visible');
            },

            display: function(item, value) {
                if (item.setVisible)
                    item.setVisible(value !== null);
            },

            'stop-color': function(item, value) {
                if (item.setColor)
                    item.setColor(value);
            },

            'stop-opacity': function(item, value) {
                if (item._color)
                    item._color.setAlpha(parseFloat(value));
            },

            offset: function(item, value) {
                if (item.setOffset) {
                    var percent = value.match(/(.*)%$/);
                    item.setOffset(percent ? percent[1] / 100 : parseFloat(value));
                }
            },

            viewBox: function(item, value, name, node, styles) {
                var rect = new Rectangle(convertValue(value, 'array')),
                    size = getSize(node, null, null, true),
                    group,
                    matrix;
                if (item instanceof Group) {
                    var scale = size ? size.divide(rect.getSize()) : 1,
                        matrix = new Matrix().scale(scale)
                        .translate(rect.getPoint().negate());
                    group = item;
                } else if (item instanceof SymbolDefinition) {
                    if (size)
                        rect.setSize(size);
                    group = item._item;
                }
                if (group) {
                    if (getAttribute(node, 'overflow', styles) !== 'visible') {
                        var clip = new Shape.Rectangle(rect);
                        clip.setClipMask(true);
                        group.addChild(clip);
                    }
                    if (matrix)
                        group.transform(matrix);
                }
            }
        });

        function getAttribute(node, name, styles) {
            var attr = node.attributes[name],
                value = attr && attr.value;
            if (!value) {
                var style = Base.camelize(name);
                value = node.style[style];
                if (!value && styles.node[style] !== styles.parent[style])
                    value = styles.node[style];
            }
            return !value ? undefined :
                value === 'none' ? null :
                value;
        }

        function applyAttributes(item, node, isRoot) {
            if (node.style) {
                var parent = node.parentNode,
                    styles = {
                        node: DomElement.getStyles(node) || {},
                        parent: !isRoot && !/^defs$/i.test(parent.tagName) &&
                            DomElement.getStyles(parent) || {}
                    };
                Base.each(attributes, function(apply, name) {
                    var value = getAttribute(node, name, styles);
                    item = value !== undefined &&
                        apply(item, value, name, node, styles) || item;
                });
            }
            return item;
        }

        function getDefinition(value) {
            var match = value && value.match(/\((?:["'#]*)([^"')]+)/),
                name = match && match[1],
                res = name && definitions[window ?
                    name.replace(window.location.href.split('#')[0] + '#', '') :
                    name];
            if (res && res._scaleToBounds) {
                res = res.clone();
                res._scaleToBounds = true;
            }
            return res;
        }

        function importNode(node, options, isRoot) {
            var type = node.nodeName.toLowerCase(),
                isElement = type !== '#document',
                body = document.body,
                container,
                parent,
                next;
            if (isRoot && isElement) {
                rootSize = paper.getView().getSize();
                rootSize = getSize(node, null, null, true) || rootSize;
                container = SvgElement.create('svg', {
                    style: 'stroke-width: 1px; stroke-miterlimit: 10'
                });
                parent = node.parentNode;
                next = node.nextSibling;
                container.appendChild(node);
                body.appendChild(container);
            }
            var settings = paper.settings,
                applyMatrix = settings.applyMatrix,
                insertItems = settings.insertItems;
            settings.applyMatrix = false;
            settings.insertItems = false;
            var importer = importers[type],
                item = importer && importer(node, type, options, isRoot) || null;
            settings.insertItems = insertItems;
            settings.applyMatrix = applyMatrix;
            if (item) {
                if (isElement && !(item instanceof Group))
                    item = applyAttributes(item, node, isRoot);
                var onImport = options.onImport,
                    data = isElement && node.getAttribute('data-paper-data');
                if (onImport)
                    item = onImport(node, item, options) || item;
                if (options.expandShapes && item instanceof Shape) {
                    item.remove();
                    item = item.toPath();
                }
                if (data)
                    item._data = JSON.parse(data);
            }
            if (container) {
                body.removeChild(container);
                if (parent) {
                    if (next) {
                        parent.insertBefore(node, next);
                    } else {
                        parent.appendChild(node);
                    }
                }
            }
            if (isRoot) {
                definitions = {};
                if (item && Base.pick(options.applyMatrix, applyMatrix))
                    item.matrix.apply(true, true);
            }
            return item;
        }

        function importSVG(source, options, owner) {
            if (!source)
                return null;
            options = typeof options === 'function' ? {
                    onLoad: options
                } :
                options || {};
            var scope = paper,
                item = null;

            function onLoad(svg) {
                try {
                    var node = typeof svg === 'object' ? svg : new self.DOMParser()
                        .parseFromString(svg, 'image/svg+xml');
                    if (!node.nodeName) {
                        node = null;
                        throw new Error('Unsupported SVG source: ' + source);
                    }
                    paper = scope;
                    item = importNode(node, options, true);
                    if (!options || options.insert !== false) {
                        owner._insertItem(undefined, item);
                    }
                    var onLoad = options.onLoad;
                    if (onLoad)
                        onLoad(item, svg);
                } catch (e) {
                    onError(e);
                }
            }

            function onError(message, status) {
                var onError = options.onError;
                if (onError) {
                    onError(message, status);
                } else {
                    throw new Error(message);
                }
            }

            if (typeof source === 'string' && !/^.*</.test(source)) {
                var node = document.getElementById(source);
                if (node) {
                    onLoad(node);
                } else {
                    Http.request({
                        url: source,
                        async: true,
                        onLoad: onLoad,
                        onError: onError
                    });
                }
            } else if (typeof File !== 'undefined' && source instanceof File) {
                var reader = new FileReader();
                reader.onload = function() {
                    onLoad(reader.result);
                };
                reader.onerror = function() {
                    onError(reader.error);
                };
                return reader.readAsText(source);
            } else {
                onLoad(source);
            }

            return item;
        }

        Item.inject({
            importSVG: function(node, options) {
                return importSVG(node, options, this);
            }
        });

        Project.inject({
            importSVG: function(node, options) {
                this.activate();
                return importSVG(node, options, this);
            }
        });
    };

    Base.exports.PaperScript = function() {
        var global = this,
            acorn = global.acorn;
        if (!acorn && typeof require !== 'undefined') {
            try {
                acorn = require('acorn');
            } catch (e) {}
        }
        if (!acorn) {
            var exports, module;
            acorn = exports = module = {};

            (function(root, mod) {
                if (typeof exports == "object" && typeof module == "object") return mod(exports);
                if (typeof define == "function" && define.amd) return define(["exports"], mod);
                mod(root.acorn || (root.acorn = {}));
            })(this, function(exports) {
                "use strict";

                exports.version = "0.5.0";

                var options, input, inputLen, sourceFile;

                exports.parse = function(inpt, opts) {
                    input = String(inpt);
                    inputLen = input.length;
                    setOptions(opts);
                    initTokenState();
                    return parseTopLevel(options.program);
                };

                var defaultOptions = exports.defaultOptions = {
                    ecmaVersion: 5,
                    strictSemicolons: false,
                    allowTrailingCommas: true,
                    forbidReserved: false,
                    allowReturnOutsideFunction: false,
                    locations: false,
                    onComment: null,
                    ranges: false,
                    program: null,
                    sourceFile: null,
                    directSourceFile: null
                };

                function setOptions(opts) {
                    options = opts || {};
                    for (var opt in defaultOptions)
                        if (!Object.prototype.hasOwnProperty.call(options, opt))
                            options[opt] = defaultOptions[opt];
                    sourceFile = options.sourceFile || null;
                }

                var getLineInfo = exports.getLineInfo = function(input, offset) {
                    for (var line = 1, cur = 0;;) {
                        lineBreak.lastIndex = cur;
                        var match = lineBreak.exec(input);
                        if (match && match.index < offset) {
                            ++line;
                            cur = match.index + match[0].length;
                        } else break;
                    }
                    return {
                        line: line,
                        column: offset - cur
                    };
                };

                exports.tokenize = function(inpt, opts) {
                    input = String(inpt);
                    inputLen = input.length;
                    setOptions(opts);
                    initTokenState();

                    var t = {};

                    function getToken(forceRegexp) {
                        lastEnd = tokEnd;
                        readToken(forceRegexp);
                        t.start = tokStart;
                        t.end = tokEnd;
                        t.startLoc = tokStartLoc;
                        t.endLoc = tokEndLoc;
                        t.type = tokType;
                        t.value = tokVal;
                        return t;
                    }
                    getToken.jumpTo = function(pos, reAllowed) {
                        tokPos = pos;
                        if (options.locations) {
                            tokCurLine = 1;
                            tokLineStart = lineBreak.lastIndex = 0;
                            var match;
                            while ((match = lineBreak.exec(input)) && match.index < pos) {
                                ++tokCurLine;
                                tokLineStart = match.index + match[0].length;
                            }
                        }
                        tokRegexpAllowed = reAllowed;
                        skipSpace();
                    };
                    return getToken;
                };

                var tokPos;

                var tokStart, tokEnd;

                var tokStartLoc, tokEndLoc;

                var tokType, tokVal;

                var tokRegexpAllowed;

                var tokCurLine, tokLineStart;

                var lastStart, lastEnd, lastEndLoc;

                var inFunction, labels, strict;

                function raise(pos, message) {
                    var loc = getLineInfo(input, pos);
                    message += " (" + loc.line + ":" + loc.column + ")";
                    var err = new SyntaxError(message);
                    err.pos = pos;
                    err.loc = loc;
                    err.raisedAt = tokPos;
                    throw err;
                }

                var empty = [];

                var _num = {
                        type: "num"
                    },
                    _regexp = {
                        type: "regexp"
                    },
                    _string = {
                        type: "string"
                    };
                var _name = {
                        type: "name"
                    },
                    _eof = {
                        type: "eof"
                    };

                var _break = {
                        keyword: "break"
                    },
                    _case = {
                        keyword: "case",
                        beforeExpr: true
                    },
                    _catch = {
                        keyword: "catch"
                    };
                var _continue = {
                        keyword: "continue"
                    },
                    _debugger = {
                        keyword: "debugger"
                    },
                    _default = {
                        keyword: "default"
                    };
                var _do = {
                        keyword: "do",
                        isLoop: true
                    },
                    _else = {
                        keyword: "else",
                        beforeExpr: true
                    };
                var _finally = {
                        keyword: "finally"
                    },
                    _for = {
                        keyword: "for",
                        isLoop: true
                    },
                    _function = {
                        keyword: "function"
                    };
                var _if = {
                        keyword: "if"
                    },
                    _return = {
                        keyword: "return",
                        beforeExpr: true
                    },
                    _switch = {
                        keyword: "switch"
                    };
                var _throw = {
                        keyword: "throw",
                        beforeExpr: true
                    },
                    _try = {
                        keyword: "try"
                    },
                    _var = {
                        keyword: "var"
                    };
                var _while = {
                        keyword: "while",
                        isLoop: true
                    },
                    _with = {
                        keyword: "with"
                    },
                    _new = {
                        keyword: "new",
                        beforeExpr: true
                    };
                var _this = {
                    keyword: "this"
                };

                var _null = {
                        keyword: "null",
                        atomValue: null
                    },
                    _true = {
                        keyword: "true",
                        atomValue: true
                    };
                var _false = {
                    keyword: "false",
                    atomValue: false
                };

                var _in = {
                    keyword: "in",
                    binop: 7,
                    beforeExpr: true
                };

                var keywordTypes = {
                    "break": _break,
                    "case": _case,
                    "catch": _catch,
                    "continue": _continue,
                    "debugger": _debugger,
                    "default": _default,
                    "do": _do,
                    "else": _else,
                    "finally": _finally,
                    "for": _for,
                    "function": _function,
                    "if": _if,
                    "return": _return,
                    "switch": _switch,
                    "throw": _throw,
                    "try": _try,
                    "var": _var,
                    "while": _while,
                    "with": _with,
                    "null": _null,
                    "true": _true,
                    "false": _false,
                    "new": _new,
                    "in": _in,
                    "instanceof": {
                        keyword: "instanceof",
                        binop: 7,
                        beforeExpr: true
                    },
                    "this": _this,
                    "typeof": {
                        keyword: "typeof",
                        prefix: true,
                        beforeExpr: true
                    },
                    "void": {
                        keyword: "void",
                        prefix: true,
                        beforeExpr: true
                    },
                    "delete": {
                        keyword: "delete",
                        prefix: true,
                        beforeExpr: true
                    }
                };

                var _bracketL = {
                        type: "[",
                        beforeExpr: true
                    },
                    _bracketR = {
                        type: "]"
                    },
                    _braceL = {
                        type: "{",
                        beforeExpr: true
                    };
                var _braceR = {
                        type: "}"
                    },
                    _parenL = {
                        type: "(",
                        beforeExpr: true
                    },
                    _parenR = {
                        type: ")"
                    };
                var _comma = {
                        type: ",",
                        beforeExpr: true
                    },
                    _semi = {
                        type: ";",
                        beforeExpr: true
                    };
                var _colon = {
                        type: ":",
                        beforeExpr: true
                    },
                    _dot = {
                        type: "."
                    },
                    _question = {
                        type: "?",
                        beforeExpr: true
                    };

                var _slash = {
                        binop: 10,
                        beforeExpr: true
                    },
                    _eq = {
                        isAssign: true,
                        beforeExpr: true
                    };
                var _assign = {
                    isAssign: true,
                    beforeExpr: true
                };
                var _incDec = {
                        postfix: true,
                        prefix: true,
                        isUpdate: true
                    },
                    _prefix = {
                        prefix: true,
                        beforeExpr: true
                    };
                var _logicalOR = {
                    binop: 1,
                    beforeExpr: true
                };
                var _logicalAND = {
                    binop: 2,
                    beforeExpr: true
                };
                var _bitwiseOR = {
                    binop: 3,
                    beforeExpr: true
                };
                var _bitwiseXOR = {
                    binop: 4,
                    beforeExpr: true
                };
                var _bitwiseAND = {
                    binop: 5,
                    beforeExpr: true
                };
                var _equality = {
                    binop: 6,
                    beforeExpr: true
                };
                var _relational = {
                    binop: 7,
                    beforeExpr: true
                };
                var _bitShift = {
                    binop: 8,
                    beforeExpr: true
                };
                var _plusMin = {
                    binop: 9,
                    prefix: true,
                    beforeExpr: true
                };
                var _multiplyModulo = {
                    binop: 10,
                    beforeExpr: true
                };

                exports.tokTypes = {
                    bracketL: _bracketL,
                    bracketR: _bracketR,
                    braceL: _braceL,
                    braceR: _braceR,
                    parenL: _parenL,
                    parenR: _parenR,
                    comma: _comma,
                    semi: _semi,
                    colon: _colon,
                    dot: _dot,
                    question: _question,
                    slash: _slash,
                    eq: _eq,
                    name: _name,
                    eof: _eof,
                    num: _num,
                    regexp: _regexp,
                    string: _string
                };
                for (var kw in keywordTypes) exports.tokTypes["_" + kw] = keywordTypes[kw];

                function makePredicate(words) {
                    words = words.split(" ");
                    var f = "",
                        cats = [];
                    out: for (var i = 0; i < words.length; ++i) {
                        for (var j = 0; j < cats.length; ++j)
                            if (cats[j][0].length == words[i].length) {
                                cats[j].push(words[i]);
                                continue out;
                            }
                        cats.push([words[i]]);
                    }

                    function compareTo(arr) {
                        if (arr.length == 1) return f += "return str === " + JSON.stringify(arr[0]) + ";";
                        f += "switch(str){";
                        for (var i = 0; i < arr.length; ++i) f += "case " + JSON.stringify(arr[i]) + ":";
                        f += "return true}return false;";
                    }

                    if (cats.length > 3) {
                        cats.sort(function(a, b) {
                            return b.length - a.length;
                        });
                        f += "switch(str.length){";
                        for (var i = 0; i < cats.length; ++i) {
                            var cat = cats[i];
                            f += "case " + cat[0].length + ":";
                            compareTo(cat);
                        }
                        f += "}";

                    } else {
                        compareTo(words);
                    }
                    return new Function("str", f);
                }

                var isReservedWord3 = makePredicate("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile");

                var isReservedWord5 = makePredicate("class enum extends super const export import");

                var isStrictReservedWord = makePredicate("implements interface let package private protected public static yield");

                var isStrictBadIdWord = makePredicate("eval arguments");

                var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this");

                var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
                var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
                var nonASCIIidentifierChars = "\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u0620-\u0649\u0672-\u06d3\u06e7-\u06e8\u06fb-\u06fc\u0730-\u074a\u0800-\u0814\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0840-\u0857\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962-\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09d7\u09df-\u09e0\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5f-\u0b60\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2-\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d46-\u0d48\u0d57\u0d62-\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e34-\u0e3a\u0e40-\u0e45\u0e50-\u0e59\u0eb4-\u0eb9\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f41-\u0f47\u0f71-\u0f84\u0f86-\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1029\u1040-\u1049\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u170e-\u1710\u1720-\u1730\u1740-\u1750\u1772\u1773\u1780-\u17b2\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1920-\u192b\u1930-\u193b\u1951-\u196d\u19b0-\u19c0\u19c8-\u19c9\u19d0-\u19d9\u1a00-\u1a15\u1a20-\u1a53\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b46-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1bb0-\u1bb9\u1be6-\u1bf3\u1c00-\u1c22\u1c40-\u1c49\u1c5b-\u1c7d\u1cd0-\u1cd2\u1d00-\u1dbe\u1e01-\u1f15\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2d81-\u2d96\u2de0-\u2dff\u3021-\u3028\u3099\u309a\ua640-\ua66d\ua674-\ua67d\ua69f\ua6f0-\ua6f1\ua7f8-\ua800\ua806\ua80b\ua823-\ua827\ua880-\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8f3-\ua8f7\ua900-\ua909\ua926-\ua92d\ua930-\ua945\ua980-\ua983\ua9b3-\ua9c0\uaa00-\uaa27\uaa40-\uaa41\uaa4c-\uaa4d\uaa50-\uaa59\uaa7b\uaae0-\uaae9\uaaf2-\uaaf3\uabc0-\uabe1\uabec\uabed\uabf0-\uabf9\ufb20-\ufb28\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
                var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
                var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

                var newline = /[\n\r\u2028\u2029]/;

                var lineBreak = /\r\n|[\n\r\u2028\u2029]/g;

                var isIdentifierStart = exports.isIdentifierStart = function(code) {
                    if (code < 65) return code === 36;
                    if (code < 91) return true;
                    if (code < 97) return code === 95;
                    if (code < 123) return true;
                    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
                };

                var isIdentifierChar = exports.isIdentifierChar = function(code) {
                    if (code < 48) return code === 36;
                    if (code < 58) return true;
                    if (code < 65) return false;
                    if (code < 91) return true;
                    if (code < 97) return code === 95;
                    if (code < 123) return true;
                    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
                };

                function line_loc_t() {
                    this.line = tokCurLine;
                    this.column = tokPos - tokLineStart;
                }

                function initTokenState() {
                    tokCurLine = 1;
                    tokPos = tokLineStart = 0;
                    tokRegexpAllowed = true;
                    skipSpace();
                }

                function finishToken(type, val) {
                    tokEnd = tokPos;
                    if (options.locations) tokEndLoc = new line_loc_t;
                    tokType = type;
                    skipSpace();
                    tokVal = val;
                    tokRegexpAllowed = type.beforeExpr;
                }

                function skipBlockComment() {
                    var startLoc = options.onComment && options.locations && new line_loc_t;
                    var start = tokPos,
                        end = input.indexOf("*/", tokPos += 2);
                    if (end === -1) raise(tokPos - 2, "Unterminated comment");
                    tokPos = end + 2;
                    if (options.locations) {
                        lineBreak.lastIndex = start;
                        var match;
                        while ((match = lineBreak.exec(input)) && match.index < tokPos) {
                            ++tokCurLine;
                            tokLineStart = match.index + match[0].length;
                        }
                    }
                    if (options.onComment)
                        options.onComment(true, input.slice(start + 2, end), start, tokPos,
                            startLoc, options.locations && new line_loc_t);
                }

                function skipLineComment() {
                    var start = tokPos;
                    var startLoc = options.onComment && options.locations && new line_loc_t;
                    var ch = input.charCodeAt(tokPos += 2);
                    while (tokPos < inputLen && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
                        ++tokPos;
                        ch = input.charCodeAt(tokPos);
                    }
                    if (options.onComment)
                        options.onComment(false, input.slice(start + 2, tokPos), start, tokPos,
                            startLoc, options.locations && new line_loc_t);
                }

                function skipSpace() {
                    while (tokPos < inputLen) {
                        var ch = input.charCodeAt(tokPos);
                        if (ch === 32) {
                            ++tokPos;
                        } else if (ch === 13) {
                            ++tokPos;
                            var next = input.charCodeAt(tokPos);
                            if (next === 10) {
                                ++tokPos;
                            }
                            if (options.locations) {
                                ++tokCurLine;
                                tokLineStart = tokPos;
                            }
                        } else if (ch === 10 || ch === 8232 || ch === 8233) {
                            ++tokPos;
                            if (options.locations) {
                                ++tokCurLine;
                                tokLineStart = tokPos;
                            }
                        } else if (ch > 8 && ch < 14) {
                            ++tokPos;
                        } else if (ch === 47) {
                            var next = input.charCodeAt(tokPos + 1);
                            if (next === 42) {
                                skipBlockComment();
                            } else if (next === 47) {
                                skipLineComment();
                            } else break;
                        } else if (ch === 160) {
                            ++tokPos;
                        } else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                            ++tokPos;
                        } else {
                            break;
                        }
                    }
                }

                function readToken_dot() {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next >= 48 && next <= 57) return readNumber(true);
                    ++tokPos;
                    return finishToken(_dot);
                }

                function readToken_slash() {
                    var next = input.charCodeAt(tokPos + 1);
                    if (tokRegexpAllowed) {
                        ++tokPos;
                        return readRegexp();
                    }
                    if (next === 61) return finishOp(_assign, 2);
                    return finishOp(_slash, 1);
                }

                function readToken_mult_modulo() {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next === 61) return finishOp(_assign, 2);
                    return finishOp(_multiplyModulo, 1);
                }

                function readToken_pipe_amp(code) {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next === code) return finishOp(code === 124 ? _logicalOR : _logicalAND, 2);
                    if (next === 61) return finishOp(_assign, 2);
                    return finishOp(code === 124 ? _bitwiseOR : _bitwiseAND, 1);
                }

                function readToken_caret() {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next === 61) return finishOp(_assign, 2);
                    return finishOp(_bitwiseXOR, 1);
                }

                function readToken_plus_min(code) {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next === code) {
                        if (next == 45 && input.charCodeAt(tokPos + 2) == 62 &&
                            newline.test(input.slice(lastEnd, tokPos))) {
                            tokPos += 3;
                            skipLineComment();
                            skipSpace();
                            return readToken();
                        }
                        return finishOp(_incDec, 2);
                    }
                    if (next === 61) return finishOp(_assign, 2);
                    return finishOp(_plusMin, 1);
                }

                function readToken_lt_gt(code) {
                    var next = input.charCodeAt(tokPos + 1);
                    var size = 1;
                    if (next === code) {
                        size = code === 62 && input.charCodeAt(tokPos + 2) === 62 ? 3 : 2;
                        if (input.charCodeAt(tokPos + size) === 61) return finishOp(_assign, size + 1);
                        return finishOp(_bitShift, size);
                    }
                    if (next == 33 && code == 60 && input.charCodeAt(tokPos + 2) == 45 &&
                        input.charCodeAt(tokPos + 3) == 45) {
                        tokPos += 4;
                        skipLineComment();
                        skipSpace();
                        return readToken();
                    }
                    if (next === 61)
                        size = input.charCodeAt(tokPos + 2) === 61 ? 3 : 2;
                    return finishOp(_relational, size);
                }

                function readToken_eq_excl(code) {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next === 61) return finishOp(_equality, input.charCodeAt(tokPos + 2) === 61 ? 3 : 2);
                    return finishOp(code === 61 ? _eq : _prefix, 1);
                }

                function getTokenFromCode(code) {
                    switch (code) {
                        case 46:
                            return readToken_dot();

                        case 40:
                            ++tokPos;
                            return finishToken(_parenL);
                        case 41:
                            ++tokPos;
                            return finishToken(_parenR);
                        case 59:
                            ++tokPos;
                            return finishToken(_semi);
                        case 44:
                            ++tokPos;
                            return finishToken(_comma);
                        case 91:
                            ++tokPos;
                            return finishToken(_bracketL);
                        case 93:
                            ++tokPos;
                            return finishToken(_bracketR);
                        case 123:
                            ++tokPos;
                            return finishToken(_braceL);
                        case 125:
                            ++tokPos;
                            return finishToken(_braceR);
                        case 58:
                            ++tokPos;
                            return finishToken(_colon);
                        case 63:
                            ++tokPos;
                            return finishToken(_question);

                        case 48:
                            var next = input.charCodeAt(tokPos + 1);
                            if (next === 120 || next === 88) return readHexNumber();
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                            return readNumber(false);

                        case 34:
                        case 39:
                            return readString(code);

                        case 47:
                            return readToken_slash(code);

                        case 37:
                        case 42:
                            return readToken_mult_modulo();

                        case 124:
                        case 38:
                            return readToken_pipe_amp(code);

                        case 94:
                            return readToken_caret();

                        case 43:
                        case 45:
                            return readToken_plus_min(code);

                        case 60:
                        case 62:
                            return readToken_lt_gt(code);

                        case 61:
                        case 33:
                            return readToken_eq_excl(code);

                        case 126:
                            return finishOp(_prefix, 1);
                    }

                    return false;
                }

                function readToken(forceRegexp) {
                    if (!forceRegexp) tokStart = tokPos;
                    else tokPos = tokStart + 1;
                    if (options.locations) tokStartLoc = new line_loc_t;
                    if (forceRegexp) return readRegexp();
                    if (tokPos >= inputLen) return finishToken(_eof);

                    var code = input.charCodeAt(tokPos);
                    if (isIdentifierStart(code) || code === 92) return readWord();

                    var tok = getTokenFromCode(code);

                    if (tok === false) {
                        var ch = String.fromCharCode(code);
                        if (ch === "\\" || nonASCIIidentifierStart.test(ch)) return readWord();
                        raise(tokPos, "Unexpected character '" + ch + "'");
                    }
                    return tok;
                }

                function finishOp(type, size) {
                    var str = input.slice(tokPos, tokPos + size);
                    tokPos += size;
                    finishToken(type, str);
                }

                function readRegexp() {
                    var content = "",
                        escaped, inClass, start = tokPos;
                    for (;;) {
                        if (tokPos >= inputLen) raise(start, "Unterminated regular expression");
                        var ch = input.charAt(tokPos);
                        if (newline.test(ch)) raise(start, "Unterminated regular expression");
                        if (!escaped) {
                            if (ch === "[") inClass = true;
                            else if (ch === "]" && inClass) inClass = false;
                            else if (ch === "/" && !inClass) break;
                            escaped = ch === "\\";
                        } else escaped = false;
                        ++tokPos;
                    }
                    var content = input.slice(start, tokPos);
                    ++tokPos;
                    var mods = readWord1();
                    if (mods && !/^[gmsiy]*$/.test(mods)) raise(start, "Invalid regexp flag");
                    try {
                        var value = new RegExp(content, mods);
                    } catch (e) {
                        if (e instanceof SyntaxError) raise(start, e.message);
                        raise(e);
                    }
                    return finishToken(_regexp, value);
                }

                function readInt(radix, len) {
                    var start = tokPos,
                        total = 0;
                    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
                        var code = input.charCodeAt(tokPos),
                            val;
                        if (code >= 97) val = code - 97 + 10;
                        else if (code >= 65) val = code - 65 + 10;
                        else if (code >= 48 && code <= 57) val = code - 48;
                        else val = Infinity;
                        if (val >= radix) break;
                        ++tokPos;
                        total = total * radix + val;
                    }
                    if (tokPos === start || len != null && tokPos - start !== len) return null;

                    return total;
                }

                function readHexNumber() {
                    tokPos += 2;
                    var val = readInt(16);
                    if (val == null) raise(tokStart + 2, "Expected hexadecimal number");
                    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, "Identifier directly after number");
                    return finishToken(_num, val);
                }

                function readNumber(startsWithDot) {
                    var start = tokPos,
                        isFloat = false,
                        octal = input.charCodeAt(tokPos) === 48;
                    if (!startsWithDot && readInt(10) === null) raise(start, "Invalid number");
                    if (input.charCodeAt(tokPos) === 46) {
                        ++tokPos;
                        readInt(10);
                        isFloat = true;
                    }
                    var next = input.charCodeAt(tokPos);
                    if (next === 69 || next === 101) {
                        next = input.charCodeAt(++tokPos);
                        if (next === 43 || next === 45) ++tokPos;
                        if (readInt(10) === null) raise(start, "Invalid number");
                        isFloat = true;
                    }
                    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, "Identifier directly after number");

                    var str = input.slice(start, tokPos),
                        val;
                    if (isFloat) val = parseFloat(str);
                    else if (!octal || str.length === 1) val = parseInt(str, 10);
                    else if (/[89]/.test(str) || strict) raise(start, "Invalid number");
                    else val = parseInt(str, 8);
                    return finishToken(_num, val);
                }

                function readString(quote) {
                    tokPos++;
                    var out = "";
                    for (;;) {
                        if (tokPos >= inputLen) raise(tokStart, "Unterminated string constant");
                        var ch = input.charCodeAt(tokPos);
                        if (ch === quote) {
                            ++tokPos;
                            return finishToken(_string, out);
                        }
                        if (ch === 92) {
                            ch = input.charCodeAt(++tokPos);
                            var octal = /^[0-7]+/.exec(input.slice(tokPos, tokPos + 3));
                            if (octal) octal = octal[0];
                            while (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, -1);
                            if (octal === "0") octal = null;
                            ++tokPos;
                            if (octal) {
                                if (strict) raise(tokPos - 2, "Octal literal in strict mode");
                                out += String.fromCharCode(parseInt(octal, 8));
                                tokPos += octal.length - 1;
                            } else {
                                switch (ch) {
                                    case 110:
                                        out += "\n";
                                        break;
                                    case 114:
                                        out += "\r";
                                        break;
                                    case 120:
                                        out += String.fromCharCode(readHexChar(2));
                                        break;
                                    case 117:
                                        out += String.fromCharCode(readHexChar(4));
                                        break;
                                    case 85:
                                        out += String.fromCharCode(readHexChar(8));
                                        break;
                                    case 116:
                                        out += "\t";
                                        break;
                                    case 98:
                                        out += "\b";
                                        break;
                                    case 118:
                                        out += "\u000b";
                                        break;
                                    case 102:
                                        out += "\f";
                                        break;
                                    case 48:
                                        out += "\0";
                                        break;
                                    case 13:
                                        if (input.charCodeAt(tokPos) === 10) ++tokPos;
                                    case 10:
                                        if (options.locations) {
                                            tokLineStart = tokPos;
                                            ++tokCurLine;
                                        }
                                        break;
                                    default:
                                        out += String.fromCharCode(ch);
                                        break;
                                }
                            }
                        } else {
                            if (ch === 13 || ch === 10 || ch === 8232 || ch === 8233) raise(tokStart, "Unterminated string constant");
                            out += String.fromCharCode(ch);
                            ++tokPos;
                        }
                    }
                }

                function readHexChar(len) {
                    var n = readInt(16, len);
                    if (n === null) raise(tokStart, "Bad character escape sequence");
                    return n;
                }

                var containsEsc;

                function readWord1() {
                    containsEsc = false;
                    var word, first = true,
                        start = tokPos;
                    for (;;) {
                        var ch = input.charCodeAt(tokPos);
                        if (isIdentifierChar(ch)) {
                            if (containsEsc) word += input.charAt(tokPos);
                            ++tokPos;
                        } else if (ch === 92) {
                            if (!containsEsc) word = input.slice(start, tokPos);
                            containsEsc = true;
                            if (input.charCodeAt(++tokPos) != 117)
                                raise(tokPos, "Expecting Unicode escape sequence \\uXXXX");
                            ++tokPos;
                            var esc = readHexChar(4);
                            var escStr = String.fromCharCode(esc);
                            if (!escStr) raise(tokPos - 1, "Invalid Unicode escape");
                            if (!(first ? isIdentifierStart(esc) : isIdentifierChar(esc)))
                                raise(tokPos - 4, "Invalid Unicode escape");
                            word += escStr;
                        } else {
                            break;
                        }
                        first = false;
                    }
                    return containsEsc ? word : input.slice(start, tokPos);
                }

                function readWord() {
                    var word = readWord1();
                    var type = _name;
                    if (!containsEsc && isKeyword(word))
                        type = keywordTypes[word];
                    return finishToken(type, word);
                }

                function next() {
                    lastStart = tokStart;
                    lastEnd = tokEnd;
                    lastEndLoc = tokEndLoc;
                    readToken();
                }

                function setStrict(strct) {
                    strict = strct;
                    tokPos = tokStart;
                    if (options.locations) {
                        while (tokPos < tokLineStart) {
                            tokLineStart = input.lastIndexOf("\n", tokLineStart - 2) + 1;
                            --tokCurLine;
                        }
                    }
                    skipSpace();
                    readToken();
                }

                function node_t() {
                    this.type = null;
                    this.start = tokStart;
                    this.end = null;
                }

                function node_loc_t() {
                    this.start = tokStartLoc;
                    this.end = null;
                    if (sourceFile !== null) this.source = sourceFile;
                }

                function startNode() {
                    var node = new node_t();
                    if (options.locations)
                        node.loc = new node_loc_t();
                    if (options.directSourceFile)
                        node.sourceFile = options.directSourceFile;
                    if (options.ranges)
                        node.range = [tokStart, 0];
                    return node;
                }

                function startNodeFrom(other) {
                    var node = new node_t();
                    node.start = other.start;
                    if (options.locations) {
                        node.loc = new node_loc_t();
                        node.loc.start = other.loc.start;
                    }
                    if (options.ranges)
                        node.range = [other.range[0], 0];

                    return node;
                }

                function finishNode(node, type) {
                    node.type = type;
                    node.end = lastEnd;
                    if (options.locations)
                        node.loc.end = lastEndLoc;
                    if (options.ranges)
                        node.range[1] = lastEnd;
                    return node;
                }

                function isUseStrict(stmt) {
                    return options.ecmaVersion >= 5 && stmt.type === "ExpressionStatement" &&
                        stmt.expression.type === "Literal" && stmt.expression.value === "use strict";
                }

                function eat(type) {
                    if (tokType === type) {
                        next();
                        return true;
                    }
                }

                function canInsertSemicolon() {
                    return !options.strictSemicolons &&
                        (tokType === _eof || tokType === _braceR || newline.test(input.slice(lastEnd, tokStart)));
                }

                function semicolon() {
                    if (!eat(_semi) && !canInsertSemicolon()) unexpected();
                }

                function expect(type) {
                    if (tokType === type) next();
                    else unexpected();
                }

                function unexpected() {
                    raise(tokStart, "Unexpected token");
                }

                function checkLVal(expr) {
                    if (expr.type !== "Identifier" && expr.type !== "MemberExpression")
                        raise(expr.start, "Assigning to rvalue");
                    if (strict && expr.type === "Identifier" && isStrictBadIdWord(expr.name))
                        raise(expr.start, "Assigning to " + expr.name + " in strict mode");
                }

                function parseTopLevel(program) {
                    lastStart = lastEnd = tokPos;
                    if (options.locations) lastEndLoc = new line_loc_t;
                    inFunction = strict = null;
                    labels = [];
                    readToken();

                    var node = program || startNode(),
                        first = true;
                    if (!program) node.body = [];
                    while (tokType !== _eof) {
                        var stmt = parseStatement();
                        node.body.push(stmt);
                        if (first && isUseStrict(stmt)) setStrict(true);
                        first = false;
                    }
                    return finishNode(node, "Program");
                }

                var loopLabel = {
                        kind: "loop"
                    },
                    switchLabel = {
                        kind: "switch"
                    };

                function parseStatement() {
                    if (tokType === _slash || tokType === _assign && tokVal == "/=")
                        readToken(true);

                    var starttype = tokType,
                        node = startNode();

                    switch (starttype) {
                        case _break:
                        case _continue:
                            next();
                            var isBreak = starttype === _break;
                            if (eat(_semi) || canInsertSemicolon()) node.label = null;
                            else if (tokType !== _name) unexpected();
                            else {
                                node.label = parseIdent();
                                semicolon();
                            }

                            for (var i = 0; i < labels.length; ++i) {
                                var lab = labels[i];
                                if (node.label == null || lab.name === node.label.name) {
                                    if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
                                    if (node.label && isBreak) break;
                                }
                            }
                            if (i === labels.length) raise(node.start, "Unsyntactic " + starttype.keyword);
                            return finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");

                        case _debugger:
                            next();
                            semicolon();
                            return finishNode(node, "DebuggerStatement");

                        case _do:
                            next();
                            labels.push(loopLabel);
                            node.body = parseStatement();
                            labels.pop();
                            expect(_while);
                            node.test = parseParenExpression();
                            semicolon();
                            return finishNode(node, "DoWhileStatement");

                        case _for:
                            next();
                            labels.push(loopLabel);
                            expect(_parenL);
                            if (tokType === _semi) return parseFor(node, null);
                            if (tokType === _var) {
                                var init = startNode();
                                next();
                                parseVar(init, true);
                                finishNode(init, "VariableDeclaration");
                                if (init.declarations.length === 1 && eat(_in))
                                    return parseForIn(node, init);
                                return parseFor(node, init);
                            }
                            var init = parseExpression(false, true);
                            if (eat(_in)) {
                                checkLVal(init);
                                return parseForIn(node, init);
                            }
                            return parseFor(node, init);

                        case _function:
                            next();
                            return parseFunction(node, true);

                        case _if:
                            next();
                            node.test = parseParenExpression();
                            node.consequent = parseStatement();
                            node.alternate = eat(_else) ? parseStatement() : null;
                            return finishNode(node, "IfStatement");

                        case _return:
                            if (!inFunction && !options.allowReturnOutsideFunction)
                                raise(tokStart, "'return' outside of function");
                            next();

                            if (eat(_semi) || canInsertSemicolon()) node.argument = null;
                            else {
                                node.argument = parseExpression();
                                semicolon();
                            }
                            return finishNode(node, "ReturnStatement");

                        case _switch:
                            next();
                            node.discriminant = parseParenExpression();
                            node.cases = [];
                            expect(_braceL);
                            labels.push(switchLabel);

                            for (var cur, sawDefault; tokType != _braceR;) {
                                if (tokType === _case || tokType === _default) {
                                    var isCase = tokType === _case;
                                    if (cur) finishNode(cur, "SwitchCase");
                                    node.cases.push(cur = startNode());
                                    cur.consequent = [];
                                    next();
                                    if (isCase) cur.test = parseExpression();
                                    else {
                                        if (sawDefault) raise(lastStart, "Multiple default clauses");
                                        sawDefault = true;
                                        cur.test = null;
                                    }
                                    expect(_colon);
                                } else {
                                    if (!cur) unexpected();
                                    cur.consequent.push(parseStatement());
                                }
                            }
                            if (cur) finishNode(cur, "SwitchCase");
                            next();
                            labels.pop();
                            return finishNode(node, "SwitchStatement");

                        case _throw:
                            next();
                            if (newline.test(input.slice(lastEnd, tokStart)))
                                raise(lastEnd, "Illegal newline after throw");
                            node.argument = parseExpression();
                            semicolon();
                            return finishNode(node, "ThrowStatement");

                        case _try:
                            next();
                            node.block = parseBlock();
                            node.handler = null;
                            if (tokType === _catch) {
                                var clause = startNode();
                                next();
                                expect(_parenL);
                                clause.param = parseIdent();
                                if (strict && isStrictBadIdWord(clause.param.name))
                                    raise(clause.param.start, "Binding " + clause.param.name + " in strict mode");
                                expect(_parenR);
                                clause.guard = null;
                                clause.body = parseBlock();
                                node.handler = finishNode(clause, "CatchClause");
                            }
                            node.guardedHandlers = empty;
                            node.finalizer = eat(_finally) ? parseBlock() : null;
                            if (!node.handler && !node.finalizer)
                                raise(node.start, "Missing catch or finally clause");
                            return finishNode(node, "TryStatement");

                        case _var:
                            next();
                            parseVar(node);
                            semicolon();
                            return finishNode(node, "VariableDeclaration");

                        case _while:
                            next();
                            node.test = parseParenExpression();
                            labels.push(loopLabel);
                            node.body = parseStatement();
                            labels.pop();
                            return finishNode(node, "WhileStatement");

                        case _with:
                            if (strict) raise(tokStart, "'with' in strict mode");
                            next();
                            node.object = parseParenExpression();
                            node.body = parseStatement();
                            return finishNode(node, "WithStatement");

                        case _braceL:
                            return parseBlock();

                        case _semi:
                            next();
                            return finishNode(node, "EmptyStatement");

                        default:
                            var maybeName = tokVal,
                                expr = parseExpression();
                            if (starttype === _name && expr.type === "Identifier" && eat(_colon)) {
                                for (var i = 0; i < labels.length; ++i)
                                    if (labels[i].name === maybeName) raise(expr.start, "Label '" + maybeName + "' is already declared");
                                var kind = tokType.isLoop ? "loop" : tokType === _switch ? "switch" : null;
                                labels.push({
                                    name: maybeName,
                                    kind: kind
                                });
                                node.body = parseStatement();
                                labels.pop();
                                node.label = expr;
                                return finishNode(node, "LabeledStatement");
                            } else {
                                node.expression = expr;
                                semicolon();
                                return finishNode(node, "ExpressionStatement");
                            }
                    }
                }

                function parseParenExpression() {
                    expect(_parenL);
                    var val = parseExpression();
                    expect(_parenR);
                    return val;
                }

                function parseBlock(allowStrict) {
                    var node = startNode(),
                        first = true,
                        strict = false,
                        oldStrict;
                    node.body = [];
                    expect(_braceL);
                    while (!eat(_braceR)) {
                        var stmt = parseStatement();
                        node.body.push(stmt);
                        if (first && allowStrict && isUseStrict(stmt)) {
                            oldStrict = strict;
                            setStrict(strict = true);
                        }
                        first = false;
                    }
                    if (strict && !oldStrict) setStrict(false);
                    return finishNode(node, "BlockStatement");
                }

                function parseFor(node, init) {
                    node.init = init;
                    expect(_semi);
                    node.test = tokType === _semi ? null : parseExpression();
                    expect(_semi);
                    node.update = tokType === _parenR ? null : parseExpression();
                    expect(_parenR);
                    node.body = parseStatement();
                    labels.pop();
                    return finishNode(node, "ForStatement");
                }

                function parseForIn(node, init) {
                    node.left = init;
                    node.right = parseExpression();
                    expect(_parenR);
                    node.body = parseStatement();
                    labels.pop();
                    return finishNode(node, "ForInStatement");
                }

                function parseVar(node, noIn) {
                    node.declarations = [];
                    node.kind = "var";
                    for (;;) {
                        var decl = startNode();
                        decl.id = parseIdent();
                        if (strict && isStrictBadIdWord(decl.id.name))
                            raise(decl.id.start, "Binding " + decl.id.name + " in strict mode");
                        decl.init = eat(_eq) ? parseExpression(true, noIn) : null;
                        node.declarations.push(finishNode(decl, "VariableDeclarator"));
                        if (!eat(_comma)) break;
                    }
                    return node;
                }

                function parseExpression(noComma, noIn) {
                    var expr = parseMaybeAssign(noIn);
                    if (!noComma && tokType === _comma) {
                        var node = startNodeFrom(expr);
                        node.expressions = [expr];
                        while (eat(_comma)) node.expressions.push(parseMaybeAssign(noIn));
                        return finishNode(node, "SequenceExpression");
                    }
                    return expr;
                }

                function parseMaybeAssign(noIn) {
                    var left = parseMaybeConditional(noIn);
                    if (tokType.isAssign) {
                        var node = startNodeFrom(left);
                        node.operator = tokVal;
                        node.left = left;
                        next();
                        node.right = parseMaybeAssign(noIn);
                        checkLVal(left);
                        return finishNode(node, "AssignmentExpression");
                    }
                    return left;
                }

                function parseMaybeConditional(noIn) {
                    var expr = parseExprOps(noIn);
                    if (eat(_question)) {
                        var node = startNodeFrom(expr);
                        node.test = expr;
                        node.consequent = parseExpression(true);
                        expect(_colon);
                        node.alternate = parseExpression(true, noIn);
                        return finishNode(node, "ConditionalExpression");
                    }
                    return expr;
                }

                function parseExprOps(noIn) {
                    return parseExprOp(parseMaybeUnary(), -1, noIn);
                }

                function parseExprOp(left, minPrec, noIn) {
                    var prec = tokType.binop;
                    if (prec != null && (!noIn || tokType !== _in)) {
                        if (prec > minPrec) {
                            var node = startNodeFrom(left);
                            node.left = left;
                            node.operator = tokVal;
                            var op = tokType;
                            next();
                            node.right = parseExprOp(parseMaybeUnary(), prec, noIn);
                            var exprNode = finishNode(node, (op === _logicalOR || op === _logicalAND) ? "LogicalExpression" : "BinaryExpression");
                            return parseExprOp(exprNode, minPrec, noIn);
                        }
                    }
                    return left;
                }

                function parseMaybeUnary() {
                    if (tokType.prefix) {
                        var node = startNode(),
                            update = tokType.isUpdate;
                        node.operator = tokVal;
                        node.prefix = true;
                        tokRegexpAllowed = true;
                        next();
                        node.argument = parseMaybeUnary();
                        if (update) checkLVal(node.argument);
                        else if (strict && node.operator === "delete" &&
                            node.argument.type === "Identifier")
                            raise(node.start, "Deleting local variable in strict mode");
                        return finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
                    }
                    var expr = parseExprSubscripts();
                    while (tokType.postfix && !canInsertSemicolon()) {
                        var node = startNodeFrom(expr);
                        node.operator = tokVal;
                        node.prefix = false;
                        node.argument = expr;
                        checkLVal(expr);
                        next();
                        expr = finishNode(node, "UpdateExpression");
                    }
                    return expr;
                }

                function parseExprSubscripts() {
                    return parseSubscripts(parseExprAtom());
                }

                function parseSubscripts(base, noCalls) {
                    if (eat(_dot)) {
                        var node = startNodeFrom(base);
                        node.object = base;
                        node.property = parseIdent(true);
                        node.computed = false;
                        return parseSubscripts(finishNode(node, "MemberExpression"), noCalls);
                    } else if (eat(_bracketL)) {
                        var node = startNodeFrom(base);
                        node.object = base;
                        node.property = parseExpression();
                        node.computed = true;
                        expect(_bracketR);
                        return parseSubscripts(finishNode(node, "MemberExpression"), noCalls);
                    } else if (!noCalls && eat(_parenL)) {
                        var node = startNodeFrom(base);
                        node.callee = base;
                        node.arguments = parseExprList(_parenR, false);
                        return parseSubscripts(finishNode(node, "CallExpression"), noCalls);
                    } else return base;
                }

                function parseExprAtom() {
                    switch (tokType) {
                        case _this:
                            var node = startNode();
                            next();
                            return finishNode(node, "ThisExpression");
                        case _name:
                            return parseIdent();
                        case _num:
                        case _string:
                        case _regexp:
                            var node = startNode();
                            node.value = tokVal;
                            node.raw = input.slice(tokStart, tokEnd);
                            next();
                            return finishNode(node, "Literal");

                        case _null:
                        case _true:
                        case _false:
                            var node = startNode();
                            node.value = tokType.atomValue;
                            node.raw = tokType.keyword;
                            next();
                            return finishNode(node, "Literal");

                        case _parenL:
                            var tokStartLoc1 = tokStartLoc,
                                tokStart1 = tokStart;
                            next();
                            var val = parseExpression();
                            val.start = tokStart1;
                            val.end = tokEnd;
                            if (options.locations) {
                                val.loc.start = tokStartLoc1;
                                val.loc.end = tokEndLoc;
                            }
                            if (options.ranges)
                                val.range = [tokStart1, tokEnd];
                            expect(_parenR);
                            return val;

                        case _bracketL:
                            var node = startNode();
                            next();
                            node.elements = parseExprList(_bracketR, true, true);
                            return finishNode(node, "ArrayExpression");

                        case _braceL:
                            return parseObj();

                        case _function:
                            var node = startNode();
                            next();
                            return parseFunction(node, false);

                        case _new:
                            return parseNew();

                        default:
                            unexpected();
                    }
                }

                function parseNew() {
                    var node = startNode();
                    next();
                    node.callee = parseSubscripts(parseExprAtom(), true);
                    if (eat(_parenL)) node.arguments = parseExprList(_parenR, false);
                    else node.arguments = empty;
                    return finishNode(node, "NewExpression");
                }

                function parseObj() {
                    var node = startNode(),
                        first = true,
                        sawGetSet = false;
                    node.properties = [];
                    next();
                    while (!eat(_braceR)) {
                        if (!first) {
                            expect(_comma);
                            if (options.allowTrailingCommas && eat(_braceR)) break;
                        } else first = false;

                        var prop = {
                                key: parsePropertyName()
                            },
                            isGetSet = false,
                            kind;
                        if (eat(_colon)) {
                            prop.value = parseExpression(true);
                            kind = prop.kind = "init";
                        } else if (options.ecmaVersion >= 5 && prop.key.type === "Identifier" &&
                            (prop.key.name === "get" || prop.key.name === "set")) {
                            isGetSet = sawGetSet = true;
                            kind = prop.kind = prop.key.name;
                            prop.key = parsePropertyName();
                            if (tokType !== _parenL) unexpected();
                            prop.value = parseFunction(startNode(), false);
                        } else unexpected();

                        if (prop.key.type === "Identifier" && (strict || sawGetSet)) {
                            for (var i = 0; i < node.properties.length; ++i) {
                                var other = node.properties[i];
                                if (other.key.name === prop.key.name) {
                                    var conflict = kind == other.kind || isGetSet && other.kind === "init" ||
                                        kind === "init" && (other.kind === "get" || other.kind === "set");
                                    if (conflict && !strict && kind === "init" && other.kind === "init") conflict = false;
                                    if (conflict) raise(prop.key.start, "Redefinition of property");
                                }
                            }
                        }
                        node.properties.push(prop);
                    }
                    return finishNode(node, "ObjectExpression");
                }

                function parsePropertyName() {
                    if (tokType === _num || tokType === _string) return parseExprAtom();
                    return parseIdent(true);
                }

                function parseFunction(node, isStatement) {
                    if (tokType === _name) node.id = parseIdent();
                    else if (isStatement) unexpected();
                    else node.id = null;
                    node.params = [];
                    var first = true;
                    expect(_parenL);
                    while (!eat(_parenR)) {
                        if (!first) expect(_comma);
                        else first = false;
                        node.params.push(parseIdent());
                    }

                    var oldInFunc = inFunction,
                        oldLabels = labels;
                    inFunction = true;
                    labels = [];
                    node.body = parseBlock(true);
                    inFunction = oldInFunc;
                    labels = oldLabels;

                    if (strict || node.body.body.length && isUseStrict(node.body.body[0])) {
                        for (var i = node.id ? -1 : 0; i < node.params.length; ++i) {
                            var id = i < 0 ? node.id : node.params[i];
                            if (isStrictReservedWord(id.name) || isStrictBadIdWord(id.name))
                                raise(id.start, "Defining '" + id.name + "' in strict mode");
                            if (i >= 0)
                                for (var j = 0; j < i; ++j)
                                    if (id.name === node.params[j].name)
                                        raise(id.start, "Argument name clash in strict mode");
                        }
                    }

                    return finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
                }

                function parseExprList(close, allowTrailingComma, allowEmpty) {
                    var elts = [],
                        first = true;
                    while (!eat(close)) {
                        if (!first) {
                            expect(_comma);
                            if (allowTrailingComma && options.allowTrailingCommas && eat(close)) break;
                        } else first = false;

                        if (allowEmpty && tokType === _comma) elts.push(null);
                        else elts.push(parseExpression(true));
                    }
                    return elts;
                }

                function parseIdent(liberal) {
                    var node = startNode();
                    if (liberal && options.forbidReserved == "everywhere") liberal = false;
                    if (tokType === _name) {
                        if (!liberal &&
                            (options.forbidReserved &&
                                (options.ecmaVersion === 3 ? isReservedWord3 : isReservedWord5)(tokVal) ||
                                strict && isStrictReservedWord(tokVal)) &&
                            input.slice(tokStart, tokEnd).indexOf("\\") == -1)
                            raise(tokStart, "The keyword '" + tokVal + "' is reserved");
                        node.name = tokVal;
                    } else if (liberal && tokType.keyword) {
                        node.name = tokType.keyword;
                    } else {
                        unexpected();
                    }
                    tokRegexpAllowed = false;
                    next();
                    return finishNode(node, "Identifier");
                }

            });

            if (!acorn.version)
                acorn = null;
        }

        function parse(code, options) {
            return (global.acorn || acorn).parse(code, options);
        }

        var binaryOperators = {
            '+': '__add',
            '-': '__subtract',
            '*': '__multiply',
            '/': '__divide',
            '%': '__modulo',
            '==': '__equals',
            '!=': '__equals'
        };

        var unaryOperators = {
            '-': '__negate',
            '+': '__self'
        };

        var fields = Base.each(
            ['add', 'subtract', 'multiply', 'divide', 'modulo', 'equals', 'negate'],
            function(name) {
                this['__' + name] = '#' + name;
            }, {
                __self: function() {
                    return this;
                }
            }
        );
        Point.inject(fields);
        Size.inject(fields);
        Color.inject(fields);

        function __$__(left, operator, right) {
            var handler = binaryOperators[operator];
            if (left && left[handler]) {
                var res = left[handler](right);
                return operator === '!=' ? !res : res;
            }
            switch (operator) {
                case '+':
                    return left + right;
                case '-':
                    return left - right;
                case '*':
                    return left * right;
                case '/':
                    return left / right;
                case '%':
                    return left % right;
                case '==':
                    return left == right;
                case '!=':
                    return left != right;
            }
        }

        function $__(operator, value) {
            var handler = unaryOperators[operator];
            if (value && value[handler])
                return value[handler]();
            switch (operator) {
                case '+':
                    return +value;
                case '-':
                    return -value;
            }
        }

        function compile(code, options) {
            if (!code)
                return '';
            options = options || {};

            var insertions = [];

            function getOffset(offset) {
                for (var i = 0, l = insertions.length; i < l; i++) {
                    var insertion = insertions[i];
                    if (insertion[0] >= offset)
                        break;
                    offset += insertion[1];
                }
                return offset;
            }

            function getCode(node) {
                return code.substring(getOffset(node.range[0]),
                    getOffset(node.range[1]));
            }

            function getBetween(left, right) {
                return code.substring(getOffset(left.range[1]),
                    getOffset(right.range[0]));
            }

            function replaceCode(node, str) {
                var start = getOffset(node.range[0]),
                    end = getOffset(node.range[1]),
                    insert = 0;
                for (var i = insertions.length - 1; i >= 0; i--) {
                    if (start > insertions[i][0]) {
                        insert = i + 1;
                        break;
                    }
                }
                insertions.splice(insert, 0, [start, str.length - end + start]);
                code = code.substring(0, start) + str + code.substring(end);
            }

            function walkAST(node, parent) {
                if (!node)
                    return;
                for (var key in node) {
                    if (key === 'range' || key === 'loc')
                        continue;
                    var value = node[key];
                    if (Array.isArray(value)) {
                        for (var i = 0, l = value.length; i < l; i++)
                            walkAST(value[i], node);
                    } else if (value && typeof value === 'object') {
                        walkAST(value, node);
                    }
                }
                switch (node.type) {
                    case 'UnaryExpression':
                        if (node.operator in unaryOperators &&
                            node.argument.type !== 'Literal') {
                            var arg = getCode(node.argument);
                            replaceCode(node, '$__("' + node.operator + '", ' +
                                arg + ')');
                        }
                        break;
                    case 'BinaryExpression':
                        if (node.operator in binaryOperators &&
                            node.left.type !== 'Literal') {
                            var left = getCode(node.left),
                                right = getCode(node.right),
                                between = getBetween(node.left, node.right),
                                operator = node.operator;
                            replaceCode(node, '__$__(' + left + ',' +
                                between.replace(new RegExp('\\' + operator),
                                    '"' + operator + '"') +
                                ', ' + right + ')');
                        }
                        break;
                    case 'UpdateExpression':
                    case 'AssignmentExpression':
                        var parentType = parent && parent.type;
                        if (!(
                                parentType === 'ForStatement' ||
                                parentType === 'BinaryExpression' &&
                                /^[=!<>]/.test(parent.operator) ||
                                parentType === 'MemberExpression' && parent.computed
                            )) {
                            if (node.type === 'UpdateExpression') {
                                var arg = getCode(node.argument),
                                    exp = '__$__(' + arg + ', "' + node.operator[0] +
                                    '", 1)',
                                    str = arg + ' = ' + exp;
                                if (!node.prefix &&
                                    (parentType === 'AssignmentExpression' ||
                                        parentType === 'VariableDeclarator')) {
                                    if (getCode(parent.left || parent.id) === arg)
                                        str = exp;
                                    str = arg + '; ' + str;
                                }
                                replaceCode(node, str);
                            } else {
                                if (/^.=$/.test(node.operator) &&
                                    node.left.type !== 'Literal') {
                                    var left = getCode(node.left),
                                        right = getCode(node.right),
                                        exp = left + ' = __$__(' + left + ', "' +
                                        node.operator[0] + '", ' + right + ')';
                                    replaceCode(node, /^\(.*\)$/.test(getCode(node)) ?
                                        '(' + exp + ')' : exp);
                                }
                            }
                        }
                        break;
                }
            }

            function encodeVLQ(value) {
                var res = '',
                    base64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                value = (Math.abs(value) << 1) + (value < 0 ? 1 : 0);
                while (value || !res) {
                    var next = value & (32 - 1);
                    value >>= 5;
                    if (value)
                        next |= 32;
                    res += base64[next];
                }
                return res;
            }

            var url = options.url || '',
                agent = paper.agent,
                version = agent.versionNumber,
                offsetCode = false,
                sourceMaps = options.sourceMaps,
                source = options.source || code,
                lineBreaks = /\r\n|\n|\r/mg,
                offset = options.offset || 0,
                map;
            if (sourceMaps && (agent.chrome && version >= 30 ||
                    agent.webkit && version >= 537.76 ||
                    agent.firefox && version >= 23 ||
                    agent.node)) {
                if (agent.node) {
                    offset -= 2;
                } else if (window && url && !window.location.href.indexOf(url)) {
                    var html = document.getElementsByTagName('html')[0].innerHTML;
                    offset = html.substr(0, html.indexOf(code) + 1).match(
                        lineBreaks).length + 1;
                }
                offsetCode = offset > 0 && !(
                    agent.chrome && version >= 36 ||
                    agent.safari && version >= 600 ||
                    agent.firefox && version >= 40 ||
                    agent.node);
                var mappings = ['AA' + encodeVLQ(offsetCode ? 0 : offset) + 'A'];
                mappings.length = (code.match(lineBreaks) || []).length + 1 +
                    (offsetCode ? offset : 0);
                map = {
                    version: 3,
                    file: url,
                    names: [],
                    mappings: mappings.join(';AACA'),
                    sourceRoot: '',
                    sources: [url],
                    sourcesContent: [source]
                };
            }
            walkAST(parse(code, {
                ranges: true,
                preserveParens: true
            }));
            if (map) {
                if (offsetCode) {
                    code = new Array(offset + 1).join('\n') + code;
                }
                if (/^(inline|both)$/.test(sourceMaps)) {
                    code += "\n//# sourceMappingURL=data:application/json;base64," +
                        self.btoa(unescape(encodeURIComponent(
                            JSON.stringify(map))));
                }
                code += "\n//# sourceURL=" + (url || 'paperscript');
            }
            return {
                url: url,
                source: source,
                code: code,
                map: map
            };
        }

        function execute(code, scope, options) {
            paper = scope;
            var view = scope.getView(),
                tool = /\btool\.\w+|\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\b/
                .test(code) && !/\bnew\s+Tool\b/.test(code) ?
                new Tool() : null,
                toolHandlers = tool ? tool._events : [],
                handlers = ['onFrame', 'onResize'].concat(toolHandlers),
                params = [],
                args = [],
                func,
                compiled = typeof code === 'object' ? code : compile(code, options);
            code = compiled.code;

            function expose(scope, hidden) {
                for (var key in scope) {
                    if ((hidden || !/^_/.test(key)) && new RegExp('([\\b\\s\\W]|^)' +
                            key.replace(/\$/g, '\\$') + '\\b').test(code)) {
                        params.push(key);
                        args.push(scope[key]);
                    }
                }
            }
            expose({
                    __$__: __$__,
                    $__: $__,
                    paper: scope,
                    view: view,
                    tool: tool
                },
                true);
            expose(scope);
            handlers = Base.each(handlers, function(key) {
                if (new RegExp('\\s+' + key + '\\b').test(code)) {
                    params.push(key);
                    this.push(key + ': ' + key);
                }
            }, []).join(', ');
            if (handlers)
                code += '\nreturn { ' + handlers + ' };';
            var agent = paper.agent;
            if (document && (agent.chrome ||
                    agent.firefox && agent.versionNumber < 40)) {
                var script = document.createElement('script'),
                    head = document.head || document.getElementsByTagName('head')[0];
                if (agent.firefox)
                    code = '\n' + code;
                script.appendChild(document.createTextNode(
                    'paper._execute = function(' + params + ') {' + code + '\n}'
                ));
                head.appendChild(script);
                func = paper._execute;
                delete paper._execute;
                head.removeChild(script);
            } else {
                func = Function(params, code);
            }
            var res = func.apply(scope, args) || {};
            Base.each(toolHandlers, function(key) {
                var value = res[key];
                if (value)
                    tool[key] = value;
            });
            if (view) {
                if (res.onResize)
                    view.setOnResize(res.onResize);
                view.emit('resize', {
                    size: view.size,
                    delta: new Point()
                });
                if (res.onFrame)
                    view.setOnFrame(res.onFrame);
                view.requestUpdate();
            }
            return compiled;
        }

        function loadScript(script) {
            if (/^text\/(?:x-|)paperscript$/.test(script.type) &&
                PaperScope.getAttribute(script, 'ignore') !== 'true') {
                var canvasId = PaperScope.getAttribute(script, 'canvas'),
                    canvas = document.getElementById(canvasId),
                    src = script.src || script.getAttribute('data-src'),
                    async = PaperScope.hasAttribute(script, 'async'),
                    scopeAttribute = 'data-paper-scope';
                if (!canvas)
                    throw new Error('Unable to find canvas with id "' +
                        canvasId + '"');
                var scope = PaperScope.get(canvas.getAttribute(scopeAttribute)) ||
                    new PaperScope().setup(canvas);
                canvas.setAttribute(scopeAttribute, scope._id);
                if (src) {
                    Http.request({
                        url: src,
                        async: async,
                        mimeType: 'text/plain',
                        onLoad: function(code) {
                            execute(code, scope, src);
                        }
                    });
                } else {
                    execute(script.innerHTML, scope, script.baseURI);
                }
                script.setAttribute('data-paper-ignore', 'true');
                return scope;
            }
        }

        function loadAll() {
            Base.each(document && document.getElementsByTagName('script'),
                loadScript);
        }

        function load(script) {
            return script ? loadScript(script) : loadAll();
        }

        if (window) {
            if (document.readyState === 'complete') {
                setTimeout(loadAll);
            } else {
                DomEvent.add(window, {
                    load: loadAll
                });
            }
        }

        return {
            compile: compile,
            execute: execute,
            load: load,
            parse: parse
        };

    }.call(this);

    paper = new(PaperScope.inject(Base.exports, {
        Base: Base,
        Numerical: Numerical,
        Key: Key,
        DomEvent: DomEvent,
        DomElement: DomElement,
        document: document,
        window: window,
        Symbol: SymbolDefinition,
        PlacedSymbol: SymbolItem
    }))();

    if (paper.agent.node) {
        require('./node/extend.js')(paper);
    }

    if (typeof define === 'function' && define.amd) {
        define('paper', paper);
    } else if (typeof module === 'object' && module) {
        module.exports = paper;
    }

    return paper;
}.call(this, typeof self === 'object' ? self : null);

/*!
 * ScrollMagic v2.0.5 (2015-04-29)
 * The javascript library for magical scroll interactions.
 * (c) 2015 Jan Paepke (@janpaepke)
 * Project Website: http://scrollmagic.io
 * 
 * @version 2.0.5
 * @license Dual licensed under MIT license and GPL.
 * @author Jan Paepke - e-mail@janpaepke.de
 *
 * @file ScrollMagic main library.
 */
/**
 * @namespace ScrollMagic
 */
(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else if (typeof exports === 'object') {
        // CommonJS
        module.exports = factory();
    } else {
        // Browser global
        root.ScrollMagic = factory();
    }
}(this, function() {
    "use strict";

    var ScrollMagic = function() {
        _util.log(2, '(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use \'new ScrollMagic.Controller()\' to create a new controller instance. Use \'new ScrollMagic.Scene()\' to instance a scene.');
    };

    ScrollMagic.version = "2.0.5";

    // TODO: temporary workaround for chrome's scroll jitter bug
    window.addEventListener("mousewheel", function() {});

    // global const
    var PIN_SPACER_ATTRIBUTE = "data-scrollmagic-pin-spacer";

    /**
     * The main class that is needed once per scroll container.
     *
     * @class
     *
     * @example
     * // basic initialization
     * var controller = new ScrollMagic.Controller();
     *
     * // passing options
     * var controller = new ScrollMagic.Controller({container: "#myContainer", loglevel: 3});
     *
     * @param {object} [options] - An object containing one or more options for the controller.
     * @param {(string|object)} [options.container=window] - A selector, DOM object that references the main container for scrolling.
     * @param {boolean} [options.vertical=true] - Sets the scroll mode to vertical (`true`) or horizontal (`false`) scrolling.
     * @param {object} [options.globalSceneOptions={}] - These options will be passed to every Scene that is added to the controller using the addScene method. For more information on Scene options see {@link ScrollMagic.Scene}.
     * @param {number} [options.loglevel=2] Loglevel for debugging. Note that logging is disabled in the minified version of ScrollMagic.
     ** `0` => silent
     ** `1` => errors
     ** `2` => errors, warnings
     ** `3` => errors, warnings, debuginfo
     * @param {boolean} [options.refreshInterval=100] - Some changes don't call events by default, like changing the container size or moving a scene trigger element.  
     This interval polls these parameters to fire the necessary events.  
     If you don't use custom containers, trigger elements or have static layouts, where the positions of the trigger elements don't change, you can set this to 0 disable interval checking and improve performance.
     *
     */
    ScrollMagic.Controller = function(options) {
        /*
         * ----------------------------------------------------------------
         * settings
         * ----------------------------------------------------------------
         */
        var
            NAMESPACE = 'ScrollMagic.Controller',
            SCROLL_DIRECTION_FORWARD = 'FORWARD',
            SCROLL_DIRECTION_REVERSE = 'REVERSE',
            SCROLL_DIRECTION_PAUSED = 'PAUSED',
            DEFAULT_OPTIONS = CONTROLLER_OPTIONS.defaults;

        /*
         * ----------------------------------------------------------------
         * private vars
         * ----------------------------------------------------------------
         */
        var
            Controller = this,
            _options = _util.extend({}, DEFAULT_OPTIONS, options),
            _sceneObjects = [],
            _updateScenesOnNextCycle = false,
            // can be boolean (true => all scenes) or an array of scenes to be updated
            _scrollPos = 0,
            _scrollDirection = SCROLL_DIRECTION_PAUSED,
            _isDocument = true,
            _viewPortSize = 0,
            _enabled = true,
            _updateTimeout, _refreshTimeout;

        /*
         * ----------------------------------------------------------------
         * private functions
         * ----------------------------------------------------------------
         */

        /**
         * Internal constructor function of the ScrollMagic Controller
         * @private
         */
        var construct = function() {
            for (var key in _options) {
                if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
                    log(2, "WARNING: Unknown option \"" + key + "\"");
                    delete _options[key];
                }
            }
            _options.container = _util.get.elements(_options.container)[0];
            // check ScrollContainer
            if (!_options.container) {
                log(1, "ERROR creating object " + NAMESPACE + ": No valid scroll container supplied");
                throw NAMESPACE + " init failed."; // cancel
            }
            _isDocument = _options.container === window || _options.container === document.body || !document.body.contains(_options.container);
            // normalize to window
            if (_isDocument) {
                _options.container = window;
            }
            // update container size immediately
            _viewPortSize = getViewportSize();
            // set event handlers
            _options.container.addEventListener("resize", onChange);
            _options.container.addEventListener("scroll", onChange);

            _options.refreshInterval = parseInt(_options.refreshInterval) || DEFAULT_OPTIONS.refreshInterval;
            scheduleRefresh();

            log(3, "added new " + NAMESPACE + " controller (v" + ScrollMagic.version + ")");
        };

        /**
         * Schedule the next execution of the refresh function
         * @private
         */
        var scheduleRefresh = function() {
            if (_options.refreshInterval > 0) {
                _refreshTimeout = window.setTimeout(refresh, _options.refreshInterval);
            }
        };

        /**
         * Default function to get scroll pos - overwriteable using `Controller.scrollPos(newFunction)`
         * @private
         */
        var getScrollPos = function() {
            return _options.vertical ? _util.get.scrollTop(_options.container) : _util.get.scrollLeft(_options.container);
        };

        /**
         * Returns the current viewport Size (width vor horizontal, height for vertical)
         * @private
         */
        var getViewportSize = function() {
            return _options.vertical ? _util.get.height(_options.container) : _util.get.width(_options.container);
        };

        /**
         * Default function to set scroll pos - overwriteable using `Controller.scrollTo(newFunction)`
         * Make available publicly for pinned mousewheel workaround.
         * @private
         */
        var setScrollPos = this._setScrollPos = function(pos) {
            if (_options.vertical) {
                if (_isDocument) {
                    window.scrollTo(_util.get.scrollLeft(), pos);
                } else {
                    _options.container.scrollTop = pos;
                }
            } else {
                if (_isDocument) {
                    window.scrollTo(pos, _util.get.scrollTop());
                } else {
                    _options.container.scrollLeft = pos;
                }
            }
        };

        /**
         * Handle updates in cycles instead of on scroll (performance)
         * @private
         */
        var updateScenes = function() {
            if (_enabled && _updateScenesOnNextCycle) {
                // determine scenes to update
                var scenesToUpdate = _util.type.Array(_updateScenesOnNextCycle) ? _updateScenesOnNextCycle : _sceneObjects.slice(0);
                // reset scenes
                _updateScenesOnNextCycle = false;
                var oldScrollPos = _scrollPos;
                // update scroll pos now instead of onChange, as it might have changed since scheduling (i.e. in-browser smooth scroll)
                _scrollPos = Controller.scrollPos();
                var deltaScroll = _scrollPos - oldScrollPos;
                if (deltaScroll !== 0) { // scroll position changed?
                    _scrollDirection = (deltaScroll > 0) ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_REVERSE;
                }
                // reverse order of scenes if scrolling reverse
                if (_scrollDirection === SCROLL_DIRECTION_REVERSE) {
                    scenesToUpdate.reverse();
                }
                // update scenes
                scenesToUpdate.forEach(function(scene, index) {
                    log(3, "updating Scene " + (index + 1) + "/" + scenesToUpdate.length + " (" + _sceneObjects.length + " total)");
                    scene.update(true);
                });
                if (scenesToUpdate.length === 0 && _options.loglevel >= 3) {
                    log(3, "updating 0 Scenes (nothing added to controller)");
                }
            }
        };

        /**
         * Initializes rAF callback
         * @private
         */
        var debounceUpdate = function() {
            _updateTimeout = _util.rAF(updateScenes);
        };

        /**
         * Handles Container changes
         * @private
         */
        var onChange = function(e) {
            log(3, "event fired causing an update:", e.type);
            if (e.type == "resize") {
                // resize
                _viewPortSize = getViewportSize();
                _scrollDirection = SCROLL_DIRECTION_PAUSED;
            }
            // schedule update
            if (_updateScenesOnNextCycle !== true) {
                _updateScenesOnNextCycle = true;
                debounceUpdate();
            }
        };

        var refresh = function() {
            if (!_isDocument) {
                // simulate resize event. Only works for viewport relevant param (performance)
                if (_viewPortSize != getViewportSize()) {
                    var resizeEvent;
                    try {
                        resizeEvent = new Event('resize', {
                            bubbles: false,
                            cancelable: false
                        });
                    } catch (e) { // stupid IE
                        resizeEvent = document.createEvent("Event");
                        resizeEvent.initEvent("resize", false, false);
                    }
                    _options.container.dispatchEvent(resizeEvent);
                }
            }
            _sceneObjects.forEach(function(scene, index) { // refresh all scenes
                scene.refresh();
            });
            scheduleRefresh();
        };

        /**
         * Send a debug message to the console.
         * provided publicly with _log for plugins
         * @private
         *
         * @param {number} loglevel - The loglevel required to initiate output for the message.
         * @param {...mixed} output - One or more variables that should be passed to the console.
         */
        var log = this._log = function(loglevel, output) {
            if (_options.loglevel >= loglevel) {
                Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ") ->");
                _util.log.apply(window, arguments);
            }
        };
        // for scenes we have getters for each option, but for the controller we don't, so we need to make it available externally for plugins
        this._options = _options;

        /**
         * Sort scenes in ascending order of their start offset.
         * @private
         *
         * @param {array} ScenesArray - an array of ScrollMagic Scenes that should be sorted
         * @return {array} The sorted array of Scenes.
         */
        var sortScenes = function(ScenesArray) {
            if (ScenesArray.length <= 1) {
                return ScenesArray;
            } else {
                var scenes = ScenesArray.slice(0);
                scenes.sort(function(a, b) {
                    return a.scrollOffset() > b.scrollOffset() ? 1 : -1;
                });
                return scenes;
            }
        };

        /**
         * ----------------------------------------------------------------
         * public functions
         * ----------------------------------------------------------------
         */

        /**
         * Add one ore more scene(s) to the controller.  
         * This is the equivalent to `Scene.addTo(controller)`.
         * @public
         * @example
         * // with a previously defined scene
         * controller.addScene(scene);
         *
         * // with a newly created scene.
         * controller.addScene(new ScrollMagic.Scene({duration : 0}));
         *
         * // adding multiple scenes
         * controller.addScene([scene, scene2, new ScrollMagic.Scene({duration : 0})]);
         *
         * @param {(ScrollMagic.Scene|array)} newScene - ScrollMagic Scene or Array of Scenes to be added to the controller.
         * @return {Controller} Parent object for chaining.
         */
        this.addScene = function(newScene) {
            if (_util.type.Array(newScene)) {
                newScene.forEach(function(scene, index) {
                    Controller.addScene(scene);
                });
            } else if (newScene instanceof ScrollMagic.Scene) {
                if (newScene.controller() !== Controller) {
                    newScene.addTo(Controller);
                } else if (_sceneObjects.indexOf(newScene) < 0) {
                    // new scene
                    _sceneObjects.push(newScene); // add to array
                    _sceneObjects = sortScenes(_sceneObjects); // sort
                    newScene.on("shift.controller_sort", function() { // resort whenever scene moves
                        _sceneObjects = sortScenes(_sceneObjects);
                    });
                    // insert Global defaults.
                    for (var key in _options.globalSceneOptions) {
                        if (newScene[key]) {
                            newScene[key].call(newScene, _options.globalSceneOptions[key]);
                        }
                    }
                    log(3, "adding Scene (now " + _sceneObjects.length + " total)");
                }
            } else {
                log(1, "ERROR: invalid argument supplied for '.addScene()'");
            }
            return Controller;
        };

        /**
         * Remove one ore more scene(s) from the controller.  
         * This is the equivalent to `Scene.remove()`.
         * @public
         * @example
         * // remove a scene from the controller
         * controller.removeScene(scene);
         *
         * // remove multiple scenes from the controller
         * controller.removeScene([scene, scene2, scene3]);
         *
         * @param {(ScrollMagic.Scene|array)} Scene - ScrollMagic Scene or Array of Scenes to be removed from the controller.
         * @returns {Controller} Parent object for chaining.
         */
        this.removeScene = function(Scene) {
            if (_util.type.Array(Scene)) {
                Scene.forEach(function(scene, index) {
                    Controller.removeScene(scene);
                });
            } else {
                var index = _sceneObjects.indexOf(Scene);
                if (index > -1) {
                    Scene.off("shift.controller_sort");
                    _sceneObjects.splice(index, 1);
                    log(3, "removing Scene (now " + _sceneObjects.length + " left)");
                    Scene.remove();
                }
            }
            return Controller;
        };

        /**
         * Update one ore more scene(s) according to the scroll position of the container.  
         * This is the equivalent to `Scene.update()`.  
         * The update method calculates the scene's start and end position (based on the trigger element, trigger hook, duration and offset) and checks it against the current scroll position of the container.  
         * It then updates the current scene state accordingly (or does nothing, if the state is already correct) – Pins will be set to their correct position and tweens will be updated to their correct progress.  
         * _**Note:** This method gets called constantly whenever Controller detects a change. The only application for you is if you change something outside of the realm of ScrollMagic, like moving the trigger or changing tween parameters._
         * @public
         * @example
         * // update a specific scene on next cycle
         * controller.updateScene(scene);
         *
         * // update a specific scene immediately
         * controller.updateScene(scene, true);
         *
         * // update multiple scenes scene on next cycle
         * controller.updateScene([scene1, scene2, scene3]);
         *
         * @param {ScrollMagic.Scene} Scene - ScrollMagic Scene or Array of Scenes that is/are supposed to be updated.
         * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle.  
         This is useful when changing multiple properties of the scene - this way it will only be updated once all new properties are set (updateScenes).
         * @return {Controller} Parent object for chaining.
         */
        this.updateScene = function(Scene, immediately) {
            if (_util.type.Array(Scene)) {
                Scene.forEach(function(scene, index) {
                    Controller.updateScene(scene, immediately);
                });
            } else {
                if (immediately) {
                    Scene.update(true);
                } else if (_updateScenesOnNextCycle !== true && Scene instanceof ScrollMagic.Scene) { // if _updateScenesOnNextCycle is true, all connected scenes are already scheduled for update
                    // prep array for next update cycle
                    _updateScenesOnNextCycle = _updateScenesOnNextCycle || [];
                    if (_updateScenesOnNextCycle.indexOf(Scene) == -1) {
                        _updateScenesOnNextCycle.push(Scene);
                    }
                    _updateScenesOnNextCycle = sortScenes(_updateScenesOnNextCycle); // sort
                    debounceUpdate();
                }
            }
            return Controller;
        };

        /**
         * Updates the controller params and calls updateScene on every scene, that is attached to the controller.  
         * See `Controller.updateScene()` for more information about what this means.  
         * In most cases you will not need this function, as it is called constantly, whenever ScrollMagic detects a state change event, like resize or scroll.  
         * The only application for this method is when ScrollMagic fails to detect these events.  
         * One application is with some external scroll libraries (like iScroll) that move an internal container to a negative offset instead of actually scrolling. In this case the update on the controller needs to be called whenever the child container's position changes.
         * For this case there will also be the need to provide a custom function to calculate the correct scroll position. See `Controller.scrollPos()` for details.
         * @public
         * @example
         * // update the controller on next cycle (saves performance due to elimination of redundant updates)
         * controller.update();
         *
         * // update the controller immediately
         * controller.update(true);
         *
         * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle (better performance)
         * @return {Controller} Parent object for chaining.
         */
        this.update = function(immediately) {
            onChange({
                type: "resize"
            }); // will update size and set _updateScenesOnNextCycle to true
            if (immediately) {
                updateScenes();
            }
            return Controller;
        };

        /**
         * Scroll to a numeric scroll offset, a DOM element, the start of a scene or provide an alternate method for scrolling.  
         * For vertical controllers it will change the top scroll offset and for horizontal applications it will change the left offset.
         * @public
         *
         * @since 1.1.0
         * @example
         * // scroll to an offset of 100
         * controller.scrollTo(100);
         *
         * // scroll to a DOM element
         * controller.scrollTo("#anchor");
         *
         * // scroll to the beginning of a scene
         * var scene = new ScrollMagic.Scene({offset: 200});
         * controller.scrollTo(scene);
         *
         * // define a new scroll position modification function (jQuery animate instead of jump)
         * controller.scrollTo(function (newScrollPos) {
         *	$("html, body").animate({scrollTop: newScrollPos});
         * });
         * controller.scrollTo(100); // call as usual, but the new function will be used instead
         *
         * // define a new scroll function with an additional parameter
         * controller.scrollTo(function (newScrollPos, message) {
         *  console.log(message);
         *	$(this).animate({scrollTop: newScrollPos});
         * });
         * // call as usual, but supply an extra parameter to the defined custom function
         * controller.scrollTo(100, "my message");
         *
         * // define a new scroll function with an additional parameter containing multiple variables
         * controller.scrollTo(function (newScrollPos, options) {
         *  someGlobalVar = options.a + options.b;
         *	$(this).animate({scrollTop: newScrollPos});
         * });
         * // call as usual, but supply an extra parameter containing multiple options
         * controller.scrollTo(100, {a: 1, b: 2});
         *
         * // define a new scroll function with a callback supplied as an additional parameter
         * controller.scrollTo(function (newScrollPos, callback) {
         *	$(this).animate({scrollTop: newScrollPos}, 400, "swing", callback);
         * });
         * // call as usual, but supply an extra parameter, which is used as a callback in the previously defined custom scroll function
         * controller.scrollTo(100, function() {
         *	console.log("scroll has finished.");
         * });
         *
         * @param {mixed} scrollTarget - The supplied argument can be one of these types:
         * 1. `number` -> The container will scroll to this new scroll offset.
         * 2. `string` or `object` -> Can be a selector or a DOM object.  
         *  The container will scroll to the position of this element.
         * 3. `ScrollMagic Scene` -> The container will scroll to the start of this scene.
         * 4. `function` -> This function will be used for future scroll position modifications.  
         *  This provides a way for you to change the behaviour of scrolling and adding new behaviour like animation. The function receives the new scroll position as a parameter and a reference to the container element using `this`.  
         *  It may also optionally receive an optional additional parameter (see below)  
         *  _**NOTE:**  
         *  All other options will still work as expected, using the new function to scroll._
         * @param {mixed} [additionalParameter] - If a custom scroll function was defined (see above 4.), you may want to supply additional parameters to it, when calling it. You can do this using this parameter – see examples for details. Please note, that this parameter will have no effect, if you use the default scrolling function.
         * @returns {Controller} Parent object for chaining.
         */
        this.scrollTo = function(scrollTarget, additionalParameter) {
            if (_util.type.Number(scrollTarget)) { // excecute
                setScrollPos.call(_options.container, scrollTarget, additionalParameter);
            } else if (scrollTarget instanceof ScrollMagic.Scene) { // scroll to scene
                if (scrollTarget.controller() === Controller) { // check if the controller is associated with this scene
                    Controller.scrollTo(scrollTarget.scrollOffset(), additionalParameter);
                } else {
                    log(2, "scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.", scrollTarget);
                }
            } else if (_util.type.Function(scrollTarget)) { // assign new scroll function
                setScrollPos = scrollTarget;
            } else { // scroll to element
                var elem = _util.get.elements(scrollTarget)[0];
                if (elem) {
                    // if parent is pin spacer, use spacer position instead so correct start position is returned for pinned elements.
                    while (elem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
                        elem = elem.parentNode;
                    }

                    var
                        param = _options.vertical ? "top" : "left",
                        // which param is of interest ?
                        containerOffset = _util.get.offset(_options.container),
                        // container position is needed because element offset is returned in relation to document, not in relation to container.
                        elementOffset = _util.get.offset(elem);

                    if (!_isDocument) { // container is not the document root, so substract scroll Position to get correct trigger element position relative to scrollcontent
                        containerOffset[param] -= Controller.scrollPos();
                    }

                    Controller.scrollTo(elementOffset[param] - containerOffset[param], additionalParameter);
                } else {
                    log(2, "scrollTo(): The supplied argument is invalid. Scroll cancelled.", scrollTarget);
                }
            }
            return Controller;
        };

        /**
         * **Get** the current scrollPosition or **Set** a new method to calculate it.  
         * -> **GET**:
         * When used as a getter this function will return the current scroll position.  
         * To get a cached value use Controller.info("scrollPos"), which will be updated in the update cycle.  
         * For vertical controllers it will return the top scroll offset and for horizontal applications it will return the left offset.
         *
         * -> **SET**:
         * When used as a setter this method prodes a way to permanently overwrite the controller's scroll position calculation.  
         * A typical usecase is when the scroll position is not reflected by the containers scrollTop or scrollLeft values, but for example by the inner offset of a child container.  
         * Moving a child container inside a parent is a commonly used method for several scrolling frameworks, including iScroll.  
         * By providing an alternate calculation function you can make sure ScrollMagic receives the correct scroll position.  
         * Please also bear in mind that your function should return y values for vertical scrolls an x for horizontals.
         *
         * To change the current scroll position please use `Controller.scrollTo()`.
         * @public
         *
         * @example
         * // get the current scroll Position
         * var scrollPos = controller.scrollPos();
         *
         * // set a new scroll position calculation method
         * controller.scrollPos(function () {
         *	return this.info("vertical") ? -mychildcontainer.y : -mychildcontainer.x
         * });
         *
         * @param {function} [scrollPosMethod] - The function to be used for the scroll position calculation of the container.
         * @returns {(number|Controller)} Current scroll position or parent object for chaining.
         */
        this.scrollPos = function(scrollPosMethod) {
            if (!arguments.length) { // get
                return getScrollPos.call(Controller);
            } else { // set
                if (_util.type.Function(scrollPosMethod)) {
                    getScrollPos = scrollPosMethod;
                } else {
                    log(2, "Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'.");
                }
            }
            return Controller;
        };

        /**
         * **Get** all infos or one in particular about the controller.
         * @public
         * @example
         * // returns the current scroll position (number)
         * var scrollPos = controller.info("scrollPos");
         *
         * // returns all infos as an object
         * var infos = controller.info();
         *
         * @param {string} [about] - If passed only this info will be returned instead of an object containing all.  
         Valid options are:
         ** `"size"` => the current viewport size of the container
         ** `"vertical"` => true if vertical scrolling, otherwise false
         ** `"scrollPos"` => the current scroll position
         ** `"scrollDirection"` => the last known direction of the scroll
         ** `"container"` => the container element
         ** `"isDocument"` => true if container element is the document.
         * @returns {(mixed|object)} The requested info(s).
         */
        this.info = function(about) {
            var values = {
                size: _viewPortSize,
                // contains height or width (in regard to orientation);
                vertical: _options.vertical,
                scrollPos: _scrollPos,
                scrollDirection: _scrollDirection,
                container: _options.container,
                isDocument: _isDocument
            };
            if (!arguments.length) { // get all as an object
                return values;
            } else if (values[about] !== undefined) {
                return values[about];
            } else {
                log(1, "ERROR: option \"" + about + "\" is not available");
                return;
            }
        };

        /**
         * **Get** or **Set** the current loglevel option value.
         * @public
         *
         * @example
         * // get the current value
         * var loglevel = controller.loglevel();
         *
         * // set a new value
         * controller.loglevel(3);
         *
         * @param {number} [newLoglevel] - The new loglevel setting of the Controller. `[0-3]`
         * @returns {(number|Controller)} Current loglevel or parent object for chaining.
         */
        this.loglevel = function(newLoglevel) {
            if (!arguments.length) { // get
                return _options.loglevel;
            } else if (_options.loglevel != newLoglevel) { // set
                _options.loglevel = newLoglevel;
            }
            return Controller;
        };

        /**
         * **Get** or **Set** the current enabled state of the controller.  
         * This can be used to disable all Scenes connected to the controller without destroying or removing them.
         * @public
         *
         * @example
         * // get the current value
         * var enabled = controller.enabled();
         *
         * // disable the controller
         * controller.enabled(false);
         *
         * @param {boolean} [newState] - The new enabled state of the controller `true` or `false`.
         * @returns {(boolean|Controller)} Current enabled state or parent object for chaining.
         */
        this.enabled = function(newState) {
            if (!arguments.length) { // get
                return _enabled;
            } else if (_enabled != newState) { // set
                _enabled = !!newState;
                Controller.updateScene(_sceneObjects, true);
            }
            return Controller;
        };

        /**
         * Destroy the Controller, all Scenes and everything.
         * @public
         *
         * @example
         * // without resetting the scenes
         * controller = controller.destroy();
         *
         * // with scene reset
         * controller = controller.destroy(true);
         *
         * @param {boolean} [resetScenes=false] - If `true` the pins and tweens (if existent) of all scenes will be reset.
         * @returns {null} Null to unset handler variables.
         */
        this.destroy = function(resetScenes) {
            window.clearTimeout(_refreshTimeout);
            var i = _sceneObjects.length;
            while (i--) {
                _sceneObjects[i].destroy(resetScenes);
            }
            _options.container.removeEventListener("resize", onChange);
            _options.container.removeEventListener("scroll", onChange);
            _util.cAF(_updateTimeout);
            log(3, "destroyed " + NAMESPACE + " (reset: " + (resetScenes ? "true" : "false") + ")");
            return null;
        };

        // INIT
        construct();
        return Controller;
    };

    // store pagewide controller options
    var CONTROLLER_OPTIONS = {
        defaults: {
            container: window,
            vertical: true,
            globalSceneOptions: {},
            loglevel: 2,
            refreshInterval: 100
        }
    };
    /*
     * method used to add an option to ScrollMagic Scenes.
     */
    ScrollMagic.Controller.addOption = function(name, defaultValue) {
        CONTROLLER_OPTIONS.defaults[name] = defaultValue;
    };
    // instance extension function for plugins
    ScrollMagic.Controller.extend = function(extension) {
        var oldClass = this;
        ScrollMagic.Controller = function() {
            oldClass.apply(this, arguments);
            this.$super = _util.extend({}, this); // copy parent state
            return extension.apply(this, arguments) || this;
        };
        _util.extend(ScrollMagic.Controller, oldClass); // copy properties
        ScrollMagic.Controller.prototype = oldClass.prototype; // copy prototype
        ScrollMagic.Controller.prototype.constructor = ScrollMagic.Controller; // restore constructor
    };


    /**
     * A Scene defines where the controller should react and how.
     *
     * @class
     *
     * @example
     * // create a standard scene and add it to a controller
     * new ScrollMagic.Scene()
     *		.addTo(controller);
     *
     * // create a scene with custom options and assign a handler to it.
     * var scene = new ScrollMagic.Scene({
     * 		duration: 100,
     *		offset: 200,
     *		triggerHook: "onEnter",
     *		reverse: false
     * });
     *
     * @param {object} [options] - Options for the Scene. The options can be updated at any time.  
     Instead of setting the options for each scene individually you can also set them globally in the controller as the controllers `globalSceneOptions` option. The object accepts the same properties as the ones below.  
     When a scene is added to the controller the options defined using the Scene constructor will be overwritten by those set in `globalSceneOptions`.
     * @param {(number|function)} [options.duration=0] - The duration of the scene. 
     If `0` tweens will auto-play when reaching the scene start point, pins will be pinned indefinetly starting at the start position.  
     A function retuning the duration value is also supported. Please see `Scene.duration()` for details.
     * @param {number} [options.offset=0] - Offset Value for the Trigger Position. If no triggerElement is defined this will be the scroll distance from the start of the page, after which the scene will start.
     * @param {(string|object)} [options.triggerElement=null] - Selector or DOM object that defines the start of the scene. If undefined the scene will start right at the start of the page (unless an offset is set).
     * @param {(number|string)} [options.triggerHook="onCenter"] - Can be a number between 0 and 1 defining the position of the trigger Hook in relation to the viewport.  
     Can also be defined using a string:
     ** `"onEnter"` => `1`
     ** `"onCenter"` => `0.5`
     ** `"onLeave"` => `0`
     * @param {boolean} [options.reverse=true] - Should the scene reverse, when scrolling up?
     * @param {number} [options.loglevel=2] - Loglevel for debugging. Note that logging is disabled in the minified version of ScrollMagic.
     ** `0` => silent
     ** `1` => errors
     ** `2` => errors, warnings
     ** `3` => errors, warnings, debuginfo
     * 
     */
    ScrollMagic.Scene = function(options) {

        /*
         * ----------------------------------------------------------------
         * settings
         * ----------------------------------------------------------------
         */

        var
            NAMESPACE = 'ScrollMagic.Scene',
            SCENE_STATE_BEFORE = 'BEFORE',
            SCENE_STATE_DURING = 'DURING',
            SCENE_STATE_AFTER = 'AFTER',
            DEFAULT_OPTIONS = SCENE_OPTIONS.defaults;

        /*
         * ----------------------------------------------------------------
         * private vars
         * ----------------------------------------------------------------
         */

        var
            Scene = this,
            _options = _util.extend({}, DEFAULT_OPTIONS, options),
            _state = SCENE_STATE_BEFORE,
            _progress = 0,
            _scrollOffset = {
                start: 0,
                end: 0
            },
            // reflects the controllers's scroll position for the start and end of the scene respectively
            _triggerPos = 0,
            _enabled = true,
            _durationUpdateMethod, _controller;

        /**
         * Internal constructor function of the ScrollMagic Scene
         * @private
         */
        var construct = function() {
            for (var key in _options) { // check supplied options
                if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
                    log(2, "WARNING: Unknown option \"" + key + "\"");
                    delete _options[key];
                }
            }
            // add getters/setters for all possible options
            for (var optionName in DEFAULT_OPTIONS) {
                addSceneOption(optionName);
            }
            // validate all options
            validateOption();
        };

        /*
         * ----------------------------------------------------------------
         * Event Management
         * ----------------------------------------------------------------
         */

        var _listeners = {};
        /**
         * Scene start event.  
         * Fires whenever the scroll position its the starting point of the scene.  
         * It will also fire when scrolling back up going over the start position of the scene. If you want something to happen only when scrolling down/right, use the scrollDirection parameter passed to the callback.
         *
         * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
         *
         * @event ScrollMagic.Scene#start
         *
         * @example
         * scene.on("start", function (event) {
         * 	console.log("Hit start point of scene.");
         * });
         *
         * @property {object} event - The event Object passed to each callback
         * @property {string} event.type - The name of the event
         * @property {Scene} event.target - The Scene object that triggered this event
         * @property {number} event.progress - Reflects the current progress of the scene
         * @property {string} event.state - The current state of the scene `"BEFORE"` or `"DURING"`
         * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
         */
        /**
         * Scene end event.  
         * Fires whenever the scroll position its the ending point of the scene.  
         * It will also fire when scrolling back up from after the scene and going over its end position. If you want something to happen only when scrolling down/right, use the scrollDirection parameter passed to the callback.
         *
         * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
         *
         * @event ScrollMagic.Scene#end
         *
         * @example
         * scene.on("end", function (event) {
         * 	console.log("Hit end point of scene.");
         * });
         *
         * @property {object} event - The event Object passed to each callback
         * @property {string} event.type - The name of the event
         * @property {Scene} event.target - The Scene object that triggered this event
         * @property {number} event.progress - Reflects the current progress of the scene
         * @property {string} event.state - The current state of the scene `"DURING"` or `"AFTER"`
         * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
         */
        /**
         * Scene enter event.  
         * Fires whenever the scene enters the "DURING" state.  
         * Keep in mind that it doesn't matter if the scene plays forward or backward: This event always fires when the scene enters its active scroll timeframe, regardless of the scroll-direction.
         *
         * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
         *
         * @event ScrollMagic.Scene#enter
         *
         * @example
         * scene.on("enter", function (event) {
         * 	console.log("Scene entered.");
         * });
         *
         * @property {object} event - The event Object passed to each callback
         * @property {string} event.type - The name of the event
         * @property {Scene} event.target - The Scene object that triggered this event
         * @property {number} event.progress - Reflects the current progress of the scene
         * @property {string} event.state - The current state of the scene - always `"DURING"`
         * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
         */
        /**
         * Scene leave event.  
         * Fires whenever the scene's state goes from "DURING" to either "BEFORE" or "AFTER".  
         * Keep in mind that it doesn't matter if the scene plays forward or backward: This event always fires when the scene leaves its active scroll timeframe, regardless of the scroll-direction.
         *
         * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
         *
         * @event ScrollMagic.Scene#leave
         *
         * @example
         * scene.on("leave", function (event) {
         * 	console.log("Scene left.");
         * });
         *
         * @property {object} event - The event Object passed to each callback
         * @property {string} event.type - The name of the event
         * @property {Scene} event.target - The Scene object that triggered this event
         * @property {number} event.progress - Reflects the current progress of the scene
         * @property {string} event.state - The current state of the scene `"BEFORE"` or `"AFTER"`
         * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
         */
        /**
         * Scene update event.  
         * Fires whenever the scene is updated (but not necessarily changes the progress).
         *
         * @event ScrollMagic.Scene#update
         *
         * @example
         * scene.on("update", function (event) {
         * 	console.log("Scene updated.");
         * });
         *
         * @property {object} event - The event Object passed to each callback
         * @property {string} event.type - The name of the event
         * @property {Scene} event.target - The Scene object that triggered this event
         * @property {number} event.startPos - The starting position of the scene (in relation to the conainer)
         * @property {number} event.endPos - The ending position of the scene (in relation to the conainer)
         * @property {number} event.scrollPos - The current scroll position of the container
         */
        /**
         * Scene progress event.  
         * Fires whenever the progress of the scene changes.
         *
         * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
         *
         * @event ScrollMagic.Scene#progress
         *
         * @example
         * scene.on("progress", function (event) {
         * 	console.log("Scene progress changed to " + event.progress);
         * });
         *
         * @property {object} event - The event Object passed to each callback
         * @property {string} event.type - The name of the event
         * @property {Scene} event.target - The Scene object that triggered this event
         * @property {number} event.progress - Reflects the current progress of the scene
         * @property {string} event.state - The current state of the scene `"BEFORE"`, `"DURING"` or `"AFTER"`
         * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
         */
        /**
         * Scene change event.  
         * Fires whenvever a property of the scene is changed.
         *
         * @event ScrollMagic.Scene#change
         *
         * @example
         * scene.on("change", function (event) {
         * 	console.log("Scene Property \"" + event.what + "\" changed to " + event.newval);
         * });
         *
         * @property {object} event - The event Object passed to each callback
         * @property {string} event.type - The name of the event
         * @property {Scene} event.target - The Scene object that triggered this event
         * @property {string} event.what - Indicates what value has been changed
         * @property {mixed} event.newval - The new value of the changed property
         */
        /**
         * Scene shift event.  
         * Fires whenvever the start or end **scroll offset** of the scene change.
         * This happens explicitely, when one of these values change: `offset`, `duration` or `triggerHook`.
         * It will fire implicitly when the `triggerElement` changes, if the new element has a different position (most cases).
         * It will also fire implicitly when the size of the container changes and the triggerHook is anything other than `onLeave`.
         *
         * @event ScrollMagic.Scene#shift
         * @since 1.1.0
         *
         * @example
         * scene.on("shift", function (event) {
         * 	console.log("Scene moved, because the " + event.reason + " has changed.)");
         * });
         *
         * @property {object} event - The event Object passed to each callback
         * @property {string} event.type - The name of the event
         * @property {Scene} event.target - The Scene object that triggered this event
         * @property {string} event.reason - Indicates why the scene has shifted
         */
        /**
         * Scene destroy event.  
         * Fires whenvever the scene is destroyed.
         * This can be used to tidy up custom behaviour used in events.
         *
         * @event ScrollMagic.Scene#destroy
         * @since 1.1.0
         *
         * @example
         * scene.on("enter", function (event) {
         *        // add custom action
         *        $("#my-elem").left("200");
         *      })
         *      .on("destroy", function (event) {
         *        // reset my element to start position
         *        if (event.reset) {
         *          $("#my-elem").left("0");
         *        }
         *      });
         *
         * @property {object} event - The event Object passed to each callback
         * @property {string} event.type - The name of the event
         * @property {Scene} event.target - The Scene object that triggered this event
         * @property {boolean} event.reset - Indicates if the destroy method was called with reset `true` or `false`.
         */
        /**
         * Scene add event.  
         * Fires when the scene is added to a controller.
         * This is mostly used by plugins to know that change might be due.
         *
         * @event ScrollMagic.Scene#add
         * @since 2.0.0
         *
         * @example
         * scene.on("add", function (event) {
         * 	console.log('Scene was added to a new controller.');
         * });
         *
         * @property {object} event - The event Object passed to each callback
         * @property {string} event.type - The name of the event
         * @property {Scene} event.target - The Scene object that triggered this event
         * @property {boolean} event.controller - The controller object the scene was added to.
         */
        /**
         * Scene remove event.  
         * Fires when the scene is removed from a controller.
         * This is mostly used by plugins to know that change might be due.
         *
         * @event ScrollMagic.Scene#remove
         * @since 2.0.0
         *
         * @example
         * scene.on("remove", function (event) {
         * 	console.log('Scene was removed from its controller.');
         * });
         *
         * @property {object} event - The event Object passed to each callback
         * @property {string} event.type - The name of the event
         * @property {Scene} event.target - The Scene object that triggered this event
         */

        /**
         * Add one ore more event listener.  
         * The callback function will be fired at the respective event, and an object containing relevant data will be passed to the callback.
         * @method ScrollMagic.Scene#on
         *
         * @example
         * function callback (event) {
         * 		console.log("Event fired! (" + event.type + ")");
         * }
         * // add listeners
         * scene.on("change update progress start end enter leave", callback);
         *
         * @param {string} names - The name or names of the event the callback should be attached to.
         * @param {function} callback - A function that should be executed, when the event is dispatched. An event object will be passed to the callback.
         * @returns {Scene} Parent object for chaining.
         */
        this.on = function(names, callback) {
            if (_util.type.Function(callback)) {
                names = names.trim().split(' ');
                names.forEach(function(fullname) {
                    var
                        nameparts = fullname.split('.'),
                        eventname = nameparts[0],
                        namespace = nameparts[1];
                    if (eventname != "*") { // disallow wildcards
                        if (!_listeners[eventname]) {
                            _listeners[eventname] = [];
                        }
                        _listeners[eventname].push({
                            namespace: namespace || '',
                            callback: callback
                        });
                    }
                });
            } else {
                log(1, "ERROR when calling '.on()': Supplied callback for '" + names + "' is not a valid function!");
            }
            return Scene;
        };

        /**
         * Remove one or more event listener.
         * @method ScrollMagic.Scene#off
         *
         * @example
         * function callback (event) {
         * 		console.log("Event fired! (" + event.type + ")");
         * }
         * // add listeners
         * scene.on("change update", callback);
         * // remove listeners
         * scene.off("change update", callback);
         *
         * @param {string} names - The name or names of the event that should be removed.
         * @param {function} [callback] - A specific callback function that should be removed. If none is passed all callbacks to the event listener will be removed.
         * @returns {Scene} Parent object for chaining.
         */
        this.off = function(names, callback) {
            if (!names) {
                log(1, "ERROR: Invalid event name supplied.");
                return Scene;
            }
            names = names.trim().split(' ');
            names.forEach(function(fullname, key) {
                var
                    nameparts = fullname.split('.'),
                    eventname = nameparts[0],
                    namespace = nameparts[1] || '',
                    removeList = eventname === '*' ? Object.keys(_listeners) : [eventname];
                removeList.forEach(function(remove) {
                    var
                        list = _listeners[remove] || [],
                        i = list.length;
                    while (i--) {
                        var listener = list[i];
                        if (listener && (namespace === listener.namespace || namespace === '*') && (!callback || callback == listener.callback)) {
                            list.splice(i, 1);
                        }
                    }
                    if (!list.length) {
                        delete _listeners[remove];
                    }
                });
            });
            return Scene;
        };

        /**
         * Trigger an event.
         * @method ScrollMagic.Scene#trigger
         *
         * @example
         * this.trigger("change");
         *
         * @param {string} name - The name of the event that should be triggered.
         * @param {object} [vars] - An object containing info that should be passed to the callback.
         * @returns {Scene} Parent object for chaining.
         */
        this.trigger = function(name, vars) {
            if (name) {
                var
                    nameparts = name.trim().split('.'),
                    eventname = nameparts[0],
                    namespace = nameparts[1],
                    listeners = _listeners[eventname];
                log(3, 'event fired:', eventname, vars ? "->" : '', vars || '');
                if (listeners) {
                    listeners.forEach(function(listener, key) {
                        if (!namespace || namespace === listener.namespace) {
                            listener.callback.call(Scene, new ScrollMagic.Event(eventname, listener.namespace, Scene, vars));
                        }
                    });
                }
            } else {
                log(1, "ERROR: Invalid event name supplied.");
            }
            return Scene;
        };

        // set event listeners
        Scene.on("change.internal", function(e) {
            if (e.what !== "loglevel" && e.what !== "tweenChanges") { // no need for a scene update scene with these options...
                if (e.what === "triggerElement") {
                    updateTriggerElementPosition();
                } else if (e.what === "reverse") { // the only property left that may have an impact on the current scene state. Everything else is handled by the shift event.
                    Scene.update();
                }
            }
        }).on("shift.internal", function(e) {
            updateScrollOffset();
            Scene.update(); // update scene to reflect new position
        });

        /**
         * Send a debug message to the console.
         * @private
         * but provided publicly with _log for plugins
         *
         * @param {number} loglevel - The loglevel required to initiate output for the message.
         * @param {...mixed} output - One or more variables that should be passed to the console.
         */
        var log = this._log = function(loglevel, output) {
            if (_options.loglevel >= loglevel) {
                Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ") ->");
                _util.log.apply(window, arguments);
            }
        };

        /**
         * Add the scene to a controller.  
         * This is the equivalent to `Controller.addScene(scene)`.
         * @method ScrollMagic.Scene#addTo
         *
         * @example
         * // add a scene to a ScrollMagic Controller
         * scene.addTo(controller);
         *
         * @param {ScrollMagic.Controller} controller - The controller to which the scene should be added.
         * @returns {Scene} Parent object for chaining.
         */
        this.addTo = function(controller) {
            if (!(controller instanceof ScrollMagic.Controller)) {
                log(1, "ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller");
            } else if (_controller != controller) {
                // new controller
                if (_controller) { // was associated to a different controller before, so remove it...
                    _controller.removeScene(Scene);
                }
                _controller = controller;
                validateOption();
                updateDuration(true);
                updateTriggerElementPosition(true);
                updateScrollOffset();
                _controller.info("container").addEventListener('resize', onContainerResize);
                controller.addScene(Scene);
                Scene.trigger("add", {
                    controller: _controller
                });
                log(3, "added " + NAMESPACE + " to controller");
                Scene.update();
            }
            return Scene;
        };

        /**
         * **Get** or **Set** the current enabled state of the scene.  
         * This can be used to disable this scene without removing or destroying it.
         * @method ScrollMagic.Scene#enabled
         *
         * @example
         * // get the current value
         * var enabled = scene.enabled();
         *
         * // disable the scene
         * scene.enabled(false);
         *
         * @param {boolean} [newState] - The new enabled state of the scene `true` or `false`.
         * @returns {(boolean|Scene)} Current enabled state or parent object for chaining.
         */
        this.enabled = function(newState) {
            if (!arguments.length) { // get
                return _enabled;
            } else if (_enabled != newState) { // set
                _enabled = !!newState;
                Scene.update(true);
            }
            return Scene;
        };

        /**
         * Remove the scene from the controller.  
         * This is the equivalent to `Controller.removeScene(scene)`.
         * The scene will not be updated anymore until you readd it to a controller.
         * To remove the pin or the tween you need to call removeTween() or removePin() respectively.
         * @method ScrollMagic.Scene#remove
         * @example
         * // remove the scene from its controller
         * scene.remove();
         *
         * @returns {Scene} Parent object for chaining.
         */
        this.remove = function() {
            if (_controller) {
                _controller.info("container").removeEventListener('resize', onContainerResize);
                var tmpParent = _controller;
                _controller = undefined;
                tmpParent.removeScene(Scene);
                Scene.trigger("remove");
                log(3, "removed " + NAMESPACE + " from controller");
            }
            return Scene;
        };

        /**
         * Destroy the scene and everything.
         * @method ScrollMagic.Scene#destroy
         * @example
         * // destroy the scene without resetting the pin and tween to their initial positions
         * scene = scene.destroy();
         *
         * // destroy the scene and reset the pin and tween
         * scene = scene.destroy(true);
         *
         * @param {boolean} [reset=false] - If `true` the pin and tween (if existent) will be reset.
         * @returns {null} Null to unset handler variables.
         */
        this.destroy = function(reset) {
            Scene.trigger("destroy", {
                reset: reset
            });
            Scene.remove();
            Scene.off("*.*");
            log(3, "destroyed " + NAMESPACE + " (reset: " + (reset ? "true" : "false") + ")");
            return null;
        };


        /**
         * Updates the Scene to reflect the current state.  
         * This is the equivalent to `Controller.updateScene(scene, immediately)`.  
         * The update method calculates the scene's start and end position (based on the trigger element, trigger hook, duration and offset) and checks it against the current scroll position of the container.  
         * It then updates the current scene state accordingly (or does nothing, if the state is already correct) – Pins will be set to their correct position and tweens will be updated to their correct progress.
         * This means an update doesn't necessarily result in a progress change. The `progress` event will be fired if the progress has indeed changed between this update and the last.  
         * _**NOTE:** This method gets called constantly whenever ScrollMagic detects a change. The only application for you is if you change something outside of the realm of ScrollMagic, like moving the trigger or changing tween parameters._
         * @method ScrollMagic.Scene#update
         * @example
         * // update the scene on next tick
         * scene.update();
         *
         * // update the scene immediately
         * scene.update(true);
         *
         * @fires Scene.update
         *
         * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle (better performance).
         * @returns {Scene} Parent object for chaining.
         */
        this.update = function(immediately) {
            if (_controller) {
                if (immediately) {
                    if (_controller.enabled() && _enabled) {
                        var
                            scrollPos = _controller.info("scrollPos"),
                            newProgress;

                        if (_options.duration > 0) {
                            newProgress = (scrollPos - _scrollOffset.start) / (_scrollOffset.end - _scrollOffset.start);
                        } else {
                            newProgress = scrollPos >= _scrollOffset.start ? 1 : 0;
                        }

                        Scene.trigger("update", {
                            startPos: _scrollOffset.start,
                            endPos: _scrollOffset.end,
                            scrollPos: scrollPos
                        });

                        Scene.progress(newProgress);
                    } else if (_pin && _state === SCENE_STATE_DURING) {
                        updatePinState(true); // unpin in position
                    }
                } else {
                    _controller.updateScene(Scene, false);
                }
            }
            return Scene;
        };

        /**
         * Updates dynamic scene variables like the trigger element position or the duration.
         * This method is automatically called in regular intervals from the controller. See {@link ScrollMagic.Controller} option `refreshInterval`.
         * 
         * You can call it to minimize lag, for example when you intentionally change the position of the triggerElement.
         * If you don't it will simply be updated in the next refresh interval of the container, which is usually sufficient.
         *
         * @method ScrollMagic.Scene#refresh
         * @since 1.1.0
         * @example
         * scene = new ScrollMagic.Scene({triggerElement: "#trigger"});
         * 
         * // change the position of the trigger
         * $("#trigger").css("top", 500);
         * // immediately let the scene know of this change
         * scene.refresh();
         *
         * @fires {@link Scene.shift}, if the trigger element position or the duration changed
         * @fires {@link Scene.change}, if the duration changed
         *
         * @returns {Scene} Parent object for chaining.
         */
        this.refresh = function() {
            updateDuration();
            updateTriggerElementPosition();
            // update trigger element position
            return Scene;
        };

        /**
         * **Get** or **Set** the scene's progress.  
         * Usually it shouldn't be necessary to use this as a setter, as it is set automatically by scene.update().  
         * The order in which the events are fired depends on the duration of the scene:
         *  1. Scenes with `duration == 0`:  
         *  Scenes that have no duration by definition have no ending. Thus the `end` event will never be fired.  
         *  When the trigger position of the scene is passed the events are always fired in this order:  
         *  `enter`, `start`, `progress` when scrolling forward  
         *  and  
         *  `progress`, `start`, `leave` when scrolling in reverse
         *  2. Scenes with `duration > 0`:  
         *  Scenes with a set duration have a defined start and end point.  
         *  When scrolling past the start position of the scene it will fire these events in this order:  
         *  `enter`, `start`, `progress`  
         *  When continuing to scroll and passing the end point it will fire these events:  
         *  `progress`, `end`, `leave`  
         *  When reversing through the end point these events are fired:  
         *  `enter`, `end`, `progress`  
         *  And when continuing to scroll past the start position in reverse it will fire:  
         *  `progress`, `start`, `leave`  
         *  In between start and end the `progress` event will be called constantly, whenever the progress changes.
         * 
         * In short:  
         * `enter` events will always trigger **before** the progress update and `leave` envents will trigger **after** the progress update.  
         * `start` and `end` will always trigger at their respective position.
         * 
         * Please review the event descriptions for details on the events and the event object that is passed to the callback.
         * 
         * @method ScrollMagic.Scene#progress
         * @example
         * // get the current scene progress
         * var progress = scene.progress();
         *
         * // set new scene progress
         * scene.progress(0.3);
         *
         * @fires {@link Scene.enter}, when used as setter
         * @fires {@link Scene.start}, when used as setter
         * @fires {@link Scene.progress}, when used as setter
         * @fires {@link Scene.end}, when used as setter
         * @fires {@link Scene.leave}, when used as setter
         *
         * @param {number} [progress] - The new progress value of the scene `[0-1]`.
         * @returns {number} `get` -  Current scene progress.
         * @returns {Scene} `set` -  Parent object for chaining.
         */
        this.progress = function(progress) {
            if (!arguments.length) { // get
                return _progress;
            } else { // set
                var
                    doUpdate = false,
                    oldState = _state,
                    scrollDirection = _controller ? _controller.info("scrollDirection") : 'PAUSED',
                    reverseOrForward = _options.reverse || progress >= _progress;
                if (_options.duration === 0) {
                    // zero duration scenes
                    doUpdate = _progress != progress;
                    _progress = progress < 1 && reverseOrForward ? 0 : 1;
                    _state = _progress === 0 ? SCENE_STATE_BEFORE : SCENE_STATE_DURING;
                } else {
                    // scenes with start and end
                    if (progress < 0 && _state !== SCENE_STATE_BEFORE && reverseOrForward) {
                        // go back to initial state
                        _progress = 0;
                        _state = SCENE_STATE_BEFORE;
                        doUpdate = true;
                    } else if (progress >= 0 && progress < 1 && reverseOrForward) {
                        _progress = progress;
                        _state = SCENE_STATE_DURING;
                        doUpdate = true;
                    } else if (progress >= 1 && _state !== SCENE_STATE_AFTER) {
                        _progress = 1;
                        _state = SCENE_STATE_AFTER;
                        doUpdate = true;
                    } else if (_state === SCENE_STATE_DURING && !reverseOrForward) {
                        updatePinState(); // in case we scrolled backwards mid-scene and reverse is disabled => update the pin position, so it doesn't move back as well.
                    }
                }
                if (doUpdate) {
                    // fire events
                    var
                        eventVars = {
                            progress: _progress,
                            state: _state,
                            scrollDirection: scrollDirection
                        },
                        stateChanged = _state != oldState;

                    var trigger = function(eventName) { // tmp helper to simplify code
                        Scene.trigger(eventName, eventVars);
                    };

                    if (stateChanged) { // enter events
                        if (oldState !== SCENE_STATE_DURING) {
                            trigger("enter");
                            trigger(oldState === SCENE_STATE_BEFORE ? "start" : "end");
                        }
                    }
                    trigger("progress");
                    if (stateChanged) { // leave events
                        if (_state !== SCENE_STATE_DURING) {
                            trigger(_state === SCENE_STATE_BEFORE ? "start" : "end");
                            trigger("leave");
                        }
                    }
                }

                return Scene;
            }
        };


        /**
         * Update the start and end scrollOffset of the container.
         * The positions reflect what the controller's scroll position will be at the start and end respectively.
         * Is called, when:
         *   - Scene event "change" is called with: offset, triggerHook, duration 
         *   - scroll container event "resize" is called
         *   - the position of the triggerElement changes
         *   - the controller changes -> addTo()
         * @private
         */
        var updateScrollOffset = function() {
            _scrollOffset = {
                start: _triggerPos + _options.offset
            };
            if (_controller && _options.triggerElement) {
                // take away triggerHook portion to get relative to top
                _scrollOffset.start -= _controller.info("size") * _options.triggerHook;
            }
            _scrollOffset.end = _scrollOffset.start + _options.duration;
        };

        /**
         * Updates the duration if set to a dynamic function.
         * This method is called when the scene is added to a controller and in regular intervals from the controller through scene.refresh().
         * 
         * @fires {@link Scene.change}, if the duration changed
         * @fires {@link Scene.shift}, if the duration changed
         *
         * @param {boolean} [suppressEvents=false] - If true the shift event will be suppressed.
         * @private
         */
        var updateDuration = function(suppressEvents) {
            // update duration
            if (_durationUpdateMethod) {
                var varname = "duration";
                if (changeOption(varname, _durationUpdateMethod.call(Scene)) && !suppressEvents) { // set
                    Scene.trigger("change", {
                        what: varname,
                        newval: _options[varname]
                    });
                    Scene.trigger("shift", {
                        reason: varname
                    });
                }
            }
        };

        /**
         * Updates the position of the triggerElement, if present.
         * This method is called ...
         *  - ... when the triggerElement is changed
         *  - ... when the scene is added to a (new) controller
         *  - ... in regular intervals from the controller through scene.refresh().
         * 
         * @fires {@link Scene.shift}, if the position changed
         *
         * @param {boolean} [suppressEvents=false] - If true the shift event will be suppressed.
         * @private
         */
        var updateTriggerElementPosition = function(suppressEvents) {
            var
                elementPos = 0,
                telem = _options.triggerElement;
            if (_controller && telem) {
                var
                    controllerInfo = _controller.info(),
                    containerOffset = _util.get.offset(controllerInfo.container),
                    // container position is needed because element offset is returned in relation to document, not in relation to container.
                    param = controllerInfo.vertical ? "top" : "left"; // which param is of interest ?
                // if parent is spacer, use spacer position instead so correct start position is returned for pinned elements.
                while (telem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
                    telem = telem.parentNode;
                }

                var elementOffset = _util.get.offset(telem);

                if (!controllerInfo.isDocument) { // container is not the document root, so substract scroll Position to get correct trigger element position relative to scrollcontent
                    containerOffset[param] -= _controller.scrollPos();
                }

                elementPos = elementOffset[param] - containerOffset[param];
            }
            var changed = elementPos != _triggerPos;
            _triggerPos = elementPos;
            if (changed && !suppressEvents) {
                Scene.trigger("shift", {
                    reason: "triggerElementPosition"
                });
            }
        };

        /**
         * Trigger a shift event, when the container is resized and the triggerHook is > 1.
         * @private
         */
        var onContainerResize = function(e) {
            if (_options.triggerHook > 0) {
                Scene.trigger("shift", {
                    reason: "containerResize"
                });
            }
        };

        var _validate = _util.extend(SCENE_OPTIONS.validate, {
            // validation for duration handled internally for reference to private var _durationMethod
            duration: function(val) {
                if (_util.type.String(val) && val.match(/^(\.|\d)*\d+%$/)) {
                    // percentage value
                    var perc = parseFloat(val) / 100;
                    val = function() {
                        return _controller ? _controller.info("size") * perc : 0;
                    };
                }
                if (_util.type.Function(val)) {
                    // function
                    _durationUpdateMethod = val;
                    try {
                        val = parseFloat(_durationUpdateMethod());
                    } catch (e) {
                        val = -1; // will cause error below
                    }
                }
                // val has to be float
                val = parseFloat(val);
                if (!_util.type.Number(val) || val < 0) {
                    if (_durationUpdateMethod) {
                        _durationUpdateMethod = undefined;
                        throw ["Invalid return value of supplied function for option \"duration\":", val];
                    } else {
                        throw ["Invalid value for option \"duration\":", val];
                    }
                }
                return val;
            }
        });

        /**
         * Checks the validity of a specific or all options and reset to default if neccessary.
         * @private
         */
        var validateOption = function(check) {
            check = arguments.length ? [check] : Object.keys(_validate);
            check.forEach(function(optionName, key) {
                var value;
                if (_validate[optionName]) { // there is a validation method for this option
                    try { // validate value
                        value = _validate[optionName](_options[optionName]);
                    } catch (e) { // validation failed -> reset to default
                        value = DEFAULT_OPTIONS[optionName];
                        var logMSG = _util.type.String(e) ? [e] : e;
                        if (_util.type.Array(logMSG)) {
                            logMSG[0] = "ERROR: " + logMSG[0];
                            logMSG.unshift(1); // loglevel 1 for error msg
                            log.apply(this, logMSG);
                        } else {
                            log(1, "ERROR: Problem executing validation callback for option '" + optionName + "':", e.message);
                        }
                    } finally {
                        _options[optionName] = value;
                    }
                }
            });
        };

        /**
         * Helper used by the setter/getters for scene options
         * @private
         */
        var changeOption = function(varname, newval) {
            var
                changed = false,
                oldval = _options[varname];
            if (_options[varname] != newval) {
                _options[varname] = newval;
                validateOption(varname); // resets to default if necessary
                changed = oldval != _options[varname];
            }
            return changed;
        };

        // generate getters/setters for all options
        var addSceneOption = function(optionName) {
            if (!Scene[optionName]) {
                Scene[optionName] = function(newVal) {
                    if (!arguments.length) { // get
                        return _options[optionName];
                    } else {
                        if (optionName === "duration") { // new duration is set, so any previously set function must be unset
                            _durationUpdateMethod = undefined;
                        }
                        if (changeOption(optionName, newVal)) { // set
                            Scene.trigger("change", {
                                what: optionName,
                                newval: _options[optionName]
                            });
                            if (SCENE_OPTIONS.shifts.indexOf(optionName) > -1) {
                                Scene.trigger("shift", {
                                    reason: optionName
                                });
                            }
                        }
                    }
                    return Scene;
                };
            }
        };

        /**
         * **Get** or **Set** the duration option value.
         * As a setter it also accepts a function returning a numeric value.  
         * This is particularly useful for responsive setups.
         *
         * The duration is updated using the supplied function every time `Scene.refresh()` is called, which happens periodically from the controller (see ScrollMagic.Controller option `refreshInterval`).  
         * _**NOTE:** Be aware that it's an easy way to kill performance, if you supply a function that has high CPU demand.  
         * Even for size and position calculations it is recommended to use a variable to cache the value. (see example)  
         * This counts double if you use the same function for multiple scenes._
         *
         * @method ScrollMagic.Scene#duration
         * @example
         * // get the current duration value
         * var duration = scene.duration();
         *
         * // set a new duration
         * scene.duration(300);
         *
         * // use a function to automatically adjust the duration to the window height.
         * var durationValueCache;
         * function getDuration () {
         *   return durationValueCache;
         * }
         * function updateDuration (e) {
         *   durationValueCache = window.innerHeight;
         * }
         * $(window).on("resize", updateDuration); // update the duration when the window size changes
         * $(window).triggerHandler("resize"); // set to initial value
         * scene.duration(getDuration); // supply duration method
         *
         * @fires {@link Scene.change}, when used as setter
         * @fires {@link Scene.shift}, when used as setter
         * @param {(number|function)} [newDuration] - The new duration of the scene.
         * @returns {number} `get` -  Current scene duration.
         * @returns {Scene} `set` -  Parent object for chaining.
         */

        /**
         * **Get** or **Set** the offset option value.
         * @method ScrollMagic.Scene#offset
         * @example
         * // get the current offset
         * var offset = scene.offset();
         *
         * // set a new offset
         * scene.offset(100);
         *
         * @fires {@link Scene.change}, when used as setter
         * @fires {@link Scene.shift}, when used as setter
         * @param {number} [newOffset] - The new offset of the scene.
         * @returns {number} `get` -  Current scene offset.
         * @returns {Scene} `set` -  Parent object for chaining.
         */

        /**
         * **Get** or **Set** the triggerElement option value.
         * Does **not** fire `Scene.shift`, because changing the trigger Element doesn't necessarily mean the start position changes. This will be determined in `Scene.refresh()`, which is automatically triggered.
         * @method ScrollMagic.Scene#triggerElement
         * @example
         * // get the current triggerElement
         * var triggerElement = scene.triggerElement();
         *
         * // set a new triggerElement using a selector
         * scene.triggerElement("#trigger");
         * // set a new triggerElement using a DOM object
         * scene.triggerElement(document.getElementById("trigger"));
         *
         * @fires {@link Scene.change}, when used as setter
         * @param {(string|object)} [newTriggerElement] - The new trigger element for the scene.
         * @returns {(string|object)} `get` -  Current triggerElement.
         * @returns {Scene} `set` -  Parent object for chaining.
         */

        /**
         * **Get** or **Set** the triggerHook option value.
         * @method ScrollMagic.Scene#triggerHook
         * @example
         * // get the current triggerHook value
         * var triggerHook = scene.triggerHook();
         *
         * // set a new triggerHook using a string
         * scene.triggerHook("onLeave");
         * // set a new triggerHook using a number
         * scene.triggerHook(0.7);
         *
         * @fires {@link Scene.change}, when used as setter
         * @fires {@link Scene.shift}, when used as setter
         * @param {(number|string)} [newTriggerHook] - The new triggerHook of the scene. See {@link Scene} parameter description for value options.
         * @returns {number} `get` -  Current triggerHook (ALWAYS numerical).
         * @returns {Scene} `set` -  Parent object for chaining.
         */

        /**
         * **Get** or **Set** the reverse option value.
         * @method ScrollMagic.Scene#reverse
         * @example
         * // get the current reverse option
         * var reverse = scene.reverse();
         *
         * // set new reverse option
         * scene.reverse(false);
         *
         * @fires {@link Scene.change}, when used as setter
         * @param {boolean} [newReverse] - The new reverse setting of the scene.
         * @returns {boolean} `get` -  Current reverse option value.
         * @returns {Scene} `set` -  Parent object for chaining.
         */

        /**
         * **Get** or **Set** the loglevel option value.
         * @method ScrollMagic.Scene#loglevel
         * @example
         * // get the current loglevel
         * var loglevel = scene.loglevel();
         *
         * // set new loglevel
         * scene.loglevel(3);
         *
         * @fires {@link Scene.change}, when used as setter
         * @param {number} [newLoglevel] - The new loglevel setting of the scene. `[0-3]`
         * @returns {number} `get` -  Current loglevel.
         * @returns {Scene} `set` -  Parent object for chaining.
         */

        /**
         * **Get** the associated controller.
         * @method ScrollMagic.Scene#controller
         * @example
         * // get the controller of a scene
         * var controller = scene.controller();
         *
         * @returns {ScrollMagic.Controller} Parent controller or `undefined`
         */
        this.controller = function() {
            return _controller;
        };

        /**
         * **Get** the current state.
         * @method ScrollMagic.Scene#state
         * @example
         * // get the current state
         * var state = scene.state();
         *
         * @returns {string} `"BEFORE"`, `"DURING"` or `"AFTER"`
         */
        this.state = function() {
            return _state;
        };

        /**
         * **Get** the current scroll offset for the start of the scene.  
         * Mind, that the scrollOffset is related to the size of the container, if `triggerHook` is bigger than `0` (or `"onLeave"`).  
         * This means, that resizing the container or changing the `triggerHook` will influence the scene's start offset.
         * @method ScrollMagic.Scene#scrollOffset
         * @example
         * // get the current scroll offset for the start and end of the scene.
         * var start = scene.scrollOffset();
         * var end = scene.scrollOffset() + scene.duration();
         * console.log("the scene starts at", start, "and ends at", end);
         *
         * @returns {number} The scroll offset (of the container) at which the scene will trigger. Y value for vertical and X value for horizontal scrolls.
         */
        this.scrollOffset = function() {
            return _scrollOffset.start;
        };

        /**
         * **Get** the trigger position of the scene (including the value of the `offset` option).  
         * @method ScrollMagic.Scene#triggerPosition
         * @example
         * // get the scene's trigger position
         * var triggerPosition = scene.triggerPosition();
         *
         * @returns {number} Start position of the scene. Top position value for vertical and left position value for horizontal scrolls.
         */
        this.triggerPosition = function() {
            var pos = _options.offset; // the offset is the basis
            if (_controller) {
                // get the trigger position
                if (_options.triggerElement) {
                    // Element as trigger
                    pos += _triggerPos;
                } else {
                    // return the height of the triggerHook to start at the beginning
                    pos += _controller.info("size") * Scene.triggerHook();
                }
            }
            return pos;
        };

        var
            _pin, _pinOptions;

        Scene.on("shift.internal", function(e) {
            var durationChanged = e.reason === "duration";
            if ((_state === SCENE_STATE_AFTER && durationChanged) || (_state === SCENE_STATE_DURING && _options.duration === 0)) {
                // if [duration changed after a scene (inside scene progress updates pin position)] or [duration is 0, we are in pin phase and some other value changed].
                updatePinState();
            }
            if (durationChanged) {
                updatePinDimensions();
            }
        }).on("progress.internal", function(e) {
            updatePinState();
        }).on("add.internal", function(e) {
            updatePinDimensions();
        }).on("destroy.internal", function(e) {
            Scene.removePin(e.reset);
        });
        /**
         * Update the pin state.
         * @private
         */
        var updatePinState = function(forceUnpin) {
            if (_pin && _controller) {
                var
                    containerInfo = _controller.info(),
                    pinTarget = _pinOptions.spacer.firstChild; // may be pin element or another spacer, if cascading pins
                if (!forceUnpin && _state === SCENE_STATE_DURING) { // during scene or if duration is 0 and we are past the trigger
                    // pinned state
                    if (_util.css(pinTarget, "position") != "fixed") {
                        // change state before updating pin spacer (position changes due to fixed collapsing might occur.)
                        _util.css(pinTarget, {
                            "position": "fixed"
                        });
                        // update pin spacer
                        updatePinDimensions();
                    }

                    var
                        fixedPos = _util.get.offset(_pinOptions.spacer, true),
                        // get viewport position of spacer
                        scrollDistance = _options.reverse || _options.duration === 0 ? containerInfo.scrollPos - _scrollOffset.start // quicker
                        :
                        Math.round(_progress * _options.duration * 10) / 10; // if no reverse and during pin the position needs to be recalculated using the progress
                    // add scrollDistance
                    fixedPos[containerInfo.vertical ? "top" : "left"] += scrollDistance;

                    // set new values
                    _util.css(_pinOptions.spacer.firstChild, {
                        top: fixedPos.top,
                        left: fixedPos.left
                    });
                } else {
                    // unpinned state
                    var
                        newCSS = {
                            position: _pinOptions.inFlow ? "relative" : "absolute",
                            top: 0,
                            left: 0
                        },
                        change = _util.css(pinTarget, "position") != newCSS.position;

                    if (!_pinOptions.pushFollowers) {
                        newCSS[containerInfo.vertical ? "top" : "left"] = _options.duration * _progress;
                    } else if (_options.duration > 0) { // only concerns scenes with duration
                        if (_state === SCENE_STATE_AFTER && parseFloat(_util.css(_pinOptions.spacer, "padding-top")) === 0) {
                            change = true; // if in after state but havent updated spacer yet (jumped past pin)
                        } else if (_state === SCENE_STATE_BEFORE && parseFloat(_util.css(_pinOptions.spacer, "padding-bottom")) === 0) { // before
                            change = true; // jumped past fixed state upward direction
                        }
                    }
                    // set new values
                    _util.css(pinTarget, newCSS);
                    if (change) {
                        // update pin spacer if state changed
                        updatePinDimensions();
                    }
                }
            }
        };

        /**
         * Update the pin spacer and/or element size.
         * The size of the spacer needs to be updated whenever the duration of the scene changes, if it is to push down following elements.
         * @private
         */
        var updatePinDimensions = function() {
            if (_pin && _controller && _pinOptions.inFlow) { // no spacerresize, if original position is absolute
                var
                    after = (_state === SCENE_STATE_AFTER),
                    before = (_state === SCENE_STATE_BEFORE),
                    during = (_state === SCENE_STATE_DURING),
                    vertical = _controller.info("vertical"),
                    pinTarget = _pinOptions.spacer.firstChild,
                    // usually the pined element but can also be another spacer (cascaded pins)
                    marginCollapse = _util.isMarginCollapseType(_util.css(_pinOptions.spacer, "display")),
                    css = {};

                // set new size
                // if relsize: spacer -> pin | else: pin -> spacer
                if (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {
                    if (during) {
                        _util.css(_pin, {
                            "width": _util.get.width(_pinOptions.spacer)
                        });
                    } else {
                        _util.css(_pin, {
                            "width": "100%"
                        });
                    }
                } else {
                    // minwidth is needed for cascaded pins.
                    css["min-width"] = _util.get.width(vertical ? _pin : pinTarget, true, true);
                    css.width = during ? css["min-width"] : "auto";
                }
                if (_pinOptions.relSize.height) {
                    if (during) {
                        // the only padding the spacer should ever include is the duration (if pushFollowers = true), so we need to substract that.
                        _util.css(_pin, {
                            "height": _util.get.height(_pinOptions.spacer) - (_pinOptions.pushFollowers ? _options.duration : 0)
                        });
                    } else {
                        _util.css(_pin, {
                            "height": "100%"
                        });
                    }
                } else {
                    // margin is only included if it's a cascaded pin to resolve an IE9 bug
                    css["min-height"] = _util.get.height(vertical ? pinTarget : _pin, true, !marginCollapse); // needed for cascading pins
                    css.height = during ? css["min-height"] : "auto";
                }

                // add space for duration if pushFollowers is true
                if (_pinOptions.pushFollowers) {
                    css["padding" + (vertical ? "Top" : "Left")] = _options.duration * _progress;
                    css["padding" + (vertical ? "Bottom" : "Right")] = _options.duration * (1 - _progress);
                }
                _util.css(_pinOptions.spacer, css);
            }
        };

        /**
         * Updates the Pin state (in certain scenarios)
         * If the controller container is not the document and we are mid-pin-phase scrolling or resizing the main document can result to wrong pin positions.
         * So this function is called on resize and scroll of the document.
         * @private
         */
        var updatePinInContainer = function() {
            if (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info("isDocument")) {
                updatePinState();
            }
        };

        /**
         * Updates the Pin spacer size state (in certain scenarios)
         * If container is resized during pin and relatively sized the size of the pin might need to be updated...
         * So this function is called on resize of the container.
         * @private
         */
        var updateRelativePinSpacer = function() {
            if (_controller && _pin && // well, duh
                _state === SCENE_STATE_DURING && // element in pinned state?
                ( // is width or height relatively sized, but not in relation to body? then we need to recalc.
                    ((_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) && _util.get.width(window) != _util.get.width(_pinOptions.spacer.parentNode)) || (_pinOptions.relSize.height && _util.get.height(window) != _util.get.height(_pinOptions.spacer.parentNode)))) {
                updatePinDimensions();
            }
        };

        /**
         * Is called, when the mousewhel is used while over a pinned element inside a div container.
         * If the scene is in fixed state scroll events would be counted towards the body. This forwards the event to the scroll container.
         * @private
         */
        var onMousewheelOverPin = function(e) {
            if (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info("isDocument")) { // in pin state
                e.preventDefault();
                _controller._setScrollPos(_controller.info("scrollPos") - ((e.wheelDelta || e[_controller.info("vertical") ? "wheelDeltaY" : "wheelDeltaX"]) / 3 || -e.detail * 30));
            }
        };

        /**
         * Pin an element for the duration of the tween.  
         * If the scene duration is 0 the element will only be unpinned, if the user scrolls back past the start position.  
         * Make sure only one pin is applied to an element at the same time.
         * An element can be pinned multiple times, but only successively.
         * _**NOTE:** The option `pushFollowers` has no effect, when the scene duration is 0._
         * @method ScrollMagic.Scene#setPin
         * @example
         * // pin element and push all following elements down by the amount of the pin duration.
         * scene.setPin("#pin");
         *
         * // pin element and keeping all following elements in their place. The pinned element will move past them.
         * scene.setPin("#pin", {pushFollowers: false});
         *
         * @param {(string|object)} element - A Selector targeting an element or a DOM object that is supposed to be pinned.
         * @param {object} [settings] - settings for the pin
         * @param {boolean} [settings.pushFollowers=true] - If `true` following elements will be "pushed" down for the duration of the pin, if `false` the pinned element will just scroll past them.  
         Ignored, when duration is `0`.
         * @param {string} [settings.spacerClass="scrollmagic-pin-spacer"] - Classname of the pin spacer element, which is used to replace the element.
         *
         * @returns {Scene} Parent object for chaining.
         */
        this.setPin = function(element, settings) {
            var
                defaultSettings = {
                    pushFollowers: true,
                    spacerClass: "scrollmagic-pin-spacer"
                };
            settings = _util.extend({}, defaultSettings, settings);

            // validate Element
            element = _util.get.elements(element)[0];
            if (!element) {
                log(1, "ERROR calling method 'setPin()': Invalid pin element supplied.");
                return Scene; // cancel
            } else if (_util.css(element, "position") === "fixed") {
                log(1, "ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'.");
                return Scene; // cancel
            }

            if (_pin) { // preexisting pin?
                if (_pin === element) {
                    // same pin we already have -> do nothing
                    return Scene; // cancel
                } else {
                    // kill old pin
                    Scene.removePin();
                }

            }
            _pin = element;

            var
                parentDisplay = _pin.parentNode.style.display,
                boundsParams = ["top", "left", "bottom", "right", "margin", "marginLeft", "marginRight", "marginTop", "marginBottom"];

            _pin.parentNode.style.display = 'none'; // hack start to force css to return stylesheet values instead of calculated px values.
            var
                inFlow = _util.css(_pin, "position") != "absolute",
                pinCSS = _util.css(_pin, boundsParams.concat(["display"])),
                sizeCSS = _util.css(_pin, ["width", "height"]);
            _pin.parentNode.style.display = parentDisplay; // hack end.
            if (!inFlow && settings.pushFollowers) {
                log(2, "WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled.");
                settings.pushFollowers = false;
            }
            window.setTimeout(function() { // wait until all finished, because with responsive duration it will only be set after scene is added to controller
                if (_pin && _options.duration === 0 && settings.pushFollowers) {
                    log(2, "WARNING: pushFollowers =", true, "has no effect, when scene duration is 0.");
                }
            }, 0);

            // create spacer and insert
            var
                spacer = _pin.parentNode.insertBefore(document.createElement('div'), _pin),
                spacerCSS = _util.extend(pinCSS, {
                    position: inFlow ? "relative" : "absolute",
                    boxSizing: "content-box",
                    mozBoxSizing: "content-box",
                    webkitBoxSizing: "content-box"
                });

            if (!inFlow) { // copy size if positioned absolutely, to work for bottom/right positioned elements.
                _util.extend(spacerCSS, _util.css(_pin, ["width", "height"]));
            }

            _util.css(spacer, spacerCSS);
            spacer.setAttribute(PIN_SPACER_ATTRIBUTE, "");
            _util.addClass(spacer, settings.spacerClass);

            // set the pin Options
            _pinOptions = {
                spacer: spacer,
                relSize: { // save if size is defined using % values. if so, handle spacer resize differently...
                    width: sizeCSS.width.slice(-1) === "%",
                    height: sizeCSS.height.slice(-1) === "%",
                    autoFullWidth: sizeCSS.width === "auto" && inFlow && _util.isMarginCollapseType(pinCSS.display)
                },
                pushFollowers: settings.pushFollowers,
                inFlow: inFlow,
                // stores if the element takes up space in the document flow
            };

            if (!_pin.___origStyle) {
                _pin.___origStyle = {};
                var
                    pinInlineCSS = _pin.style,
                    copyStyles = boundsParams.concat(["width", "height", "position", "boxSizing", "mozBoxSizing", "webkitBoxSizing"]);
                copyStyles.forEach(function(val) {
                    _pin.___origStyle[val] = pinInlineCSS[val] || "";
                });
            }

            // if relative size, transfer it to spacer and make pin calculate it...
            if (_pinOptions.relSize.width) {
                _util.css(spacer, {
                    width: sizeCSS.width
                });
            }
            if (_pinOptions.relSize.height) {
                _util.css(spacer, {
                    height: sizeCSS.height
                });
            }

            // now place the pin element inside the spacer	
            spacer.appendChild(_pin);
            // and set new css
            _util.css(_pin, {
                position: inFlow ? "relative" : "absolute",
                margin: "auto",
                top: "auto",
                left: "auto",
                bottom: "auto",
                right: "auto"
            });

            if (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {
                _util.css(_pin, {
                    boxSizing: "border-box",
                    mozBoxSizing: "border-box",
                    webkitBoxSizing: "border-box"
                });
            }

            // add listener to document to update pin position in case controller is not the document.
            window.addEventListener('scroll', updatePinInContainer);
            window.addEventListener('resize', updatePinInContainer);
            window.addEventListener('resize', updateRelativePinSpacer);
            // add mousewheel listener to catch scrolls over fixed elements
            _pin.addEventListener("mousewheel", onMousewheelOverPin);
            _pin.addEventListener("DOMMouseScroll", onMousewheelOverPin);

            log(3, "added pin");

            // finally update the pin to init
            updatePinState();

            return Scene;
        };

        /**
         * Remove the pin from the scene.
         * @method ScrollMagic.Scene#removePin
         * @example
         * // remove the pin from the scene without resetting it (the spacer is not removed)
         * scene.removePin();
         *
         * // remove the pin from the scene and reset the pin element to its initial position (spacer is removed)
         * scene.removePin(true);
         *
         * @param {boolean} [reset=false] - If `false` the spacer will not be removed and the element's position will not be reset.
         * @returns {Scene} Parent object for chaining.
         */
        this.removePin = function(reset) {
            if (_pin) {
                if (_state === SCENE_STATE_DURING) {
                    updatePinState(true); // force unpin at position
                }
                if (reset || !_controller) { // if there's no controller no progress was made anyway...
                    var pinTarget = _pinOptions.spacer.firstChild; // usually the pin element, but may be another spacer (cascaded pins)...
                    if (pinTarget.hasAttribute(PIN_SPACER_ATTRIBUTE)) { // copy margins to child spacer
                        var
                            style = _pinOptions.spacer.style,
                            values = ["margin", "marginLeft", "marginRight", "marginTop", "marginBottom"];
                        margins = {};
                        values.forEach(function(val) {
                            margins[val] = style[val] || "";
                        });
                        _util.css(pinTarget, margins);
                    }
                    _pinOptions.spacer.parentNode.insertBefore(pinTarget, _pinOptions.spacer);
                    _pinOptions.spacer.parentNode.removeChild(_pinOptions.spacer);
                    if (!_pin.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) { // if it's the last pin for this element -> restore inline styles
                        // TODO: only correctly set for first pin (when cascading) - how to fix?
                        _util.css(_pin, _pin.___origStyle);
                        delete _pin.___origStyle;
                    }
                }
                window.removeEventListener('scroll', updatePinInContainer);
                window.removeEventListener('resize', updatePinInContainer);
                window.removeEventListener('resize', updateRelativePinSpacer);
                _pin.removeEventListener("mousewheel", onMousewheelOverPin);
                _pin.removeEventListener("DOMMouseScroll", onMousewheelOverPin);
                _pin = undefined;
                log(3, "removed pin (reset: " + (reset ? "true" : "false") + ")");
            }
            return Scene;
        };


        var
            _cssClasses, _cssClassElems = [];

        Scene.on("destroy.internal", function(e) {
            Scene.removeClassToggle(e.reset);
        });
        /**
         * Define a css class modification while the scene is active.  
         * When the scene triggers the classes will be added to the supplied element and removed, when the scene is over.
         * If the scene duration is 0 the classes will only be removed if the user scrolls back past the start position.
         * @method ScrollMagic.Scene#setClassToggle
         * @example
         * // add the class 'myclass' to the element with the id 'my-elem' for the duration of the scene
         * scene.setClassToggle("#my-elem", "myclass");
         *
         * // add multiple classes to multiple elements defined by the selector '.classChange'
         * scene.setClassToggle(".classChange", "class1 class2 class3");
         *
         * @param {(string|object)} element - A Selector targeting one or more elements or a DOM object that is supposed to be modified.
         * @param {string} classes - One or more Classnames (separated by space) that should be added to the element during the scene.
         *
         * @returns {Scene} Parent object for chaining.
         */
        this.setClassToggle = function(element, classes) {
            var elems = _util.get.elements(element);
            if (elems.length === 0 || !_util.type.String(classes)) {
                log(1, "ERROR calling method 'setClassToggle()': Invalid " + (elems.length === 0 ? "element" : "classes") + " supplied.");
                return Scene;
            }
            if (_cssClassElems.length > 0) {
                // remove old ones
                Scene.removeClassToggle();
            }
            _cssClasses = classes;
            _cssClassElems = elems;
            Scene.on("enter.internal_class leave.internal_class", function(e) {
                var toggle = e.type === "enter" ? _util.addClass : _util.removeClass;
                _cssClassElems.forEach(function(elem, key) {
                    toggle(elem, _cssClasses);
                });
            });
            return Scene;
        };

        /**
         * Remove the class binding from the scene.
         * @method ScrollMagic.Scene#removeClassToggle
         * @example
         * // remove class binding from the scene without reset
         * scene.removeClassToggle();
         *
         * // remove class binding and remove the changes it caused
         * scene.removeClassToggle(true);
         *
         * @param {boolean} [reset=false] - If `false` and the classes are currently active, they will remain on the element. If `true` they will be removed.
         * @returns {Scene} Parent object for chaining.
         */
        this.removeClassToggle = function(reset) {
            if (reset) {
                _cssClassElems.forEach(function(elem, key) {
                    _util.removeClass(elem, _cssClasses);
                });
            }
            Scene.off("start.internal_class end.internal_class");
            _cssClasses = undefined;
            _cssClassElems = [];
            return Scene;
        };

        // INIT
        construct();
        return Scene;
    };

    // store pagewide scene options
    var SCENE_OPTIONS = {
        defaults: {
            duration: 0,
            offset: 0,
            triggerElement: undefined,
            triggerHook: 0.5,
            reverse: true,
            loglevel: 2
        },
        validate: {
            offset: function(val) {
                val = parseFloat(val);
                if (!_util.type.Number(val)) {
                    throw ["Invalid value for option \"offset\":", val];
                }
                return val;
            },
            triggerElement: function(val) {
                val = val || undefined;
                if (val) {
                    var elem = _util.get.elements(val)[0];
                    if (elem) {
                        val = elem;
                    } else {
                        throw ["Element defined in option \"triggerElement\" was not found:", val];
                    }
                }
                return val;
            },
            triggerHook: function(val) {
                var translate = {
                    "onCenter": 0.5,
                    "onEnter": 1,
                    "onLeave": 0
                };
                if (_util.type.Number(val)) {
                    val = Math.max(0, Math.min(parseFloat(val), 1)); //  make sure its betweeen 0 and 1
                } else if (val in translate) {
                    val = translate[val];
                } else {
                    throw ["Invalid value for option \"triggerHook\": ", val];
                }
                return val;
            },
            reverse: function(val) {
                return !!val; // force boolean
            },
            loglevel: function(val) {
                val = parseInt(val);
                if (!_util.type.Number(val) || val < 0 || val > 3) {
                    throw ["Invalid value for option \"loglevel\":", val];
                }
                return val;
            }
        },
        // holder for  validation methods. duration validation is handled in 'getters-setters.js'
        shifts: ["duration", "offset", "triggerHook"],
        // list of options that trigger a `shift` event
    };
    /*
     * method used to add an option to ScrollMagic Scenes.
     * TODO: DOC (private for dev)
     */
    ScrollMagic.Scene.addOption = function(name, defaultValue, validationCallback, shifts) {
        if (!(name in SCENE_OPTIONS.defaults)) {
            SCENE_OPTIONS.defaults[name] = defaultValue;
            SCENE_OPTIONS.validate[name] = validationCallback;
            if (shifts) {
                SCENE_OPTIONS.shifts.push(name);
            }
        } else {
            ScrollMagic._util.log(1, "[static] ScrollMagic.Scene -> Cannot add Scene option '" + name + "', because it already exists.");
        }
    };
    // instance extension function for plugins
    // TODO: DOC (private for dev)
    ScrollMagic.Scene.extend = function(extension) {
        var oldClass = this;
        ScrollMagic.Scene = function() {
            oldClass.apply(this, arguments);
            this.$super = _util.extend({}, this); // copy parent state
            return extension.apply(this, arguments) || this;
        };
        _util.extend(ScrollMagic.Scene, oldClass); // copy properties
        ScrollMagic.Scene.prototype = oldClass.prototype; // copy prototype
        ScrollMagic.Scene.prototype.constructor = ScrollMagic.Scene; // restore constructor
    };


    /**
     * TODO: DOCS (private for dev)
     * @class
     * @private
     */

    ScrollMagic.Event = function(type, namespace, target, vars) {
        vars = vars || {};
        for (var key in vars) {
            this[key] = vars[key];
        }
        this.type = type;
        this.target = this.currentTarget = target;
        this.namespace = namespace || '';
        this.timeStamp = this.timestamp = Date.now();
        return this;
    };

    /*
     * TODO: DOCS (private for dev)
     */

    var _util = ScrollMagic._util = (function(window) {
        var U = {},
            i;

        /**
         * ------------------------------
         * internal helpers
         * ------------------------------
         */

        // parse float and fall back to 0.
        var floatval = function(number) {
            return parseFloat(number) || 0;
        };
        // get current style IE safe (otherwise IE would return calculated values for 'auto')
        var _getComputedStyle = function(elem) {
            return elem.currentStyle ? elem.currentStyle : window.getComputedStyle(elem);
        };

        // get element dimension (width or height)
        var _dimension = function(which, elem, outer, includeMargin) {
            elem = (elem === document) ? window : elem;
            if (elem === window) {
                includeMargin = false;
            } else if (!_type.DomElement(elem)) {
                return 0;
            }
            which = which.charAt(0).toUpperCase() + which.substr(1).toLowerCase();
            var dimension = (outer ? elem['offset' + which] || elem['outer' + which] : elem['client' + which] || elem['inner' + which]) || 0;
            if (outer && includeMargin) {
                var style = _getComputedStyle(elem);
                dimension += which === 'Height' ? floatval(style.marginTop) + floatval(style.marginBottom) : floatval(style.marginLeft) + floatval(style.marginRight);
            }
            return dimension;
        };
        // converts 'margin-top' into 'marginTop'
        var _camelCase = function(str) {
            return str.replace(/^[^a-z]+([a-z])/g, '$1').replace(/-([a-z])/g, function(g) {
                return g[1].toUpperCase();
            });
        };

        /**
         * ------------------------------
         * external helpers
         * ------------------------------
         */

        // extend obj – same as jQuery.extend({}, objA, objB)
        U.extend = function(obj) {
            obj = obj || {};
            for (i = 1; i < arguments.length; i++) {
                if (!arguments[i]) {
                    continue;
                }
                for (var key in arguments[i]) {
                    if (arguments[i].hasOwnProperty(key)) {
                        obj[key] = arguments[i][key];
                    }
                }
            }
            return obj;
        };

        // check if a css display type results in margin-collapse or not
        U.isMarginCollapseType = function(str) {
            return ["block", "flex", "list-item", "table", "-webkit-box"].indexOf(str) > -1;
        };

        // implementation of requestAnimationFrame
        // based on https://gist.github.com/paulirish/1579671
        var
            lastTime = 0,
            vendors = ['ms', 'moz', 'webkit', 'o'];
        var _requestAnimationFrame = window.requestAnimationFrame;
        var _cancelAnimationFrame = window.cancelAnimationFrame;
        // try vendor prefixes if the above doesn't work
        for (i = 0; !_requestAnimationFrame && i < vendors.length; ++i) {
            _requestAnimationFrame = window[vendors[i] + 'RequestAnimationFrame'];
            _cancelAnimationFrame = window[vendors[i] + 'CancelAnimationFrame'] || window[vendors[i] + 'CancelRequestAnimationFrame'];
        }

        // fallbacks
        if (!_requestAnimationFrame) {
            _requestAnimationFrame = function(callback) {
                var
                    currTime = new Date().getTime(),
                    timeToCall = Math.max(0, 16 - (currTime - lastTime)),
                    id = window.setTimeout(function() {
                        callback(currTime + timeToCall);
                    }, timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };
        }
        if (!_cancelAnimationFrame) {
            _cancelAnimationFrame = function(id) {
                window.clearTimeout(id);
            };
        }
        U.rAF = _requestAnimationFrame.bind(window);
        U.cAF = _cancelAnimationFrame.bind(window);

        var
            loglevels = ["error", "warn", "log"],
            console = window.console || {};

        console.log = console.log ||
            function() {}; // no console log, well - do nothing then...
        // make sure methods for all levels exist.
        for (i = 0; i < loglevels.length; i++) {
            var method = loglevels[i];
            if (!console[method]) {
                console[method] = console.log; // prefer .log over nothing
            }
        }
        U.log = function(loglevel) {
            if (loglevel > loglevels.length || loglevel <= 0) loglevel = loglevels.length;
            var now = new Date(),
                time = ("0" + now.getHours()).slice(-2) + ":" + ("0" + now.getMinutes()).slice(-2) + ":" + ("0" + now.getSeconds()).slice(-2) + ":" + ("00" + now.getMilliseconds()).slice(-3),
                method = loglevels[loglevel - 1],
                args = Array.prototype.splice.call(arguments, 1),
                func = Function.prototype.bind.call(console[method], console);
            args.unshift(time);
            func.apply(console, args);
        };

        /**
         * ------------------------------
         * type testing
         * ------------------------------
         */

        var _type = U.type = function(v) {
            return Object.prototype.toString.call(v).replace(/^\[object (.+)\]$/, "$1").toLowerCase();
        };
        _type.String = function(v) {
            return _type(v) === 'string';
        };
        _type.Function = function(v) {
            return _type(v) === 'function';
        };
        _type.Array = function(v) {
            return Array.isArray(v);
        };
        _type.Number = function(v) {
            return !_type.Array(v) && (v - parseFloat(v) + 1) >= 0;
        };
        _type.DomElement = function(o) {
            return (
                typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2
                o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string");
        };

        /**
         * ------------------------------
         * DOM Element info
         * ------------------------------
         */
        // always returns a list of matching DOM elements, from a selector, a DOM element or an list of elements or even an array of selectors
        var _get = U.get = {};
        _get.elements = function(selector) {
            var arr = [];
            if (_type.String(selector)) {
                try {
                    selector = document.querySelectorAll(selector);
                } catch (e) { // invalid selector
                    return arr;
                }
            }
            if (_type(selector) === 'nodelist' || _type.Array(selector)) {
                for (var i = 0, ref = arr.length = selector.length; i < ref; i++) { // list of elements
                    var elem = selector[i];
                    arr[i] = _type.DomElement(elem) ? elem : _get.elements(elem); // if not an element, try to resolve recursively
                }
            } else if (_type.DomElement(selector) || selector === document || selector === window) {
                arr = [selector]; // only the element
            }
            return arr;
        };
        // get scroll top value
        _get.scrollTop = function(elem) {
            return (elem && typeof elem.scrollTop === 'number') ? elem.scrollTop : window.pageYOffset || 0;
        };
        // get scroll left value
        _get.scrollLeft = function(elem) {
            return (elem && typeof elem.scrollLeft === 'number') ? elem.scrollLeft : window.pageXOffset || 0;
        };
        // get element height
        _get.width = function(elem, outer, includeMargin) {
            return _dimension('width', elem, outer, includeMargin);
        };
        // get element width
        _get.height = function(elem, outer, includeMargin) {
            return _dimension('height', elem, outer, includeMargin);
        };

        // get element position (optionally relative to viewport)
        _get.offset = function(elem, relativeToViewport) {
            var offset = {
                top: 0,
                left: 0
            };
            if (elem && elem.getBoundingClientRect) { // check if available
                var rect = elem.getBoundingClientRect();
                offset.top = rect.top;
                offset.left = rect.left;
                if (!relativeToViewport) { // clientRect is by default relative to viewport...
                    offset.top += _get.scrollTop();
                    offset.left += _get.scrollLeft();
                }
            }
            return offset;
        };

        /**
         * ------------------------------
         * DOM Element manipulation
         * ------------------------------
         */

        U.addClass = function(elem, classname) {
            if (classname) {
                if (elem.classList) elem.classList.add(classname);
                else elem.className += ' ' + classname;
            }
        };
        U.removeClass = function(elem, classname) {
            if (classname) {
                if (elem.classList) elem.classList.remove(classname);
                else elem.className = elem.className.replace(new RegExp('(^|\\b)' + classname.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
            }
        };
        // if options is string -> returns css value
        // if options is array -> returns object with css value pairs
        // if options is object -> set new css values
        U.css = function(elem, options) {
            if (_type.String(options)) {
                return _getComputedStyle(elem)[_camelCase(options)];
            } else if (_type.Array(options)) {
                var
                    obj = {},
                    style = _getComputedStyle(elem);
                options.forEach(function(option, key) {
                    obj[option] = style[_camelCase(option)];
                });
                return obj;
            } else {
                for (var option in options) {
                    var val = options[option];
                    if (val == parseFloat(val)) { // assume pixel for seemingly numerical values
                        val += 'px';
                    }
                    elem.style[_camelCase(option)] = val;
                }
            }
        };

        return U;
    }(window || {}));

    ScrollMagic.Scene.prototype.addIndicators = function() {
        ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling addIndicators() due to missing Plugin \'debug.addIndicators\'. Please make sure to include plugins/debug.addIndicators.js');
        return this;
    }
    ScrollMagic.Scene.prototype.removeIndicators = function() {
        ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeIndicators() due to missing Plugin \'debug.addIndicators\'. Please make sure to include plugins/debug.addIndicators.js');
        return this;
    }
    ScrollMagic.Scene.prototype.setTween = function() {
        ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling setTween() due to missing Plugin \'animation.gsap\'. Please make sure to include plugins/animation.gsap.js');
        return this;
    }
    ScrollMagic.Scene.prototype.removeTween = function() {
        ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeTween() due to missing Plugin \'animation.gsap\'. Please make sure to include plugins/animation.gsap.js');
        return this;
    }
    ScrollMagic.Scene.prototype.setVelocity = function() {
        ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling setVelocity() due to missing Plugin \'animation.velocity\'. Please make sure to include plugins/animation.velocity.js');
        return this;
    }
    ScrollMagic.Scene.prototype.removeVelocity = function() {
        ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeVelocity() due to missing Plugin \'animation.velocity\'. Please make sure to include plugins/animation.velocity.js');
        return this;
    }

    return ScrollMagic;
}));
/**
 * Swiper 4.3.5
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * http://www.idangero.us/swiper/
 *
 * Copyright 2014-2018 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: July 31, 2018
 */

(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
        (global.Swiper = factory());
}(this, (function() {
    'use strict';

    /**
     * SSR Window 1.0.1
     * Better handling for window object in SSR environment
     * https://github.com/nolimits4web/ssr-window
     *
     * Copyright 2018, Vladimir Kharlampidi
     *
     * Licensed under MIT
     *
     * Released on: July 18, 2018
     */
    var doc = (typeof document === 'undefined') ? {
        body: {},
        addEventListener: function addEventListener() {},
        removeEventListener: function removeEventListener() {},
        activeElement: {
            blur: function blur() {},
            nodeName: '',
        },
        querySelector: function querySelector() {
            return null;
        },
        querySelectorAll: function querySelectorAll() {
            return [];
        },
        getElementById: function getElementById() {
            return null;
        },
        createEvent: function createEvent() {
            return {
                initEvent: function initEvent() {},
            };
        },
        createElement: function createElement() {
            return {
                children: [],
                childNodes: [],
                style: {},
                setAttribute: function setAttribute() {},
                getElementsByTagName: function getElementsByTagName() {
                    return [];
                },
            };
        },
        location: {
            hash: ''
        },
    } : document; // eslint-disable-line

    var win = (typeof window === 'undefined') ? {
        document: doc,
        navigator: {
            userAgent: '',
        },
        location: {},
        history: {},
        CustomEvent: function CustomEvent() {
            return this;
        },
        addEventListener: function addEventListener() {},
        removeEventListener: function removeEventListener() {},
        getComputedStyle: function getComputedStyle() {
            return {
                getPropertyValue: function getPropertyValue() {
                    return '';
                },
            };
        },
        Image: function Image() {},
        Date: function Date() {},
        screen: {},
        setTimeout: function setTimeout() {},
        clearTimeout: function clearTimeout() {},
    } : window; // eslint-disable-line

    /**
     * Dom7 2.0.7
     * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
     * http://framework7.io/docs/dom.html
     *
     * Copyright 2018, Vladimir Kharlampidi
     * The iDangero.us
     * http://www.idangero.us/
     *
     * Licensed under MIT
     *
     * Released on: June 14, 2018
     */

    var Dom7 = function Dom7(arr) {
        var self = this;
        // Create array-like object
        for (var i = 0; i < arr.length; i += 1) {
            self[i] = arr[i];
        }
        self.length = arr.length;
        // Return collection with methods
        return this;
    };

    function $(selector, context) {
        var arr = [];
        var i = 0;
        if (selector && !context) {
            if (selector instanceof Dom7) {
                return selector;
            }
        }
        if (selector) {
            // String
            if (typeof selector === 'string') {
                var els;
                var tempParent;
                var html = selector.trim();
                if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
                    var toCreate = 'div';
                    if (html.indexOf('<li') === 0) {
                        toCreate = 'ul';
                    }
                    if (html.indexOf('<tr') === 0) {
                        toCreate = 'tbody';
                    }
                    if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) {
                        toCreate = 'tr';
                    }
                    if (html.indexOf('<tbody') === 0) {
                        toCreate = 'table';
                    }
                    if (html.indexOf('<option') === 0) {
                        toCreate = 'select';
                    }
                    tempParent = doc.createElement(toCreate);
                    tempParent.innerHTML = html;
                    for (i = 0; i < tempParent.childNodes.length; i += 1) {
                        arr.push(tempParent.childNodes[i]);
                    }
                } else {
                    if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {
                        // Pure ID selector
                        els = [doc.getElementById(selector.trim().split('#')[1])];
                    } else {
                        // Other selectors
                        els = (context || doc).querySelectorAll(selector.trim());
                    }
                    for (i = 0; i < els.length; i += 1) {
                        if (els[i]) {
                            arr.push(els[i]);
                        }
                    }
                }
            } else if (selector.nodeType || selector === win || selector === doc) {
                // Node/element
                arr.push(selector);
            } else if (selector.length > 0 && selector[0].nodeType) {
                // Array of elements or instance of Dom
                for (i = 0; i < selector.length; i += 1) {
                    arr.push(selector[i]);
                }
            }
        }
        return new Dom7(arr);
    }

    $.fn = Dom7.prototype;
    $.Class = Dom7;
    $.Dom7 = Dom7;

    function unique(arr) {
        var uniqueArray = [];
        for (var i = 0; i < arr.length; i += 1) {
            if (uniqueArray.indexOf(arr[i]) === -1) {
                uniqueArray.push(arr[i]);
            }
        }
        return uniqueArray;
    }

    // Classes and attributes
    function addClass(className) {
        var this$1 = this;

        if (typeof className === 'undefined') {
            return this;
        }
        var classes = className.split(' ');
        for (var i = 0; i < classes.length; i += 1) {
            for (var j = 0; j < this.length; j += 1) {
                if (typeof this$1[j] !== 'undefined' && typeof this$1[j].classList !== 'undefined') {
                    this$1[j].classList.add(classes[i]);
                }
            }
        }
        return this;
    }

    function removeClass(className) {
        var this$1 = this;

        var classes = className.split(' ');
        for (var i = 0; i < classes.length; i += 1) {
            for (var j = 0; j < this.length; j += 1) {
                if (typeof this$1[j] !== 'undefined' && typeof this$1[j].classList !== 'undefined') {
                    this$1[j].classList.remove(classes[i]);
                }
            }
        }
        return this;
    }

    function hasClass(className) {
        if (!this[0]) {
            return false;
        }
        return this[0].classList.contains(className);
    }

    function toggleClass(className) {
        var this$1 = this;

        var classes = className.split(' ');
        for (var i = 0; i < classes.length; i += 1) {
            for (var j = 0; j < this.length; j += 1) {
                if (typeof this$1[j] !== 'undefined' && typeof this$1[j].classList !== 'undefined') {
                    this$1[j].classList.toggle(classes[i]);
                }
            }
        }
        return this;
    }

    function attr(attrs, value) {
        var arguments$1 = arguments;
        var this$1 = this;

        if (arguments.length === 1 && typeof attrs === 'string') {
            // Get attr
            if (this[0]) {
                return this[0].getAttribute(attrs);
            }
            return undefined;
        }

        // Set attrs
        for (var i = 0; i < this.length; i += 1) {
            if (arguments$1.length === 2) {
                // String
                this$1[i].setAttribute(attrs, value);
            } else {
                // Object
                // eslint-disable-next-line
                for (var attrName in attrs) {
                    this$1[i][attrName] = attrs[attrName];
                    this$1[i].setAttribute(attrName, attrs[attrName]);
                }
            }
        }
        return this;
    }
    // eslint-disable-next-line
    function removeAttr(attr) {
        var this$1 = this;

        for (var i = 0; i < this.length; i += 1) {
            this$1[i].removeAttribute(attr);
        }
        return this;
    }

    function data(key, value) {
        var this$1 = this;

        var el;
        if (typeof value === 'undefined') {
            el = this[0];
            // Get value
            if (el) {
                if (el.dom7ElementDataStorage && (key in el.dom7ElementDataStorage)) {
                    return el.dom7ElementDataStorage[key];
                }

                var dataKey = el.getAttribute(("data-" + key));
                if (dataKey) {
                    return dataKey;
                }
                return undefined;
            }
            return undefined;
        }

        // Set value
        for (var i = 0; i < this.length; i += 1) {
            el = this$1[i];
            if (!el.dom7ElementDataStorage) {
                el.dom7ElementDataStorage = {};
            }
            el.dom7ElementDataStorage[key] = value;
        }
        return this;
    }
    // Transforms
    // eslint-disable-next-line
    function transform(transform) {
        var this$1 = this;

        for (var i = 0; i < this.length; i += 1) {
            var elStyle = this$1[i].style;
            elStyle.webkitTransform = transform;
            elStyle.transform = transform;
        }
        return this;
    }

    function transition(duration) {
        var this$1 = this;

        if (typeof duration !== 'string') {
            duration = duration + "ms"; // eslint-disable-line
        }
        for (var i = 0; i < this.length; i += 1) {
            var elStyle = this$1[i].style;
            elStyle.webkitTransitionDuration = duration;
            elStyle.transitionDuration = duration;
        }
        return this;
    }
    // Events
    function on() {
        var this$1 = this;
        var assign;

        var args = [],
            len = arguments.length;
        while (len--) args[len] = arguments[len];
        var eventType = args[0];
        var targetSelector = args[1];
        var listener = args[2];
        var capture = args[3];
        if (typeof args[1] === 'function') {
            (assign = args, eventType = assign[0], listener = assign[1], capture = assign[2]);
            targetSelector = undefined;
        }
        if (!capture) {
            capture = false;
        }

        function handleLiveEvent(e) {
            var target = e.target;
            if (!target) {
                return;
            }
            var eventData = e.target.dom7EventData || [];
            if (eventData.indexOf(e) < 0) {
                eventData.unshift(e);
            }
            if ($(target).is(targetSelector)) {
                listener.apply(target, eventData);
            } else {
                var parents = $(target).parents(); // eslint-disable-line
                for (var k = 0; k < parents.length; k += 1) {
                    if ($(parents[k]).is(targetSelector)) {
                        listener.apply(parents[k], eventData);
                    }
                }
            }
        }

        function handleEvent(e) {
            var eventData = e && e.target ? e.target.dom7EventData || [] : [];
            if (eventData.indexOf(e) < 0) {
                eventData.unshift(e);
            }
            listener.apply(this, eventData);
        }
        var events = eventType.split(' ');
        var j;
        for (var i = 0; i < this.length; i += 1) {
            var el = this$1[i];
            if (!targetSelector) {
                for (j = 0; j < events.length; j += 1) {
                    var event = events[j];
                    if (!el.dom7Listeners) {
                        el.dom7Listeners = {};
                    }
                    if (!el.dom7Listeners[event]) {
                        el.dom7Listeners[event] = [];
                    }
                    el.dom7Listeners[event].push({
                        listener: listener,
                        proxyListener: handleEvent,
                    });
                    el.addEventListener(event, handleEvent, capture);
                }
            } else {
                // Live events
                for (j = 0; j < events.length; j += 1) {
                    var event$1 = events[j];
                    if (!el.dom7LiveListeners) {
                        el.dom7LiveListeners = {};
                    }
                    if (!el.dom7LiveListeners[event$1]) {
                        el.dom7LiveListeners[event$1] = [];
                    }
                    el.dom7LiveListeners[event$1].push({
                        listener: listener,
                        proxyListener: handleLiveEvent,
                    });
                    el.addEventListener(event$1, handleLiveEvent, capture);
                }
            }
        }
        return this;
    }

    function off() {
        var this$1 = this;
        var assign;

        var args = [],
            len = arguments.length;
        while (len--) args[len] = arguments[len];
        var eventType = args[0];
        var targetSelector = args[1];
        var listener = args[2];
        var capture = args[3];
        if (typeof args[1] === 'function') {
            (assign = args, eventType = assign[0], listener = assign[1], capture = assign[2]);
            targetSelector = undefined;
        }
        if (!capture) {
            capture = false;
        }

        var events = eventType.split(' ');
        for (var i = 0; i < events.length; i += 1) {
            var event = events[i];
            for (var j = 0; j < this.length; j += 1) {
                var el = this$1[j];
                var handlers = (void 0);
                if (!targetSelector && el.dom7Listeners) {
                    handlers = el.dom7Listeners[event];
                } else if (targetSelector && el.dom7LiveListeners) {
                    handlers = el.dom7LiveListeners[event];
                }
                if (handlers && handlers.length) {
                    for (var k = handlers.length - 1; k >= 0; k -= 1) {
                        var handler = handlers[k];
                        if (listener && handler.listener === listener) {
                            el.removeEventListener(event, handler.proxyListener, capture);
                            handlers.splice(k, 1);
                        } else if (!listener) {
                            el.removeEventListener(event, handler.proxyListener, capture);
                            handlers.splice(k, 1);
                        }
                    }
                }
            }
        }
        return this;
    }

    function trigger() {
        var this$1 = this;
        var args = [],
            len = arguments.length;
        while (len--) args[len] = arguments[len];

        var events = args[0].split(' ');
        var eventData = args[1];
        for (var i = 0; i < events.length; i += 1) {
            var event = events[i];
            for (var j = 0; j < this.length; j += 1) {
                var el = this$1[j];
                var evt = (void 0);
                try {
                    evt = new win.CustomEvent(event, {
                        detail: eventData,
                        bubbles: true,
                        cancelable: true,
                    });
                } catch (e) {
                    evt = doc.createEvent('Event');
                    evt.initEvent(event, true, true);
                    evt.detail = eventData;
                }
                // eslint-disable-next-line
                el.dom7EventData = args.filter(function(data, dataIndex) {
                    return dataIndex > 0;
                });
                el.dispatchEvent(evt);
                el.dom7EventData = [];
                delete el.dom7EventData;
            }
        }
        return this;
    }

    function transitionEnd(callback) {
        var events = ['webkitTransitionEnd', 'transitionend'];
        var dom = this;
        var i;

        function fireCallBack(e) {
            /* jshint validthis:true */
            if (e.target !== this) {
                return;
            }
            callback.call(this, e);
            for (i = 0; i < events.length; i += 1) {
                dom.off(events[i], fireCallBack);
            }
        }
        if (callback) {
            for (i = 0; i < events.length; i += 1) {
                dom.on(events[i], fireCallBack);
            }
        }
        return this;
    }

    function outerWidth(includeMargins) {
        if (this.length > 0) {
            if (includeMargins) {
                // eslint-disable-next-line
                var styles = this.styles();
                return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));
            }
            return this[0].offsetWidth;
        }
        return null;
    }

    function outerHeight(includeMargins) {
        if (this.length > 0) {
            if (includeMargins) {
                // eslint-disable-next-line
                var styles = this.styles();
                return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));
            }
            return this[0].offsetHeight;
        }
        return null;
    }

    function offset() {
        if (this.length > 0) {
            var el = this[0];
            var box = el.getBoundingClientRect();
            var body = doc.body;
            var clientTop = el.clientTop || body.clientTop || 0;
            var clientLeft = el.clientLeft || body.clientLeft || 0;
            var scrollTop = el === win ? win.scrollY : el.scrollTop;
            var scrollLeft = el === win ? win.scrollX : el.scrollLeft;
            return {
                top: (box.top + scrollTop) - clientTop,
                left: (box.left + scrollLeft) - clientLeft,
            };
        }

        return null;
    }

    function styles() {
        if (this[0]) {
            return win.getComputedStyle(this[0], null);
        }
        return {};
    }

    function css(props, value) {
        var this$1 = this;

        var i;
        if (arguments.length === 1) {
            if (typeof props === 'string') {
                if (this[0]) {
                    return win.getComputedStyle(this[0], null).getPropertyValue(props);
                }
            } else {
                for (i = 0; i < this.length; i += 1) {
                    // eslint-disable-next-line
                    for (var prop in props) {
                        this$1[i].style[prop] = props[prop];
                    }
                }
                return this;
            }
        }
        if (arguments.length === 2 && typeof props === 'string') {
            for (i = 0; i < this.length; i += 1) {
                this$1[i].style[props] = value;
            }
            return this;
        }
        return this;
    }
    // Iterate over the collection passing elements to `callback`
    function each(callback) {
        var this$1 = this;

        // Don't bother continuing without a callback
        if (!callback) {
            return this;
        }
        // Iterate over the current collection
        for (var i = 0; i < this.length; i += 1) {
            // If the callback returns false
            if (callback.call(this$1[i], i, this$1[i]) === false) {
                // End the loop early
                return this$1;
            }
        }
        // Return `this` to allow chained DOM operations
        return this;
    }
    // eslint-disable-next-line
    function html(html) {
        var this$1 = this;

        if (typeof html === 'undefined') {
            return this[0] ? this[0].innerHTML : undefined;
        }

        for (var i = 0; i < this.length; i += 1) {
            this$1[i].innerHTML = html;
        }
        return this;
    }
    // eslint-disable-next-line
    function text(text) {
        var this$1 = this;

        if (typeof text === 'undefined') {
            if (this[0]) {
                return this[0].textContent.trim();
            }
            return null;
        }

        for (var i = 0; i < this.length; i += 1) {
            this$1[i].textContent = text;
        }
        return this;
    }

    function is(selector) {
        var el = this[0];
        var compareWith;
        var i;
        if (!el || typeof selector === 'undefined') {
            return false;
        }
        if (typeof selector === 'string') {
            if (el.matches) {
                return el.matches(selector);
            } else if (el.webkitMatchesSelector) {
                return el.webkitMatchesSelector(selector);
            } else if (el.msMatchesSelector) {
                return el.msMatchesSelector(selector);
            }

            compareWith = $(selector);
            for (i = 0; i < compareWith.length; i += 1) {
                if (compareWith[i] === el) {
                    return true;
                }
            }
            return false;
        } else if (selector === doc) {
            return el === doc;
        } else if (selector === win) {
            return el === win;
        }

        if (selector.nodeType || selector instanceof Dom7) {
            compareWith = selector.nodeType ? [selector] : selector;
            for (i = 0; i < compareWith.length; i += 1) {
                if (compareWith[i] === el) {
                    return true;
                }
            }
            return false;
        }
        return false;
    }

    function index() {
        var child = this[0];
        var i;
        if (child) {
            i = 0;
            // eslint-disable-next-line
            while ((child = child.previousSibling) !== null) {
                if (child.nodeType === 1) {
                    i += 1;
                }
            }
            return i;
        }
        return undefined;
    }
    // eslint-disable-next-line
    function eq(index) {
        if (typeof index === 'undefined') {
            return this;
        }
        var length = this.length;
        var returnIndex;
        if (index > length - 1) {
            return new Dom7([]);
        }
        if (index < 0) {
            returnIndex = length + index;
            if (returnIndex < 0) {
                return new Dom7([]);
            }
            return new Dom7([this[returnIndex]]);
        }
        return new Dom7([this[index]]);
    }

    function append() {
        var this$1 = this;
        var args = [],
            len = arguments.length;
        while (len--) args[len] = arguments[len];

        var newChild;

        for (var k = 0; k < args.length; k += 1) {
            newChild = args[k];
            for (var i = 0; i < this.length; i += 1) {
                if (typeof newChild === 'string') {
                    var tempDiv = doc.createElement('div');
                    tempDiv.innerHTML = newChild;
                    while (tempDiv.firstChild) {
                        this$1[i].appendChild(tempDiv.firstChild);
                    }
                } else if (newChild instanceof Dom7) {
                    for (var j = 0; j < newChild.length; j += 1) {
                        this$1[i].appendChild(newChild[j]);
                    }
                } else {
                    this$1[i].appendChild(newChild);
                }
            }
        }

        return this;
    }

    function prepend(newChild) {
        var this$1 = this;

        var i;
        var j;
        for (i = 0; i < this.length; i += 1) {
            if (typeof newChild === 'string') {
                var tempDiv = doc.createElement('div');
                tempDiv.innerHTML = newChild;
                for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
                    this$1[i].insertBefore(tempDiv.childNodes[j], this$1[i].childNodes[0]);
                }
            } else if (newChild instanceof Dom7) {
                for (j = 0; j < newChild.length; j += 1) {
                    this$1[i].insertBefore(newChild[j], this$1[i].childNodes[0]);
                }
            } else {
                this$1[i].insertBefore(newChild, this$1[i].childNodes[0]);
            }
        }
        return this;
    }

    function next(selector) {
        if (this.length > 0) {
            if (selector) {
                if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
                    return new Dom7([this[0].nextElementSibling]);
                }
                return new Dom7([]);
            }

            if (this[0].nextElementSibling) {
                return new Dom7([this[0].nextElementSibling]);
            }
            return new Dom7([]);
        }
        return new Dom7([]);
    }

    function nextAll(selector) {
        var nextEls = [];
        var el = this[0];
        if (!el) {
            return new Dom7([]);
        }
        while (el.nextElementSibling) {
            var next = el.nextElementSibling; // eslint-disable-line
            if (selector) {
                if ($(next).is(selector)) {
                    nextEls.push(next);
                }
            } else {
                nextEls.push(next);
            }
            el = next;
        }
        return new Dom7(nextEls);
    }

    function prev(selector) {
        if (this.length > 0) {
            var el = this[0];
            if (selector) {
                if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
                    return new Dom7([el.previousElementSibling]);
                }
                return new Dom7([]);
            }

            if (el.previousElementSibling) {
                return new Dom7([el.previousElementSibling]);
            }
            return new Dom7([]);
        }
        return new Dom7([]);
    }

    function prevAll(selector) {
        var prevEls = [];
        var el = this[0];
        if (!el) {
            return new Dom7([]);
        }
        while (el.previousElementSibling) {
            var prev = el.previousElementSibling; // eslint-disable-line
            if (selector) {
                if ($(prev).is(selector)) {
                    prevEls.push(prev);
                }
            } else {
                prevEls.push(prev);
            }
            el = prev;
        }
        return new Dom7(prevEls);
    }

    function parent(selector) {
        var this$1 = this;

        var parents = []; // eslint-disable-line
        for (var i = 0; i < this.length; i += 1) {
            if (this$1[i].parentNode !== null) {
                if (selector) {
                    if ($(this$1[i].parentNode).is(selector)) {
                        parents.push(this$1[i].parentNode);
                    }
                } else {
                    parents.push(this$1[i].parentNode);
                }
            }
        }
        return $(unique(parents));
    }

    function parents(selector) {
        var this$1 = this;

        var parents = []; // eslint-disable-line
        for (var i = 0; i < this.length; i += 1) {
            var parent = this$1[i].parentNode; // eslint-disable-line
            while (parent) {
                if (selector) {
                    if ($(parent).is(selector)) {
                        parents.push(parent);
                    }
                } else {
                    parents.push(parent);
                }
                parent = parent.parentNode;
            }
        }
        return $(unique(parents));
    }

    function closest(selector) {
        var closest = this; // eslint-disable-line
        if (typeof selector === 'undefined') {
            return new Dom7([]);
        }
        if (!closest.is(selector)) {
            closest = closest.parents(selector).eq(0);
        }
        return closest;
    }

    function find(selector) {
        var this$1 = this;

        var foundElements = [];
        for (var i = 0; i < this.length; i += 1) {
            var found = this$1[i].querySelectorAll(selector);
            for (var j = 0; j < found.length; j += 1) {
                foundElements.push(found[j]);
            }
        }
        return new Dom7(foundElements);
    }

    function children(selector) {
        var this$1 = this;

        var children = []; // eslint-disable-line
        for (var i = 0; i < this.length; i += 1) {
            var childNodes = this$1[i].childNodes;

            for (var j = 0; j < childNodes.length; j += 1) {
                if (!selector) {
                    if (childNodes[j].nodeType === 1) {
                        children.push(childNodes[j]);
                    }
                } else if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) {
                    children.push(childNodes[j]);
                }
            }
        }
        return new Dom7(unique(children));
    }

    function remove() {
        var this$1 = this;

        for (var i = 0; i < this.length; i += 1) {
            if (this$1[i].parentNode) {
                this$1[i].parentNode.removeChild(this$1[i]);
            }
        }
        return this;
    }

    function add() {
        var args = [],
            len = arguments.length;
        while (len--) args[len] = arguments[len];

        var dom = this;
        var i;
        var j;
        for (i = 0; i < args.length; i += 1) {
            var toAdd = $(args[i]);
            for (j = 0; j < toAdd.length; j += 1) {
                dom[dom.length] = toAdd[j];
                dom.length += 1;
            }
        }
        return dom;
    }

    var Methods = {
        addClass: addClass,
        removeClass: removeClass,
        hasClass: hasClass,
        toggleClass: toggleClass,
        attr: attr,
        removeAttr: removeAttr,
        data: data,
        transform: transform,
        transition: transition,
        on: on,
        off: off,
        trigger: trigger,
        transitionEnd: transitionEnd,
        outerWidth: outerWidth,
        outerHeight: outerHeight,
        offset: offset,
        css: css,
        each: each,
        html: html,
        text: text,
        is: is,
        index: index,
        eq: eq,
        append: append,
        prepend: prepend,
        next: next,
        nextAll: nextAll,
        prev: prev,
        prevAll: prevAll,
        parent: parent,
        parents: parents,
        closest: closest,
        find: find,
        children: children,
        remove: remove,
        add: add,
        styles: styles,
    };

    Object.keys(Methods).forEach(function(methodName) {
        $.fn[methodName] = Methods[methodName];
    });

    var Utils = {
        deleteProps: function deleteProps(obj) {
            var object = obj;
            Object.keys(object).forEach(function(key) {
                try {
                    object[key] = null;
                } catch (e) {
                    // no getter for object
                }
                try {
                    delete object[key];
                } catch (e) {
                    // something got wrong
                }
            });
        },
        nextTick: function nextTick(callback, delay) {
            if (delay === void 0) delay = 0;

            return setTimeout(callback, delay);
        },
        now: function now() {
            return Date.now();
        },
        getTranslate: function getTranslate(el, axis) {
            if (axis === void 0) axis = 'x';

            var matrix;
            var curTransform;
            var transformMatrix;

            var curStyle = win.getComputedStyle(el, null);

            if (win.WebKitCSSMatrix) {
                curTransform = curStyle.transform || curStyle.webkitTransform;
                if (curTransform.split(',').length > 6) {
                    curTransform = curTransform.split(', ').map(function(a) {
                        return a.replace(',', '.');
                    }).join(', ');
                }
                // Some old versions of Webkit choke when 'none' is passed; pass
                // empty string instead in this case
                transformMatrix = new win.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
            } else {
                transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
                matrix = transformMatrix.toString().split(',');
            }

            if (axis === 'x') {
                // Latest Chrome and webkits Fix
                if (win.WebKitCSSMatrix) {
                    curTransform = transformMatrix.m41;
                }
                // Crazy IE10 Matrix
                else if (matrix.length === 16) {
                    curTransform = parseFloat(matrix[12]);
                }
                // Normal Browsers
                else {
                    curTransform = parseFloat(matrix[4]);
                }
            }
            if (axis === 'y') {
                // Latest Chrome and webkits Fix
                if (win.WebKitCSSMatrix) {
                    curTransform = transformMatrix.m42;
                }
                // Crazy IE10 Matrix
                else if (matrix.length === 16) {
                    curTransform = parseFloat(matrix[13]);
                }
                // Normal Browsers
                else {
                    curTransform = parseFloat(matrix[5]);
                }
            }
            return curTransform || 0;
        },
        parseUrlQuery: function parseUrlQuery(url) {
            var query = {};
            var urlToParse = url || win.location.href;
            var i;
            var params;
            var param;
            var length;
            if (typeof urlToParse === 'string' && urlToParse.length) {
                urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\S*\?/, '') : '';
                params = urlToParse.split('&').filter(function(paramsPart) {
                    return paramsPart !== '';
                });
                length = params.length;

                for (i = 0; i < length; i += 1) {
                    param = params[i].replace(/#\S+/g, '').split('=');
                    query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param[1]) || '';
                }
            }
            return query;
        },
        isObject: function isObject(o) {
            return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;
        },
        extend: function extend() {
            var args = [],
                len$1 = arguments.length;
            while (len$1--) args[len$1] = arguments[len$1];

            var to = Object(args[0]);
            for (var i = 1; i < args.length; i += 1) {
                var nextSource = args[i];
                if (nextSource !== undefined && nextSource !== null) {
                    var keysArray = Object.keys(Object(nextSource));
                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
                        var nextKey = keysArray[nextIndex];
                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                        if (desc !== undefined && desc.enumerable) {
                            if (Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
                                Utils.extend(to[nextKey], nextSource[nextKey]);
                            } else if (!Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
                                to[nextKey] = {};
                                Utils.extend(to[nextKey], nextSource[nextKey]);
                            } else {
                                to[nextKey] = nextSource[nextKey];
                            }
                        }
                    }
                }
            }
            return to;
        },
    };

    var Support = (function Support() {
        var testDiv = doc.createElement('div');
        return {
            touch: (win.Modernizr && win.Modernizr.touch === true) || (function checkTouch() {
                return !!(('ontouchstart' in win) || (win.DocumentTouch && doc instanceof win.DocumentTouch));
            }()),

            pointerEvents: !!(win.navigator.pointerEnabled || win.PointerEvent),
            prefixedPointerEvents: !!win.navigator.msPointerEnabled,

            transition: (function checkTransition() {
                var style = testDiv.style;
                return ('transition' in style || 'webkitTransition' in style || 'MozTransition' in style);
            }()),
            transforms3d: (win.Modernizr && win.Modernizr.csstransforms3d === true) || (function checkTransforms3d() {
                var style = testDiv.style;
                return ('webkitPerspective' in style || 'MozPerspective' in style || 'OPerspective' in style || 'MsPerspective' in style || 'perspective' in style);
            }()),

            flexbox: (function checkFlexbox() {
                var style = testDiv.style;
                var styles = ('alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient').split(' ');
                for (var i = 0; i < styles.length; i += 1) {
                    if (styles[i] in style) {
                        return true;
                    }
                }
                return false;
            }()),

            observer: (function checkObserver() {
                return ('MutationObserver' in win || 'WebkitMutationObserver' in win);
            }()),

            passiveListener: (function checkPassiveListener() {
                var supportsPassive = false;
                try {
                    var opts = Object.defineProperty({}, 'passive', {
                        // eslint-disable-next-line
                        get: function get() {
                            supportsPassive = true;
                        },
                    });
                    win.addEventListener('testPassiveListener', null, opts);
                } catch (e) {
                    // No support
                }
                return supportsPassive;
            }()),

            gestures: (function checkGestures() {
                return 'ongesturestart' in win;
            }()),
        };
    }());

    var SwiperClass = function SwiperClass(params) {
        if (params === void 0) params = {};

        var self = this;
        self.params = params;

        // Events
        self.eventsListeners = {};

        if (self.params && self.params.on) {
            Object.keys(self.params.on).forEach(function(eventName) {
                self.on(eventName, self.params.on[eventName]);
            });
        }
    };

    var staticAccessors = {
        components: {
            configurable: true
        }
    };

    SwiperClass.prototype.on = function on(events, handler, priority) {
        var self = this;
        if (typeof handler !== 'function') {
            return self;
        }
        var method = priority ? 'unshift' : 'push';
        events.split(' ').forEach(function(event) {
            if (!self.eventsListeners[event]) {
                self.eventsListeners[event] = [];
            }
            self.eventsListeners[event][method](handler);
        });
        return self;
    };

    SwiperClass.prototype.once = function once(events, handler, priority) {
        var self = this;
        if (typeof handler !== 'function') {
            return self;
        }

        function onceHandler() {
            var args = [],
                len = arguments.length;
            while (len--) args[len] = arguments[len];

            handler.apply(self, args);
            self.off(events, onceHandler);
        }
        return self.on(events, onceHandler, priority);
    };

    SwiperClass.prototype.off = function off(events, handler) {
        var self = this;
        if (!self.eventsListeners) {
            return self;
        }
        events.split(' ').forEach(function(event) {
            if (typeof handler === 'undefined') {
                self.eventsListeners[event] = [];
            } else {
                self.eventsListeners[event].forEach(function(eventHandler, index) {
                    if (eventHandler === handler) {
                        self.eventsListeners[event].splice(index, 1);
                    }
                });
            }
        });
        return self;
    };

    SwiperClass.prototype.emit = function emit() {
        var args = [],
            len = arguments.length;
        while (len--) args[len] = arguments[len];

        var self = this;
        if (!self.eventsListeners) {
            return self;
        }
        var events;
        var data;
        var context;
        if (typeof args[0] === 'string' || Array.isArray(args[0])) {
            events = args[0];
            data = args.slice(1, args.length);
            context = self;
        } else {
            events = args[0].events;
            data = args[0].data;
            context = args[0].context || self;
        }
        var eventsArray = Array.isArray(events) ? events : events.split(' ');
        eventsArray.forEach(function(event) {
            if (self.eventsListeners && self.eventsListeners[event]) {
                var handlers = [];
                self.eventsListeners[event].forEach(function(eventHandler) {
                    handlers.push(eventHandler);
                });
                handlers.forEach(function(eventHandler) {
                    eventHandler.apply(context, data);
                });
            }
        });
        return self;
    };

    SwiperClass.prototype.useModulesParams = function useModulesParams(instanceParams) {
        var instance = this;
        if (!instance.modules) {
            return;
        }
        Object.keys(instance.modules).forEach(function(moduleName) {
            var module = instance.modules[moduleName];
            // Extend params
            if (module.params) {
                Utils.extend(instanceParams, module.params);
            }
        });
    };

    SwiperClass.prototype.useModules = function useModules(modulesParams) {
        if (modulesParams === void 0) modulesParams = {};

        var instance = this;
        if (!instance.modules) {
            return;
        }
        Object.keys(instance.modules).forEach(function(moduleName) {
            var module = instance.modules[moduleName];
            var moduleParams = modulesParams[moduleName] || {};
            // Extend instance methods and props
            if (module.instance) {
                Object.keys(module.instance).forEach(function(modulePropName) {
                    var moduleProp = module.instance[modulePropName];
                    if (typeof moduleProp === 'function') {
                        instance[modulePropName] = moduleProp.bind(instance);
                    } else {
                        instance[modulePropName] = moduleProp;
                    }
                });
            }
            // Add event listeners
            if (module.on && instance.on) {
                Object.keys(module.on).forEach(function(moduleEventName) {
                    instance.on(moduleEventName, module.on[moduleEventName]);
                });
            }

            // Module create callback
            if (module.create) {
                module.create.bind(instance)(moduleParams);
            }
        });
    };

    staticAccessors.components.set = function(components) {
        var Class = this;
        if (!Class.use) {
            return;
        }
        Class.use(components);
    };

    SwiperClass.installModule = function installModule(module) {
        var params = [],
            len = arguments.length - 1;
        while (len-- > 0) params[len] = arguments[len + 1];

        var Class = this;
        if (!Class.prototype.modules) {
            Class.prototype.modules = {};
        }
        var name = module.name || (((Object.keys(Class.prototype.modules).length) + "_" + (Utils.now())));
        Class.prototype.modules[name] = module;
        // Prototype
        if (module.proto) {
            Object.keys(module.proto).forEach(function(key) {
                Class.prototype[key] = module.proto[key];
            });
        }
        // Class
        if (module.static) {
            Object.keys(module.static).forEach(function(key) {
                Class[key] = module.static[key];
            });
        }
        // Callback
        if (module.install) {
            module.install.apply(Class, params);
        }
        return Class;
    };

    SwiperClass.use = function use(module) {
        var params = [],
            len = arguments.length - 1;
        while (len-- > 0) params[len] = arguments[len + 1];

        var Class = this;
        if (Array.isArray(module)) {
            module.forEach(function(m) {
                return Class.installModule(m);
            });
            return Class;
        }
        return Class.installModule.apply(Class, [module].concat(params));
    };

    Object.defineProperties(SwiperClass, staticAccessors);

    function updateSize() {
        var swiper = this;
        var width;
        var height;
        var $el = swiper.$el;
        if (typeof swiper.params.width !== 'undefined') {
            width = swiper.params.width;
        } else {
            width = $el[0].clientWidth;
        }
        if (typeof swiper.params.height !== 'undefined') {
            height = swiper.params.height;
        } else {
            height = $el[0].clientHeight;
        }
        if ((width === 0 && swiper.isHorizontal()) || (height === 0 && swiper.isVertical())) {
            return;
        }

        // Subtract paddings
        width = width - parseInt($el.css('padding-left'), 10) - parseInt($el.css('padding-right'), 10);
        height = height - parseInt($el.css('padding-top'), 10) - parseInt($el.css('padding-bottom'), 10);

        Utils.extend(swiper, {
            width: width,
            height: height,
            size: swiper.isHorizontal() ? width : height,
        });
    }

    function updateSlides() {
        var swiper = this;
        var params = swiper.params;

        var $wrapperEl = swiper.$wrapperEl;
        var swiperSize = swiper.size;
        var rtl = swiper.rtlTranslate;
        var wrongRTL = swiper.wrongRTL;
        var isVirtual = swiper.virtual && params.virtual.enabled;
        var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
        var slides = $wrapperEl.children(("." + (swiper.params.slideClass)));
        var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
        var snapGrid = [];
        var slidesGrid = [];
        var slidesSizesGrid = [];

        var offsetBefore = params.slidesOffsetBefore;
        if (typeof offsetBefore === 'function') {
            offsetBefore = params.slidesOffsetBefore.call(swiper);
        }

        var offsetAfter = params.slidesOffsetAfter;
        if (typeof offsetAfter === 'function') {
            offsetAfter = params.slidesOffsetAfter.call(swiper);
        }

        var previousSnapGridLength = swiper.snapGrid.length;
        var previousSlidesGridLength = swiper.snapGrid.length;

        var spaceBetween = params.spaceBetween;
        var slidePosition = -offsetBefore;
        var prevSlideSize = 0;
        var index = 0;
        if (typeof swiperSize === 'undefined') {
            return;
        }
        if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
            spaceBetween = (parseFloat(spaceBetween.replace('%', '')) / 100) * swiperSize;
        }

        swiper.virtualSize = -spaceBetween;

        // reset margins
        if (rtl) {
            slides.css({
                marginLeft: '',
                marginTop: ''
            });
        } else {
            slides.css({
                marginRight: '',
                marginBottom: ''
            });
        }

        var slidesNumberEvenToRows;
        if (params.slidesPerColumn > 1) {
            if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
                slidesNumberEvenToRows = slidesLength;
            } else {
                slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
            }
            if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
                slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
            }
        }

        // Calc slides
        var slideSize;
        var slidesPerColumn = params.slidesPerColumn;
        var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
        var numFullColumns = slidesPerRow - ((params.slidesPerColumn * slidesPerRow) - slidesLength);
        for (var i = 0; i < slidesLength; i += 1) {
            slideSize = 0;
            var slide = slides.eq(i);
            if (params.slidesPerColumn > 1) {
                // Set slides order
                var newSlideOrderIndex = (void 0);
                var column = (void 0);
                var row = (void 0);
                if (params.slidesPerColumnFill === 'column') {
                    column = Math.floor(i / slidesPerColumn);
                    row = i - (column * slidesPerColumn);
                    if (column > numFullColumns || (column === numFullColumns && row === slidesPerColumn - 1)) {
                        row += 1;
                        if (row >= slidesPerColumn) {
                            row = 0;
                            column += 1;
                        }
                    }
                    newSlideOrderIndex = column + ((row * slidesNumberEvenToRows) / slidesPerColumn);
                    slide
                        .css({
                            '-webkit-box-ordinal-group': newSlideOrderIndex,
                            '-moz-box-ordinal-group': newSlideOrderIndex,
                            '-ms-flex-order': newSlideOrderIndex,
                            '-webkit-order': newSlideOrderIndex,
                            order: newSlideOrderIndex,
                        });
                } else {
                    row = Math.floor(i / slidesPerRow);
                    column = i - (row * slidesPerRow);
                }
                slide
                    .css(
                        ("margin-" + (swiper.isHorizontal() ? 'top' : 'left')),
                        (row !== 0 && params.spaceBetween) && (((params.spaceBetween) + "px"))
                    )
                    .attr('data-swiper-column', column)
                    .attr('data-swiper-row', row);
            }
            if (slide.css('display') === 'none') {
                continue;
            } // eslint-disable-line

            if (params.slidesPerView === 'auto') {
                var slideStyles = win.getComputedStyle(slide[0], null);
                var currentTransform = slide[0].style.transform;
                var currentWebKitTransform = slide[0].style.webkitTransform;
                if (currentTransform) {
                    slide[0].style.transform = 'none';
                }
                if (currentWebKitTransform) {
                    slide[0].style.webkitTransform = 'none';
                }
                if (swiper.isHorizontal()) {
                    slideSize = slide[0].getBoundingClientRect().width +
                        parseFloat(slideStyles.getPropertyValue('margin-left')) +
                        parseFloat(slideStyles.getPropertyValue('margin-right'));
                } else {
                    slideSize = slide[0].getBoundingClientRect().height +
                        parseFloat(slideStyles.getPropertyValue('margin-top')) +
                        parseFloat(slideStyles.getPropertyValue('margin-bottom'));
                }
                if (currentTransform) {
                    slide[0].style.transform = currentTransform;
                }
                if (currentWebKitTransform) {
                    slide[0].style.webkitTransform = currentWebKitTransform;
                }
                if (params.roundLengths) {
                    slideSize = Math.floor(slideSize);
                }
            } else {
                slideSize = (swiperSize - ((params.slidesPerView - 1) * spaceBetween)) / params.slidesPerView;
                if (params.roundLengths) {
                    slideSize = Math.floor(slideSize);
                }

                if (slides[i]) {
                    if (swiper.isHorizontal()) {
                        slides[i].style.width = slideSize + "px";
                    } else {
                        slides[i].style.height = slideSize + "px";
                    }
                }
            }
            if (slides[i]) {
                slides[i].swiperSlideSize = slideSize;
            }
            slidesSizesGrid.push(slideSize);


            if (params.centeredSlides) {
                slidePosition = slidePosition + (slideSize / 2) + (prevSlideSize / 2) + spaceBetween;
                if (prevSlideSize === 0 && i !== 0) {
                    slidePosition = slidePosition - (swiperSize / 2) - spaceBetween;
                }
                if (i === 0) {
                    slidePosition = slidePosition - (swiperSize / 2) - spaceBetween;
                }
                if (Math.abs(slidePosition) < 1 / 1000) {
                    slidePosition = 0;
                }
                if (params.roundLengths) {
                    slidePosition = Math.floor(slidePosition);
                }
                if ((index) % params.slidesPerGroup === 0) {
                    snapGrid.push(slidePosition);
                }
                slidesGrid.push(slidePosition);
            } else {
                if (params.roundLengths) {
                    slidePosition = Math.floor(slidePosition);
                }
                if ((index) % params.slidesPerGroup === 0) {
                    snapGrid.push(slidePosition);
                }
                slidesGrid.push(slidePosition);
                slidePosition = slidePosition + slideSize + spaceBetween;
            }

            swiper.virtualSize += slideSize + spaceBetween;

            prevSlideSize = slideSize;

            index += 1;
        }
        swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
        var newSlidesGrid;

        if (
            rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
            $wrapperEl.css({
                width: ((swiper.virtualSize + params.spaceBetween) + "px")
            });
        }
        if (!Support.flexbox || params.setWrapperSize) {
            if (swiper.isHorizontal()) {
                $wrapperEl.css({
                    width: ((swiper.virtualSize + params.spaceBetween) + "px")
                });
            } else {
                $wrapperEl.css({
                    height: ((swiper.virtualSize + params.spaceBetween) + "px")
                });
            }
        }

        if (params.slidesPerColumn > 1) {
            swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
            swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
            if (swiper.isHorizontal()) {
                $wrapperEl.css({
                    width: ((swiper.virtualSize + params.spaceBetween) + "px")
                });
            } else {
                $wrapperEl.css({
                    height: ((swiper.virtualSize + params.spaceBetween) + "px")
                });
            }
            if (params.centeredSlides) {
                newSlidesGrid = [];
                for (var i$1 = 0; i$1 < snapGrid.length; i$1 += 1) {
                    var slidesGridItem = snapGrid[i$1];
                    if (params.roundLengths) {
                        slidesGridItem = Math.floor(slidesGridItem);
                    }
                    if (snapGrid[i$1] < swiper.virtualSize + snapGrid[0]) {
                        newSlidesGrid.push(slidesGridItem);
                    }
                }
                snapGrid = newSlidesGrid;
            }
        }

        // Remove last grid elements depending on width
        if (!params.centeredSlides) {
            newSlidesGrid = [];
            for (var i$2 = 0; i$2 < snapGrid.length; i$2 += 1) {
                var slidesGridItem$1 = snapGrid[i$2];
                if (params.roundLengths) {
                    slidesGridItem$1 = Math.floor(slidesGridItem$1);
                }
                if (snapGrid[i$2] <= swiper.virtualSize - swiperSize) {
                    newSlidesGrid.push(slidesGridItem$1);
                }
            }
            snapGrid = newSlidesGrid;
            if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
                snapGrid.push(swiper.virtualSize - swiperSize);
            }
        }
        if (snapGrid.length === 0) {
            snapGrid = [0];
        }

        if (params.spaceBetween !== 0) {
            if (swiper.isHorizontal()) {
                if (rtl) {
                    slides.css({
                        marginLeft: (spaceBetween + "px")
                    });
                } else {
                    slides.css({
                        marginRight: (spaceBetween + "px")
                    });
                }
            } else {
                slides.css({
                    marginBottom: (spaceBetween + "px")
                });
            }
        }

        Utils.extend(swiper, {
            slides: slides,
            snapGrid: snapGrid,
            slidesGrid: slidesGrid,
            slidesSizesGrid: slidesSizesGrid,
        });

        if (slidesLength !== previousSlidesLength) {
            swiper.emit('slidesLengthChange');
        }
        if (snapGrid.length !== previousSnapGridLength) {
            if (swiper.params.watchOverflow) {
                swiper.checkOverflow();
            }
            swiper.emit('snapGridLengthChange');
        }
        if (slidesGrid.length !== previousSlidesGridLength) {
            swiper.emit('slidesGridLengthChange');
        }

        if (params.watchSlidesProgress || params.watchSlidesVisibility) {
            swiper.updateSlidesOffset();
        }
    }

    function updateAutoHeight(speed) {
        var swiper = this;
        var activeSlides = [];
        var newHeight = 0;
        var i;
        if (typeof speed === 'number') {
            swiper.setTransition(speed);
        } else if (speed === true) {
            swiper.setTransition(swiper.params.speed);
        }
        // Find slides currently in view
        if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
            for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
                var index = swiper.activeIndex + i;
                if (index > swiper.slides.length) {
                    break;
                }
                activeSlides.push(swiper.slides.eq(index)[0]);
            }
        } else {
            activeSlides.push(swiper.slides.eq(swiper.activeIndex)[0]);
        }

        // Find new height from highest slide in view
        for (i = 0; i < activeSlides.length; i += 1) {
            if (typeof activeSlides[i] !== 'undefined') {
                var height = activeSlides[i].offsetHeight;
                newHeight = height > newHeight ? height : newHeight;
            }
        }

        // Update Height
        if (newHeight) {
            swiper.$wrapperEl.css('height', (newHeight + "px"));
        }
    }

    function updateSlidesOffset() {
        var swiper = this;
        var slides = swiper.slides;
        for (var i = 0; i < slides.length; i += 1) {
            slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
        }
    }

    function updateSlidesProgress(translate) {
        if (translate === void 0) translate = (this && this.translate) || 0;

        var swiper = this;
        var params = swiper.params;

        var slides = swiper.slides;
        var rtl = swiper.rtlTranslate;

        if (slides.length === 0) {
            return;
        }
        if (typeof slides[0].swiperSlideOffset === 'undefined') {
            swiper.updateSlidesOffset();
        }

        var offsetCenter = -translate;
        if (rtl) {
            offsetCenter = translate;
        }

        // Visible Slides
        slides.removeClass(params.slideVisibleClass);

        for (var i = 0; i < slides.length; i += 1) {
            var slide = slides[i];
            var slideProgress = (
                (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0)) - slide.swiperSlideOffset
            ) / (slide.swiperSlideSize + params.spaceBetween);
            if (params.watchSlidesVisibility) {
                var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
                var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
                var isVisible = (slideBefore >= 0 && slideBefore < swiper.size) ||
                    (slideAfter > 0 && slideAfter <= swiper.size) ||
                    (slideBefore <= 0 && slideAfter >= swiper.size);
                if (isVisible) {
                    slides.eq(i).addClass(params.slideVisibleClass);
                }
            }
            slide.progress = rtl ? -slideProgress : slideProgress;
        }
    }

    function updateProgress(translate) {
        if (translate === void 0) translate = (this && this.translate) || 0;

        var swiper = this;
        var params = swiper.params;

        var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
        var progress = swiper.progress;
        var isBeginning = swiper.isBeginning;
        var isEnd = swiper.isEnd;
        var wasBeginning = isBeginning;
        var wasEnd = isEnd;
        if (translatesDiff === 0) {
            progress = 0;
            isBeginning = true;
            isEnd = true;
        } else {
            progress = (translate - swiper.minTranslate()) / (translatesDiff);
            isBeginning = progress <= 0;
            isEnd = progress >= 1;
        }
        Utils.extend(swiper, {
            progress: progress,
            isBeginning: isBeginning,
            isEnd: isEnd,
        });

        if (params.watchSlidesProgress || params.watchSlidesVisibility) {
            swiper.updateSlidesProgress(translate);
        }

        if (isBeginning && !wasBeginning) {
            swiper.emit('reachBeginning toEdge');
        }
        if (isEnd && !wasEnd) {
            swiper.emit('reachEnd toEdge');
        }
        if ((wasBeginning && !isBeginning) || (wasEnd && !isEnd)) {
            swiper.emit('fromEdge');
        }

        swiper.emit('progress', progress);
    }

    function updateSlidesClasses() {
        var swiper = this;

        var slides = swiper.slides;
        var params = swiper.params;
        var $wrapperEl = swiper.$wrapperEl;
        var activeIndex = swiper.activeIndex;
        var realIndex = swiper.realIndex;
        var isVirtual = swiper.virtual && params.virtual.enabled;

        slides.removeClass(((params.slideActiveClass) + " " + (params.slideNextClass) + " " + (params.slidePrevClass) + " " + (params.slideDuplicateActiveClass) + " " + (params.slideDuplicateNextClass) + " " + (params.slideDuplicatePrevClass)));

        var activeSlide;
        if (isVirtual) {
            activeSlide = swiper.$wrapperEl.find(("." + (params.slideClass) + "[data-swiper-slide-index=\"" + activeIndex + "\"]"));
        } else {
            activeSlide = slides.eq(activeIndex);
        }

        // Active classes
        activeSlide.addClass(params.slideActiveClass);

        if (params.loop) {
            // Duplicate to all looped slides
            if (activeSlide.hasClass(params.slideDuplicateClass)) {
                $wrapperEl
                    .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + realIndex + "\"]"))
                    .addClass(params.slideDuplicateActiveClass);
            } else {
                $wrapperEl
                    .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]"))
                    .addClass(params.slideDuplicateActiveClass);
            }
        }
        // Next Slide
        var nextSlide = activeSlide.nextAll(("." + (params.slideClass))).eq(0).addClass(params.slideNextClass);
        if (params.loop && nextSlide.length === 0) {
            nextSlide = slides.eq(0);
            nextSlide.addClass(params.slideNextClass);
        }
        // Prev Slide
        var prevSlide = activeSlide.prevAll(("." + (params.slideClass))).eq(0).addClass(params.slidePrevClass);
        if (params.loop && prevSlide.length === 0) {
            prevSlide = slides.eq(-1);
            prevSlide.addClass(params.slidePrevClass);
        }
        if (params.loop) {
            // Duplicate to all looped slides
            if (nextSlide.hasClass(params.slideDuplicateClass)) {
                $wrapperEl
                    .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + (nextSlide.attr('data-swiper-slide-index')) + "\"]"))
                    .addClass(params.slideDuplicateNextClass);
            } else {
                $wrapperEl
                    .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + (nextSlide.attr('data-swiper-slide-index')) + "\"]"))
                    .addClass(params.slideDuplicateNextClass);
            }
            if (prevSlide.hasClass(params.slideDuplicateClass)) {
                $wrapperEl
                    .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + (prevSlide.attr('data-swiper-slide-index')) + "\"]"))
                    .addClass(params.slideDuplicatePrevClass);
            } else {
                $wrapperEl
                    .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + (prevSlide.attr('data-swiper-slide-index')) + "\"]"))
                    .addClass(params.slideDuplicatePrevClass);
            }
        }
    }

    function updateActiveIndex(newActiveIndex) {
        var swiper = this;
        var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
        var slidesGrid = swiper.slidesGrid;
        var snapGrid = swiper.snapGrid;
        var params = swiper.params;
        var previousIndex = swiper.activeIndex;
        var previousRealIndex = swiper.realIndex;
        var previousSnapIndex = swiper.snapIndex;
        var activeIndex = newActiveIndex;
        var snapIndex;
        if (typeof activeIndex === 'undefined') {
            for (var i = 0; i < slidesGrid.length; i += 1) {
                if (typeof slidesGrid[i + 1] !== 'undefined') {
                    if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - ((slidesGrid[i + 1] - slidesGrid[i]) / 2)) {
                        activeIndex = i;
                    } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
                        activeIndex = i + 1;
                    }
                } else if (translate >= slidesGrid[i]) {
                    activeIndex = i;
                }
            }
            // Normalize slideIndex
            if (params.normalizeSlideIndex) {
                if (activeIndex < 0 || typeof activeIndex === 'undefined') {
                    activeIndex = 0;
                }
            }
        }
        if (snapGrid.indexOf(translate) >= 0) {
            snapIndex = snapGrid.indexOf(translate);
        } else {
            snapIndex = Math.floor(activeIndex / params.slidesPerGroup);
        }
        if (snapIndex >= snapGrid.length) {
            snapIndex = snapGrid.length - 1;
        }
        if (activeIndex === previousIndex) {
            if (snapIndex !== previousSnapIndex) {
                swiper.snapIndex = snapIndex;
                swiper.emit('snapIndexChange');
            }
            return;
        }

        // Get real index
        var realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);

        Utils.extend(swiper, {
            snapIndex: snapIndex,
            realIndex: realIndex,
            previousIndex: previousIndex,
            activeIndex: activeIndex,
        });
        swiper.emit('activeIndexChange');
        swiper.emit('snapIndexChange');
        if (previousRealIndex !== realIndex) {
            swiper.emit('realIndexChange');
        }
        swiper.emit('slideChange');
    }

    function updateClickedSlide(e) {
        var swiper = this;
        var params = swiper.params;
        var slide = $(e.target).closest(("." + (params.slideClass)))[0];
        var slideFound = false;
        if (slide) {
            for (var i = 0; i < swiper.slides.length; i += 1) {
                if (swiper.slides[i] === slide) {
                    slideFound = true;
                }
            }
        }

        if (slide && slideFound) {
            swiper.clickedSlide = slide;
            if (swiper.virtual && swiper.params.virtual.enabled) {
                swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);
            } else {
                swiper.clickedIndex = $(slide).index();
            }
        } else {
            swiper.clickedSlide = undefined;
            swiper.clickedIndex = undefined;
            return;
        }
        if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
            swiper.slideToClickedSlide();
        }
    }

    var update = {
        updateSize: updateSize,
        updateSlides: updateSlides,
        updateAutoHeight: updateAutoHeight,
        updateSlidesOffset: updateSlidesOffset,
        updateSlidesProgress: updateSlidesProgress,
        updateProgress: updateProgress,
        updateSlidesClasses: updateSlidesClasses,
        updateActiveIndex: updateActiveIndex,
        updateClickedSlide: updateClickedSlide,
    };

    function getTranslate(axis) {
        if (axis === void 0) axis = this.isHorizontal() ? 'x' : 'y';

        var swiper = this;

        var params = swiper.params;
        var rtl = swiper.rtlTranslate;
        var translate = swiper.translate;
        var $wrapperEl = swiper.$wrapperEl;

        if (params.virtualTranslate) {
            return rtl ? -translate : translate;
        }

        var currentTranslate = Utils.getTranslate($wrapperEl[0], axis);
        if (rtl) {
            currentTranslate = -currentTranslate;
        }

        return currentTranslate || 0;
    }

    function setTranslate(translate, byController) {
        var swiper = this;
        var rtl = swiper.rtlTranslate;
        var params = swiper.params;
        var $wrapperEl = swiper.$wrapperEl;
        var progress = swiper.progress;
        var x = 0;
        var y = 0;
        var z = 0;

        if (swiper.isHorizontal()) {
            x = rtl ? -translate : translate;
        } else {
            y = translate;
        }

        if (params.roundLengths) {
            x = Math.floor(x);
            y = Math.floor(y);
        }

        if (!params.virtualTranslate) {
            if (Support.transforms3d) {
                $wrapperEl.transform(("translate3d(" + x + "px, " + y + "px, " + z + "px)"));
            } else {
                $wrapperEl.transform(("translate(" + x + "px, " + y + "px)"));
            }
        }
        swiper.previousTranslate = swiper.translate;
        swiper.translate = swiper.isHorizontal() ? x : y;

        // Check if we need to update progress
        var newProgress;
        var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
        if (translatesDiff === 0) {
            newProgress = 0;
        } else {
            newProgress = (translate - swiper.minTranslate()) / (translatesDiff);
        }
        if (newProgress !== progress) {
            swiper.updateProgress(translate);
        }

        swiper.emit('setTranslate', swiper.translate, byController);
    }

    function minTranslate() {
        return (-this.snapGrid[0]);
    }

    function maxTranslate() {
        return (-this.snapGrid[this.snapGrid.length - 1]);
    }

    var translate = {
        getTranslate: getTranslate,
        setTranslate: setTranslate,
        minTranslate: minTranslate,
        maxTranslate: maxTranslate,
    };

    function setTransition(duration, byController) {
        var swiper = this;

        swiper.$wrapperEl.transition(duration);

        swiper.emit('setTransition', duration, byController);
    }

    function transitionStart(runCallbacks, direction) {
        if (runCallbacks === void 0) runCallbacks = true;

        var swiper = this;
        var activeIndex = swiper.activeIndex;
        var params = swiper.params;
        var previousIndex = swiper.previousIndex;
        if (params.autoHeight) {
            swiper.updateAutoHeight();
        }

        var dir = direction;
        if (!dir) {
            if (activeIndex > previousIndex) {
                dir = 'next';
            } else if (activeIndex < previousIndex) {
                dir = 'prev';
            } else {
                dir = 'reset';
            }
        }

        swiper.emit('transitionStart');

        if (runCallbacks && activeIndex !== previousIndex) {
            if (dir === 'reset') {
                swiper.emit('slideResetTransitionStart');
                return;
            }
            swiper.emit('slideChangeTransitionStart');
            if (dir === 'next') {
                swiper.emit('slideNextTransitionStart');
            } else {
                swiper.emit('slidePrevTransitionStart');
            }
        }
    }

    function transitionEnd$1(runCallbacks, direction) {
        if (runCallbacks === void 0) runCallbacks = true;

        var swiper = this;
        var activeIndex = swiper.activeIndex;
        var previousIndex = swiper.previousIndex;
        swiper.animating = false;
        swiper.setTransition(0);

        var dir = direction;
        if (!dir) {
            if (activeIndex > previousIndex) {
                dir = 'next';
            } else if (activeIndex < previousIndex) {
                dir = 'prev';
            } else {
                dir = 'reset';
            }
        }

        swiper.emit('transitionEnd');

        if (runCallbacks && activeIndex !== previousIndex) {
            if (dir === 'reset') {
                swiper.emit('slideResetTransitionEnd');
                return;
            }
            swiper.emit('slideChangeTransitionEnd');
            if (dir === 'next') {
                swiper.emit('slideNextTransitionEnd');
            } else {
                swiper.emit('slidePrevTransitionEnd');
            }
        }
    }

    var transition$1 = {
        setTransition: setTransition,
        transitionStart: transitionStart,
        transitionEnd: transitionEnd$1,
    };

    function slideTo(index, speed, runCallbacks, internal) {
        if (index === void 0) index = 0;
        if (speed === void 0) speed = this.params.speed;
        if (runCallbacks === void 0) runCallbacks = true;

        var swiper = this;
        var slideIndex = index;
        if (slideIndex < 0) {
            slideIndex = 0;
        }

        var params = swiper.params;
        var snapGrid = swiper.snapGrid;
        var slidesGrid = swiper.slidesGrid;
        var previousIndex = swiper.previousIndex;
        var activeIndex = swiper.activeIndex;
        var rtl = swiper.rtlTranslate;
        if (swiper.animating && params.preventInteractionOnTransition) {
            return false;
        }

        var snapIndex = Math.floor(slideIndex / params.slidesPerGroup);
        if (snapIndex >= snapGrid.length) {
            snapIndex = snapGrid.length - 1;
        }

        if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
            swiper.emit('beforeSlideChangeStart');
        }

        var translate = -snapGrid[snapIndex];

        // Update progress
        swiper.updateProgress(translate);

        // Normalize slideIndex
        if (params.normalizeSlideIndex) {
            for (var i = 0; i < slidesGrid.length; i += 1) {
                if (-Math.floor(translate * 100) >= Math.floor(slidesGrid[i] * 100)) {
                    slideIndex = i;
                }
            }
        }
        // Directions locks
        if (swiper.initialized && slideIndex !== activeIndex) {
            if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
                return false;
            }
            if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
                if ((activeIndex || 0) !== slideIndex) {
                    return false;
                }
            }
        }

        var direction;
        if (slideIndex > activeIndex) {
            direction = 'next';
        } else if (slideIndex < activeIndex) {
            direction = 'prev';
        } else {
            direction = 'reset';
        }


        // Update Index
        if ((rtl && -translate === swiper.translate) || (!rtl && translate === swiper.translate)) {
            swiper.updateActiveIndex(slideIndex);
            // Update Height
            if (params.autoHeight) {
                swiper.updateAutoHeight();
            }
            swiper.updateSlidesClasses();
            if (params.effect !== 'slide') {
                swiper.setTranslate(translate);
            }
            if (direction !== 'reset') {
                swiper.transitionStart(runCallbacks, direction);
                swiper.transitionEnd(runCallbacks, direction);
            }
            return false;
        }

        if (speed === 0 || !Support.transition) {
            swiper.setTransition(0);
            swiper.setTranslate(translate);
            swiper.updateActiveIndex(slideIndex);
            swiper.updateSlidesClasses();
            swiper.emit('beforeTransitionStart', speed, internal);
            swiper.transitionStart(runCallbacks, direction);
            swiper.transitionEnd(runCallbacks, direction);
        } else {
            swiper.setTransition(speed);
            swiper.setTranslate(translate);
            swiper.updateActiveIndex(slideIndex);
            swiper.updateSlidesClasses();
            swiper.emit('beforeTransitionStart', speed, internal);
            swiper.transitionStart(runCallbacks, direction);
            if (!swiper.animating) {
                swiper.animating = true;
                if (!swiper.onSlideToWrapperTransitionEnd) {
                    swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
                        if (!swiper || swiper.destroyed) {
                            return;
                        }
                        if (e.target !== this) {
                            return;
                        }
                        swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
                        swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
                        swiper.onSlideToWrapperTransitionEnd = null;
                        delete swiper.onSlideToWrapperTransitionEnd;
                        swiper.transitionEnd(runCallbacks, direction);
                    };
                }
                swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
                swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
            }
        }

        return true;
    }

    function slideToLoop(index, speed, runCallbacks, internal) {
        if (index === void 0) index = 0;
        if (speed === void 0) speed = this.params.speed;
        if (runCallbacks === void 0) runCallbacks = true;

        var swiper = this;
        var newIndex = index;
        if (swiper.params.loop) {
            newIndex += swiper.loopedSlides;
        }

        return swiper.slideTo(newIndex, speed, runCallbacks, internal);
    }

    /* eslint no-unused-vars: "off" */
    function slideNext(speed, runCallbacks, internal) {
        if (speed === void 0) speed = this.params.speed;
        if (runCallbacks === void 0) runCallbacks = true;

        var swiper = this;
        var params = swiper.params;
        var animating = swiper.animating;
        if (params.loop) {
            if (animating) {
                return false;
            }
            swiper.loopFix();
            // eslint-disable-next-line
            swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
            return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
        }
        return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
    }

    /* eslint no-unused-vars: "off" */
    function slidePrev(speed, runCallbacks, internal) {
        if (speed === void 0) speed = this.params.speed;
        if (runCallbacks === void 0) runCallbacks = true;

        var swiper = this;
        var params = swiper.params;
        var animating = swiper.animating;
        var snapGrid = swiper.snapGrid;
        var slidesGrid = swiper.slidesGrid;
        var rtlTranslate = swiper.rtlTranslate;

        if (params.loop) {
            if (animating) {
                return false;
            }
            swiper.loopFix();
            // eslint-disable-next-line
            swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
        }
        var translate = rtlTranslate ? swiper.translate : -swiper.translate;

        function normalize(val) {
            if (val < 0) {
                return -Math.floor(Math.abs(val));
            }
            return Math.floor(val);
        }
        var normalizedTranslate = normalize(translate);
        var normalizedSnapGrid = snapGrid.map(function(val) {
            return normalize(val);
        });
        var normalizedSlidesGrid = slidesGrid.map(function(val) {
            return normalize(val);
        });

        var currentSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];
        var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
        var prevIndex;
        if (typeof prevSnap !== 'undefined') {
            prevIndex = slidesGrid.indexOf(prevSnap);
            if (prevIndex < 0) {
                prevIndex = swiper.activeIndex - 1;
            }
        }
        return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
    }

    /* eslint no-unused-vars: "off" */
    function slideReset(speed, runCallbacks, internal) {
        if (speed === void 0) speed = this.params.speed;
        if (runCallbacks === void 0) runCallbacks = true;

        var swiper = this;
        return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
    }

    /* eslint no-unused-vars: "off" */
    function slideToClosest(speed, runCallbacks, internal) {
        if (speed === void 0) speed = this.params.speed;
        if (runCallbacks === void 0) runCallbacks = true;

        var swiper = this;
        var index = swiper.activeIndex;
        var snapIndex = Math.floor(index / swiper.params.slidesPerGroup);

        if (snapIndex < swiper.snapGrid.length - 1) {
            var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;

            var currentSnap = swiper.snapGrid[snapIndex];
            var nextSnap = swiper.snapGrid[snapIndex + 1];

            if ((translate - currentSnap) > (nextSnap - currentSnap) / 2) {
                index = swiper.params.slidesPerGroup;
            }
        }

        return swiper.slideTo(index, speed, runCallbacks, internal);
    }

    function slideToClickedSlide() {
        var swiper = this;
        var params = swiper.params;
        var $wrapperEl = swiper.$wrapperEl;

        var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
        var slideToIndex = swiper.clickedIndex;
        var realIndex;
        if (params.loop) {
            if (swiper.animating) {
                return;
            }
            realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);
            if (params.centeredSlides) {
                if (
                    (slideToIndex < swiper.loopedSlides - (slidesPerView / 2)) ||
                    (slideToIndex > (swiper.slides.length - swiper.loopedSlides) + (slidesPerView / 2))
                ) {
                    swiper.loopFix();
                    slideToIndex = $wrapperEl
                        .children(("." + (params.slideClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + (params.slideDuplicateClass) + ")"))
                        .eq(0)
                        .index();

                    Utils.nextTick(function() {
                        swiper.slideTo(slideToIndex);
                    });
                } else {
                    swiper.slideTo(slideToIndex);
                }
            } else if (slideToIndex > swiper.slides.length - slidesPerView) {
                swiper.loopFix();
                slideToIndex = $wrapperEl
                    .children(("." + (params.slideClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + (params.slideDuplicateClass) + ")"))
                    .eq(0)
                    .index();

                Utils.nextTick(function() {
                    swiper.slideTo(slideToIndex);
                });
            } else {
                swiper.slideTo(slideToIndex);
            }
        } else {
            swiper.slideTo(slideToIndex);
        }
    }

    var slide = {
        slideTo: slideTo,
        slideToLoop: slideToLoop,
        slideNext: slideNext,
        slidePrev: slidePrev,
        slideReset: slideReset,
        slideToClosest: slideToClosest,
        slideToClickedSlide: slideToClickedSlide,
    };

    function loopCreate() {
        var swiper = this;
        var params = swiper.params;
        var $wrapperEl = swiper.$wrapperEl;
        // Remove duplicated slides
        $wrapperEl.children(("." + (params.slideClass) + "." + (params.slideDuplicateClass))).remove();

        var slides = $wrapperEl.children(("." + (params.slideClass)));

        if (params.loopFillGroupWithBlank) {
            var blankSlidesNum = params.slidesPerGroup - (slides.length % params.slidesPerGroup);
            if (blankSlidesNum !== params.slidesPerGroup) {
                for (var i = 0; i < blankSlidesNum; i += 1) {
                    var blankNode = $(doc.createElement('div')).addClass(((params.slideClass) + " " + (params.slideBlankClass)));
                    $wrapperEl.append(blankNode);
                }
                slides = $wrapperEl.children(("." + (params.slideClass)));
            }
        }

        if (params.slidesPerView === 'auto' && !params.loopedSlides) {
            params.loopedSlides = slides.length;
        }

        swiper.loopedSlides = parseInt(params.loopedSlides || params.slidesPerView, 10);
        swiper.loopedSlides += params.loopAdditionalSlides;
        if (swiper.loopedSlides > slides.length) {
            swiper.loopedSlides = slides.length;
        }

        var prependSlides = [];
        var appendSlides = [];
        slides.each(function(index, el) {
            var slide = $(el);
            if (index < swiper.loopedSlides) {
                appendSlides.push(el);
            }
            if (index < slides.length && index >= slides.length - swiper.loopedSlides) {
                prependSlides.push(el);
            }
            slide.attr('data-swiper-slide-index', index);
        });
        for (var i$1 = 0; i$1 < appendSlides.length; i$1 += 1) {
            $wrapperEl.append($(appendSlides[i$1].cloneNode(true)).addClass(params.slideDuplicateClass));
        }
        for (var i$2 = prependSlides.length - 1; i$2 >= 0; i$2 -= 1) {
            $wrapperEl.prepend($(prependSlides[i$2].cloneNode(true)).addClass(params.slideDuplicateClass));
        }
    }

    function loopFix() {
        var swiper = this;
        var params = swiper.params;
        var activeIndex = swiper.activeIndex;
        var slides = swiper.slides;
        var loopedSlides = swiper.loopedSlides;
        var allowSlidePrev = swiper.allowSlidePrev;
        var allowSlideNext = swiper.allowSlideNext;
        var snapGrid = swiper.snapGrid;
        var rtl = swiper.rtlTranslate;
        var newIndex;
        swiper.allowSlidePrev = true;
        swiper.allowSlideNext = true;

        var snapTranslate = -snapGrid[activeIndex];
        var diff = snapTranslate - swiper.getTranslate();


        // Fix For Negative Oversliding
        if (activeIndex < loopedSlides) {
            newIndex = (slides.length - (loopedSlides * 3)) + activeIndex;
            newIndex += loopedSlides;
            var slideChanged = swiper.slideTo(newIndex, 0, false, true);
            if (slideChanged && diff !== 0) {
                swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
            }
        } else if ((params.slidesPerView === 'auto' && activeIndex >= loopedSlides * 2) || (activeIndex >= slides.length - loopedSlides)) {
            // Fix For Positive Oversliding
            newIndex = -slides.length + activeIndex + loopedSlides;
            newIndex += loopedSlides;
            var slideChanged$1 = swiper.slideTo(newIndex, 0, false, true);
            if (slideChanged$1 && diff !== 0) {
                swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
            }
        }
        swiper.allowSlidePrev = allowSlidePrev;
        swiper.allowSlideNext = allowSlideNext;
    }

    function loopDestroy() {
        var swiper = this;
        var $wrapperEl = swiper.$wrapperEl;
        var params = swiper.params;
        var slides = swiper.slides;
        $wrapperEl.children(("." + (params.slideClass) + "." + (params.slideDuplicateClass))).remove();
        slides.removeAttr('data-swiper-slide-index');
    }

    var loop = {
        loopCreate: loopCreate,
        loopFix: loopFix,
        loopDestroy: loopDestroy,
    };

    function setGrabCursor(moving) {
        var swiper = this;
        if (Support.touch || !swiper.params.simulateTouch || (swiper.params.watchOverflow && swiper.isLocked)) {
            return;
        }
        var el = swiper.el;
        el.style.cursor = 'move';
        el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
        el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
        el.style.cursor = moving ? 'grabbing' : 'grab';
    }

    function unsetGrabCursor() {
        var swiper = this;
        if (Support.touch || (swiper.params.watchOverflow && swiper.isLocked)) {
            return;
        }
        swiper.el.style.cursor = '';
    }

    var grabCursor = {
        setGrabCursor: setGrabCursor,
        unsetGrabCursor: unsetGrabCursor,
    };

    function appendSlide(slides) {
        var swiper = this;
        var $wrapperEl = swiper.$wrapperEl;
        var params = swiper.params;
        if (params.loop) {
            swiper.loopDestroy();
        }
        if (typeof slides === 'object' && 'length' in slides) {
            for (var i = 0; i < slides.length; i += 1) {
                if (slides[i]) {
                    $wrapperEl.append(slides[i]);
                }
            }
        } else {
            $wrapperEl.append(slides);
        }
        if (params.loop) {
            swiper.loopCreate();
        }
        if (!(params.observer && Support.observer)) {
            swiper.update();
        }
    }

    function prependSlide(slides) {
        var swiper = this;
        var params = swiper.params;
        var $wrapperEl = swiper.$wrapperEl;
        var activeIndex = swiper.activeIndex;

        if (params.loop) {
            swiper.loopDestroy();
        }
        var newActiveIndex = activeIndex + 1;
        if (typeof slides === 'object' && 'length' in slides) {
            for (var i = 0; i < slides.length; i += 1) {
                if (slides[i]) {
                    $wrapperEl.prepend(slides[i]);
                }
            }
            newActiveIndex = activeIndex + slides.length;
        } else {
            $wrapperEl.prepend(slides);
        }
        if (params.loop) {
            swiper.loopCreate();
        }
        if (!(params.observer && Support.observer)) {
            swiper.update();
        }
        swiper.slideTo(newActiveIndex, 0, false);
    }

    function addSlide(index, slides) {
        var swiper = this;
        var $wrapperEl = swiper.$wrapperEl;
        var params = swiper.params;
        var activeIndex = swiper.activeIndex;
        var activeIndexBuffer = activeIndex;
        if (params.loop) {
            activeIndexBuffer -= swiper.loopedSlides;
            swiper.loopDestroy();
            swiper.slides = $wrapperEl.children(("." + (params.slideClass)));
        }
        var baseLength = swiper.slides.length;
        if (index <= 0) {
            swiper.prependSlide(slides);
            return;
        }
        if (index >= baseLength) {
            swiper.appendSlide(slides);
            return;
        }
        var newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;

        var slidesBuffer = [];
        for (var i = baseLength - 1; i >= index; i -= 1) {
            var currentSlide = swiper.slides.eq(i);
            currentSlide.remove();
            slidesBuffer.unshift(currentSlide);
        }

        if (typeof slides === 'object' && 'length' in slides) {
            for (var i$1 = 0; i$1 < slides.length; i$1 += 1) {
                if (slides[i$1]) {
                    $wrapperEl.append(slides[i$1]);
                }
            }
            newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
        } else {
            $wrapperEl.append(slides);
        }

        for (var i$2 = 0; i$2 < slidesBuffer.length; i$2 += 1) {
            $wrapperEl.append(slidesBuffer[i$2]);
        }

        if (params.loop) {
            swiper.loopCreate();
        }
        if (!(params.observer && Support.observer)) {
            swiper.update();
        }
        if (params.loop) {
            swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
        } else {
            swiper.slideTo(newActiveIndex, 0, false);
        }
    }

    function removeSlide(slidesIndexes) {
        var swiper = this;
        var params = swiper.params;
        var $wrapperEl = swiper.$wrapperEl;
        var activeIndex = swiper.activeIndex;

        var activeIndexBuffer = activeIndex;
        if (params.loop) {
            activeIndexBuffer -= swiper.loopedSlides;
            swiper.loopDestroy();
            swiper.slides = $wrapperEl.children(("." + (params.slideClass)));
        }
        var newActiveIndex = activeIndexBuffer;
        var indexToRemove;

        if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {
            for (var i = 0; i < slidesIndexes.length; i += 1) {
                indexToRemove = slidesIndexes[i];
                if (swiper.slides[indexToRemove]) {
                    swiper.slides.eq(indexToRemove).remove();
                }
                if (indexToRemove < newActiveIndex) {
                    newActiveIndex -= 1;
                }
            }
            newActiveIndex = Math.max(newActiveIndex, 0);
        } else {
            indexToRemove = slidesIndexes;
            if (swiper.slides[indexToRemove]) {
                swiper.slides.eq(indexToRemove).remove();
            }
            if (indexToRemove < newActiveIndex) {
                newActiveIndex -= 1;
            }
            newActiveIndex = Math.max(newActiveIndex, 0);
        }

        if (params.loop) {
            swiper.loopCreate();
        }

        if (!(params.observer && Support.observer)) {
            swiper.update();
        }
        if (params.loop) {
            swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
        } else {
            swiper.slideTo(newActiveIndex, 0, false);
        }
    }

    function removeAllSlides() {
        var swiper = this;

        var slidesIndexes = [];
        for (var i = 0; i < swiper.slides.length; i += 1) {
            slidesIndexes.push(i);
        }
        swiper.removeSlide(slidesIndexes);
    }

    var manipulation = {
        appendSlide: appendSlide,
        prependSlide: prependSlide,
        addSlide: addSlide,
        removeSlide: removeSlide,
        removeAllSlides: removeAllSlides,
    };

    var Device = (function Device() {
        var ua = win.navigator.userAgent;

        var device = {
            ios: false,
            android: false,
            androidChrome: false,
            desktop: false,
            windows: false,
            iphone: false,
            ipod: false,
            ipad: false,
            cordova: win.cordova || win.phonegap,
            phonegap: win.cordova || win.phonegap,
        };

        var windows = ua.match(/(Windows Phone);?[\s\/]+([\d.]+)?/); // eslint-disable-line
        var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line
        var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
        var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
        var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);


        // Windows
        if (windows) {
            device.os = 'windows';
            device.osVersion = windows[2];
            device.windows = true;
        }
        // Android
        if (android && !windows) {
            device.os = 'android';
            device.osVersion = android[2];
            device.android = true;
            device.androidChrome = ua.toLowerCase().indexOf('chrome') >= 0;
        }
        if (ipad || iphone || ipod) {
            device.os = 'ios';
            device.ios = true;
        }
        // iOS
        if (iphone && !ipod) {
            device.osVersion = iphone[2].replace(/_/g, '.');
            device.iphone = true;
        }
        if (ipad) {
            device.osVersion = ipad[2].replace(/_/g, '.');
            device.ipad = true;
        }
        if (ipod) {
            device.osVersion = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
            device.iphone = true;
        }
        // iOS 8+ changed UA
        if (device.ios && device.osVersion && ua.indexOf('Version/') >= 0) {
            if (device.osVersion.split('.')[0] === '10') {
                device.osVersion = ua.toLowerCase().split('version/')[1].split(' ')[0];
            }
        }

        // Desktop
        device.desktop = !(device.os || device.android || device.webView);

        // Webview
        device.webView = (iphone || ipad || ipod) && ua.match(/.*AppleWebKit(?!.*Safari)/i);

        // Minimal UI
        if (device.os && device.os === 'ios') {
            var osVersionArr = device.osVersion.split('.');
            var metaViewport = doc.querySelector('meta[name="viewport"]');
            device.minimalUi = !device.webView &&
                (ipod || iphone) &&
                (osVersionArr[0] * 1 === 7 ? osVersionArr[1] * 1 >= 1 : osVersionArr[0] * 1 > 7) &&
                metaViewport && metaViewport.getAttribute('content').indexOf('minimal-ui') >= 0;
        }

        // Pixel Ratio
        device.pixelRatio = win.devicePixelRatio || 1;

        // Export object
        return device;
    }());

    function onTouchStart(event) {
        var swiper = this;
        var data = swiper.touchEventsData;
        var params = swiper.params;
        var touches = swiper.touches;
        if (swiper.animating && params.preventInteractionOnTransition) {
            return;
        }
        var e = event;
        if (e.originalEvent) {
            e = e.originalEvent;
        }
        data.isTouchEvent = e.type === 'touchstart';
        if (!data.isTouchEvent && 'which' in e && e.which === 3) {
            return;
        }
        if (data.isTouched && data.isMoved) {
            return;
        }
        if (params.noSwiping && $(e.target).closest(params.noSwipingSelector ? params.noSwipingSelector : ("." + (params.noSwipingClass)))[0]) {
            swiper.allowClick = true;
            return;
        }
        if (params.swipeHandler) {
            if (!$(e).closest(params.swipeHandler)[0]) {
                return;
            }
        }

        touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
        touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
        var startX = touches.currentX;
        var startY = touches.currentY;

        // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore

        var edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
        var edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;
        if (
            edgeSwipeDetection &&
            ((startX <= edgeSwipeThreshold) ||
                (startX >= win.screen.width - edgeSwipeThreshold))
        ) {
            return;
        }

        Utils.extend(data, {
            isTouched: true,
            isMoved: false,
            allowTouchCallbacks: true,
            isScrolling: undefined,
            startMoving: undefined,
        });

        touches.startX = startX;
        touches.startY = startY;
        data.touchStartTime = Utils.now();
        swiper.allowClick = true;
        swiper.updateSize();
        swiper.swipeDirection = undefined;
        if (params.threshold > 0) {
            data.allowThresholdMove = false;
        }
        if (e.type !== 'touchstart') {
            var preventDefault = true;
            if ($(e.target).is(data.formElements)) {
                preventDefault = false;
            }
            if (
                doc.activeElement &&
                $(doc.activeElement).is(data.formElements) &&
                doc.activeElement !== e.target
            ) {
                doc.activeElement.blur();
            }
            if (preventDefault && swiper.allowTouchMove) {
                e.preventDefault();
            }
        }
        swiper.emit('touchStart', e);
    }

    function onTouchMove(event) {
        var swiper = this;
        var data = swiper.touchEventsData;
        var params = swiper.params;
        var touches = swiper.touches;
        var rtl = swiper.rtlTranslate;
        var e = event;
        if (e.originalEvent) {
            e = e.originalEvent;
        }
        if (!data.isTouched) {
            if (data.startMoving && data.isScrolling) {
                swiper.emit('touchMoveOpposite', e);
            }
            return;
        }
        if (data.isTouchEvent && e.type === 'mousemove') {
            return;
        }
        var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
        var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
        if (e.preventedByNestedSwiper) {
            touches.startX = pageX;
            touches.startY = pageY;
            return;
        }
        if (!swiper.allowTouchMove) {
            // isMoved = true;
            swiper.allowClick = false;
            if (data.isTouched) {
                Utils.extend(touches, {
                    startX: pageX,
                    startY: pageY,
                    currentX: pageX,
                    currentY: pageY,
                });
                data.touchStartTime = Utils.now();
            }
            return;
        }
        if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
            if (swiper.isVertical()) {
                // Vertical
                if (
                    (pageY < touches.startY && swiper.translate <= swiper.maxTranslate()) ||
                    (pageY > touches.startY && swiper.translate >= swiper.minTranslate())
                ) {
                    data.isTouched = false;
                    data.isMoved = false;
                    return;
                }
            } else if (
                (pageX < touches.startX && swiper.translate <= swiper.maxTranslate()) ||
                (pageX > touches.startX && swiper.translate >= swiper.minTranslate())
            ) {
                return;
            }
        }
        if (data.isTouchEvent && doc.activeElement) {
            if (e.target === doc.activeElement && $(e.target).is(data.formElements)) {
                data.isMoved = true;
                swiper.allowClick = false;
                return;
            }
        }
        if (data.allowTouchCallbacks) {
            swiper.emit('touchMove', e);
        }
        if (e.targetTouches && e.targetTouches.length > 1) {
            return;
        }

        touches.currentX = pageX;
        touches.currentY = pageY;

        var diffX = touches.currentX - touches.startX;
        var diffY = touches.currentY - touches.startY;
        if (swiper.params.threshold && Math.sqrt((Math.pow(diffX, 2)) + (Math.pow(diffY, 2))) < swiper.params.threshold) {
            return;
        }

        if (typeof data.isScrolling === 'undefined') {
            var touchAngle;
            if ((swiper.isHorizontal() && touches.currentY === touches.startY) || (swiper.isVertical() && touches.currentX === touches.startX)) {
                data.isScrolling = false;
            } else {
                // eslint-disable-next-line
                if ((diffX * diffX) + (diffY * diffY) >= 25) {
                    touchAngle = (Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180) / Math.PI;
                    data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : (90 - touchAngle > params.touchAngle);
                }
            }
        }
        if (data.isScrolling) {
            swiper.emit('touchMoveOpposite', e);
        }
        if (typeof data.startMoving === 'undefined') {
            if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
                data.startMoving = true;
            }
        }
        if (data.isScrolling) {
            data.isTouched = false;
            return;
        }
        if (!data.startMoving) {
            return;
        }
        swiper.allowClick = false;
        e.preventDefault();
        if (params.touchMoveStopPropagation && !params.nested) {
            e.stopPropagation();
        }

        if (!data.isMoved) {
            if (params.loop) {
                swiper.loopFix();
            }
            data.startTranslate = swiper.getTranslate();
            swiper.setTransition(0);
            if (swiper.animating) {
                swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
            }
            data.allowMomentumBounce = false;
            // Grab Cursor
            if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
                swiper.setGrabCursor(true);
            }
            swiper.emit('sliderFirstMove', e);
        }
        swiper.emit('sliderMove', e);
        data.isMoved = true;

        var diff = swiper.isHorizontal() ? diffX : diffY;
        touches.diff = diff;

        diff *= params.touchRatio;
        if (rtl) {
            diff = -diff;
        }

        swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
        data.currentTranslate = diff + data.startTranslate;

        var disableParentSwiper = true;
        var resistanceRatio = params.resistanceRatio;
        if (params.touchReleaseOnEdges) {
            resistanceRatio = 0;
        }
        if ((diff > 0 && data.currentTranslate > swiper.minTranslate())) {
            disableParentSwiper = false;
            if (params.resistance) {
                data.currentTranslate = (swiper.minTranslate() - 1) + (Math.pow((-swiper.minTranslate() + data.startTranslate + diff), resistanceRatio));
            }
        } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
            disableParentSwiper = false;
            if (params.resistance) {
                data.currentTranslate = (swiper.maxTranslate() + 1) - (Math.pow((swiper.maxTranslate() - data.startTranslate - diff), resistanceRatio));
            }
        }

        if (disableParentSwiper) {
            e.preventedByNestedSwiper = true;
        }

        // Directions locks
        if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
            data.currentTranslate = data.startTranslate;
        }
        if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
            data.currentTranslate = data.startTranslate;
        }


        // Threshold
        if (params.threshold > 0) {
            if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
                if (!data.allowThresholdMove) {
                    data.allowThresholdMove = true;
                    touches.startX = touches.currentX;
                    touches.startY = touches.currentY;
                    data.currentTranslate = data.startTranslate;
                    touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
                    return;
                }
            } else {
                data.currentTranslate = data.startTranslate;
                return;
            }
        }

        if (!params.followFinger) {
            return;
        }

        // Update active index in free mode
        if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
        }
        if (params.freeMode) {
            // Velocity
            if (data.velocities.length === 0) {
                data.velocities.push({
                    position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
                    time: data.touchStartTime,
                });
            }
            data.velocities.push({
                position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
                time: Utils.now(),
            });
        }
        // Update progress
        swiper.updateProgress(data.currentTranslate);
        // Update translate
        swiper.setTranslate(data.currentTranslate);
    }

    function onTouchEnd(event) {
        var swiper = this;
        var data = swiper.touchEventsData;

        var params = swiper.params;
        var touches = swiper.touches;
        var rtl = swiper.rtlTranslate;
        var $wrapperEl = swiper.$wrapperEl;
        var slidesGrid = swiper.slidesGrid;
        var snapGrid = swiper.snapGrid;
        var e = event;
        if (e.originalEvent) {
            e = e.originalEvent;
        }
        if (data.allowTouchCallbacks) {
            swiper.emit('touchEnd', e);
        }
        data.allowTouchCallbacks = false;
        if (!data.isTouched) {
            if (data.isMoved && params.grabCursor) {
                swiper.setGrabCursor(false);
            }
            data.isMoved = false;
            data.startMoving = false;
            return;
        }
        // Return Grab Cursor
        if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
            swiper.setGrabCursor(false);
        }

        // Time diff
        var touchEndTime = Utils.now();
        var timeDiff = touchEndTime - data.touchStartTime;

        // Tap, doubleTap, Click
        if (swiper.allowClick) {
            swiper.updateClickedSlide(e);
            swiper.emit('tap', e);
            if (timeDiff < 300 && (touchEndTime - data.lastClickTime) > 300) {
                if (data.clickTimeout) {
                    clearTimeout(data.clickTimeout);
                }
                data.clickTimeout = Utils.nextTick(function() {
                    if (!swiper || swiper.destroyed) {
                        return;
                    }
                    swiper.emit('click', e);
                }, 300);
            }
            if (timeDiff < 300 && (touchEndTime - data.lastClickTime) < 300) {
                if (data.clickTimeout) {
                    clearTimeout(data.clickTimeout);
                }
                swiper.emit('doubleTap', e);
            }
        }

        data.lastClickTime = Utils.now();
        Utils.nextTick(function() {
            if (!swiper.destroyed) {
                swiper.allowClick = true;
            }
        });

        if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
            data.isTouched = false;
            data.isMoved = false;
            data.startMoving = false;
            return;
        }
        data.isTouched = false;
        data.isMoved = false;
        data.startMoving = false;

        var currentPos;
        if (params.followFinger) {
            currentPos = rtl ? swiper.translate : -swiper.translate;
        } else {
            currentPos = -data.currentTranslate;
        }

        if (params.freeMode) {
            if (currentPos < -swiper.minTranslate()) {
                swiper.slideTo(swiper.activeIndex);
                return;
            }
            if (currentPos > -swiper.maxTranslate()) {
                if (swiper.slides.length < snapGrid.length) {
                    swiper.slideTo(snapGrid.length - 1);
                } else {
                    swiper.slideTo(swiper.slides.length - 1);
                }
                return;
            }

            if (params.freeModeMomentum) {
                if (data.velocities.length > 1) {
                    var lastMoveEvent = data.velocities.pop();
                    var velocityEvent = data.velocities.pop();

                    var distance = lastMoveEvent.position - velocityEvent.position;
                    var time = lastMoveEvent.time - velocityEvent.time;
                    swiper.velocity = distance / time;
                    swiper.velocity /= 2;
                    if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
                        swiper.velocity = 0;
                    }
                    // this implies that the user stopped moving a finger then released.
                    // There would be no events with distance zero, so the last event is stale.
                    if (time > 150 || (Utils.now() - lastMoveEvent.time) > 300) {
                        swiper.velocity = 0;
                    }
                } else {
                    swiper.velocity = 0;
                }
                swiper.velocity *= params.freeModeMomentumVelocityRatio;

                data.velocities.length = 0;
                var momentumDuration = 1000 * params.freeModeMomentumRatio;
                var momentumDistance = swiper.velocity * momentumDuration;

                var newPosition = swiper.translate + momentumDistance;
                if (rtl) {
                    newPosition = -newPosition;
                }

                var doBounce = false;
                var afterBouncePosition;
                var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
                var needsLoopFix;
                if (newPosition < swiper.maxTranslate()) {
                    if (params.freeModeMomentumBounce) {
                        if (newPosition + swiper.maxTranslate() < -bounceAmount) {
                            newPosition = swiper.maxTranslate() - bounceAmount;
                        }
                        afterBouncePosition = swiper.maxTranslate();
                        doBounce = true;
                        data.allowMomentumBounce = true;
                    } else {
                        newPosition = swiper.maxTranslate();
                    }
                    if (params.loop && params.centeredSlides) {
                        needsLoopFix = true;
                    }
                } else if (newPosition > swiper.minTranslate()) {
                    if (params.freeModeMomentumBounce) {
                        if (newPosition - swiper.minTranslate() > bounceAmount) {
                            newPosition = swiper.minTranslate() + bounceAmount;
                        }
                        afterBouncePosition = swiper.minTranslate();
                        doBounce = true;
                        data.allowMomentumBounce = true;
                    } else {
                        newPosition = swiper.minTranslate();
                    }
                    if (params.loop && params.centeredSlides) {
                        needsLoopFix = true;
                    }
                } else if (params.freeModeSticky) {
                    var nextSlide;
                    for (var j = 0; j < snapGrid.length; j += 1) {
                        if (snapGrid[j] > -newPosition) {
                            nextSlide = j;
                            break;
                        }
                    }

                    if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
                        newPosition = snapGrid[nextSlide];
                    } else {
                        newPosition = snapGrid[nextSlide - 1];
                    }
                    newPosition = -newPosition;
                }
                if (needsLoopFix) {
                    swiper.once('transitionEnd', function() {
                        swiper.loopFix();
                    });
                }
                // Fix duration
                if (swiper.velocity !== 0) {
                    if (rtl) {
                        momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
                    } else {
                        momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
                    }
                } else if (params.freeModeSticky) {
                    swiper.slideToClosest();
                    return;
                }

                if (params.freeModeMomentumBounce && doBounce) {
                    swiper.updateProgress(afterBouncePosition);
                    swiper.setTransition(momentumDuration);
                    swiper.setTranslate(newPosition);
                    swiper.transitionStart(true, swiper.swipeDirection);
                    swiper.animating = true;
                    $wrapperEl.transitionEnd(function() {
                        if (!swiper || swiper.destroyed || !data.allowMomentumBounce) {
                            return;
                        }
                        swiper.emit('momentumBounce');

                        swiper.setTransition(params.speed);
                        swiper.setTranslate(afterBouncePosition);
                        $wrapperEl.transitionEnd(function() {
                            if (!swiper || swiper.destroyed) {
                                return;
                            }
                            swiper.transitionEnd();
                        });
                    });
                } else if (swiper.velocity) {
                    swiper.updateProgress(newPosition);
                    swiper.setTransition(momentumDuration);
                    swiper.setTranslate(newPosition);
                    swiper.transitionStart(true, swiper.swipeDirection);
                    if (!swiper.animating) {
                        swiper.animating = true;
                        $wrapperEl.transitionEnd(function() {
                            if (!swiper || swiper.destroyed) {
                                return;
                            }
                            swiper.transitionEnd();
                        });
                    }
                } else {
                    swiper.updateProgress(newPosition);
                }

                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
            } else if (params.freeModeSticky) {
                swiper.slideToClosest();
                return;
            }

            if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
                swiper.updateProgress();
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
            }
            return;
        }

        // Find current slide
        var stopIndex = 0;
        var groupSize = swiper.slidesSizesGrid[0];
        for (var i = 0; i < slidesGrid.length; i += params.slidesPerGroup) {
            if (typeof slidesGrid[i + params.slidesPerGroup] !== 'undefined') {
                if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + params.slidesPerGroup]) {
                    stopIndex = i;
                    groupSize = slidesGrid[i + params.slidesPerGroup] - slidesGrid[i];
                }
            } else if (currentPos >= slidesGrid[i]) {
                stopIndex = i;
                groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
            }
        }

        // Find current slide size
        var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;

        if (timeDiff > params.longSwipesMs) {
            // Long touches
            if (!params.longSwipes) {
                swiper.slideTo(swiper.activeIndex);
                return;
            }
            if (swiper.swipeDirection === 'next') {
                if (ratio >= params.longSwipesRatio) {
                    swiper.slideTo(stopIndex + params.slidesPerGroup);
                } else {
                    swiper.slideTo(stopIndex);
                }
            }
            if (swiper.swipeDirection === 'prev') {
                if (ratio > (1 - params.longSwipesRatio)) {
                    swiper.slideTo(stopIndex + params.slidesPerGroup);
                } else {
                    swiper.slideTo(stopIndex);
                }
            }
        } else {
            // Short swipes
            if (!params.shortSwipes) {
                swiper.slideTo(swiper.activeIndex);
                return;
            }
            if (swiper.swipeDirection === 'next') {
                swiper.slideTo(stopIndex + params.slidesPerGroup);
            }
            if (swiper.swipeDirection === 'prev') {
                swiper.slideTo(stopIndex);
            }
        }
    }

    function onResize() {
        var swiper = this;

        var params = swiper.params;
        var el = swiper.el;

        if (el && el.offsetWidth === 0) {
            return;
        }

        // Breakpoints
        if (params.breakpoints) {
            swiper.setBreakpoint();
        }

        // Save locks
        var allowSlideNext = swiper.allowSlideNext;
        var allowSlidePrev = swiper.allowSlidePrev;
        var snapGrid = swiper.snapGrid;

        // Disable locks on resize
        swiper.allowSlideNext = true;
        swiper.allowSlidePrev = true;

        swiper.updateSize();
        swiper.updateSlides();

        if (params.freeMode) {
            var newTranslate = Math.min(Math.max(swiper.translate, swiper.maxTranslate()), swiper.minTranslate());
            swiper.setTranslate(newTranslate);
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();

            if (params.autoHeight) {
                swiper.updateAutoHeight();
            }
        } else {
            swiper.updateSlidesClasses();
            if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
                swiper.slideTo(swiper.slides.length - 1, 0, false, true);
            } else {
                swiper.slideTo(swiper.activeIndex, 0, false, true);
            }
        }
        // Return locks after resize
        swiper.allowSlidePrev = allowSlidePrev;
        swiper.allowSlideNext = allowSlideNext;

        if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
            swiper.checkOverflow();
        }
    }

    function onClick(e) {
        var swiper = this;
        if (!swiper.allowClick) {
            if (swiper.params.preventClicks) {
                e.preventDefault();
            }
            if (swiper.params.preventClicksPropagation && swiper.animating) {
                e.stopPropagation();
                e.stopImmediatePropagation();
            }
        }
    }

    function attachEvents() {
        var swiper = this;
        var params = swiper.params;
        var touchEvents = swiper.touchEvents;
        var el = swiper.el;
        var wrapperEl = swiper.wrapperEl;

        {
            swiper.onTouchStart = onTouchStart.bind(swiper);
            swiper.onTouchMove = onTouchMove.bind(swiper);
            swiper.onTouchEnd = onTouchEnd.bind(swiper);
        }

        swiper.onClick = onClick.bind(swiper);

        var target = params.touchEventsTarget === 'container' ? el : wrapperEl;
        var capture = !!params.nested;

        // Touch Events
        {
            if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
                target.addEventListener(touchEvents.start, swiper.onTouchStart, false);
                doc.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
                doc.addEventListener(touchEvents.end, swiper.onTouchEnd, false);
            } else {
                if (Support.touch) {
                    var passiveListener = touchEvents.start === 'touchstart' && Support.passiveListener && params.passiveListeners ? {
                        passive: true,
                        capture: false
                    } : false;
                    target.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
                    target.addEventListener(touchEvents.move, swiper.onTouchMove, Support.passiveListener ? {
                        passive: false,
                        capture: capture
                    } : capture);
                    target.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
                }
                if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
                    target.addEventListener('mousedown', swiper.onTouchStart, false);
                    doc.addEventListener('mousemove', swiper.onTouchMove, capture);
                    doc.addEventListener('mouseup', swiper.onTouchEnd, false);
                }
            }
            // Prevent Links Clicks
            if (params.preventClicks || params.preventClicksPropagation) {
                target.addEventListener('click', swiper.onClick, true);
            }
        }

        // Resize handler
        swiper.on((Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate'), onResize, true);
    }

    function detachEvents() {
        var swiper = this;

        var params = swiper.params;
        var touchEvents = swiper.touchEvents;
        var el = swiper.el;
        var wrapperEl = swiper.wrapperEl;

        var target = params.touchEventsTarget === 'container' ? el : wrapperEl;
        var capture = !!params.nested;

        // Touch Events
        {
            if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
                target.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
                doc.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
                doc.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
            } else {
                if (Support.touch) {
                    var passiveListener = touchEvents.start === 'onTouchStart' && Support.passiveListener && params.passiveListeners ? {
                        passive: true,
                        capture: false
                    } : false;
                    target.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
                    target.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
                    target.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
                }
                if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
                    target.removeEventListener('mousedown', swiper.onTouchStart, false);
                    doc.removeEventListener('mousemove', swiper.onTouchMove, capture);
                    doc.removeEventListener('mouseup', swiper.onTouchEnd, false);
                }
            }
            // Prevent Links Clicks
            if (params.preventClicks || params.preventClicksPropagation) {
                target.removeEventListener('click', swiper.onClick, true);
            }
        }

        // Resize handler
        swiper.off((Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate'), onResize);
    }

    var events = {
        attachEvents: attachEvents,
        detachEvents: detachEvents,
    };

    function setBreakpoint() {
        var swiper = this;
        var activeIndex = swiper.activeIndex;
        var initialized = swiper.initialized;
        var loopedSlides = swiper.loopedSlides;
        if (loopedSlides === void 0) loopedSlides = 0;
        var params = swiper.params;
        var breakpoints = params.breakpoints;
        if (!breakpoints || (breakpoints && Object.keys(breakpoints).length === 0)) {
            return;
        }
        // Set breakpoint for window width and update parameters
        var breakpoint = swiper.getBreakpoint(breakpoints);
        if (breakpoint && swiper.currentBreakpoint !== breakpoint) {
            var breakPointsParams = breakpoint in breakpoints ? breakpoints[breakpoint] : swiper.originalParams;
            var needsReLoop = params.loop && (breakPointsParams.slidesPerView !== params.slidesPerView);

            Utils.extend(swiper.params, breakPointsParams);

            Utils.extend(swiper, {
                allowTouchMove: swiper.params.allowTouchMove,
                allowSlideNext: swiper.params.allowSlideNext,
                allowSlidePrev: swiper.params.allowSlidePrev,
            });

            swiper.currentBreakpoint = breakpoint;

            if (needsReLoop && initialized) {
                swiper.loopDestroy();
                swiper.loopCreate();
                swiper.updateSlides();
                swiper.slideTo((activeIndex - loopedSlides) + swiper.loopedSlides, 0, false);
            }
            swiper.emit('breakpoint', breakPointsParams);
        }
    }

    function getBreakpoint(breakpoints) {
        // Get breakpoint for window width
        if (!breakpoints) {
            return undefined;
        }
        var breakpoint = false;
        var points = [];
        Object.keys(breakpoints).forEach(function(point) {
            points.push(point);
        });
        points.sort(function(a, b) {
            return parseInt(a, 10) - parseInt(b, 10);
        });
        for (var i = 0; i < points.length; i += 1) {
            var point = points[i];
            if (point >= win.innerWidth && !breakpoint) {
                breakpoint = point;
            }
        }
        return breakpoint || 'max';
    }

    var breakpoints = {
        setBreakpoint: setBreakpoint,
        getBreakpoint: getBreakpoint
    };

    var Browser = (function Browser() {
        function isSafari() {
            var ua = win.navigator.userAgent.toLowerCase();
            return (ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0);
        }
        return {
            isIE: !!win.navigator.userAgent.match(/Trident/g) || !!win.navigator.userAgent.match(/MSIE/g),
            isSafari: isSafari(),
            isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(win.navigator.userAgent),
        };
    }());

    function addClasses() {
        var swiper = this;
        var classNames = swiper.classNames;
        var params = swiper.params;
        var rtl = swiper.rtl;
        var $el = swiper.$el;
        var suffixes = [];

        suffixes.push(params.direction);

        if (params.freeMode) {
            suffixes.push('free-mode');
        }
        if (!Support.flexbox) {
            suffixes.push('no-flexbox');
        }
        if (params.autoHeight) {
            suffixes.push('autoheight');
        }
        if (rtl) {
            suffixes.push('rtl');
        }
        if (params.slidesPerColumn > 1) {
            suffixes.push('multirow');
        }
        if (Device.android) {
            suffixes.push('android');
        }
        if (Device.ios) {
            suffixes.push('ios');
        }
        // WP8 Touch Events Fix
        if (Browser.isIE && (Support.pointerEvents || Support.prefixedPointerEvents)) {
            suffixes.push(("wp8-" + (params.direction)));
        }

        suffixes.forEach(function(suffix) {
            classNames.push(params.containerModifierClass + suffix);
        });

        $el.addClass(classNames.join(' '));
    }

    function removeClasses() {
        var swiper = this;
        var $el = swiper.$el;
        var classNames = swiper.classNames;

        $el.removeClass(classNames.join(' '));
    }

    var classes = {
        addClasses: addClasses,
        removeClasses: removeClasses
    };

    function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {
        var image;

        function onReady() {
            if (callback) {
                callback();
            }
        }
        if (!imageEl.complete || !checkForComplete) {
            if (src) {
                image = new win.Image();
                image.onload = onReady;
                image.onerror = onReady;
                if (sizes) {
                    image.sizes = sizes;
                }
                if (srcset) {
                    image.srcset = srcset;
                }
                if (src) {
                    image.src = src;
                }
            } else {
                onReady();
            }
        } else {
            // image already loaded...
            onReady();
        }
    }

    function preloadImages() {
        var swiper = this;
        swiper.imagesToLoad = swiper.$el.find('img');

        function onReady() {
            if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) {
                return;
            }
            if (swiper.imagesLoaded !== undefined) {
                swiper.imagesLoaded += 1;
            }
            if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
                if (swiper.params.updateOnImagesReady) {
                    swiper.update();
                }
                swiper.emit('imagesReady');
            }
        }
        for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {
            var imageEl = swiper.imagesToLoad[i];
            swiper.loadImage(
                imageEl,
                imageEl.currentSrc || imageEl.getAttribute('src'),
                imageEl.srcset || imageEl.getAttribute('srcset'),
                imageEl.sizes || imageEl.getAttribute('sizes'),
                true,
                onReady
            );
        }
    }

    var images = {
        loadImage: loadImage,
        preloadImages: preloadImages,
    };

    function checkOverflow() {
        var swiper = this;
        var wasLocked = swiper.isLocked;

        swiper.isLocked = swiper.snapGrid.length === 1;
        swiper.allowSlideNext = !swiper.isLocked;
        swiper.allowSlidePrev = !swiper.isLocked;

        // events
        if (wasLocked !== swiper.isLocked) {
            swiper.emit(swiper.isLocked ? 'lock' : 'unlock');
        }

        if (wasLocked && wasLocked !== swiper.isLocked) {
            swiper.isEnd = false;
            swiper.navigation.update();
        }
    }

    var checkOverflow$1 = {
        checkOverflow: checkOverflow
    };

    var defaults = {
        init: true,
        direction: 'horizontal',
        touchEventsTarget: 'container',
        initialSlide: 0,
        speed: 300,
        //
        preventInteractionOnTransition: false,

        // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
        edgeSwipeDetection: false,
        edgeSwipeThreshold: 20,

        // Free mode
        freeMode: false,
        freeModeMomentum: true,
        freeModeMomentumRatio: 1,
        freeModeMomentumBounce: true,
        freeModeMomentumBounceRatio: 1,
        freeModeMomentumVelocityRatio: 1,
        freeModeSticky: false,
        freeModeMinimumVelocity: 0.02,

        // Autoheight
        autoHeight: false,

        // Set wrapper width
        setWrapperSize: false,

        // Virtual Translate
        virtualTranslate: false,

        // Effects
        effect: 'slide', // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

        // Breakpoints
        breakpoints: undefined,

        // Slides grid
        spaceBetween: 0,
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerColumnFill: 'column',
        slidesPerGroup: 1,
        centeredSlides: false,
        slidesOffsetBefore: 0, // in px
        slidesOffsetAfter: 0, // in px
        normalizeSlideIndex: true,

        // Disable swiper and hide navigation when container not overflow
        watchOverflow: false,

        // Round length
        roundLengths: false,

        // Touches
        touchRatio: 1,
        touchAngle: 45,
        simulateTouch: true,
        shortSwipes: true,
        longSwipes: true,
        longSwipesRatio: 0.5,
        longSwipesMs: 300,
        followFinger: true,
        allowTouchMove: true,
        threshold: 0,
        touchMoveStopPropagation: true,
        touchReleaseOnEdges: false,

        // Unique Navigation Elements
        uniqueNavElements: true,

        // Resistance
        resistance: true,
        resistanceRatio: 0.85,

        // Progress
        watchSlidesProgress: false,
        watchSlidesVisibility: false,

        // Cursor
        grabCursor: false,

        // Clicks
        preventClicks: true,
        preventClicksPropagation: true,
        slideToClickedSlide: false,

        // Images
        preloadImages: true,
        updateOnImagesReady: true,

        // loop
        loop: false,
        loopAdditionalSlides: 0,
        loopedSlides: null,
        loopFillGroupWithBlank: false,

        // Swiping/no swiping
        allowSlidePrev: true,
        allowSlideNext: true,
        swipeHandler: null, // '.swipe-handler',
        noSwiping: true,
        noSwipingClass: 'swiper-no-swiping',
        noSwipingSelector: null,

        // Passive Listeners
        passiveListeners: true,

        // NS
        containerModifierClass: 'swiper-container-', // NEW
        slideClass: 'swiper-slide',
        slideBlankClass: 'swiper-slide-invisible-blank',
        slideActiveClass: 'swiper-slide-active',
        slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
        slideVisibleClass: 'swiper-slide-visible',
        slideDuplicateClass: 'swiper-slide-duplicate',
        slideNextClass: 'swiper-slide-next',
        slideDuplicateNextClass: 'swiper-slide-duplicate-next',
        slidePrevClass: 'swiper-slide-prev',
        slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
        wrapperClass: 'swiper-wrapper',

        // Callbacks
        runCallbacksOnInit: true,
    };

    var prototypes = {
        update: update,
        translate: translate,
        transition: transition$1,
        slide: slide,
        loop: loop,
        grabCursor: grabCursor,
        manipulation: manipulation,
        events: events,
        breakpoints: breakpoints,
        checkOverflow: checkOverflow$1,
        classes: classes,
        images: images,
    };

    var extendedDefaults = {};

    var Swiper = (function(SwiperClass$$1) {
        function Swiper() {
            var assign;

            var args = [],
                len = arguments.length;
            while (len--) args[len] = arguments[len];
            var el;
            var params;
            if (args.length === 1 && args[0].constructor && args[0].constructor === Object) {
                params = args[0];
            } else {
                (assign = args, el = assign[0], params = assign[1]);
            }
            if (!params) {
                params = {};
            }

            params = Utils.extend({}, params);
            if (el && !params.el) {
                params.el = el;
            }

            SwiperClass$$1.call(this, params);

            Object.keys(prototypes).forEach(function(prototypeGroup) {
                Object.keys(prototypes[prototypeGroup]).forEach(function(protoMethod) {
                    if (!Swiper.prototype[protoMethod]) {
                        Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
                    }
                });
            });

            // Swiper Instance
            var swiper = this;
            if (typeof swiper.modules === 'undefined') {
                swiper.modules = {};
            }
            Object.keys(swiper.modules).forEach(function(moduleName) {
                var module = swiper.modules[moduleName];
                if (module.params) {
                    var moduleParamName = Object.keys(module.params)[0];
                    var moduleParams = module.params[moduleParamName];
                    if (typeof moduleParams !== 'object') {
                        return;
                    }
                    if (!(moduleParamName in params && 'enabled' in moduleParams)) {
                        return;
                    }
                    if (params[moduleParamName] === true) {
                        params[moduleParamName] = {
                            enabled: true
                        };
                    }
                    if (
                        typeof params[moduleParamName] === 'object' &&
                        !('enabled' in params[moduleParamName])
                    ) {
                        params[moduleParamName].enabled = true;
                    }
                    if (!params[moduleParamName]) {
                        params[moduleParamName] = {
                            enabled: false
                        };
                    }
                }
            });

            // Extend defaults with modules params
            var swiperParams = Utils.extend({}, defaults);
            swiper.useModulesParams(swiperParams);

            // Extend defaults with passed params
            swiper.params = Utils.extend({}, swiperParams, extendedDefaults, params);
            swiper.originalParams = Utils.extend({}, swiper.params);
            swiper.passedParams = Utils.extend({}, params);

            // Save Dom lib
            swiper.$ = $;

            // Find el
            var $el = $(swiper.params.el);
            el = $el[0];

            if (!el) {
                return undefined;
            }

            if ($el.length > 1) {
                var swipers = [];
                $el.each(function(index, containerEl) {
                    var newParams = Utils.extend({}, params, {
                        el: containerEl
                    });
                    swipers.push(new Swiper(newParams));
                });
                return swipers;
            }

            el.swiper = swiper;
            $el.data('swiper', swiper);

            // Find Wrapper
            var $wrapperEl = $el.children(("." + (swiper.params.wrapperClass)));

            // Extend Swiper
            Utils.extend(swiper, {
                $el: $el,
                el: el,
                $wrapperEl: $wrapperEl,
                wrapperEl: $wrapperEl[0],

                // Classes
                classNames: [],

                // Slides
                slides: $(),
                slidesGrid: [],
                snapGrid: [],
                slidesSizesGrid: [],

                // isDirection
                isHorizontal: function isHorizontal() {
                    return swiper.params.direction === 'horizontal';
                },
                isVertical: function isVertical() {
                    return swiper.params.direction === 'vertical';
                },
                // RTL
                rtl: (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
                rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
                wrongRTL: $wrapperEl.css('display') === '-webkit-box',

                // Indexes
                activeIndex: 0,
                realIndex: 0,

                //
                isBeginning: true,
                isEnd: false,

                // Props
                translate: 0,
                previousTranslate: 0,
                progress: 0,
                velocity: 0,
                animating: false,

                // Locks
                allowSlideNext: swiper.params.allowSlideNext,
                allowSlidePrev: swiper.params.allowSlidePrev,

                // Touch Events
                touchEvents: (function touchEvents() {
                    var touch = ['touchstart', 'touchmove', 'touchend'];
                    var desktop = ['mousedown', 'mousemove', 'mouseup'];
                    if (Support.pointerEvents) {
                        desktop = ['pointerdown', 'pointermove', 'pointerup'];
                    } else if (Support.prefixedPointerEvents) {
                        desktop = ['MSPointerDown', 'MSPointerMove', 'MSPointerUp'];
                    }
                    swiper.touchEventsTouch = {
                        start: touch[0],
                        move: touch[1],
                        end: touch[2],
                    };
                    swiper.touchEventsDesktop = {
                        start: desktop[0],
                        move: desktop[1],
                        end: desktop[2],
                    };
                    return Support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
                }()),
                touchEventsData: {
                    isTouched: undefined,
                    isMoved: undefined,
                    allowTouchCallbacks: undefined,
                    touchStartTime: undefined,
                    isScrolling: undefined,
                    currentTranslate: undefined,
                    startTranslate: undefined,
                    allowThresholdMove: undefined,
                    // Form elements to match
                    formElements: 'input, select, option, textarea, button, video',
                    // Last click time
                    lastClickTime: Utils.now(),
                    clickTimeout: undefined,
                    // Velocities
                    velocities: [],
                    allowMomentumBounce: undefined,
                    isTouchEvent: undefined,
                    startMoving: undefined,
                },

                // Clicks
                allowClick: true,

                // Touches
                allowTouchMove: swiper.params.allowTouchMove,

                touches: {
                    startX: 0,
                    startY: 0,
                    currentX: 0,
                    currentY: 0,
                    diff: 0,
                },

                // Images
                imagesToLoad: [],
                imagesLoaded: 0,

            });

            // Install Modules
            swiper.useModules();

            // Init
            if (swiper.params.init) {
                swiper.init();
            }

            // Return app instance
            return swiper;
        }

        if (SwiperClass$$1) Swiper.__proto__ = SwiperClass$$1;
        Swiper.prototype = Object.create(SwiperClass$$1 && SwiperClass$$1.prototype);
        Swiper.prototype.constructor = Swiper;

        var staticAccessors = {
            extendedDefaults: {
                configurable: true
            },
            defaults: {
                configurable: true
            },
            Class: {
                configurable: true
            },
            $: {
                configurable: true
            }
        };

        Swiper.prototype.slidesPerViewDynamic = function slidesPerViewDynamic() {
            var swiper = this;
            var params = swiper.params;
            var slides = swiper.slides;
            var slidesGrid = swiper.slidesGrid;
            var swiperSize = swiper.size;
            var activeIndex = swiper.activeIndex;
            var spv = 1;
            if (params.centeredSlides) {
                var slideSize = slides[activeIndex].swiperSlideSize;
                var breakLoop;
                for (var i = activeIndex + 1; i < slides.length; i += 1) {
                    if (slides[i] && !breakLoop) {
                        slideSize += slides[i].swiperSlideSize;
                        spv += 1;
                        if (slideSize > swiperSize) {
                            breakLoop = true;
                        }
                    }
                }
                for (var i$1 = activeIndex - 1; i$1 >= 0; i$1 -= 1) {
                    if (slides[i$1] && !breakLoop) {
                        slideSize += slides[i$1].swiperSlideSize;
                        spv += 1;
                        if (slideSize > swiperSize) {
                            breakLoop = true;
                        }
                    }
                }
            } else {
                for (var i$2 = activeIndex + 1; i$2 < slides.length; i$2 += 1) {
                    if (slidesGrid[i$2] - slidesGrid[activeIndex] < swiperSize) {
                        spv += 1;
                    }
                }
            }
            return spv;
        };

        Swiper.prototype.update = function update$$1() {
            var swiper = this;
            if (!swiper || swiper.destroyed) {
                return;
            }
            var snapGrid = swiper.snapGrid;
            var params = swiper.params;
            // Breakpoints
            if (params.breakpoints) {
                swiper.setBreakpoint();
            }
            swiper.updateSize();
            swiper.updateSlides();
            swiper.updateProgress();
            swiper.updateSlidesClasses();

            function setTranslate() {
                var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
                var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
                swiper.setTranslate(newTranslate);
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
            }
            var translated;
            if (swiper.params.freeMode) {
                setTranslate();
                if (swiper.params.autoHeight) {
                    swiper.updateAutoHeight();
                }
            } else {
                if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
                    translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
                } else {
                    translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
                }
                if (!translated) {
                    setTranslate();
                }
            }
            if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
                swiper.checkOverflow();
            }
            swiper.emit('update');
        };

        Swiper.prototype.init = function init() {
            var swiper = this;
            if (swiper.initialized) {
                return;
            }

            swiper.emit('beforeInit');

            // Set breakpoint
            if (swiper.params.breakpoints) {
                swiper.setBreakpoint();
            }

            // Add Classes
            swiper.addClasses();

            // Create loop
            if (swiper.params.loop) {
                swiper.loopCreate();
            }

            // Update size
            swiper.updateSize();

            // Update slides
            swiper.updateSlides();

            if (swiper.params.watchOverflow) {
                swiper.checkOverflow();
            }

            // Set Grab Cursor
            if (swiper.params.grabCursor) {
                swiper.setGrabCursor();
            }

            if (swiper.params.preloadImages) {
                swiper.preloadImages();
            }

            // Slide To Initial Slide
            if (swiper.params.loop) {
                swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit);
            } else {
                swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit);
            }

            // Attach events
            swiper.attachEvents();

            // Init Flag
            swiper.initialized = true;

            // Emit
            swiper.emit('init');
        };

        Swiper.prototype.destroy = function destroy(deleteInstance, cleanStyles) {
            if (deleteInstance === void 0) deleteInstance = true;
            if (cleanStyles === void 0) cleanStyles = true;

            var swiper = this;
            var params = swiper.params;
            var $el = swiper.$el;
            var $wrapperEl = swiper.$wrapperEl;
            var slides = swiper.slides;

            if (typeof swiper.params === 'undefined' || swiper.destroyed) {
                return null;
            }

            swiper.emit('beforeDestroy');

            // Init Flag
            swiper.initialized = false;

            // Detach events
            swiper.detachEvents();

            // Destroy loop
            if (params.loop) {
                swiper.loopDestroy();
            }

            // Cleanup styles
            if (cleanStyles) {
                swiper.removeClasses();
                $el.removeAttr('style');
                $wrapperEl.removeAttr('style');
                if (slides && slides.length) {
                    slides
                        .removeClass([
                            params.slideVisibleClass,
                            params.slideActiveClass,
                            params.slideNextClass,
                            params.slidePrevClass
                        ].join(' '))
                        .removeAttr('style')
                        .removeAttr('data-swiper-slide-index')
                        .removeAttr('data-swiper-column')
                        .removeAttr('data-swiper-row');
                }
            }

            swiper.emit('destroy');

            // Detach emitter events
            Object.keys(swiper.eventsListeners).forEach(function(eventName) {
                swiper.off(eventName);
            });

            if (deleteInstance !== false) {
                swiper.$el[0].swiper = null;
                swiper.$el.data('swiper', null);
                Utils.deleteProps(swiper);
            }
            swiper.destroyed = true;

            return null;
        };

        Swiper.extendDefaults = function extendDefaults(newDefaults) {
            Utils.extend(extendedDefaults, newDefaults);
        };

        staticAccessors.extendedDefaults.get = function() {
            return extendedDefaults;
        };

        staticAccessors.defaults.get = function() {
            return defaults;
        };

        staticAccessors.Class.get = function() {
            return SwiperClass$$1;
        };

        staticAccessors.$.get = function() {
            return $;
        };

        Object.defineProperties(Swiper, staticAccessors);

        return Swiper;
    }(SwiperClass));

    var Device$1 = {
        name: 'device',
        proto: {
            device: Device,
        },
        static: {
            device: Device,
        },
    };

    var Support$1 = {
        name: 'support',
        proto: {
            support: Support,
        },
        static: {
            support: Support,
        },
    };

    var Browser$1 = {
        name: 'browser',
        proto: {
            browser: Browser,
        },
        static: {
            browser: Browser,
        },
    };

    var Resize = {
        name: 'resize',
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                resize: {
                    resizeHandler: function resizeHandler() {
                        if (!swiper || swiper.destroyed || !swiper.initialized) {
                            return;
                        }
                        swiper.emit('beforeResize');
                        swiper.emit('resize');
                    },
                    orientationChangeHandler: function orientationChangeHandler() {
                        if (!swiper || swiper.destroyed || !swiper.initialized) {
                            return;
                        }
                        swiper.emit('orientationchange');
                    },
                },
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                // Emit resize
                win.addEventListener('resize', swiper.resize.resizeHandler);

                // Emit orientationchange
                win.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
            },
            destroy: function destroy() {
                var swiper = this;
                win.removeEventListener('resize', swiper.resize.resizeHandler);
                win.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
            },
        },
    };

    var Observer = {
        func: win.MutationObserver || win.WebkitMutationObserver,
        attach: function attach(target, options) {
            if (options === void 0) options = {};

            var swiper = this;

            var ObserverFunc = Observer.func;
            var observer = new ObserverFunc(function(mutations) {
                // The observerUpdate event should only be triggered
                // once despite the number of mutations.  Additional
                // triggers are redundant and are very costly
                if (mutations.length === 1) {
                    swiper.emit('observerUpdate', mutations[0]);
                    return;
                }
                var observerUpdate = function observerUpdate() {
                    swiper.emit('observerUpdate', mutations[0]);
                };

                if (win.requestAnimationFrame) {
                    win.requestAnimationFrame(observerUpdate);
                } else {
                    win.setTimeout(observerUpdate, 0);
                }
            });

            observer.observe(target, {
                attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
                childList: typeof options.childList === 'undefined' ? true : options.childList,
                characterData: typeof options.characterData === 'undefined' ? true : options.characterData,
            });

            swiper.observer.observers.push(observer);
        },
        init: function init() {
            var swiper = this;
            if (!Support.observer || !swiper.params.observer) {
                return;
            }
            if (swiper.params.observeParents) {
                var containerParents = swiper.$el.parents();
                for (var i = 0; i < containerParents.length; i += 1) {
                    swiper.observer.attach(containerParents[i]);
                }
            }
            // Observe container
            swiper.observer.attach(swiper.$el[0], {
                childList: false
            });

            // Observe wrapper
            swiper.observer.attach(swiper.$wrapperEl[0], {
                attributes: false
            });
        },
        destroy: function destroy() {
            var swiper = this;
            swiper.observer.observers.forEach(function(observer) {
                observer.disconnect();
            });
            swiper.observer.observers = [];
        },
    };

    var Observer$1 = {
        name: 'observer',
        params: {
            observer: false,
            observeParents: false,
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                observer: {
                    init: Observer.init.bind(swiper),
                    attach: Observer.attach.bind(swiper),
                    destroy: Observer.destroy.bind(swiper),
                    observers: [],
                },
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                swiper.observer.init();
            },
            destroy: function destroy() {
                var swiper = this;
                swiper.observer.destroy();
            },
        },
    };

    var Virtual = {
        update: function update(force) {
            var swiper = this;
            var ref = swiper.params;
            var slidesPerView = ref.slidesPerView;
            var slidesPerGroup = ref.slidesPerGroup;
            var centeredSlides = ref.centeredSlides;
            var ref$1 = swiper.virtual;
            var previousFrom = ref$1.from;
            var previousTo = ref$1.to;
            var slides = ref$1.slides;
            var previousSlidesGrid = ref$1.slidesGrid;
            var renderSlide = ref$1.renderSlide;
            var previousOffset = ref$1.offset;
            swiper.updateActiveIndex();
            var activeIndex = swiper.activeIndex || 0;

            var offsetProp;
            if (swiper.rtlTranslate) {
                offsetProp = 'right';
            } else {
                offsetProp = swiper.isHorizontal() ? 'left' : 'top';
            }

            var slidesAfter;
            var slidesBefore;
            if (centeredSlides) {
                slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup;
                slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup;
            } else {
                slidesAfter = slidesPerView + (slidesPerGroup - 1);
                slidesBefore = slidesPerGroup;
            }
            var from = Math.max((activeIndex || 0) - slidesBefore, 0);
            var to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);
            var offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);

            Utils.extend(swiper.virtual, {
                from: from,
                to: to,
                offset: offset,
                slidesGrid: swiper.slidesGrid,
            });

            function onRendered() {
                swiper.updateSlides();
                swiper.updateProgress();
                swiper.updateSlidesClasses();
                if (swiper.lazy && swiper.params.lazy.enabled) {
                    swiper.lazy.load();
                }
            }

            if (previousFrom === from && previousTo === to && !force) {
                if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
                    swiper.slides.css(offsetProp, (offset + "px"));
                }
                swiper.updateProgress();
                return;
            }
            if (swiper.params.virtual.renderExternal) {
                swiper.params.virtual.renderExternal.call(swiper, {
                    offset: offset,
                    from: from,
                    to: to,
                    slides: (function getSlides() {
                        var slidesToRender = [];
                        for (var i = from; i <= to; i += 1) {
                            slidesToRender.push(slides[i]);
                        }
                        return slidesToRender;
                    }()),
                });
                onRendered();
                return;
            }
            var prependIndexes = [];
            var appendIndexes = [];
            if (force) {
                swiper.$wrapperEl.find(("." + (swiper.params.slideClass))).remove();
            } else {
                for (var i = previousFrom; i <= previousTo; i += 1) {
                    if (i < from || i > to) {
                        swiper.$wrapperEl.find(("." + (swiper.params.slideClass) + "[data-swiper-slide-index=\"" + i + "\"]")).remove();
                    }
                }
            }
            for (var i$1 = 0; i$1 < slides.length; i$1 += 1) {
                if (i$1 >= from && i$1 <= to) {
                    if (typeof previousTo === 'undefined' || force) {
                        appendIndexes.push(i$1);
                    } else {
                        if (i$1 > previousTo) {
                            appendIndexes.push(i$1);
                        }
                        if (i$1 < previousFrom) {
                            prependIndexes.push(i$1);
                        }
                    }
                }
            }
            appendIndexes.forEach(function(index) {
                swiper.$wrapperEl.append(renderSlide(slides[index], index));
            });
            prependIndexes.sort(function(a, b) {
                return a < b;
            }).forEach(function(index) {
                swiper.$wrapperEl.prepend(renderSlide(slides[index], index));
            });
            swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, (offset + "px"));
            onRendered();
        },
        renderSlide: function renderSlide(slide, index) {
            var swiper = this;
            var params = swiper.params.virtual;
            if (params.cache && swiper.virtual.cache[index]) {
                return swiper.virtual.cache[index];
            }
            var $slideEl = params.renderSlide ?
                $(params.renderSlide.call(swiper, slide, index)) :
                $(("<div class=\"" + (swiper.params.slideClass) + "\" data-swiper-slide-index=\"" + index + "\">" + slide + "</div>"));
            if (!$slideEl.attr('data-swiper-slide-index')) {
                $slideEl.attr('data-swiper-slide-index', index);
            }
            if (params.cache) {
                swiper.virtual.cache[index] = $slideEl;
            }
            return $slideEl;
        },
        appendSlide: function appendSlide(slide) {
            var swiper = this;
            swiper.virtual.slides.push(slide);
            swiper.virtual.update(true);
        },
        prependSlide: function prependSlide(slide) {
            var swiper = this;
            swiper.virtual.slides.unshift(slide);
            if (swiper.params.virtual.cache) {
                var cache = swiper.virtual.cache;
                var newCache = {};
                Object.keys(cache).forEach(function(cachedIndex) {
                    newCache[cachedIndex + 1] = cache[cachedIndex];
                });
                swiper.virtual.cache = newCache;
            }
            swiper.virtual.update(true);
            swiper.slideNext(0);
        },
    };

    var Virtual$1 = {
        name: 'virtual',
        params: {
            virtual: {
                enabled: false,
                slides: [],
                cache: true,
                renderSlide: null,
                renderExternal: null,
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                virtual: {
                    update: Virtual.update.bind(swiper),
                    appendSlide: Virtual.appendSlide.bind(swiper),
                    prependSlide: Virtual.prependSlide.bind(swiper),
                    renderSlide: Virtual.renderSlide.bind(swiper),
                    slides: swiper.params.virtual.slides,
                    cache: {},
                },
            });
        },
        on: {
            beforeInit: function beforeInit() {
                var swiper = this;
                if (!swiper.params.virtual.enabled) {
                    return;
                }
                swiper.classNames.push(((swiper.params.containerModifierClass) + "virtual"));
                var overwriteParams = {
                    watchSlidesProgress: true,
                };
                Utils.extend(swiper.params, overwriteParams);
                Utils.extend(swiper.originalParams, overwriteParams);

                swiper.virtual.update();
            },
            setTranslate: function setTranslate() {
                var swiper = this;
                if (!swiper.params.virtual.enabled) {
                    return;
                }
                swiper.virtual.update();
            },
        },
    };

    var Keyboard = {
        handle: function handle(event) {
            var swiper = this;
            var rtl = swiper.rtlTranslate;
            var e = event;
            if (e.originalEvent) {
                e = e.originalEvent;
            } // jquery fix
            var kc = e.keyCode || e.charCode;
            // Directions locks
            if (!swiper.allowSlideNext && ((swiper.isHorizontal() && kc === 39) || (swiper.isVertical() && kc === 40))) {
                return false;
            }
            if (!swiper.allowSlidePrev && ((swiper.isHorizontal() && kc === 37) || (swiper.isVertical() && kc === 38))) {
                return false;
            }
            if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
                return undefined;
            }
            if (doc.activeElement && doc.activeElement.nodeName && (doc.activeElement.nodeName.toLowerCase() === 'input' || doc.activeElement.nodeName.toLowerCase() === 'textarea')) {
                return undefined;
            }
            if (swiper.params.keyboard.onlyInViewport && (kc === 37 || kc === 39 || kc === 38 || kc === 40)) {
                var inView = false;
                // Check that swiper should be inside of visible area of window
                if (swiper.$el.parents(("." + (swiper.params.slideClass))).length > 0 && swiper.$el.parents(("." + (swiper.params.slideActiveClass))).length === 0) {
                    return undefined;
                }
                var windowWidth = win.innerWidth;
                var windowHeight = win.innerHeight;
                var swiperOffset = swiper.$el.offset();
                if (rtl) {
                    swiperOffset.left -= swiper.$el[0].scrollLeft;
                }
                var swiperCoord = [
                    [swiperOffset.left, swiperOffset.top],
                    [swiperOffset.left + swiper.width, swiperOffset.top],
                    [swiperOffset.left, swiperOffset.top + swiper.height],
                    [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]
                ];
                for (var i = 0; i < swiperCoord.length; i += 1) {
                    var point = swiperCoord[i];
                    if (
                        point[0] >= 0 && point[0] <= windowWidth &&
                        point[1] >= 0 && point[1] <= windowHeight
                    ) {
                        inView = true;
                    }
                }
                if (!inView) {
                    return undefined;
                }
            }
            if (swiper.isHorizontal()) {
                if (kc === 37 || kc === 39) {
                    if (e.preventDefault) {
                        e.preventDefault();
                    } else {
                        e.returnValue = false;
                    }
                }
                if ((kc === 39 && !rtl) || (kc === 37 && rtl)) {
                    swiper.slideNext();
                }
                if ((kc === 37 && !rtl) || (kc === 39 && rtl)) {
                    swiper.slidePrev();
                }
            } else {
                if (kc === 38 || kc === 40) {
                    if (e.preventDefault) {
                        e.preventDefault();
                    } else {
                        e.returnValue = false;
                    }
                }
                if (kc === 40) {
                    swiper.slideNext();
                }
                if (kc === 38) {
                    swiper.slidePrev();
                }
            }
            swiper.emit('keyPress', kc);
            return undefined;
        },
        enable: function enable() {
            var swiper = this;
            if (swiper.keyboard.enabled) {
                return;
            }
            $(doc).on('keydown', swiper.keyboard.handle);
            swiper.keyboard.enabled = true;
        },
        disable: function disable() {
            var swiper = this;
            if (!swiper.keyboard.enabled) {
                return;
            }
            $(doc).off('keydown', swiper.keyboard.handle);
            swiper.keyboard.enabled = false;
        },
    };

    var Keyboard$1 = {
        name: 'keyboard',
        params: {
            keyboard: {
                enabled: false,
                onlyInViewport: true,
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                keyboard: {
                    enabled: false,
                    enable: Keyboard.enable.bind(swiper),
                    disable: Keyboard.disable.bind(swiper),
                    handle: Keyboard.handle.bind(swiper),
                },
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                if (swiper.params.keyboard.enabled) {
                    swiper.keyboard.enable();
                }
            },
            destroy: function destroy() {
                var swiper = this;
                if (swiper.keyboard.enabled) {
                    swiper.keyboard.disable();
                }
            },
        },
    };

    function isEventSupported() {
        var eventName = 'onwheel';
        var isSupported = eventName in doc;

        if (!isSupported) {
            var element = doc.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }

        if (!isSupported &&
            doc.implementation &&
            doc.implementation.hasFeature
            // always returns true in newer browsers as per the standard.
            // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
            &&
            doc.implementation.hasFeature('', '') !== true
        ) {
            // This is the only way to test support for the `wheel` event in IE9+.
            isSupported = doc.implementation.hasFeature('Events.wheel', '3.0');
        }

        return isSupported;
    }
    var Mousewheel = {
        lastScrollTime: Utils.now(),
        event: (function getEvent() {
            if (win.navigator.userAgent.indexOf('firefox') > -1) {
                return 'DOMMouseScroll';
            }
            return isEventSupported() ? 'wheel' : 'mousewheel';
        }()),
        normalize: function normalize(e) {
            // Reasonable defaults
            var PIXEL_STEP = 10;
            var LINE_HEIGHT = 40;
            var PAGE_HEIGHT = 800;

            var sX = 0;
            var sY = 0; // spinX, spinY
            var pX = 0;
            var pY = 0; // pixelX, pixelY

            // Legacy
            if ('detail' in e) {
                sY = e.detail;
            }
            if ('wheelDelta' in e) {
                sY = -e.wheelDelta / 120;
            }
            if ('wheelDeltaY' in e) {
                sY = -e.wheelDeltaY / 120;
            }
            if ('wheelDeltaX' in e) {
                sX = -e.wheelDeltaX / 120;
            }

            // side scrolling on FF with DOMMouseScroll
            if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
                sX = sY;
                sY = 0;
            }

            pX = sX * PIXEL_STEP;
            pY = sY * PIXEL_STEP;

            if ('deltaY' in e) {
                pY = e.deltaY;
            }
            if ('deltaX' in e) {
                pX = e.deltaX;
            }

            if ((pX || pY) && e.deltaMode) {
                if (e.deltaMode === 1) { // delta in LINE units
                    pX *= LINE_HEIGHT;
                    pY *= LINE_HEIGHT;
                } else { // delta in PAGE units
                    pX *= PAGE_HEIGHT;
                    pY *= PAGE_HEIGHT;
                }
            }

            // Fall-back if spin cannot be determined
            if (pX && !sX) {
                sX = (pX < 1) ? -1 : 1;
            }
            if (pY && !sY) {
                sY = (pY < 1) ? -1 : 1;
            }

            return {
                spinX: sX,
                spinY: sY,
                pixelX: pX,
                pixelY: pY,
            };
        },
        handleMouseEnter: function handleMouseEnter() {
            var swiper = this;
            swiper.mouseEntered = true;
        },
        handleMouseLeave: function handleMouseLeave() {
            var swiper = this;
            swiper.mouseEntered = false;
        },
        handle: function handle(event) {
            var e = event;
            var swiper = this;
            var params = swiper.params.mousewheel;

            if (!swiper.mouseEntered && !params.releaseOnEdges) {
                return true;
            }

            if (e.originalEvent) {
                e = e.originalEvent;
            } // jquery fix
            var delta = 0;
            var rtlFactor = swiper.rtlTranslate ? -1 : 1;

            var data = Mousewheel.normalize(e);

            if (params.forceToAxis) {
                if (swiper.isHorizontal()) {
                    if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) {
                        delta = data.pixelX * rtlFactor;
                    } else {
                        return true;
                    }
                } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) {
                    delta = data.pixelY;
                } else {
                    return true;
                }
            } else {
                delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
            }

            if (delta === 0) {
                return true;
            }

            if (params.invert) {
                delta = -delta;
            }

            if (!swiper.params.freeMode) {
                if (Utils.now() - swiper.mousewheel.lastScrollTime > 60) {
                    if (delta < 0) {
                        if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
                            swiper.slideNext();
                            swiper.emit('scroll', e);
                        } else if (params.releaseOnEdges) {
                            return true;
                        }
                    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
                        swiper.slidePrev();
                        swiper.emit('scroll', e);
                    } else if (params.releaseOnEdges) {
                        return true;
                    }
                }
                swiper.mousewheel.lastScrollTime = (new win.Date()).getTime();
            } else {
                // Freemode or scrollContainer:
                if (swiper.params.loop) {
                    swiper.loopFix();
                }
                var position = swiper.getTranslate() + (delta * params.sensitivity);
                var wasBeginning = swiper.isBeginning;
                var wasEnd = swiper.isEnd;

                if (position >= swiper.minTranslate()) {
                    position = swiper.minTranslate();
                }
                if (position <= swiper.maxTranslate()) {
                    position = swiper.maxTranslate();
                }

                swiper.setTransition(0);
                swiper.setTranslate(position);
                swiper.updateProgress();
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();

                if ((!wasBeginning && swiper.isBeginning) || (!wasEnd && swiper.isEnd)) {
                    swiper.updateSlidesClasses();
                }

                if (swiper.params.freeModeSticky) {
                    clearTimeout(swiper.mousewheel.timeout);
                    swiper.mousewheel.timeout = Utils.nextTick(function() {
                        swiper.slideToClosest();
                    }, 300);
                }
                // Emit event
                swiper.emit('scroll', e);

                // Stop autoplay
                if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) {
                    swiper.autoplay.stop();
                }
                // Return page scroll on edge positions
                if (position === swiper.minTranslate() || position === swiper.maxTranslate()) {
                    return true;
                }
            }

            if (e.preventDefault) {
                e.preventDefault();
            } else {
                e.returnValue = false;
            }
            return false;
        },
        enable: function enable() {
            var swiper = this;
            if (!Mousewheel.event) {
                return false;
            }
            if (swiper.mousewheel.enabled) {
                return false;
            }
            var target = swiper.$el;
            if (swiper.params.mousewheel.eventsTarged !== 'container') {
                target = $(swiper.params.mousewheel.eventsTarged);
            }
            target.on('mouseenter', swiper.mousewheel.handleMouseEnter);
            target.on('mouseleave', swiper.mousewheel.handleMouseLeave);
            target.on(Mousewheel.event, swiper.mousewheel.handle);
            swiper.mousewheel.enabled = true;
            return true;
        },
        disable: function disable() {
            var swiper = this;
            if (!Mousewheel.event) {
                return false;
            }
            if (!swiper.mousewheel.enabled) {
                return false;
            }
            var target = swiper.$el;
            if (swiper.params.mousewheel.eventsTarged !== 'container') {
                target = $(swiper.params.mousewheel.eventsTarged);
            }
            target.off(Mousewheel.event, swiper.mousewheel.handle);
            swiper.mousewheel.enabled = false;
            return true;
        },
    };

    var Mousewheel$1 = {
        name: 'mousewheel',
        params: {
            mousewheel: {
                enabled: false,
                releaseOnEdges: false,
                invert: false,
                forceToAxis: false,
                sensitivity: 1,
                eventsTarged: 'container',
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                mousewheel: {
                    enabled: false,
                    enable: Mousewheel.enable.bind(swiper),
                    disable: Mousewheel.disable.bind(swiper),
                    handle: Mousewheel.handle.bind(swiper),
                    handleMouseEnter: Mousewheel.handleMouseEnter.bind(swiper),
                    handleMouseLeave: Mousewheel.handleMouseLeave.bind(swiper),
                    lastScrollTime: Utils.now(),
                },
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                if (swiper.params.mousewheel.enabled) {
                    swiper.mousewheel.enable();
                }
            },
            destroy: function destroy() {
                var swiper = this;
                if (swiper.mousewheel.enabled) {
                    swiper.mousewheel.disable();
                }
            },
        },
    };

    var Navigation = {
        update: function update() {
            // Update Navigation Buttons
            var swiper = this;
            var params = swiper.params.navigation;

            if (swiper.params.loop) {
                return;
            }
            var ref = swiper.navigation;
            var $nextEl = ref.$nextEl;
            var $prevEl = ref.$prevEl;

            if ($prevEl && $prevEl.length > 0) {
                if (swiper.isBeginning) {
                    $prevEl.addClass(params.disabledClass);
                } else {
                    $prevEl.removeClass(params.disabledClass);
                }
                $prevEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
            }
            if ($nextEl && $nextEl.length > 0) {
                if (swiper.isEnd) {
                    $nextEl.addClass(params.disabledClass);
                } else {
                    $nextEl.removeClass(params.disabledClass);
                }
                $nextEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
            }
        },
        init: function init() {
            var swiper = this;
            var params = swiper.params.navigation;
            if (!(params.nextEl || params.prevEl)) {
                return;
            }

            var $nextEl;
            var $prevEl;
            if (params.nextEl) {
                $nextEl = $(params.nextEl);
                if (
                    swiper.params.uniqueNavElements &&
                    typeof params.nextEl === 'string' &&
                    $nextEl.length > 1 &&
                    swiper.$el.find(params.nextEl).length === 1
                ) {
                    $nextEl = swiper.$el.find(params.nextEl);
                }
            }
            if (params.prevEl) {
                $prevEl = $(params.prevEl);
                if (
                    swiper.params.uniqueNavElements &&
                    typeof params.prevEl === 'string' &&
                    $prevEl.length > 1 &&
                    swiper.$el.find(params.prevEl).length === 1
                ) {
                    $prevEl = swiper.$el.find(params.prevEl);
                }
            }

            if ($nextEl && $nextEl.length > 0) {
                $nextEl.on('click', function(e) {
                    e.preventDefault();
                    if (swiper.isEnd && !swiper.params.loop) {
                        return;
                    }
                    swiper.slideNext();
                });
            }
            if ($prevEl && $prevEl.length > 0) {
                $prevEl.on('click', function(e) {
                    e.preventDefault();
                    if (swiper.isBeginning && !swiper.params.loop) {
                        return;
                    }
                    swiper.slidePrev();
                });
            }

            Utils.extend(swiper.navigation, {
                $nextEl: $nextEl,
                nextEl: $nextEl && $nextEl[0],
                $prevEl: $prevEl,
                prevEl: $prevEl && $prevEl[0],
            });
        },
        destroy: function destroy() {
            var swiper = this;
            var ref = swiper.navigation;
            var $nextEl = ref.$nextEl;
            var $prevEl = ref.$prevEl;
            if ($nextEl && $nextEl.length) {
                $nextEl.off('click');
                $nextEl.removeClass(swiper.params.navigation.disabledClass);
            }
            if ($prevEl && $prevEl.length) {
                $prevEl.off('click');
                $prevEl.removeClass(swiper.params.navigation.disabledClass);
            }
        },
    };

    var Navigation$1 = {
        name: 'navigation',
        params: {
            navigation: {
                nextEl: null,
                prevEl: null,

                hideOnClick: false,
                disabledClass: 'swiper-button-disabled',
                hiddenClass: 'swiper-button-hidden',
                lockClass: 'swiper-button-lock',
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                navigation: {
                    init: Navigation.init.bind(swiper),
                    update: Navigation.update.bind(swiper),
                    destroy: Navigation.destroy.bind(swiper),
                },
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                swiper.navigation.init();
                swiper.navigation.update();
            },
            toEdge: function toEdge() {
                var swiper = this;
                swiper.navigation.update();
            },
            fromEdge: function fromEdge() {
                var swiper = this;
                swiper.navigation.update();
            },
            destroy: function destroy() {
                var swiper = this;
                swiper.navigation.destroy();
            },
            click: function click(e) {
                var swiper = this;
                var ref = swiper.navigation;
                var $nextEl = ref.$nextEl;
                var $prevEl = ref.$prevEl;
                if (
                    swiper.params.navigation.hideOnClick &&
                    !$(e.target).is($prevEl) &&
                    !$(e.target).is($nextEl)
                ) {
                    if ($nextEl) {
                        $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
                    }
                    if ($prevEl) {
                        $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
                    }
                }
            },
        },
    };

    var Pagination = {
        update: function update() {
            // Render || Update Pagination bullets/items
            var swiper = this;
            var rtl = swiper.rtl;
            var params = swiper.params.pagination;
            if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) {
                return;
            }
            var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
            var $el = swiper.pagination.$el;
            // Current/Total
            var current;
            var total = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
            if (swiper.params.loop) {
                current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);
                if (current > slidesLength - 1 - (swiper.loopedSlides * 2)) {
                    current -= (slidesLength - (swiper.loopedSlides * 2));
                }
                if (current > total - 1) {
                    current -= total;
                }
                if (current < 0 && swiper.params.paginationType !== 'bullets') {
                    current = total + current;
                }
            } else if (typeof swiper.snapIndex !== 'undefined') {
                current = swiper.snapIndex;
            } else {
                current = swiper.activeIndex || 0;
            }
            // Types
            if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
                var bullets = swiper.pagination.bullets;
                var firstIndex;
                var lastIndex;
                var midIndex;
                if (params.dynamicBullets) {
                    swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
                    $el.css(swiper.isHorizontal() ? 'width' : 'height', ((swiper.pagination.bulletSize * (params.dynamicMainBullets + 4)) + "px"));
                    if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
                        swiper.pagination.dynamicBulletIndex += (current - swiper.previousIndex);
                        if (swiper.pagination.dynamicBulletIndex > (params.dynamicMainBullets - 1)) {
                            swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
                        } else if (swiper.pagination.dynamicBulletIndex < 0) {
                            swiper.pagination.dynamicBulletIndex = 0;
                        }
                    }
                    firstIndex = current - swiper.pagination.dynamicBulletIndex;
                    lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
                    midIndex = (lastIndex + firstIndex) / 2;
                }
                bullets.removeClass(((params.bulletActiveClass) + " " + (params.bulletActiveClass) + "-next " + (params.bulletActiveClass) + "-next-next " + (params.bulletActiveClass) + "-prev " + (params.bulletActiveClass) + "-prev-prev " + (params.bulletActiveClass) + "-main"));
                if ($el.length > 1) {
                    bullets.each(function(index, bullet) {
                        var $bullet = $(bullet);
                        var bulletIndex = $bullet.index();
                        if (bulletIndex === current) {
                            $bullet.addClass(params.bulletActiveClass);
                        }
                        if (params.dynamicBullets) {
                            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
                                $bullet.addClass(((params.bulletActiveClass) + "-main"));
                            }
                            if (bulletIndex === firstIndex) {
                                $bullet
                                    .prev()
                                    .addClass(((params.bulletActiveClass) + "-prev"))
                                    .prev()
                                    .addClass(((params.bulletActiveClass) + "-prev-prev"));
                            }
                            if (bulletIndex === lastIndex) {
                                $bullet
                                    .next()
                                    .addClass(((params.bulletActiveClass) + "-next"))
                                    .next()
                                    .addClass(((params.bulletActiveClass) + "-next-next"));
                            }
                        }
                    });
                } else {
                    var $bullet = bullets.eq(current);
                    $bullet.addClass(params.bulletActiveClass);
                    if (params.dynamicBullets) {
                        var $firstDisplayedBullet = bullets.eq(firstIndex);
                        var $lastDisplayedBullet = bullets.eq(lastIndex);
                        for (var i = firstIndex; i <= lastIndex; i += 1) {
                            bullets.eq(i).addClass(((params.bulletActiveClass) + "-main"));
                        }
                        $firstDisplayedBullet
                            .prev()
                            .addClass(((params.bulletActiveClass) + "-prev"))
                            .prev()
                            .addClass(((params.bulletActiveClass) + "-prev-prev"));
                        $lastDisplayedBullet
                            .next()
                            .addClass(((params.bulletActiveClass) + "-next"))
                            .next()
                            .addClass(((params.bulletActiveClass) + "-next-next"));
                    }
                }
                if (params.dynamicBullets) {
                    var dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
                    var bulletsOffset = (((swiper.pagination.bulletSize * dynamicBulletsLength) - (swiper.pagination.bulletSize)) / 2) - (midIndex * swiper.pagination.bulletSize);
                    var offsetProp = rtl ? 'right' : 'left';
                    bullets.css(swiper.isHorizontal() ? offsetProp : 'top', (bulletsOffset + "px"));
                }
            }
            if (params.type === 'fraction') {
                $el.find(("." + (params.currentClass))).text(params.formatFractionCurrent(current + 1));
                $el.find(("." + (params.totalClass))).text(params.formatFractionTotal(total));
            }
            if (params.type === 'progressbar') {
                var progressbarDirection;
                if (params.progressbarOpposite) {
                    progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
                } else {
                    progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
                }
                var scale = (current + 1) / total;
                var scaleX = 1;
                var scaleY = 1;
                if (progressbarDirection === 'horizontal') {
                    scaleX = scale;
                } else {
                    scaleY = scale;
                }
                $el.find(("." + (params.progressbarFillClass))).transform(("translate3d(0,0,0) scaleX(" + scaleX + ") scaleY(" + scaleY + ")")).transition(swiper.params.speed);
            }
            if (params.type === 'custom' && params.renderCustom) {
                $el.html(params.renderCustom(swiper, current + 1, total));
                swiper.emit('paginationRender', swiper, $el[0]);
            } else {
                swiper.emit('paginationUpdate', swiper, $el[0]);
            }
            $el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
        },
        render: function render() {
            // Render Container
            var swiper = this;
            var params = swiper.params.pagination;
            if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) {
                return;
            }
            var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;

            var $el = swiper.pagination.$el;
            var paginationHTML = '';
            if (params.type === 'bullets') {
                var numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
                for (var i = 0; i < numberOfBullets; i += 1) {
                    if (params.renderBullet) {
                        paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
                    } else {
                        paginationHTML += "<" + (params.bulletElement) + " class=\"" + (params.bulletClass) + "\"></" + (params.bulletElement) + ">";
                    }
                }
                $el.html(paginationHTML);
                swiper.pagination.bullets = $el.find(("." + (params.bulletClass)));
            }
            if (params.type === 'fraction') {
                if (params.renderFraction) {
                    paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
                } else {
                    paginationHTML = "<span class=\"" + (params.currentClass) + "\"></span>" +
                        ' / ' +
                        "<span class=\"" + (params.totalClass) + "\"></span>";
                }
                $el.html(paginationHTML);
            }
            if (params.type === 'progressbar') {
                if (params.renderProgressbar) {
                    paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
                } else {
                    paginationHTML = "<span class=\"" + (params.progressbarFillClass) + "\"></span>";
                }
                $el.html(paginationHTML);
            }
            if (params.type !== 'custom') {
                swiper.emit('paginationRender', swiper.pagination.$el[0]);
            }
        },
        init: function init() {
            var swiper = this;
            var params = swiper.params.pagination;
            if (!params.el) {
                return;
            }

            var $el = $(params.el);
            if ($el.length === 0) {
                return;
            }

            if (
                swiper.params.uniqueNavElements &&
                typeof params.el === 'string' &&
                $el.length > 1 &&
                swiper.$el.find(params.el).length === 1
            ) {
                $el = swiper.$el.find(params.el);
            }

            if (params.type === 'bullets' && params.clickable) {
                $el.addClass(params.clickableClass);
            }

            $el.addClass(params.modifierClass + params.type);

            if (params.type === 'bullets' && params.dynamicBullets) {
                $el.addClass(("" + (params.modifierClass) + (params.type) + "-dynamic"));
                swiper.pagination.dynamicBulletIndex = 0;
                if (params.dynamicMainBullets < 1) {
                    params.dynamicMainBullets = 1;
                }
            }
            if (params.type === 'progressbar' && params.progressbarOpposite) {
                $el.addClass(params.progressbarOppositeClass);
            }

            if (params.clickable) {
                $el.on('click', ("." + (params.bulletClass)), function onClick(e) {
                    e.preventDefault();
                    var index = $(this).index() * swiper.params.slidesPerGroup;
                    if (swiper.params.loop) {
                        index += swiper.loopedSlides;
                    }
                    swiper.slideTo(index);
                });
            }

            Utils.extend(swiper.pagination, {
                $el: $el,
                el: $el[0],
            });
        },
        destroy: function destroy() {
            var swiper = this;
            var params = swiper.params.pagination;
            if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) {
                return;
            }
            var $el = swiper.pagination.$el;

            $el.removeClass(params.hiddenClass);
            $el.removeClass(params.modifierClass + params.type);
            if (swiper.pagination.bullets) {
                swiper.pagination.bullets.removeClass(params.bulletActiveClass);
            }
            if (params.clickable) {
                $el.off('click', ("." + (params.bulletClass)));
            }
        },
    };

    var Pagination$1 = {
        name: 'pagination',
        params: {
            pagination: {
                el: null,
                bulletElement: 'span',
                clickable: false,
                hideOnClick: false,
                renderBullet: null,
                renderProgressbar: null,
                renderFraction: null,
                renderCustom: null,
                progressbarOpposite: false,
                type: 'bullets', // 'bullets' or 'progressbar' or 'fraction' or 'custom'
                dynamicBullets: false,
                dynamicMainBullets: 1,
                formatFractionCurrent: function(number) {
                    return number;
                },
                formatFractionTotal: function(number) {
                    return number;
                },
                bulletClass: 'swiper-pagination-bullet',
                bulletActiveClass: 'swiper-pagination-bullet-active',
                modifierClass: 'swiper-pagination-', // NEW
                currentClass: 'swiper-pagination-current',
                totalClass: 'swiper-pagination-total',
                hiddenClass: 'swiper-pagination-hidden',
                progressbarFillClass: 'swiper-pagination-progressbar-fill',
                progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',
                clickableClass: 'swiper-pagination-clickable', // NEW
                lockClass: 'swiper-pagination-lock',
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                pagination: {
                    init: Pagination.init.bind(swiper),
                    render: Pagination.render.bind(swiper),
                    update: Pagination.update.bind(swiper),
                    destroy: Pagination.destroy.bind(swiper),
                    dynamicBulletIndex: 0,
                },
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                swiper.pagination.init();
                swiper.pagination.render();
                swiper.pagination.update();
            },
            activeIndexChange: function activeIndexChange() {
                var swiper = this;
                if (swiper.params.loop) {
                    swiper.pagination.update();
                } else if (typeof swiper.snapIndex === 'undefined') {
                    swiper.pagination.update();
                }
            },
            snapIndexChange: function snapIndexChange() {
                var swiper = this;
                if (!swiper.params.loop) {
                    swiper.pagination.update();
                }
            },
            slidesLengthChange: function slidesLengthChange() {
                var swiper = this;
                if (swiper.params.loop) {
                    swiper.pagination.render();
                    swiper.pagination.update();
                }
            },
            snapGridLengthChange: function snapGridLengthChange() {
                var swiper = this;
                if (!swiper.params.loop) {
                    swiper.pagination.render();
                    swiper.pagination.update();
                }
            },
            destroy: function destroy() {
                var swiper = this;
                swiper.pagination.destroy();
            },
            click: function click(e) {
                var swiper = this;
                if (
                    swiper.params.pagination.el &&
                    swiper.params.pagination.hideOnClick &&
                    swiper.pagination.$el.length > 0 &&
                    !$(e.target).hasClass(swiper.params.pagination.bulletClass)
                ) {
                    swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
                }
            },
        },
    };

    var Scrollbar = {
        setTranslate: function setTranslate() {
            var swiper = this;
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) {
                return;
            }
            var scrollbar = swiper.scrollbar;
            var rtl = swiper.rtlTranslate;
            var progress = swiper.progress;
            var dragSize = scrollbar.dragSize;
            var trackSize = scrollbar.trackSize;
            var $dragEl = scrollbar.$dragEl;
            var $el = scrollbar.$el;
            var params = swiper.params.scrollbar;

            var newSize = dragSize;
            var newPos = (trackSize - dragSize) * progress;
            if (rtl) {
                newPos = -newPos;
                if (newPos > 0) {
                    newSize = dragSize - newPos;
                    newPos = 0;
                } else if (-newPos + dragSize > trackSize) {
                    newSize = trackSize + newPos;
                }
            } else if (newPos < 0) {
                newSize = dragSize + newPos;
                newPos = 0;
            } else if (newPos + dragSize > trackSize) {
                newSize = trackSize - newPos;
            }
            if (swiper.isHorizontal()) {
                if (Support.transforms3d) {
                    $dragEl.transform(("translate3d(" + newPos + "px, 0, 0)"));
                } else {
                    $dragEl.transform(("translateX(" + newPos + "px)"));
                }
                $dragEl[0].style.width = newSize + "px";
            } else {
                if (Support.transforms3d) {
                    $dragEl.transform(("translate3d(0px, " + newPos + "px, 0)"));
                } else {
                    $dragEl.transform(("translateY(" + newPos + "px)"));
                }
                $dragEl[0].style.height = newSize + "px";
            }
            if (params.hide) {
                clearTimeout(swiper.scrollbar.timeout);
                $el[0].style.opacity = 1;
                swiper.scrollbar.timeout = setTimeout(function() {
                    $el[0].style.opacity = 0;
                    $el.transition(400);
                }, 1000);
            }
        },
        setTransition: function setTransition(duration) {
            var swiper = this;
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) {
                return;
            }
            swiper.scrollbar.$dragEl.transition(duration);
        },
        updateSize: function updateSize() {
            var swiper = this;
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) {
                return;
            }

            var scrollbar = swiper.scrollbar;
            var $dragEl = scrollbar.$dragEl;
            var $el = scrollbar.$el;

            $dragEl[0].style.width = '';
            $dragEl[0].style.height = '';
            var trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;

            var divider = swiper.size / swiper.virtualSize;
            var moveDivider = divider * (trackSize / swiper.size);
            var dragSize;
            if (swiper.params.scrollbar.dragSize === 'auto') {
                dragSize = trackSize * divider;
            } else {
                dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
            }

            if (swiper.isHorizontal()) {
                $dragEl[0].style.width = dragSize + "px";
            } else {
                $dragEl[0].style.height = dragSize + "px";
            }

            if (divider > 1) {
                $el[0].style.display = 'none';
            } else {
                $el[0].style.display = '';
            }
            if (swiper.params.scrollbarHide) {
                $el[0].style.opacity = 0;
            }
            Utils.extend(scrollbar, {
                trackSize: trackSize,
                divider: divider,
                moveDivider: moveDivider,
                dragSize: dragSize,
            });
            scrollbar.$el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);
        },
        setDragPosition: function setDragPosition(e) {
            var swiper = this;
            var scrollbar = swiper.scrollbar;
            var rtl = swiper.rtlTranslate;
            var $el = scrollbar.$el;
            var dragSize = scrollbar.dragSize;
            var trackSize = scrollbar.trackSize;

            var pointerPosition;
            if (swiper.isHorizontal()) {
                pointerPosition = ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].pageX : e.pageX || e.clientX);
            } else {
                pointerPosition = ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].pageY : e.pageY || e.clientY);
            }
            var positionRatio;
            positionRatio = ((pointerPosition) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragSize / 2)) / (trackSize - dragSize);
            positionRatio = Math.max(Math.min(positionRatio, 1), 0);
            if (rtl) {
                positionRatio = 1 - positionRatio;
            }

            var position = swiper.minTranslate() + ((swiper.maxTranslate() - swiper.minTranslate()) * positionRatio);

            swiper.updateProgress(position);
            swiper.setTranslate(position);
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
        },
        onDragStart: function onDragStart(e) {
            var swiper = this;
            var params = swiper.params.scrollbar;
            var scrollbar = swiper.scrollbar;
            var $wrapperEl = swiper.$wrapperEl;
            var $el = scrollbar.$el;
            var $dragEl = scrollbar.$dragEl;
            swiper.scrollbar.isTouched = true;
            e.preventDefault();
            e.stopPropagation();

            $wrapperEl.transition(100);
            $dragEl.transition(100);
            scrollbar.setDragPosition(e);

            clearTimeout(swiper.scrollbar.dragTimeout);

            $el.transition(0);
            if (params.hide) {
                $el.css('opacity', 1);
            }
            swiper.emit('scrollbarDragStart', e);
        },
        onDragMove: function onDragMove(e) {
            var swiper = this;
            var scrollbar = swiper.scrollbar;
            var $wrapperEl = swiper.$wrapperEl;
            var $el = scrollbar.$el;
            var $dragEl = scrollbar.$dragEl;

            if (!swiper.scrollbar.isTouched) {
                return;
            }
            if (e.preventDefault) {
                e.preventDefault();
            } else {
                e.returnValue = false;
            }
            scrollbar.setDragPosition(e);
            $wrapperEl.transition(0);
            $el.transition(0);
            $dragEl.transition(0);
            swiper.emit('scrollbarDragMove', e);
        },
        onDragEnd: function onDragEnd(e) {
            var swiper = this;

            var params = swiper.params.scrollbar;
            var scrollbar = swiper.scrollbar;
            var $el = scrollbar.$el;

            if (!swiper.scrollbar.isTouched) {
                return;
            }
            swiper.scrollbar.isTouched = false;
            if (params.hide) {
                clearTimeout(swiper.scrollbar.dragTimeout);
                swiper.scrollbar.dragTimeout = Utils.nextTick(function() {
                    $el.css('opacity', 0);
                    $el.transition(400);
                }, 1000);
            }
            swiper.emit('scrollbarDragEnd', e);
            if (params.snapOnRelease) {
                swiper.slideToClosest();
            }
        },
        enableDraggable: function enableDraggable() {
            var swiper = this;
            if (!swiper.params.scrollbar.el) {
                return;
            }
            var scrollbar = swiper.scrollbar;
            var touchEvents = swiper.touchEvents;
            var touchEventsDesktop = swiper.touchEventsDesktop;
            var params = swiper.params;
            var $el = scrollbar.$el;
            var target = $el[0];
            var activeListener = Support.passiveListener && params.passiveListeners ? {
                passive: false,
                capture: false
            } : false;
            var passiveListener = Support.passiveListener && params.passiveListeners ? {
                passive: true,
                capture: false
            } : false;
            if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
                target.addEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
                doc.addEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
                doc.addEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
            } else {
                if (Support.touch) {
                    target.addEventListener(touchEvents.start, swiper.scrollbar.onDragStart, activeListener);
                    target.addEventListener(touchEvents.move, swiper.scrollbar.onDragMove, activeListener);
                    target.addEventListener(touchEvents.end, swiper.scrollbar.onDragEnd, passiveListener);
                }
                if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
                    target.addEventListener('mousedown', swiper.scrollbar.onDragStart, activeListener);
                    doc.addEventListener('mousemove', swiper.scrollbar.onDragMove, activeListener);
                    doc.addEventListener('mouseup', swiper.scrollbar.onDragEnd, passiveListener);
                }
            }
        },
        disableDraggable: function disableDraggable() {
            var swiper = this;
            if (!swiper.params.scrollbar.el) {
                return;
            }
            var scrollbar = swiper.scrollbar;
            var touchEvents = swiper.touchEvents;
            var touchEventsDesktop = swiper.touchEventsDesktop;
            var params = swiper.params;
            var $el = scrollbar.$el;
            var target = $el[0];
            var activeListener = Support.passiveListener && params.passiveListeners ? {
                passive: false,
                capture: false
            } : false;
            var passiveListener = Support.passiveListener && params.passiveListeners ? {
                passive: true,
                capture: false
            } : false;
            if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
                target.removeEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
                doc.removeEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
                doc.removeEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
            } else {
                if (Support.touch) {
                    target.removeEventListener(touchEvents.start, swiper.scrollbar.onDragStart, activeListener);
                    target.removeEventListener(touchEvents.move, swiper.scrollbar.onDragMove, activeListener);
                    target.removeEventListener(touchEvents.end, swiper.scrollbar.onDragEnd, passiveListener);
                }
                if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
                    target.removeEventListener('mousedown', swiper.scrollbar.onDragStart, activeListener);
                    doc.removeEventListener('mousemove', swiper.scrollbar.onDragMove, activeListener);
                    doc.removeEventListener('mouseup', swiper.scrollbar.onDragEnd, passiveListener);
                }
            }
        },
        init: function init() {
            var swiper = this;
            if (!swiper.params.scrollbar.el) {
                return;
            }
            var scrollbar = swiper.scrollbar;
            var $swiperEl = swiper.$el;
            var params = swiper.params.scrollbar;

            var $el = $(params.el);
            if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {
                $el = $swiperEl.find(params.el);
            }

            var $dragEl = $el.find(("." + (swiper.params.scrollbar.dragClass)));
            if ($dragEl.length === 0) {
                $dragEl = $(("<div class=\"" + (swiper.params.scrollbar.dragClass) + "\"></div>"));
                $el.append($dragEl);
            }

            Utils.extend(scrollbar, {
                $el: $el,
                el: $el[0],
                $dragEl: $dragEl,
                dragEl: $dragEl[0],
            });

            if (params.draggable) {
                scrollbar.enableDraggable();
            }
        },
        destroy: function destroy() {
            var swiper = this;
            swiper.scrollbar.disableDraggable();
        },
    };

    var Scrollbar$1 = {
        name: 'scrollbar',
        params: {
            scrollbar: {
                el: null,
                dragSize: 'auto',
                hide: false,
                draggable: false,
                snapOnRelease: true,
                lockClass: 'swiper-scrollbar-lock',
                dragClass: 'swiper-scrollbar-drag',
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                scrollbar: {
                    init: Scrollbar.init.bind(swiper),
                    destroy: Scrollbar.destroy.bind(swiper),
                    updateSize: Scrollbar.updateSize.bind(swiper),
                    setTranslate: Scrollbar.setTranslate.bind(swiper),
                    setTransition: Scrollbar.setTransition.bind(swiper),
                    enableDraggable: Scrollbar.enableDraggable.bind(swiper),
                    disableDraggable: Scrollbar.disableDraggable.bind(swiper),
                    setDragPosition: Scrollbar.setDragPosition.bind(swiper),
                    onDragStart: Scrollbar.onDragStart.bind(swiper),
                    onDragMove: Scrollbar.onDragMove.bind(swiper),
                    onDragEnd: Scrollbar.onDragEnd.bind(swiper),
                    isTouched: false,
                    timeout: null,
                    dragTimeout: null,
                },
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                swiper.scrollbar.init();
                swiper.scrollbar.updateSize();
                swiper.scrollbar.setTranslate();
            },
            update: function update() {
                var swiper = this;
                swiper.scrollbar.updateSize();
            },
            resize: function resize() {
                var swiper = this;
                swiper.scrollbar.updateSize();
            },
            observerUpdate: function observerUpdate() {
                var swiper = this;
                swiper.scrollbar.updateSize();
            },
            setTranslate: function setTranslate() {
                var swiper = this;
                swiper.scrollbar.setTranslate();
            },
            setTransition: function setTransition(duration) {
                var swiper = this;
                swiper.scrollbar.setTransition(duration);
            },
            destroy: function destroy() {
                var swiper = this;
                swiper.scrollbar.destroy();
            },
        },
    };

    var Parallax = {
        setTransform: function setTransform(el, progress) {
            var swiper = this;
            var rtl = swiper.rtl;

            var $el = $(el);
            var rtlFactor = rtl ? -1 : 1;

            var p = $el.attr('data-swiper-parallax') || '0';
            var x = $el.attr('data-swiper-parallax-x');
            var y = $el.attr('data-swiper-parallax-y');
            var scale = $el.attr('data-swiper-parallax-scale');
            var opacity = $el.attr('data-swiper-parallax-opacity');

            if (x || y) {
                x = x || '0';
                y = y || '0';
            } else if (swiper.isHorizontal()) {
                x = p;
                y = '0';
            } else {
                y = p;
                x = '0';
            }

            if ((x).indexOf('%') >= 0) {
                x = (parseInt(x, 10) * progress * rtlFactor) + "%";
            } else {
                x = (x * progress * rtlFactor) + "px";
            }
            if ((y).indexOf('%') >= 0) {
                y = (parseInt(y, 10) * progress) + "%";
            } else {
                y = (y * progress) + "px";
            }

            if (typeof opacity !== 'undefined' && opacity !== null) {
                var currentOpacity = opacity - ((opacity - 1) * (1 - Math.abs(progress)));
                $el[0].style.opacity = currentOpacity;
            }
            if (typeof scale === 'undefined' || scale === null) {
                $el.transform(("translate3d(" + x + ", " + y + ", 0px)"));
            } else {
                var currentScale = scale - ((scale - 1) * (1 - Math.abs(progress)));
                $el.transform(("translate3d(" + x + ", " + y + ", 0px) scale(" + currentScale + ")"));
            }
        },
        setTranslate: function setTranslate() {
            var swiper = this;
            var $el = swiper.$el;
            var slides = swiper.slides;
            var progress = swiper.progress;
            var snapGrid = swiper.snapGrid;
            $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
                .each(function(index, el) {
                    swiper.parallax.setTransform(el, progress);
                });
            slides.each(function(slideIndex, slideEl) {
                var slideProgress = slideEl.progress;
                if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {
                    slideProgress += Math.ceil(slideIndex / 2) - (progress * (snapGrid.length - 1));
                }
                slideProgress = Math.min(Math.max(slideProgress, -1), 1);
                $(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
                    .each(function(index, el) {
                        swiper.parallax.setTransform(el, slideProgress);
                    });
            });
        },
        setTransition: function setTransition(duration) {
            if (duration === void 0) duration = this.params.speed;

            var swiper = this;
            var $el = swiper.$el;
            $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
                .each(function(index, parallaxEl) {
                    var $parallaxEl = $(parallaxEl);
                    var parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;
                    if (duration === 0) {
                        parallaxDuration = 0;
                    }
                    $parallaxEl.transition(parallaxDuration);
                });
        },
    };

    var Parallax$1 = {
        name: 'parallax',
        params: {
            parallax: {
                enabled: false,
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                parallax: {
                    setTransform: Parallax.setTransform.bind(swiper),
                    setTranslate: Parallax.setTranslate.bind(swiper),
                    setTransition: Parallax.setTransition.bind(swiper),
                },
            });
        },
        on: {
            beforeInit: function beforeInit() {
                var swiper = this;
                if (!swiper.params.parallax.enabled) {
                    return;
                }
                swiper.params.watchSlidesProgress = true;
            },
            init: function init() {
                var swiper = this;
                if (!swiper.params.parallax) {
                    return;
                }
                swiper.parallax.setTranslate();
            },
            setTranslate: function setTranslate() {
                var swiper = this;
                if (!swiper.params.parallax) {
                    return;
                }
                swiper.parallax.setTranslate();
            },
            setTransition: function setTransition(duration) {
                var swiper = this;
                if (!swiper.params.parallax) {
                    return;
                }
                swiper.parallax.setTransition(duration);
            },
        },
    };

    var Zoom = {
        // Calc Scale From Multi-touches
        getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {
            if (e.targetTouches.length < 2) {
                return 1;
            }
            var x1 = e.targetTouches[0].pageX;
            var y1 = e.targetTouches[0].pageY;
            var x2 = e.targetTouches[1].pageX;
            var y2 = e.targetTouches[1].pageY;
            var distance = Math.sqrt((Math.pow((x2 - x1), 2)) + (Math.pow((y2 - y1), 2)));
            return distance;
        },
        // Events
        onGestureStart: function onGestureStart(e) {
            var swiper = this;
            var params = swiper.params.zoom;
            var zoom = swiper.zoom;
            var gesture = zoom.gesture;
            zoom.fakeGestureTouched = false;
            zoom.fakeGestureMoved = false;
            if (!Support.gestures) {
                if (e.type !== 'touchstart' || (e.type === 'touchstart' && e.targetTouches.length < 2)) {
                    return;
                }
                zoom.fakeGestureTouched = true;
                gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);
            }
            if (!gesture.$slideEl || !gesture.$slideEl.length) {
                gesture.$slideEl = $(e.target).closest('.swiper-slide');
                if (gesture.$slideEl.length === 0) {
                    gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
                }
                gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
                gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
                gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
                if (gesture.$imageWrapEl.length === 0) {
                    gesture.$imageEl = undefined;
                    return;
                }
            }
            gesture.$imageEl.transition(0);
            swiper.zoom.isScaling = true;
        },
        onGestureChange: function onGestureChange(e) {
            var swiper = this;
            var params = swiper.params.zoom;
            var zoom = swiper.zoom;
            var gesture = zoom.gesture;
            if (!Support.gestures) {
                if (e.type !== 'touchmove' || (e.type === 'touchmove' && e.targetTouches.length < 2)) {
                    return;
                }
                zoom.fakeGestureMoved = true;
                gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);
            }
            if (!gesture.$imageEl || gesture.$imageEl.length === 0) {
                return;
            }
            if (Support.gestures) {
                swiper.zoom.scale = e.scale * zoom.currentScale;
            } else {
                zoom.scale = (gesture.scaleMove / gesture.scaleStart) * zoom.currentScale;
            }
            if (zoom.scale > gesture.maxRatio) {
                zoom.scale = (gesture.maxRatio - 1) + (Math.pow(((zoom.scale - gesture.maxRatio) + 1), 0.5));
            }
            if (zoom.scale < params.minRatio) {
                zoom.scale = (params.minRatio + 1) - (Math.pow(((params.minRatio - zoom.scale) + 1), 0.5));
            }
            gesture.$imageEl.transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
        },
        onGestureEnd: function onGestureEnd(e) {
            var swiper = this;
            var params = swiper.params.zoom;
            var zoom = swiper.zoom;
            var gesture = zoom.gesture;
            if (!Support.gestures) {
                if (!zoom.fakeGestureTouched || !zoom.fakeGestureMoved) {
                    return;
                }
                if (e.type !== 'touchend' || (e.type === 'touchend' && e.changedTouches.length < 2 && !Device.android)) {
                    return;
                }
                zoom.fakeGestureTouched = false;
                zoom.fakeGestureMoved = false;
            }
            if (!gesture.$imageEl || gesture.$imageEl.length === 0) {
                return;
            }
            zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
            gesture.$imageEl.transition(swiper.params.speed).transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
            zoom.currentScale = zoom.scale;
            zoom.isScaling = false;
            if (zoom.scale === 1) {
                gesture.$slideEl = undefined;
            }
        },
        onTouchStart: function onTouchStart(e) {
            var swiper = this;
            var zoom = swiper.zoom;
            var gesture = zoom.gesture;
            var image = zoom.image;
            if (!gesture.$imageEl || gesture.$imageEl.length === 0) {
                return;
            }
            if (image.isTouched) {
                return;
            }
            if (Device.android) {
                e.preventDefault();
            }
            image.isTouched = true;
            image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
            image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
        },
        onTouchMove: function onTouchMove(e) {
            var swiper = this;
            var zoom = swiper.zoom;
            var gesture = zoom.gesture;
            var image = zoom.image;
            var velocity = zoom.velocity;
            if (!gesture.$imageEl || gesture.$imageEl.length === 0) {
                return;
            }
            swiper.allowClick = false;
            if (!image.isTouched || !gesture.$slideEl) {
                return;
            }

            if (!image.isMoved) {
                image.width = gesture.$imageEl[0].offsetWidth;
                image.height = gesture.$imageEl[0].offsetHeight;
                image.startX = Utils.getTranslate(gesture.$imageWrapEl[0], 'x') || 0;
                image.startY = Utils.getTranslate(gesture.$imageWrapEl[0], 'y') || 0;
                gesture.slideWidth = gesture.$slideEl[0].offsetWidth;
                gesture.slideHeight = gesture.$slideEl[0].offsetHeight;
                gesture.$imageWrapEl.transition(0);
                if (swiper.rtl) {
                    image.startX = -image.startX;
                    image.startY = -image.startY;
                }
            }
            // Define if we need image drag
            var scaledWidth = image.width * zoom.scale;
            var scaledHeight = image.height * zoom.scale;

            if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) {
                return;
            }

            image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
            image.maxX = -image.minX;
            image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
            image.maxY = -image.minY;

            image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
            image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

            if (!image.isMoved && !zoom.isScaling) {
                if (
                    swiper.isHorizontal() &&
                    (
                        (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x) ||
                        (Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)
                    )
                ) {
                    image.isTouched = false;
                    return;
                }
                if (!swiper.isHorizontal() &&
                    (
                        (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y) ||
                        (Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)
                    )
                ) {
                    image.isTouched = false;
                    return;
                }
            }
            e.preventDefault();
            e.stopPropagation();

            image.isMoved = true;
            image.currentX = (image.touchesCurrent.x - image.touchesStart.x) + image.startX;
            image.currentY = (image.touchesCurrent.y - image.touchesStart.y) + image.startY;

            if (image.currentX < image.minX) {
                image.currentX = (image.minX + 1) - (Math.pow(((image.minX - image.currentX) + 1), 0.8));
            }
            if (image.currentX > image.maxX) {
                image.currentX = (image.maxX - 1) + (Math.pow(((image.currentX - image.maxX) + 1), 0.8));
            }

            if (image.currentY < image.minY) {
                image.currentY = (image.minY + 1) - (Math.pow(((image.minY - image.currentY) + 1), 0.8));
            }
            if (image.currentY > image.maxY) {
                image.currentY = (image.maxY - 1) + (Math.pow(((image.currentY - image.maxY) + 1), 0.8));
            }

            // Velocity
            if (!velocity.prevPositionX) {
                velocity.prevPositionX = image.touchesCurrent.x;
            }
            if (!velocity.prevPositionY) {
                velocity.prevPositionY = image.touchesCurrent.y;
            }
            if (!velocity.prevTime) {
                velocity.prevTime = Date.now();
            }
            velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
            velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
            if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) {
                velocity.x = 0;
            }
            if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) {
                velocity.y = 0;
            }
            velocity.prevPositionX = image.touchesCurrent.x;
            velocity.prevPositionY = image.touchesCurrent.y;
            velocity.prevTime = Date.now();

            gesture.$imageWrapEl.transform(("translate3d(" + (image.currentX) + "px, " + (image.currentY) + "px,0)"));
        },
        onTouchEnd: function onTouchEnd() {
            var swiper = this;
            var zoom = swiper.zoom;
            var gesture = zoom.gesture;
            var image = zoom.image;
            var velocity = zoom.velocity;
            if (!gesture.$imageEl || gesture.$imageEl.length === 0) {
                return;
            }
            if (!image.isTouched || !image.isMoved) {
                image.isTouched = false;
                image.isMoved = false;
                return;
            }
            image.isTouched = false;
            image.isMoved = false;
            var momentumDurationX = 300;
            var momentumDurationY = 300;
            var momentumDistanceX = velocity.x * momentumDurationX;
            var newPositionX = image.currentX + momentumDistanceX;
            var momentumDistanceY = velocity.y * momentumDurationY;
            var newPositionY = image.currentY + momentumDistanceY;

            // Fix duration
            if (velocity.x !== 0) {
                momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);
            }
            if (velocity.y !== 0) {
                momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);
            }
            var momentumDuration = Math.max(momentumDurationX, momentumDurationY);

            image.currentX = newPositionX;
            image.currentY = newPositionY;

            // Define if we need image drag
            var scaledWidth = image.width * zoom.scale;
            var scaledHeight = image.height * zoom.scale;
            image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
            image.maxX = -image.minX;
            image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
            image.maxY = -image.minY;
            image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
            image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);

            gesture.$imageWrapEl.transition(momentumDuration).transform(("translate3d(" + (image.currentX) + "px, " + (image.currentY) + "px,0)"));
        },
        onTransitionEnd: function onTransitionEnd() {
            var swiper = this;
            var zoom = swiper.zoom;
            var gesture = zoom.gesture;
            if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {
                gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');
                gesture.$imageWrapEl.transform('translate3d(0,0,0)');
                gesture.$slideEl = undefined;
                gesture.$imageEl = undefined;
                gesture.$imageWrapEl = undefined;

                zoom.scale = 1;
                zoom.currentScale = 1;
            }
        },
        // Toggle Zoom
        toggle: function toggle(e) {
            var swiper = this;
            var zoom = swiper.zoom;

            if (zoom.scale && zoom.scale !== 1) {
                // Zoom Out
                zoom.out();
            } else {
                // Zoom In
                zoom.in(e);
            }
        },
        in: function in$1(e) {
            var swiper = this;

            var zoom = swiper.zoom;
            var params = swiper.params.zoom;
            var gesture = zoom.gesture;
            var image = zoom.image;

            if (!gesture.$slideEl) {
                gesture.$slideEl = swiper.clickedSlide ? $(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
                gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
                gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
            }
            if (!gesture.$imageEl || gesture.$imageEl.length === 0) {
                return;
            }

            gesture.$slideEl.addClass(("" + (params.zoomedSlideClass)));

            var touchX;
            var touchY;
            var offsetX;
            var offsetY;
            var diffX;
            var diffY;
            var translateX;
            var translateY;
            var imageWidth;
            var imageHeight;
            var scaledWidth;
            var scaledHeight;
            var translateMinX;
            var translateMinY;
            var translateMaxX;
            var translateMaxY;
            var slideWidth;
            var slideHeight;

            if (typeof image.touchesStart.x === 'undefined' && e) {
                touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;
                touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;
            } else {
                touchX = image.touchesStart.x;
                touchY = image.touchesStart.y;
            }

            zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
            zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
            if (e) {
                slideWidth = gesture.$slideEl[0].offsetWidth;
                slideHeight = gesture.$slideEl[0].offsetHeight;
                offsetX = gesture.$slideEl.offset().left;
                offsetY = gesture.$slideEl.offset().top;
                diffX = (offsetX + (slideWidth / 2)) - touchX;
                diffY = (offsetY + (slideHeight / 2)) - touchY;

                imageWidth = gesture.$imageEl[0].offsetWidth;
                imageHeight = gesture.$imageEl[0].offsetHeight;
                scaledWidth = imageWidth * zoom.scale;
                scaledHeight = imageHeight * zoom.scale;

                translateMinX = Math.min(((slideWidth / 2) - (scaledWidth / 2)), 0);
                translateMinY = Math.min(((slideHeight / 2) - (scaledHeight / 2)), 0);
                translateMaxX = -translateMinX;
                translateMaxY = -translateMinY;

                translateX = diffX * zoom.scale;
                translateY = diffY * zoom.scale;

                if (translateX < translateMinX) {
                    translateX = translateMinX;
                }
                if (translateX > translateMaxX) {
                    translateX = translateMaxX;
                }

                if (translateY < translateMinY) {
                    translateY = translateMinY;
                }
                if (translateY > translateMaxY) {
                    translateY = translateMaxY;
                }
            } else {
                translateX = 0;
                translateY = 0;
            }
            gesture.$imageWrapEl.transition(300).transform(("translate3d(" + translateX + "px, " + translateY + "px,0)"));
            gesture.$imageEl.transition(300).transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
        },
        out: function out() {
            var swiper = this;

            var zoom = swiper.zoom;
            var params = swiper.params.zoom;
            var gesture = zoom.gesture;

            if (!gesture.$slideEl) {
                gesture.$slideEl = swiper.clickedSlide ? $(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
                gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
                gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
            }
            if (!gesture.$imageEl || gesture.$imageEl.length === 0) {
                return;
            }

            zoom.scale = 1;
            zoom.currentScale = 1;
            gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');
            gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');
            gesture.$slideEl.removeClass(("" + (params.zoomedSlideClass)));
            gesture.$slideEl = undefined;
        },
        // Attach/Detach Events
        enable: function enable() {
            var swiper = this;
            var zoom = swiper.zoom;
            if (zoom.enabled) {
                return;
            }
            zoom.enabled = true;

            var passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? {
                passive: true,
                capture: false
            } : false;

            // Scale image
            if (Support.gestures) {
                swiper.$wrapperEl.on('gesturestart', '.swiper-slide', zoom.onGestureStart, passiveListener);
                swiper.$wrapperEl.on('gesturechange', '.swiper-slide', zoom.onGestureChange, passiveListener);
                swiper.$wrapperEl.on('gestureend', '.swiper-slide', zoom.onGestureEnd, passiveListener);
            } else if (swiper.touchEvents.start === 'touchstart') {
                swiper.$wrapperEl.on(swiper.touchEvents.start, '.swiper-slide', zoom.onGestureStart, passiveListener);
                swiper.$wrapperEl.on(swiper.touchEvents.move, '.swiper-slide', zoom.onGestureChange, passiveListener);
                swiper.$wrapperEl.on(swiper.touchEvents.end, '.swiper-slide', zoom.onGestureEnd, passiveListener);
            }

            // Move image
            swiper.$wrapperEl.on(swiper.touchEvents.move, ("." + (swiper.params.zoom.containerClass)), zoom.onTouchMove);
        },
        disable: function disable() {
            var swiper = this;
            var zoom = swiper.zoom;
            if (!zoom.enabled) {
                return;
            }

            swiper.zoom.enabled = false;

            var passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? {
                passive: true,
                capture: false
            } : false;

            // Scale image
            if (Support.gestures) {
                swiper.$wrapperEl.off('gesturestart', '.swiper-slide', zoom.onGestureStart, passiveListener);
                swiper.$wrapperEl.off('gesturechange', '.swiper-slide', zoom.onGestureChange, passiveListener);
                swiper.$wrapperEl.off('gestureend', '.swiper-slide', zoom.onGestureEnd, passiveListener);
            } else if (swiper.touchEvents.start === 'touchstart') {
                swiper.$wrapperEl.off(swiper.touchEvents.start, '.swiper-slide', zoom.onGestureStart, passiveListener);
                swiper.$wrapperEl.off(swiper.touchEvents.move, '.swiper-slide', zoom.onGestureChange, passiveListener);
                swiper.$wrapperEl.off(swiper.touchEvents.end, '.swiper-slide', zoom.onGestureEnd, passiveListener);
            }

            // Move image
            swiper.$wrapperEl.off(swiper.touchEvents.move, ("." + (swiper.params.zoom.containerClass)), zoom.onTouchMove);
        },
    };

    var Zoom$1 = {
        name: 'zoom',
        params: {
            zoom: {
                enabled: false,
                maxRatio: 3,
                minRatio: 1,
                toggle: true,
                containerClass: 'swiper-zoom-container',
                zoomedSlideClass: 'swiper-slide-zoomed',
            },
        },
        create: function create() {
            var swiper = this;
            var zoom = {
                enabled: false,
                scale: 1,
                currentScale: 1,
                isScaling: false,
                gesture: {
                    $slideEl: undefined,
                    slideWidth: undefined,
                    slideHeight: undefined,
                    $imageEl: undefined,
                    $imageWrapEl: undefined,
                    maxRatio: 3,
                },
                image: {
                    isTouched: undefined,
                    isMoved: undefined,
                    currentX: undefined,
                    currentY: undefined,
                    minX: undefined,
                    minY: undefined,
                    maxX: undefined,
                    maxY: undefined,
                    width: undefined,
                    height: undefined,
                    startX: undefined,
                    startY: undefined,
                    touchesStart: {},
                    touchesCurrent: {},
                },
                velocity: {
                    x: undefined,
                    y: undefined,
                    prevPositionX: undefined,
                    prevPositionY: undefined,
                    prevTime: undefined,
                },
            };
            ('onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out').split(' ').forEach(function(methodName) {
                zoom[methodName] = Zoom[methodName].bind(swiper);
            });
            Utils.extend(swiper, {
                zoom: zoom,
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                if (swiper.params.zoom.enabled) {
                    swiper.zoom.enable();
                }
            },
            destroy: function destroy() {
                var swiper = this;
                swiper.zoom.disable();
            },
            touchStart: function touchStart(e) {
                var swiper = this;
                if (!swiper.zoom.enabled) {
                    return;
                }
                swiper.zoom.onTouchStart(e);
            },
            touchEnd: function touchEnd(e) {
                var swiper = this;
                if (!swiper.zoom.enabled) {
                    return;
                }
                swiper.zoom.onTouchEnd(e);
            },
            doubleTap: function doubleTap(e) {
                var swiper = this;
                if (swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
                    swiper.zoom.toggle(e);
                }
            },
            transitionEnd: function transitionEnd() {
                var swiper = this;
                if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
                    swiper.zoom.onTransitionEnd();
                }
            },
        },
    };

    var Lazy = {
        loadInSlide: function loadInSlide(index, loadInDuplicate) {
            if (loadInDuplicate === void 0) loadInDuplicate = true;

            var swiper = this;
            var params = swiper.params.lazy;
            if (typeof index === 'undefined') {
                return;
            }
            if (swiper.slides.length === 0) {
                return;
            }
            var isVirtual = swiper.virtual && swiper.params.virtual.enabled;

            var $slideEl = isVirtual ?
                swiper.$wrapperEl.children(("." + (swiper.params.slideClass) + "[data-swiper-slide-index=\"" + index + "\"]")) :
                swiper.slides.eq(index);

            var $images = $slideEl.find(("." + (params.elementClass) + ":not(." + (params.loadedClass) + "):not(." + (params.loadingClass) + ")"));
            if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
                $images = $images.add($slideEl[0]);
            }
            if ($images.length === 0) {
                return;
            }

            $images.each(function(imageIndex, imageEl) {
                var $imageEl = $(imageEl);
                $imageEl.addClass(params.loadingClass);

                var background = $imageEl.attr('data-background');
                var src = $imageEl.attr('data-src');
                var srcset = $imageEl.attr('data-srcset');
                var sizes = $imageEl.attr('data-sizes');

                swiper.loadImage($imageEl[0], (src || background), srcset, sizes, false, function() {
                    if (typeof swiper === 'undefined' || swiper === null || !swiper || (swiper && !swiper.params) || swiper.destroyed) {
                        return;
                    }
                    if (background) {
                        $imageEl.css('background-image', ("url(\"" + background + "\")"));
                        $imageEl.removeAttr('data-background');
                    } else {
                        if (srcset) {
                            $imageEl.attr('srcset', srcset);
                            $imageEl.removeAttr('data-srcset');
                        }
                        if (sizes) {
                            $imageEl.attr('sizes', sizes);
                            $imageEl.removeAttr('data-sizes');
                        }
                        if (src) {
                            $imageEl.attr('src', src);
                            $imageEl.removeAttr('data-src');
                        }
                    }

                    $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
                    $slideEl.find(("." + (params.preloaderClass))).remove();
                    if (swiper.params.loop && loadInDuplicate) {
                        var slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');
                        if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
                            var originalSlide = swiper.$wrapperEl.children(("[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]:not(." + (swiper.params.slideDuplicateClass) + ")"));
                            swiper.lazy.loadInSlide(originalSlide.index(), false);
                        } else {
                            var duplicatedSlide = swiper.$wrapperEl.children(("." + (swiper.params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]"));
                            swiper.lazy.loadInSlide(duplicatedSlide.index(), false);
                        }
                    }
                    swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);
                });

                swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
            });
        },
        load: function load() {
            var swiper = this;
            var $wrapperEl = swiper.$wrapperEl;
            var swiperParams = swiper.params;
            var slides = swiper.slides;
            var activeIndex = swiper.activeIndex;
            var isVirtual = swiper.virtual && swiperParams.virtual.enabled;
            var params = swiperParams.lazy;

            var slidesPerView = swiperParams.slidesPerView;
            if (slidesPerView === 'auto') {
                slidesPerView = 0;
            }

            function slideExist(index) {
                if (isVirtual) {
                    if ($wrapperEl.children(("." + (swiperParams.slideClass) + "[data-swiper-slide-index=\"" + index + "\"]")).length) {
                        return true;
                    }
                } else if (slides[index]) {
                    return true;
                }
                return false;
            }

            function slideIndex(slideEl) {
                if (isVirtual) {
                    return $(slideEl).attr('data-swiper-slide-index');
                }
                return $(slideEl).index();
            }

            if (!swiper.lazy.initialImageLoaded) {
                swiper.lazy.initialImageLoaded = true;
            }
            if (swiper.params.watchSlidesVisibility) {
                $wrapperEl.children(("." + (swiperParams.slideVisibleClass))).each(function(elIndex, slideEl) {
                    var index = isVirtual ? $(slideEl).attr('data-swiper-slide-index') : $(slideEl).index();
                    swiper.lazy.loadInSlide(index);
                });
            } else if (slidesPerView > 1) {
                for (var i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
                    if (slideExist(i)) {
                        swiper.lazy.loadInSlide(i);
                    }
                }
            } else {
                swiper.lazy.loadInSlide(activeIndex);
            }
            if (params.loadPrevNext) {
                if (slidesPerView > 1 || (params.loadPrevNextAmount && params.loadPrevNextAmount > 1)) {
                    var amount = params.loadPrevNextAmount;
                    var spv = slidesPerView;
                    var maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
                    var minIndex = Math.max(activeIndex - Math.max(spv, amount), 0);
                    // Next Slides
                    for (var i$1 = activeIndex + slidesPerView; i$1 < maxIndex; i$1 += 1) {
                        if (slideExist(i$1)) {
                            swiper.lazy.loadInSlide(i$1);
                        }
                    }
                    // Prev Slides
                    for (var i$2 = minIndex; i$2 < activeIndex; i$2 += 1) {
                        if (slideExist(i$2)) {
                            swiper.lazy.loadInSlide(i$2);
                        }
                    }
                } else {
                    var nextSlide = $wrapperEl.children(("." + (swiperParams.slideNextClass)));
                    if (nextSlide.length > 0) {
                        swiper.lazy.loadInSlide(slideIndex(nextSlide));
                    }

                    var prevSlide = $wrapperEl.children(("." + (swiperParams.slidePrevClass)));
                    if (prevSlide.length > 0) {
                        swiper.lazy.loadInSlide(slideIndex(prevSlide));
                    }
                }
            }
        },
    };

    var Lazy$1 = {
        name: 'lazy',
        params: {
            lazy: {
                enabled: false,
                loadPrevNext: false,
                loadPrevNextAmount: 1,
                loadOnTransitionStart: false,

                elementClass: 'swiper-lazy',
                loadingClass: 'swiper-lazy-loading',
                loadedClass: 'swiper-lazy-loaded',
                preloaderClass: 'swiper-lazy-preloader',
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                lazy: {
                    initialImageLoaded: false,
                    load: Lazy.load.bind(swiper),
                    loadInSlide: Lazy.loadInSlide.bind(swiper),
                },
            });
        },
        on: {
            beforeInit: function beforeInit() {
                var swiper = this;
                if (swiper.params.lazy.enabled && swiper.params.preloadImages) {
                    swiper.params.preloadImages = false;
                }
            },
            init: function init() {
                var swiper = this;
                if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {
                    swiper.lazy.load();
                }
            },
            scroll: function scroll() {
                var swiper = this;
                if (swiper.params.freeMode && !swiper.params.freeModeSticky) {
                    swiper.lazy.load();
                }
            },
            resize: function resize() {
                var swiper = this;
                if (swiper.params.lazy.enabled) {
                    swiper.lazy.load();
                }
            },
            scrollbarDragMove: function scrollbarDragMove() {
                var swiper = this;
                if (swiper.params.lazy.enabled) {
                    swiper.lazy.load();
                }
            },
            transitionStart: function transitionStart() {
                var swiper = this;
                if (swiper.params.lazy.enabled) {
                    if (swiper.params.lazy.loadOnTransitionStart || (!swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded)) {
                        swiper.lazy.load();
                    }
                }
            },
            transitionEnd: function transitionEnd() {
                var swiper = this;
                if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
                    swiper.lazy.load();
                }
            },
        },
    };

    /* eslint no-bitwise: ["error", { "allow": [">>"] }] */

    var Controller = {
        LinearSpline: function LinearSpline(x, y) {
            var binarySearch = (function search() {
                var maxIndex;
                var minIndex;
                var guess;
                return function(array, val) {
                    minIndex = -1;
                    maxIndex = array.length;
                    while (maxIndex - minIndex > 1) {
                        guess = maxIndex + minIndex >> 1;
                        if (array[guess] <= val) {
                            minIndex = guess;
                        } else {
                            maxIndex = guess;
                        }
                    }
                    return maxIndex;
                };
            }());
            this.x = x;
            this.y = y;
            this.lastIndex = x.length - 1;
            // Given an x value (x2), return the expected y2 value:
            // (x1,y1) is the known point before given value,
            // (x3,y3) is the known point after given value.
            var i1;
            var i3;

            this.interpolate = function interpolate(x2) {
                if (!x2) {
                    return 0;
                }

                // Get the indexes of x1 and x3 (the array indexes before and after given x2):
                i3 = binarySearch(this.x, x2);
                i1 = i3 - 1;

                // We have our indexes i1 & i3, so we can calculate already:
                // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
                return (((x2 - this.x[i1]) * (this.y[i3] - this.y[i1])) / (this.x[i3] - this.x[i1])) + this.y[i1];
            };
            return this;
        },
        // xxx: for now i will just save one spline function to to
        getInterpolateFunction: function getInterpolateFunction(c) {
            var swiper = this;
            if (!swiper.controller.spline) {
                swiper.controller.spline = swiper.params.loop ?
                    new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid) :
                    new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);
            }
        },
        setTranslate: function setTranslate(setTranslate$1, byController) {
            var swiper = this;
            var controlled = swiper.controller.control;
            var multiplier;
            var controlledTranslate;

            function setControlledTranslate(c) {
                // this will create an Interpolate function based on the snapGrids
                // x is the Grid of the scrolled scroller and y will be the controlled scroller
                // it makes sense to create this only once and recall it for the interpolation
                // the function does a lot of value caching for performance
                var translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;
                if (swiper.params.controller.by === 'slide') {
                    swiper.controller.getInterpolateFunction(c);
                    // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
                    // but it did not work out
                    controlledTranslate = -swiper.controller.spline.interpolate(-translate);
                }

                if (!controlledTranslate || swiper.params.controller.by === 'container') {
                    multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
                    controlledTranslate = ((translate - swiper.minTranslate()) * multiplier) + c.minTranslate();
                }

                if (swiper.params.controller.inverse) {
                    controlledTranslate = c.maxTranslate() - controlledTranslate;
                }
                c.updateProgress(controlledTranslate);
                c.setTranslate(controlledTranslate, swiper);
                c.updateActiveIndex();
                c.updateSlidesClasses();
            }
            if (Array.isArray(controlled)) {
                for (var i = 0; i < controlled.length; i += 1) {
                    if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
                        setControlledTranslate(controlled[i]);
                    }
                }
            } else if (controlled instanceof Swiper && byController !== controlled) {
                setControlledTranslate(controlled);
            }
        },
        setTransition: function setTransition(duration, byController) {
            var swiper = this;
            var controlled = swiper.controller.control;
            var i;

            function setControlledTransition(c) {
                c.setTransition(duration, swiper);
                if (duration !== 0) {
                    c.transitionStart();
                    if (c.params.autoHeight) {
                        Utils.nextTick(function() {
                            c.updateAutoHeight();
                        });
                    }
                    c.$wrapperEl.transitionEnd(function() {
                        if (!controlled) {
                            return;
                        }
                        if (c.params.loop && swiper.params.controller.by === 'slide') {
                            c.loopFix();
                        }
                        c.transitionEnd();
                    });
                }
            }
            if (Array.isArray(controlled)) {
                for (i = 0; i < controlled.length; i += 1) {
                    if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
                        setControlledTransition(controlled[i]);
                    }
                }
            } else if (controlled instanceof Swiper && byController !== controlled) {
                setControlledTransition(controlled);
            }
        },
    };
    var Controller$1 = {
        name: 'controller',
        params: {
            controller: {
                control: undefined,
                inverse: false,
                by: 'slide', // or 'container'
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                controller: {
                    control: swiper.params.controller.control,
                    getInterpolateFunction: Controller.getInterpolateFunction.bind(swiper),
                    setTranslate: Controller.setTranslate.bind(swiper),
                    setTransition: Controller.setTransition.bind(swiper),
                },
            });
        },
        on: {
            update: function update() {
                var swiper = this;
                if (!swiper.controller.control) {
                    return;
                }
                if (swiper.controller.spline) {
                    swiper.controller.spline = undefined;
                    delete swiper.controller.spline;
                }
            },
            resize: function resize() {
                var swiper = this;
                if (!swiper.controller.control) {
                    return;
                }
                if (swiper.controller.spline) {
                    swiper.controller.spline = undefined;
                    delete swiper.controller.spline;
                }
            },
            observerUpdate: function observerUpdate() {
                var swiper = this;
                if (!swiper.controller.control) {
                    return;
                }
                if (swiper.controller.spline) {
                    swiper.controller.spline = undefined;
                    delete swiper.controller.spline;
                }
            },
            setTranslate: function setTranslate(translate, byController) {
                var swiper = this;
                if (!swiper.controller.control) {
                    return;
                }
                swiper.controller.setTranslate(translate, byController);
            },
            setTransition: function setTransition(duration, byController) {
                var swiper = this;
                if (!swiper.controller.control) {
                    return;
                }
                swiper.controller.setTransition(duration, byController);
            },
        },
    };

    var a11y = {
        makeElFocusable: function makeElFocusable($el) {
            $el.attr('tabIndex', '0');
            return $el;
        },
        addElRole: function addElRole($el, role) {
            $el.attr('role', role);
            return $el;
        },
        addElLabel: function addElLabel($el, label) {
            $el.attr('aria-label', label);
            return $el;
        },
        disableEl: function disableEl($el) {
            $el.attr('aria-disabled', true);
            return $el;
        },
        enableEl: function enableEl($el) {
            $el.attr('aria-disabled', false);
            return $el;
        },
        onEnterKey: function onEnterKey(e) {
            var swiper = this;
            var params = swiper.params.a11y;
            if (e.keyCode !== 13) {
                return;
            }
            var $targetEl = $(e.target);
            if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {
                if (!(swiper.isEnd && !swiper.params.loop)) {
                    swiper.slideNext();
                }
                if (swiper.isEnd) {
                    swiper.a11y.notify(params.lastSlideMessage);
                } else {
                    swiper.a11y.notify(params.nextSlideMessage);
                }
            }
            if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {
                if (!(swiper.isBeginning && !swiper.params.loop)) {
                    swiper.slidePrev();
                }
                if (swiper.isBeginning) {
                    swiper.a11y.notify(params.firstSlideMessage);
                } else {
                    swiper.a11y.notify(params.prevSlideMessage);
                }
            }
            if (swiper.pagination && $targetEl.is(("." + (swiper.params.pagination.bulletClass)))) {
                $targetEl[0].click();
            }
        },
        notify: function notify(message) {
            var swiper = this;
            var notification = swiper.a11y.liveRegion;
            if (notification.length === 0) {
                return;
            }
            notification.html('');
            notification.html(message);
        },
        updateNavigation: function updateNavigation() {
            var swiper = this;

            if (swiper.params.loop) {
                return;
            }
            var ref = swiper.navigation;
            var $nextEl = ref.$nextEl;
            var $prevEl = ref.$prevEl;

            if ($prevEl && $prevEl.length > 0) {
                if (swiper.isBeginning) {
                    swiper.a11y.disableEl($prevEl);
                } else {
                    swiper.a11y.enableEl($prevEl);
                }
            }
            if ($nextEl && $nextEl.length > 0) {
                if (swiper.isEnd) {
                    swiper.a11y.disableEl($nextEl);
                } else {
                    swiper.a11y.enableEl($nextEl);
                }
            }
        },
        updatePagination: function updatePagination() {
            var swiper = this;
            var params = swiper.params.a11y;
            if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
                swiper.pagination.bullets.each(function(bulletIndex, bulletEl) {
                    var $bulletEl = $(bulletEl);
                    swiper.a11y.makeElFocusable($bulletEl);
                    swiper.a11y.addElRole($bulletEl, 'button');
                    swiper.a11y.addElLabel($bulletEl, params.paginationBulletMessage.replace(/{{index}}/, $bulletEl.index() + 1));
                });
            }
        },
        init: function init() {
            var swiper = this;

            swiper.$el.append(swiper.a11y.liveRegion);

            // Navigation
            var params = swiper.params.a11y;
            var $nextEl;
            var $prevEl;
            if (swiper.navigation && swiper.navigation.$nextEl) {
                $nextEl = swiper.navigation.$nextEl;
            }
            if (swiper.navigation && swiper.navigation.$prevEl) {
                $prevEl = swiper.navigation.$prevEl;
            }
            if ($nextEl) {
                swiper.a11y.makeElFocusable($nextEl);
                swiper.a11y.addElRole($nextEl, 'button');
                swiper.a11y.addElLabel($nextEl, params.nextSlideMessage);
                $nextEl.on('keydown', swiper.a11y.onEnterKey);
            }
            if ($prevEl) {
                swiper.a11y.makeElFocusable($prevEl);
                swiper.a11y.addElRole($prevEl, 'button');
                swiper.a11y.addElLabel($prevEl, params.prevSlideMessage);
                $prevEl.on('keydown', swiper.a11y.onEnterKey);
            }

            // Pagination
            if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
                swiper.pagination.$el.on('keydown', ("." + (swiper.params.pagination.bulletClass)), swiper.a11y.onEnterKey);
            }
        },
        destroy: function destroy() {
            var swiper = this;
            if (swiper.a11y.liveRegion && swiper.a11y.liveRegion.length > 0) {
                swiper.a11y.liveRegion.remove();
            }

            var $nextEl;
            var $prevEl;
            if (swiper.navigation && swiper.navigation.$nextEl) {
                $nextEl = swiper.navigation.$nextEl;
            }
            if (swiper.navigation && swiper.navigation.$prevEl) {
                $prevEl = swiper.navigation.$prevEl;
            }
            if ($nextEl) {
                $nextEl.off('keydown', swiper.a11y.onEnterKey);
            }
            if ($prevEl) {
                $prevEl.off('keydown', swiper.a11y.onEnterKey);
            }

            // Pagination
            if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
                swiper.pagination.$el.off('keydown', ("." + (swiper.params.pagination.bulletClass)), swiper.a11y.onEnterKey);
            }
        },
    };
    var A11y = {
        name: 'a11y',
        params: {
            a11y: {
                enabled: true,
                notificationClass: 'swiper-notification',
                prevSlideMessage: 'Previous slide',
                nextSlideMessage: 'Next slide',
                firstSlideMessage: 'This is the first slide',
                lastSlideMessage: 'This is the last slide',
                paginationBulletMessage: 'Go to slide {{index}}',
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                a11y: {
                    liveRegion: $(("<span class=\"" + (swiper.params.a11y.notificationClass) + "\" aria-live=\"assertive\" aria-atomic=\"true\"></span>")),
                },
            });
            Object.keys(a11y).forEach(function(methodName) {
                swiper.a11y[methodName] = a11y[methodName].bind(swiper);
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                if (!swiper.params.a11y.enabled) {
                    return;
                }
                swiper.a11y.init();
                swiper.a11y.updateNavigation();
            },
            toEdge: function toEdge() {
                var swiper = this;
                if (!swiper.params.a11y.enabled) {
                    return;
                }
                swiper.a11y.updateNavigation();
            },
            fromEdge: function fromEdge() {
                var swiper = this;
                if (!swiper.params.a11y.enabled) {
                    return;
                }
                swiper.a11y.updateNavigation();
            },
            paginationUpdate: function paginationUpdate() {
                var swiper = this;
                if (!swiper.params.a11y.enabled) {
                    return;
                }
                swiper.a11y.updatePagination();
            },
            destroy: function destroy() {
                var swiper = this;
                if (!swiper.params.a11y.enabled) {
                    return;
                }
                swiper.a11y.destroy();
            },
        },
    };

    var History = {
        init: function init() {
            var swiper = this;
            if (!swiper.params.history) {
                return;
            }
            if (!win.history || !win.history.pushState) {
                swiper.params.history.enabled = false;
                swiper.params.hashNavigation.enabled = true;
                return;
            }
            var history = swiper.history;
            history.initialized = true;
            history.paths = History.getPathValues();
            if (!history.paths.key && !history.paths.value) {
                return;
            }
            history.scrollToSlide(0, history.paths.value, swiper.params.runCallbacksOnInit);
            if (!swiper.params.history.replaceState) {
                win.addEventListener('popstate', swiper.history.setHistoryPopState);
            }
        },
        destroy: function destroy() {
            var swiper = this;
            if (!swiper.params.history.replaceState) {
                win.removeEventListener('popstate', swiper.history.setHistoryPopState);
            }
        },
        setHistoryPopState: function setHistoryPopState() {
            var swiper = this;
            swiper.history.paths = History.getPathValues();
            swiper.history.scrollToSlide(swiper.params.speed, swiper.history.paths.value, false);
        },
        getPathValues: function getPathValues() {
            var pathArray = win.location.pathname.slice(1).split('/').filter(function(part) {
                return part !== '';
            });
            var total = pathArray.length;
            var key = pathArray[total - 2];
            var value = pathArray[total - 1];
            return {
                key: key,
                value: value
            };
        },
        setHistory: function setHistory(key, index) {
            var swiper = this;
            if (!swiper.history.initialized || !swiper.params.history.enabled) {
                return;
            }
            var slide = swiper.slides.eq(index);
            var value = History.slugify(slide.attr('data-history'));
            if (!win.location.pathname.includes(key)) {
                value = key + "/" + value;
            }
            var currentState = win.history.state;
            if (currentState && currentState.value === value) {
                return;
            }
            if (swiper.params.history.replaceState) {
                win.history.replaceState({
                    value: value
                }, null, value);
            } else {
                win.history.pushState({
                    value: value
                }, null, value);
            }
        },
        slugify: function slugify(text) {
            return text.toString().toLowerCase()
                .replace(/\s+/g, '-')
                .replace(/[^\w-]+/g, '')
                .replace(/--+/g, '-')
                .replace(/^-+/, '')
                .replace(/-+$/, '');
        },
        scrollToSlide: function scrollToSlide(speed, value, runCallbacks) {
            var swiper = this;
            if (value) {
                for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
                    var slide = swiper.slides.eq(i);
                    var slideHistory = History.slugify(slide.attr('data-history'));
                    if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {
                        var index = slide.index();
                        swiper.slideTo(index, speed, runCallbacks);
                    }
                }
            } else {
                swiper.slideTo(0, speed, runCallbacks);
            }
        },
    };

    var History$1 = {
        name: 'history',
        params: {
            history: {
                enabled: false,
                replaceState: false,
                key: 'slides',
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                history: {
                    init: History.init.bind(swiper),
                    setHistory: History.setHistory.bind(swiper),
                    setHistoryPopState: History.setHistoryPopState.bind(swiper),
                    scrollToSlide: History.scrollToSlide.bind(swiper),
                    destroy: History.destroy.bind(swiper),
                },
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                if (swiper.params.history.enabled) {
                    swiper.history.init();
                }
            },
            destroy: function destroy() {
                var swiper = this;
                if (swiper.params.history.enabled) {
                    swiper.history.destroy();
                }
            },
            transitionEnd: function transitionEnd() {
                var swiper = this;
                if (swiper.history.initialized) {
                    swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
                }
            },
        },
    };

    var HashNavigation = {
        onHashCange: function onHashCange() {
            var swiper = this;
            var newHash = doc.location.hash.replace('#', '');
            var activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');
            if (newHash !== activeSlideHash) {
                swiper.slideTo(swiper.$wrapperEl.children(("." + (swiper.params.slideClass) + "[data-hash=\"" + newHash + "\"]")).index());
            }
        },
        setHash: function setHash() {
            var swiper = this;
            if (!swiper.hashNavigation.initialized || !swiper.params.hashNavigation.enabled) {
                return;
            }
            if (swiper.params.hashNavigation.replaceState && win.history && win.history.replaceState) {
                win.history.replaceState(null, null, (("#" + (swiper.slides.eq(swiper.activeIndex).attr('data-hash'))) || ''));
            } else {
                var slide = swiper.slides.eq(swiper.activeIndex);
                var hash = slide.attr('data-hash') || slide.attr('data-history');
                doc.location.hash = hash || '';
            }
        },
        init: function init() {
            var swiper = this;
            if (!swiper.params.hashNavigation.enabled || (swiper.params.history && swiper.params.history.enabled)) {
                return;
            }
            swiper.hashNavigation.initialized = true;
            var hash = doc.location.hash.replace('#', '');
            if (hash) {
                var speed = 0;
                for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
                    var slide = swiper.slides.eq(i);
                    var slideHash = slide.attr('data-hash') || slide.attr('data-history');
                    if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {
                        var index = slide.index();
                        swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);
                    }
                }
            }
            if (swiper.params.hashNavigation.watchState) {
                $(win).on('hashchange', swiper.hashNavigation.onHashCange);
            }
        },
        destroy: function destroy() {
            var swiper = this;
            if (swiper.params.hashNavigation.watchState) {
                $(win).off('hashchange', swiper.hashNavigation.onHashCange);
            }
        },
    };
    var HashNavigation$1 = {
        name: 'hash-navigation',
        params: {
            hashNavigation: {
                enabled: false,
                replaceState: false,
                watchState: false,
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                hashNavigation: {
                    initialized: false,
                    init: HashNavigation.init.bind(swiper),
                    destroy: HashNavigation.destroy.bind(swiper),
                    setHash: HashNavigation.setHash.bind(swiper),
                    onHashCange: HashNavigation.onHashCange.bind(swiper),
                },
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                if (swiper.params.hashNavigation.enabled) {
                    swiper.hashNavigation.init();
                }
            },
            destroy: function destroy() {
                var swiper = this;
                if (swiper.params.hashNavigation.enabled) {
                    swiper.hashNavigation.destroy();
                }
            },
            transitionEnd: function transitionEnd() {
                var swiper = this;
                if (swiper.hashNavigation.initialized) {
                    swiper.hashNavigation.setHash();
                }
            },
        },
    };

    /* eslint no-underscore-dangle: "off" */

    var Autoplay = {
        run: function run() {
            var swiper = this;
            var $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
            var delay = swiper.params.autoplay.delay;
            if ($activeSlideEl.attr('data-swiper-autoplay')) {
                delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
            }
            swiper.autoplay.timeout = Utils.nextTick(function() {
                if (swiper.params.autoplay.reverseDirection) {
                    if (swiper.params.loop) {
                        swiper.loopFix();
                        swiper.slidePrev(swiper.params.speed, true, true);
                        swiper.emit('autoplay');
                    } else if (!swiper.isBeginning) {
                        swiper.slidePrev(swiper.params.speed, true, true);
                        swiper.emit('autoplay');
                    } else if (!swiper.params.autoplay.stopOnLastSlide) {
                        swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
                        swiper.emit('autoplay');
                    } else {
                        swiper.autoplay.stop();
                    }
                } else if (swiper.params.loop) {
                    swiper.loopFix();
                    swiper.slideNext(swiper.params.speed, true, true);
                    swiper.emit('autoplay');
                } else if (!swiper.isEnd) {
                    swiper.slideNext(swiper.params.speed, true, true);
                    swiper.emit('autoplay');
                } else if (!swiper.params.autoplay.stopOnLastSlide) {
                    swiper.slideTo(0, swiper.params.speed, true, true);
                    swiper.emit('autoplay');
                } else {
                    swiper.autoplay.stop();
                }
            }, delay);
        },
        start: function start() {
            var swiper = this;
            if (typeof swiper.autoplay.timeout !== 'undefined') {
                return false;
            }
            if (swiper.autoplay.running) {
                return false;
            }
            swiper.autoplay.running = true;
            swiper.emit('autoplayStart');
            swiper.autoplay.run();
            return true;
        },
        stop: function stop() {
            var swiper = this;
            if (!swiper.autoplay.running) {
                return false;
            }
            if (typeof swiper.autoplay.timeout === 'undefined') {
                return false;
            }

            if (swiper.autoplay.timeout) {
                clearTimeout(swiper.autoplay.timeout);
                swiper.autoplay.timeout = undefined;
            }
            swiper.autoplay.running = false;
            swiper.emit('autoplayStop');
            return true;
        },
        pause: function pause(speed) {
            var swiper = this;
            if (!swiper.autoplay.running) {
                return;
            }
            if (swiper.autoplay.paused) {
                return;
            }
            if (swiper.autoplay.timeout) {
                clearTimeout(swiper.autoplay.timeout);
            }
            swiper.autoplay.paused = true;
            if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
                swiper.autoplay.paused = false;
                swiper.autoplay.run();
            } else {
                swiper.$wrapperEl[0].addEventListener('transitionend', swiper.autoplay.onTransitionEnd);
                swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
            }
        },
    };

    var Autoplay$1 = {
        name: 'autoplay',
        params: {
            autoplay: {
                enabled: false,
                delay: 3000,
                waitForTransition: true,
                disableOnInteraction: true,
                stopOnLastSlide: false,
                reverseDirection: false,
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                autoplay: {
                    running: false,
                    paused: false,
                    run: Autoplay.run.bind(swiper),
                    start: Autoplay.start.bind(swiper),
                    stop: Autoplay.stop.bind(swiper),
                    pause: Autoplay.pause.bind(swiper),
                    onTransitionEnd: function onTransitionEnd(e) {
                        if (!swiper || swiper.destroyed || !swiper.$wrapperEl) {
                            return;
                        }
                        if (e.target !== this) {
                            return;
                        }
                        swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.autoplay.onTransitionEnd);
                        swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
                        swiper.autoplay.paused = false;
                        if (!swiper.autoplay.running) {
                            swiper.autoplay.stop();
                        } else {
                            swiper.autoplay.run();
                        }
                    },
                },
            });
        },
        on: {
            init: function init() {
                var swiper = this;
                if (swiper.params.autoplay.enabled) {
                    swiper.autoplay.start();
                }
            },
            beforeTransitionStart: function beforeTransitionStart(speed, internal) {
                var swiper = this;
                if (swiper.autoplay.running) {
                    if (internal || !swiper.params.autoplay.disableOnInteraction) {
                        swiper.autoplay.pause(speed);
                    } else {
                        swiper.autoplay.stop();
                    }
                }
            },
            sliderFirstMove: function sliderFirstMove() {
                var swiper = this;
                if (swiper.autoplay.running) {
                    if (swiper.params.autoplay.disableOnInteraction) {
                        swiper.autoplay.stop();
                    } else {
                        swiper.autoplay.pause();
                    }
                }
            },
            destroy: function destroy() {
                var swiper = this;
                if (swiper.autoplay.running) {
                    swiper.autoplay.stop();
                }
            },
        },
    };

    var Fade = {
        setTranslate: function setTranslate() {
            var swiper = this;
            var slides = swiper.slides;
            for (var i = 0; i < slides.length; i += 1) {
                var $slideEl = swiper.slides.eq(i);
                var offset = $slideEl[0].swiperSlideOffset;
                var tx = -offset;
                if (!swiper.params.virtualTranslate) {
                    tx -= swiper.translate;
                }
                var ty = 0;
                if (!swiper.isHorizontal()) {
                    ty = tx;
                    tx = 0;
                }
                var slideOpacity = swiper.params.fadeEffect.crossFade ?
                    Math.max(1 - Math.abs($slideEl[0].progress), 0) :
                    1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
                $slideEl
                    .css({
                        opacity: slideOpacity,
                    })
                    .transform(("translate3d(" + tx + "px, " + ty + "px, 0px)"));
            }
        },
        setTransition: function setTransition(duration) {
            var swiper = this;
            var slides = swiper.slides;
            var $wrapperEl = swiper.$wrapperEl;
            slides.transition(duration);
            if (swiper.params.virtualTranslate && duration !== 0) {
                var eventTriggered = false;
                slides.transitionEnd(function() {
                    if (eventTriggered) {
                        return;
                    }
                    if (!swiper || swiper.destroyed) {
                        return;
                    }
                    eventTriggered = true;
                    swiper.animating = false;
                    var triggerEvents = ['webkitTransitionEnd', 'transitionend'];
                    for (var i = 0; i < triggerEvents.length; i += 1) {
                        $wrapperEl.trigger(triggerEvents[i]);
                    }
                });
            }
        },
    };

    var EffectFade = {
        name: 'effect-fade',
        params: {
            fadeEffect: {
                crossFade: false,
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                fadeEffect: {
                    setTranslate: Fade.setTranslate.bind(swiper),
                    setTransition: Fade.setTransition.bind(swiper),
                },
            });
        },
        on: {
            beforeInit: function beforeInit() {
                var swiper = this;
                if (swiper.params.effect !== 'fade') {
                    return;
                }
                swiper.classNames.push(((swiper.params.containerModifierClass) + "fade"));
                var overwriteParams = {
                    slidesPerView: 1,
                    slidesPerColumn: 1,
                    slidesPerGroup: 1,
                    watchSlidesProgress: true,
                    spaceBetween: 0,
                    virtualTranslate: true,
                };
                Utils.extend(swiper.params, overwriteParams);
                Utils.extend(swiper.originalParams, overwriteParams);
            },
            setTranslate: function setTranslate() {
                var swiper = this;
                if (swiper.params.effect !== 'fade') {
                    return;
                }
                swiper.fadeEffect.setTranslate();
            },
            setTransition: function setTransition(duration) {
                var swiper = this;
                if (swiper.params.effect !== 'fade') {
                    return;
                }
                swiper.fadeEffect.setTransition(duration);
            },
        },
    };

    var Cube = {
        setTranslate: function setTranslate() {
            var swiper = this;
            var $el = swiper.$el;
            var $wrapperEl = swiper.$wrapperEl;
            var slides = swiper.slides;
            var swiperWidth = swiper.width;
            var swiperHeight = swiper.height;
            var rtl = swiper.rtlTranslate;
            var swiperSize = swiper.size;
            var params = swiper.params.cubeEffect;
            var isHorizontal = swiper.isHorizontal();
            var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
            var wrapperRotate = 0;
            var $cubeShadowEl;
            if (params.shadow) {
                if (isHorizontal) {
                    $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');
                    if ($cubeShadowEl.length === 0) {
                        $cubeShadowEl = $('<div class="swiper-cube-shadow"></div>');
                        $wrapperEl.append($cubeShadowEl);
                    }
                    $cubeShadowEl.css({
                        height: (swiperWidth + "px")
                    });
                } else {
                    $cubeShadowEl = $el.find('.swiper-cube-shadow');
                    if ($cubeShadowEl.length === 0) {
                        $cubeShadowEl = $('<div class="swiper-cube-shadow"></div>');
                        $el.append($cubeShadowEl);
                    }
                }
            }
            for (var i = 0; i < slides.length; i += 1) {
                var $slideEl = slides.eq(i);
                var slideIndex = i;
                if (isVirtual) {
                    slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);
                }
                var slideAngle = slideIndex * 90;
                var round = Math.floor(slideAngle / 360);
                if (rtl) {
                    slideAngle = -slideAngle;
                    round = Math.floor(-slideAngle / 360);
                }
                var progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
                var tx = 0;
                var ty = 0;
                var tz = 0;
                if (slideIndex % 4 === 0) {
                    tx = -round * 4 * swiperSize;
                    tz = 0;
                } else if ((slideIndex - 1) % 4 === 0) {
                    tx = 0;
                    tz = -round * 4 * swiperSize;
                } else if ((slideIndex - 2) % 4 === 0) {
                    tx = swiperSize + (round * 4 * swiperSize);
                    tz = swiperSize;
                } else if ((slideIndex - 3) % 4 === 0) {
                    tx = -swiperSize;
                    tz = (3 * swiperSize) + (swiperSize * 4 * round);
                }
                if (rtl) {
                    tx = -tx;
                }

                if (!isHorizontal) {
                    ty = tx;
                    tx = 0;
                }

                var transform = "rotateX(" + (isHorizontal ? 0 : -slideAngle) + "deg) rotateY(" + (isHorizontal ? slideAngle : 0) + "deg) translate3d(" + tx + "px, " + ty + "px, " + tz + "px)";
                if (progress <= 1 && progress > -1) {
                    wrapperRotate = (slideIndex * 90) + (progress * 90);
                    if (rtl) {
                        wrapperRotate = (-slideIndex * 90) - (progress * 90);
                    }
                }
                $slideEl.transform(transform);
                if (params.slideShadows) {
                    // Set shadows
                    var shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
                    var shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
                    if (shadowBefore.length === 0) {
                        shadowBefore = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>"));
                        $slideEl.append(shadowBefore);
                    }
                    if (shadowAfter.length === 0) {
                        shadowAfter = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>"));
                        $slideEl.append(shadowAfter);
                    }
                    if (shadowBefore.length) {
                        shadowBefore[0].style.opacity = Math.max(-progress, 0);
                    }
                    if (shadowAfter.length) {
                        shadowAfter[0].style.opacity = Math.max(progress, 0);
                    }
                }
            }
            $wrapperEl.css({
                '-webkit-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
                '-moz-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
                '-ms-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
                'transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
            });

            if (params.shadow) {
                if (isHorizontal) {
                    $cubeShadowEl.transform(("translate3d(0px, " + ((swiperWidth / 2) + params.shadowOffset) + "px, " + (-swiperWidth / 2) + "px) rotateX(90deg) rotateZ(0deg) scale(" + (params.shadowScale) + ")"));
                } else {
                    var shadowAngle = Math.abs(wrapperRotate) - (Math.floor(Math.abs(wrapperRotate) / 90) * 90);
                    var multiplier = 1.5 - (
                        (Math.sin((shadowAngle * 2 * Math.PI) / 360) / 2) +
                        (Math.cos((shadowAngle * 2 * Math.PI) / 360) / 2)
                    );
                    var scale1 = params.shadowScale;
                    var scale2 = params.shadowScale / multiplier;
                    var offset = params.shadowOffset;
                    $cubeShadowEl.transform(("scale3d(" + scale1 + ", 1, " + scale2 + ") translate3d(0px, " + ((swiperHeight / 2) + offset) + "px, " + (-swiperHeight / 2 / scale2) + "px) rotateX(-90deg)"));
                }
            }
            var zFactor = (Browser.isSafari || Browser.isUiWebView) ? (-swiperSize / 2) : 0;
            $wrapperEl
                .transform(("translate3d(0px,0," + zFactor + "px) rotateX(" + (swiper.isHorizontal() ? 0 : wrapperRotate) + "deg) rotateY(" + (swiper.isHorizontal() ? -wrapperRotate : 0) + "deg)"));
        },
        setTransition: function setTransition(duration) {
            var swiper = this;
            var $el = swiper.$el;
            var slides = swiper.slides;
            slides
                .transition(duration)
                .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
                .transition(duration);
            if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
                $el.find('.swiper-cube-shadow').transition(duration);
            }
        },
    };

    var EffectCube = {
        name: 'effect-cube',
        params: {
            cubeEffect: {
                slideShadows: true,
                shadow: true,
                shadowOffset: 20,
                shadowScale: 0.94,
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                cubeEffect: {
                    setTranslate: Cube.setTranslate.bind(swiper),
                    setTransition: Cube.setTransition.bind(swiper),
                },
            });
        },
        on: {
            beforeInit: function beforeInit() {
                var swiper = this;
                if (swiper.params.effect !== 'cube') {
                    return;
                }
                swiper.classNames.push(((swiper.params.containerModifierClass) + "cube"));
                swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));
                var overwriteParams = {
                    slidesPerView: 1,
                    slidesPerColumn: 1,
                    slidesPerGroup: 1,
                    watchSlidesProgress: true,
                    resistanceRatio: 0,
                    spaceBetween: 0,
                    centeredSlides: false,
                    virtualTranslate: true,
                };
                Utils.extend(swiper.params, overwriteParams);
                Utils.extend(swiper.originalParams, overwriteParams);
            },
            setTranslate: function setTranslate() {
                var swiper = this;
                if (swiper.params.effect !== 'cube') {
                    return;
                }
                swiper.cubeEffect.setTranslate();
            },
            setTransition: function setTransition(duration) {
                var swiper = this;
                if (swiper.params.effect !== 'cube') {
                    return;
                }
                swiper.cubeEffect.setTransition(duration);
            },
        },
    };

    var Flip = {
        setTranslate: function setTranslate() {
            var swiper = this;
            var slides = swiper.slides;
            var rtl = swiper.rtlTranslate;
            for (var i = 0; i < slides.length; i += 1) {
                var $slideEl = slides.eq(i);
                var progress = $slideEl[0].progress;
                if (swiper.params.flipEffect.limitRotation) {
                    progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
                }
                var offset = $slideEl[0].swiperSlideOffset;
                var rotate = -180 * progress;
                var rotateY = rotate;
                var rotateX = 0;
                var tx = -offset;
                var ty = 0;
                if (!swiper.isHorizontal()) {
                    ty = tx;
                    tx = 0;
                    rotateX = -rotateY;
                    rotateY = 0;
                } else if (rtl) {
                    rotateY = -rotateY;
                }

                $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;

                if (swiper.params.flipEffect.slideShadows) {
                    // Set shadows
                    var shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
                    var shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
                    if (shadowBefore.length === 0) {
                        shadowBefore = $(("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'left' : 'top') + "\"></div>"));
                        $slideEl.append(shadowBefore);
                    }
                    if (shadowAfter.length === 0) {
                        shadowAfter = $(("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'right' : 'bottom') + "\"></div>"));
                        $slideEl.append(shadowAfter);
                    }
                    if (shadowBefore.length) {
                        shadowBefore[0].style.opacity = Math.max(-progress, 0);
                    }
                    if (shadowAfter.length) {
                        shadowAfter[0].style.opacity = Math.max(progress, 0);
                    }
                }
                $slideEl
                    .transform(("translate3d(" + tx + "px, " + ty + "px, 0px) rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg)"));
            }
        },
        setTransition: function setTransition(duration) {
            var swiper = this;
            var slides = swiper.slides;
            var activeIndex = swiper.activeIndex;
            var $wrapperEl = swiper.$wrapperEl;
            slides
                .transition(duration)
                .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
                .transition(duration);
            if (swiper.params.virtualTranslate && duration !== 0) {
                var eventTriggered = false;
                // eslint-disable-next-line
                slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {
                    if (eventTriggered) {
                        return;
                    }
                    if (!swiper || swiper.destroyed) {
                        return;
                    }
                    // if (!$(this).hasClass(swiper.params.slideActiveClass)) return;
                    eventTriggered = true;
                    swiper.animating = false;
                    var triggerEvents = ['webkitTransitionEnd', 'transitionend'];
                    for (var i = 0; i < triggerEvents.length; i += 1) {
                        $wrapperEl.trigger(triggerEvents[i]);
                    }
                });
            }
        },
    };

    var EffectFlip = {
        name: 'effect-flip',
        params: {
            flipEffect: {
                slideShadows: true,
                limitRotation: true,
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                flipEffect: {
                    setTranslate: Flip.setTranslate.bind(swiper),
                    setTransition: Flip.setTransition.bind(swiper),
                },
            });
        },
        on: {
            beforeInit: function beforeInit() {
                var swiper = this;
                if (swiper.params.effect !== 'flip') {
                    return;
                }
                swiper.classNames.push(((swiper.params.containerModifierClass) + "flip"));
                swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));
                var overwriteParams = {
                    slidesPerView: 1,
                    slidesPerColumn: 1,
                    slidesPerGroup: 1,
                    watchSlidesProgress: true,
                    spaceBetween: 0,
                    virtualTranslate: true,
                };
                Utils.extend(swiper.params, overwriteParams);
                Utils.extend(swiper.originalParams, overwriteParams);
            },
            setTranslate: function setTranslate() {
                var swiper = this;
                if (swiper.params.effect !== 'flip') {
                    return;
                }
                swiper.flipEffect.setTranslate();
            },
            setTransition: function setTransition(duration) {
                var swiper = this;
                if (swiper.params.effect !== 'flip') {
                    return;
                }
                swiper.flipEffect.setTransition(duration);
            },
        },
    };

    var Coverflow = {
        setTranslate: function setTranslate() {
            var swiper = this;
            var swiperWidth = swiper.width;
            var swiperHeight = swiper.height;
            var slides = swiper.slides;
            var $wrapperEl = swiper.$wrapperEl;
            var slidesSizesGrid = swiper.slidesSizesGrid;
            var params = swiper.params.coverflowEffect;
            var isHorizontal = swiper.isHorizontal();
            var transform = swiper.translate;
            var center = isHorizontal ? -transform + (swiperWidth / 2) : -transform + (swiperHeight / 2);
            var rotate = isHorizontal ? params.rotate : -params.rotate;
            var translate = params.depth;
            // Each slide offset from center
            for (var i = 0, length = slides.length; i < length; i += 1) {
                var $slideEl = slides.eq(i);
                var slideSize = slidesSizesGrid[i];
                var slideOffset = $slideEl[0].swiperSlideOffset;
                var offsetMultiplier = ((center - slideOffset - (slideSize / 2)) / slideSize) * params.modifier;

                var rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
                var rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;
                // var rotateZ = 0
                var translateZ = -translate * Math.abs(offsetMultiplier);

                var translateY = isHorizontal ? 0 : params.stretch * (offsetMultiplier);
                var translateX = isHorizontal ? params.stretch * (offsetMultiplier) : 0;

                // Fix for ultra small values
                if (Math.abs(translateX) < 0.001) {
                    translateX = 0;
                }
                if (Math.abs(translateY) < 0.001) {
                    translateY = 0;
                }
                if (Math.abs(translateZ) < 0.001) {
                    translateZ = 0;
                }
                if (Math.abs(rotateY) < 0.001) {
                    rotateY = 0;
                }
                if (Math.abs(rotateX) < 0.001) {
                    rotateX = 0;
                }

                var slideTransform = "translate3d(" + translateX + "px," + translateY + "px," + translateZ + "px)  rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg)";

                $slideEl.transform(slideTransform);
                $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;
                if (params.slideShadows) {
                    // Set shadows
                    var $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
                    var $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
                    if ($shadowBeforeEl.length === 0) {
                        $shadowBeforeEl = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>"));
                        $slideEl.append($shadowBeforeEl);
                    }
                    if ($shadowAfterEl.length === 0) {
                        $shadowAfterEl = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>"));
                        $slideEl.append($shadowAfterEl);
                    }
                    if ($shadowBeforeEl.length) {
                        $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;
                    }
                    if ($shadowAfterEl.length) {
                        $shadowAfterEl[0].style.opacity = (-offsetMultiplier) > 0 ? -offsetMultiplier : 0;
                    }
                }
            }

            // Set correct perspective for IE10
            if (Support.pointerEvents || Support.prefixedPointerEvents) {
                var ws = $wrapperEl[0].style;
                ws.perspectiveOrigin = center + "px 50%";
            }
        },
        setTransition: function setTransition(duration) {
            var swiper = this;
            swiper.slides
                .transition(duration)
                .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
                .transition(duration);
        },
    };

    var EffectCoverflow = {
        name: 'effect-coverflow',
        params: {
            coverflowEffect: {
                rotate: 50,
                stretch: 0,
                depth: 100,
                modifier: 1,
                slideShadows: true,
            },
        },
        create: function create() {
            var swiper = this;
            Utils.extend(swiper, {
                coverflowEffect: {
                    setTranslate: Coverflow.setTranslate.bind(swiper),
                    setTransition: Coverflow.setTransition.bind(swiper),
                },
            });
        },
        on: {
            beforeInit: function beforeInit() {
                var swiper = this;
                if (swiper.params.effect !== 'coverflow') {
                    return;
                }

                swiper.classNames.push(((swiper.params.containerModifierClass) + "coverflow"));
                swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));

                swiper.params.watchSlidesProgress = true;
                swiper.originalParams.watchSlidesProgress = true;
            },
            setTranslate: function setTranslate() {
                var swiper = this;
                if (swiper.params.effect !== 'coverflow') {
                    return;
                }
                swiper.coverflowEffect.setTranslate();
            },
            setTransition: function setTransition(duration) {
                var swiper = this;
                if (swiper.params.effect !== 'coverflow') {
                    return;
                }
                swiper.coverflowEffect.setTransition(duration);
            },
        },
    };

    // Swiper Class

    var components = [
        Device$1,
        Support$1,
        Browser$1,
        Resize,
        Observer$1,
        Virtual$1,
        Keyboard$1,
        Mousewheel$1,
        Navigation$1,
        Pagination$1,
        Scrollbar$1,
        Parallax$1,
        Zoom$1,
        Lazy$1,
        Controller$1,
        A11y,
        History$1,
        HashNavigation$1,
        Autoplay$1,
        EffectFade,
        EffectCube,
        EffectFlip,
        EffectCoverflow
    ];

    if (typeof Swiper.use === 'undefined') {
        Swiper.use = Swiper.Class.use;
        Swiper.installModule = Swiper.Class.installModule;
    }

    Swiper.use(components);

    return Swiper;

})));

/*!
 * VERSION: 0.5.8
 * DATE: 2017-08-22
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
 * SplitText is a Club GreenSock membership benefit; You must have a valid membership to use
 * this code without violating the terms of use. Visit http://greensock.com/club/ to sign up or get more details.
 * This work is subject to the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
var _gsScope = 'undefined' != typeof module && module.exports && 'undefined' != typeof global ? global : this || window;
! function(e) {
    'use strict';
    var t = e.GreenSockGlobals || e,
        i = function(e) {
            var i, n = e.split('.'),
                s = t;
            for (i = 0; i < n.length; i++) s[n[i]] = s = s[n[i]] || {};
            return s
        },
        n = i('com.greensock.utils'),
        s = function(e) {
            var t = e.nodeType,
                i = '';
            if (1 === t || 9 === t || 11 === t) {
                if ('string' == typeof e.textContent) return e.textContent;
                for (e = e.firstChild; e; e = e.nextSibling) i += s(e)
            } else if (3 === t || 4 === t) return e.nodeValue;
            return i
        },
        r = document,
        l = r.defaultView ? r.defaultView.getComputedStyle : function() {},
        o = /([A-Z])/g,
        d = function(e, t, i, n) {
            var s;
            return (i = i || l(e, null)) ? (e = i.getPropertyValue(t.replace(o, '-$1').toLowerCase()), s = e || i.length ? e : i[t]) : e.currentStyle && (i = e.currentStyle, s = i[t]), n ? s : parseInt(s, 10) || 0
        },
        p = function(e) {
            return e.length && e[0] && (e[0].nodeType && e[0].style && !e.nodeType || e[0].length && e[0][0]) ? !0 : !1
        },
        a = function(e) {
            var t, i, n, s = [],
                r = e.length;
            for (t = 0; r > t; t++)
                if (i = e[t], p(i))
                    for (n = i.length, n = 0; n < i.length; n++) s.push(i[n]);
                else s.push(i);
            return s
        },
        h = /(?:\r|\n|\t\t)/g,
        u = /(?:\s\s+)/g,
        f = 55296,
        c = 56319,
        g = 56320,
        y = 127462,
        x = 127487,
        S = 127995,
        v = 127999,
        b = function(e) {
            return (e.charCodeAt(0) - f << 10) + (e.charCodeAt(1) - g) + 65536
        },
        _ = r.all && !r.addEventListener,
        m = ' style=\'position:relative;display:inline-block;' + (_ ? '*display:inline;*zoom:1;\'' : '\''),
        C = function(e, t) {
            e = e || '';
            var i = -1 !== e.indexOf('++'),
                n = 1;
            return i && (e = e.split('++').join('')),
                function() {
                    return '<' + t + m + (e ? ' class=\'' + e + (i ? n++ : '') + '\'>' : '>')
                }
        },
        T = n.SplitText = t.SplitText = function(e, t) {
            if ('string' == typeof e && (e = T.selector(e)), !e) throw 'cannot split a null element.';
            this.elements = p(e) ? a(e) : [e], this.chars = [], this.words = [], this.lines = [], this._originals = [], this.vars = t || {}, this.split(t)
        },
        N = function(e, t, i) {
            var n = e.nodeType;
            if (1 === n || 9 === n || 11 === n)
                for (e = e.firstChild; e; e = e.nextSibling) N(e, t, i);
            else(3 === n || 4 === n) && (e.nodeValue = e.nodeValue.split(t).join(i))
        },
        w = function(e, t) {
            var i = t.length;
            for (; --i > -1;) e.push(t[i])
        },
        A = function(e) {
            var t, i = [],
                n = e.length;
            for (t = 0; t !== n; i.push(e[t++]));
            return i
        },
        L = function(e, t, i) {
            var n;
            for (; e && e !== t;) {
                if (n = e._next || e.nextSibling) return n.textContent.charAt(0) === i;
                e = e.parentNode || e._parent
            }
            return !1
        },
        B = function(e) {
            var t, i, n = A(e.childNodes),
                s = n.length;
            for (t = 0; s > t; t++) i = n[t], i._isSplit ? B(i) : (t && 3 === i.previousSibling.nodeType ? i.previousSibling.nodeValue += 3 === i.nodeType ? i.nodeValue : i.firstChild.nodeValue : 3 !== i.nodeType && e.insertBefore(i.firstChild, i), e.removeChild(i))
        },
        V = function(e, t, i, n, s, o, p) {
            var a, h, u, f, c, g, y, x, S, v, b, _, m = l(e),
                C = d(e, 'paddingLeft', m),
                T = -999,
                A = d(e, 'borderBottomWidth', m) + d(e, 'borderTopWidth', m),
                V = d(e, 'borderLeftWidth', m) + d(e, 'borderRightWidth', m),
                W = d(e, 'paddingTop', m) + d(e, 'paddingBottom', m),
                H = d(e, 'paddingLeft', m) + d(e, 'paddingRight', m),
                E = .2 * d(e, 'fontSize'),
                k = d(e, 'textAlign', m, !0),
                O = [],
                R = [],
                j = [],
                M = t.wordDelimiter || ' ',
                G = t.span ? 'span' : 'div',
                $ = t.type || t.split || 'chars,words,lines',
                q = s && -1 !== $.indexOf('lines') ? [] : null,
                z = -1 !== $.indexOf('words'),
                D = -1 !== $.indexOf('chars'),
                F = 'absolute' === t.position || t.absolute === !0,
                I = t.linesClass,
                P = -1 !== (I || '').indexOf('++'),
                Q = [];
            for (q && 1 === e.children.length && e.children[0]._isSplit && (e = e.children[0]), P && (I = I.split('++').join('')), h = e.getElementsByTagName('*'), u = h.length, c = [], a = 0; u > a; a++) c[a] = h[a];
            if (q || F)
                for (a = 0; u > a; a++) f = c[a], g = f.parentNode === e, (g || F || D && !z) && (_ = f.offsetTop, q && g && Math.abs(_ - T) > E && ('BR' !== f.nodeName || 0 === a) && (y = [], q.push(y), T = _), F && (f._x = f.offsetLeft, f._y = _, f._w = f.offsetWidth, f._h = f.offsetHeight), q && ((f._isSplit && g || !D && g || z && g || !z && f.parentNode.parentNode === e && !f.parentNode._isSplit) && (y.push(f), f._x -= C, L(f, e, M) && (f._wordEnd = !0)), 'BR' === f.nodeName && (f.nextSibling && 'BR' === f.nextSibling.nodeName || 0 === a) && q.push([])));
            for (a = 0; u > a; a++) f = c[a], g = f.parentNode === e, 'BR' !== f.nodeName ? (F && (S = f.style, z || g || (f._x += f.parentNode._x, f._y += f.parentNode._y), S.left = f._x + 'px', S.top = f._y + 'px', S.position = 'absolute', S.display = 'block', S.width = f._w + 1 + 'px', S.height = f._h + 'px'), !z && D ? f._isSplit ? (f._next = f.nextSibling, f.parentNode.appendChild(f)) : f.parentNode._isSplit ? (f._parent = f.parentNode, !f.previousSibling && f.firstChild && (f.firstChild._isFirst = !0), f.nextSibling && ' ' === f.nextSibling.textContent && !f.nextSibling.nextSibling && Q.push(f.nextSibling), f._next = f.nextSibling && f.nextSibling._isFirst ? null : f.nextSibling, f.parentNode.removeChild(f), c.splice(a--, 1), u--) : g || (_ = !f.nextSibling && L(f.parentNode, e, M), f.parentNode._parent && f.parentNode._parent.appendChild(f), _ && f.parentNode.appendChild(r.createTextNode(' ')), t.span && (f.style.display = 'inline'), O.push(f)) : f.parentNode._isSplit && !f._isSplit && '' !== f.innerHTML ? R.push(f) : D && !f._isSplit && (t.span && (f.style.display = 'inline'), O.push(f))) : q || F ? (f.parentNode && f.parentNode.removeChild(f), c.splice(a--, 1), u--) : z || e.appendChild(f);
            for (a = Q.length; --a > -1;) Q[a].parentNode.removeChild(Q[a]);
            if (q) {
                for (F && (v = r.createElement(G), e.appendChild(v), b = v.offsetWidth + 'px', _ = v.offsetParent === e ? 0 : e.offsetLeft, e.removeChild(v)), S = e.style.cssText, e.style.cssText = 'display:none;'; e.firstChild;) e.removeChild(e.firstChild);
                for (x = ' ' === M && (!F || !z && !D), a = 0; a < q.length; a++) {
                    for (y = q[a], v = r.createElement(G), v.style.cssText = 'display:block;text-align:' + k + ';position:' + (F ? 'absolute;' : 'relative;'), I && (v.className = I + (P ? a + 1 : '')), j.push(v), u = y.length, h = 0; u > h; h++) 'BR' !== y[h].nodeName && (f = y[h], v.appendChild(f), x && f._wordEnd && v.appendChild(r.createTextNode(' ')), F && (0 === h && (v.style.top = f._y + 'px', v.style.left = C + _ + 'px'), f.style.top = '0px', _ && (f.style.left = f._x - _ + 'px')));
                    0 === u ? v.innerHTML = '&nbsp;' : z || D || (B(v), N(v, String.fromCharCode(160), ' ')), F && (v.style.width = b, v.style.height = f._h + 'px'), e.appendChild(v)
                }
                e.style.cssText = S
            }
            F && (p > e.clientHeight && (e.style.height = p - W + 'px', e.clientHeight < p && (e.style.height = p + A + 'px')), o > e.clientWidth && (e.style.width = o - H + 'px', e.clientWidth < o && (e.style.width = o + V + 'px'))), w(i, O), w(n, R), w(s, j)
        },
        W = function(e, t, i, n) {
            var l, o, d, p, a, g, _, m, C, T = t.span ? 'span' : 'div',
                w = t.type || t.split || 'chars,words,lines',
                A = -1 !== w.indexOf('chars'),
                L = 'absolute' === t.position || t.absolute === !0,
                B = t.wordDelimiter || ' ',
                V = ' ' !== B ? '' : L ? '&#173; ' : ' ',
                W = t.span ? '</span>' : '</div>',
                H = !0,
                E = r.createElement('div'),
                k = e.parentNode;
            for (k.insertBefore(E, e), E.textContent = e.nodeValue, k.removeChild(e), e = E, l = s(e), _ = -1 !== l.indexOf('<'), t.reduceWhiteSpace !== !1 && (l = l.replace(u, ' ').replace(h, '')), _ && (l = l.split('<').join('{{LT}}')), a = l.length, o = (' ' === l.charAt(0) ? V : '') + i(), d = 0; a > d; d++)
                if (g = l.charAt(d), g === B && l.charAt(d - 1) !== B && d) {
                    for (o += H ? W : '', H = !1; l.charAt(d + 1) === B;) o += V, d++;
                    d === a - 1 ? o += V : ')' !== l.charAt(d + 1) && (o += V + i(), H = !0)
                } else '{' === g && '{{LT}}' === l.substr(d, 6) ? (o += A ? n() + '{{LT}}</' + T + '>' : '{{LT}}', d += 5) : g.charCodeAt(0) >= f && g.charCodeAt(0) <= c || l.charCodeAt(d + 1) >= 65024 && l.charCodeAt(d + 1) <= 65039 ? (m = b(l.substr(d, 2)), C = b(l.substr(d + 2, 2)), p = (y > m || m > x || y > C || C > x) && (S > C || C > v) ? 2 : 4, o += A && ' ' !== g ? n() + l.substr(d, p) + '</' + T + '>' : l.substr(d, p), d += p - 1) : o += A && ' ' !== g ? n() + g + '</' + T + '>' : g;
            e.outerHTML = o + (H ? W : ''), _ && N(k, '{{LT}}', '<')
        },
        H = function(e, t, i, n) {
            var s, r, l = A(e.childNodes),
                o = l.length,
                p = 'absolute' === t.position || t.absolute === !0;
            if (3 !== e.nodeType || o > 1) {
                for (t.absolute = !1, s = 0; o > s; s++) r = l[s], (3 !== r.nodeType || /\S+/.test(r.nodeValue)) && (p && 3 !== r.nodeType && 'inline' === d(r, 'display', null, !0) && (r.style.display = 'inline-block', r.style.position = 'relative'), r._isSplit = !0, H(r, t, i, n));
                return t.absolute = p, void(e._isSplit = !0)
            }
            W(e, t, i, n)
        },
        E = T.prototype;
    E.split = function(e) {
        this.isSplit && this.revert(), this.vars = e = e || this.vars, this._originals.length = this.chars.length = this.words.length = this.lines.length = 0;
        var t, i, n, s = this.elements.length,
            r = e.span ? 'span' : 'div',
            l = C(e.wordsClass, r),
            o = C(e.charsClass, r);
        for (; --s > -1;) n = this.elements[s], this._originals[s] = n.innerHTML, t = n.clientHeight, i = n.clientWidth, H(n, e, l, o), V(n, e, this.chars, this.words, this.lines, i, t);
        return this.chars.reverse(), this.words.reverse(), this.lines.reverse(), this.isSplit = !0, this
    }, E.revert = function() {
        if (!this._originals) throw 'revert() call wasn\'t scoped properly.';
        var e = this._originals.length;
        for (; --e > -1;) this.elements[e].innerHTML = this._originals[e];
        return this.chars = [], this.words = [], this.lines = [], this.isSplit = !1, this
    }, T.selector = e.$ || e.jQuery || function(t) {
        var i = e.$ || e.jQuery;
        return i ? (T.selector = i, i(t)) : 'undefined' == typeof document ? t : document.querySelectorAll ? document.querySelectorAll(t) : document.getElementById('#' === t.charAt(0) ? t.substr(1) : t)
    }, T.version = '0.5.8'
}(_gsScope),
function(e) {
    'use strict';
    var t = function() {
        return (_gsScope.GreenSockGlobals || _gsScope)[e]
    };
    'undefined' != typeof module && module.exports ? module.exports = t() : 'function' == typeof define && define.amd && define([], t)
}('SplitText');
/*!
 * ScrollMagic v2.0.5 (2015-04-29)
 * The javascript library for magical scroll interactions.
 * (c) 2015 Jan Paepke (@janpaepke)
 * Project Website: http://scrollmagic.io
 * 
 * @version 2.0.5
 * @license Dual licensed under MIT license and GPL.
 * @author Jan Paepke - e-mail@janpaepke.de
 *
 * @file ScrollMagic GSAP Animation Plugin.
 *
 * requires: GSAP ~1.14
 * Powered by the Greensock Animation Platform (GSAP): http://www.greensock.com/js
 * Greensock License info at http://www.greensock.com/licensing/
 */
/**
 * This plugin is meant to be used in conjunction with the Greensock Animation Plattform.  
 * It offers an easy API to trigger Tweens or synchronize them to the scrollbar movement.
 *
 * Both the `lite` and the `max` versions of the GSAP library are supported.  
 * The most basic requirement is `TweenLite`.
 * 
 * To have access to this extension, please include `plugins/animation.gsap.js`.
 * @requires {@link http://greensock.com/gsap|GSAP ~1.14.x}
 * @mixin animation.GSAP
 */
(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['ScrollMagic', 'TweenMax', 'TimelineMax'], factory);
    } else if (typeof exports === 'object') {
        // CommonJS
        // Loads whole gsap package onto global scope.
        require('gsap');
        factory(require('scrollmagic'), TweenMax, TimelineMax);
    } else {
        // Browser globals
        factory(root.ScrollMagic || (root.jQuery && root.jQuery.ScrollMagic), root.TweenMax || root.TweenLite, root.TimelineMax || root.TimelineLite);
    }
}(this, function(ScrollMagic, Tween, Timeline) {
    "use strict";
    var NAMESPACE = "animation.gsap";

    var
        console = window.console || {},
        err = Function.prototype.bind.call(console.error || console.log ||
            function() {}, console);
    if (!ScrollMagic) {
        err("(" + NAMESPACE + ") -> ERROR: The ScrollMagic main module could not be found. Please make sure it's loaded before this plugin or use an asynchronous loader like requirejs.");
    }
    if (!Tween) {
        err("(" + NAMESPACE + ") -> ERROR: TweenLite or TweenMax could not be found. Please make sure GSAP is loaded before ScrollMagic or use an asynchronous loader like requirejs.");
    }

    /*
     * ----------------------------------------------------------------
     * Extensions for Scene
     * ----------------------------------------------------------------
     */
    /**
     * Every instance of ScrollMagic.Scene now accepts an additional option.  
     * See {@link ScrollMagic.Scene} for a complete list of the standard options.
     * @memberof! animation.GSAP#
     * @method new ScrollMagic.Scene(options)
     * @example
     * var scene = new ScrollMagic.Scene({tweenChanges: true});
     *
     * @param {object} [options] - Options for the Scene. The options can be updated at any time.
     * @param {boolean} [options.tweenChanges=false] - Tweens Animation to the progress target instead of setting it.  
     Does not affect animations where duration is `0`.
     */
    /**
     * **Get** or **Set** the tweenChanges option value.  
     * This only affects scenes with a duration. If `tweenChanges` is `true`, the progress update when scrolling will not be immediate, but instead the animation will smoothly animate to the target state.  
     * For a better understanding, try enabling and disabling this option in the [Scene Manipulation Example](../examples/basic/scene_manipulation.html).
     * @memberof! animation.GSAP#
     * @method Scene.tweenChanges
     * 
     * @example
     * // get the current tweenChanges option
     * var tweenChanges = scene.tweenChanges();
     *
     * // set new tweenChanges option
     * scene.tweenChanges(true);
     *
     * @fires {@link Scene.change}, when used as setter
     * @param {boolean} [newTweenChanges] - The new tweenChanges setting of the scene.
     * @returns {boolean} `get` -  Current tweenChanges option value.
     * @returns {Scene} `set` -  Parent object for chaining.
     */
    // add option (TODO: DOC (private for dev))
    ScrollMagic.Scene.addOption("tweenChanges", // name
        false, // default


        function(val) { // validation callback
            return !!val;
        });
    // extend scene
    ScrollMagic.Scene.extend(function() {
        var Scene = this,
            _tween;

        var log = function() {
            if (Scene._log) { // not available, when main source minified
                Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ")", "->");
                Scene._log.apply(this, arguments);
            }
        };

        // set listeners
        Scene.on("progress.plugin_gsap", function() {
            updateTweenProgress();
        });
        Scene.on("destroy.plugin_gsap", function(e) {
            Scene.removeTween(e.reset);
        });

        /**
         * Update the tween progress to current position.
         * @private
         */
        var updateTweenProgress = function() {
            if (_tween) {
                var
                    progress = Scene.progress(),
                    state = Scene.state();
                if (_tween.repeat && _tween.repeat() === -1) {
                    // infinite loop, so not in relation to progress
                    if (state === 'DURING' && _tween.paused()) {
                        _tween.play();
                    } else if (state !== 'DURING' && !_tween.paused()) {
                        _tween.pause();
                    }
                } else if (progress != _tween.progress()) { // do we even need to update the progress?
                    // no infinite loop - so should we just play or go to a specific point in time?
                    if (Scene.duration() === 0) {
                        // play the animation
                        if (progress > 0) { // play from 0 to 1
                            _tween.play();
                        } else { // play from 1 to 0
                            _tween.reverse();
                        }
                    } else {
                        // go to a specific point in time
                        if (Scene.tweenChanges() && _tween.tweenTo) {
                            // go smooth
                            _tween.tweenTo(progress * _tween.duration());
                        } else {
                            // just hard set it
                            _tween.progress(progress).pause();
                        }
                    }
                }
            }
        };

        /**
         * Add a tween to the scene.  
         * If you want to add multiple tweens, add them into a GSAP Timeline object and supply it instead (see example below).  
         * 
         * If the scene has a duration, the tween's duration will be projected to the scroll distance of the scene, meaning its progress will be synced to scrollbar movement.  
         * For a scene with a duration of `0`, the tween will be triggered when scrolling forward past the scene's trigger position and reversed, when scrolling back.  
         * To gain better understanding, check out the [Simple Tweening example](../examples/basic/simple_tweening.html).
         *
         * Instead of supplying a tween this method can also be used as a shorthand for `TweenMax.to()` (see example below).
         * @memberof! animation.GSAP#
         *
         * @example
         * // add a single tween directly
         * scene.setTween(TweenMax.to("obj"), 1, {x: 100});
         *
         * // add a single tween via variable
         * var tween = TweenMax.to("obj"), 1, {x: 100};
         * scene.setTween(tween);
         *
         * // add multiple tweens, wrapped in a timeline.
         * var timeline = new TimelineMax();
         * var tween1 = TweenMax.from("obj1", 1, {x: 100});
         * var tween2 = TweenMax.to("obj2", 1, {y: 100});
         * timeline
         *		.add(tween1)
         *		.add(tween2);
         * scene.addTween(timeline);
         *
         * // short hand to add a TweenMax.to() tween
         * scene.setTween("obj3", 0.5, {y: 100});
         *
         * // short hand to add a TweenMax.to() tween for 1 second
         * // this is useful, when the scene has a duration and the tween duration isn't important anyway
         * scene.setTween("obj3", {y: 100});
         *
         * @param {(object|string)} TweenObject - A TweenMax, TweenLite, TimelineMax or TimelineLite object that should be animated in the scene. Can also be a Dom Element or Selector, when using direct tween definition (see examples).
         * @param {(number|object)} duration - A duration for the tween, or tween parameters. If an object containing parameters are supplied, a default duration of 1 will be used.
         * @param {object} params - The parameters for the tween
         * @returns {Scene} Parent object for chaining.
         */
        Scene.setTween = function(TweenObject, duration, params) {
            var newTween;
            if (arguments.length > 1) {
                if (arguments.length < 3) {
                    params = duration;
                    duration = 1;
                }
                TweenObject = Tween.to(TweenObject, duration, params);
            }
            try {
                // wrap Tween into a Timeline Object if available to include delay and repeats in the duration and standardize methods.
                if (Timeline) {
                    newTween = new Timeline({
                        smoothChildTiming: true
                    }).add(TweenObject);
                } else {
                    newTween = TweenObject;
                }
                newTween.pause();
            } catch (e) {
                log(1, "ERROR calling method 'setTween()': Supplied argument is not a valid TweenObject");
                return Scene;
            }
            if (_tween) { // kill old tween?
                Scene.removeTween();
            }
            _tween = newTween;

            // some properties need to be transferred it to the wrapper, otherwise they would get lost.
            if (TweenObject.repeat && TweenObject.repeat() === -1) { // TweenMax or TimelineMax Object?
                _tween.repeat(-1);
                _tween.yoyo(TweenObject.yoyo());
            }
            // Some tween validations and debugging helpers
            if (Scene.tweenChanges() && !_tween.tweenTo) {
                log(2, "WARNING: tweenChanges will only work if the TimelineMax object is available for ScrollMagic.");
            }

            // check if there are position tweens defined for the trigger and warn about it :)
            if (_tween && Scene.controller() && Scene.triggerElement() && Scene.loglevel() >= 2) { // controller is needed to know scroll direction.
                var
                    triggerTweens = Tween.getTweensOf(Scene.triggerElement()),
                    vertical = Scene.controller().info("vertical");
                triggerTweens.forEach(function(value, index) {
                    var
                        tweenvars = value.vars.css || value.vars,
                        condition = vertical ? (tweenvars.top !== undefined || tweenvars.bottom !== undefined) : (tweenvars.left !== undefined || tweenvars.right !== undefined);
                    if (condition) {
                        log(2, "WARNING: Tweening the position of the trigger element affects the scene timing and should be avoided!");
                        return false;
                    }
                });
            }

            // warn about tween overwrites, when an element is tweened multiple times
            if (parseFloat(TweenLite.version) >= 1.14) { // onOverwrite only present since GSAP v1.14.0
                var
                    list = _tween.getChildren ? _tween.getChildren(true, true, false) : [_tween],
                    // get all nested tween objects
                    newCallback = function() {
                        log(2, "WARNING: tween was overwritten by another. To learn how to avoid this issue see here: https://github.com/janpaepke/ScrollMagic/wiki/WARNING:-tween-was-overwritten-by-another");
                    };
                for (var i = 0, thisTween, oldCallback; i < list.length; i++) { /*jshint loopfunc: true */
                    thisTween = list[i];
                    if (oldCallback !== newCallback) { // if tweens is added more than once
                        oldCallback = thisTween.vars.onOverwrite;
                        thisTween.vars.onOverwrite = function() {
                            if (oldCallback) {
                                oldCallback.apply(this, arguments);
                            }
                            newCallback.apply(this, arguments);
                        };
                    }
                }
            }
            log(3, "added tween");

            updateTweenProgress();
            return Scene;
        };

        /**
         * Remove the tween from the scene.  
         * This will terminate the control of the Scene over the tween.
         *
         * Using the reset option you can decide if the tween should remain in the current state or be rewound to set the target elements back to the state they were in before the tween was added to the scene.
         * @memberof! animation.GSAP#
         *
         * @example
         * // remove the tween from the scene without resetting it
         * scene.removeTween();
         *
         * // remove the tween from the scene and reset it to initial position
         * scene.removeTween(true);
         *
         * @param {boolean} [reset=false] - If `true` the tween will be reset to its initial values.
         * @returns {Scene} Parent object for chaining.
         */
        Scene.removeTween = function(reset) {
            if (_tween) {
                if (reset) {
                    _tween.progress(0).pause();
                }
                _tween.kill();
                _tween = undefined;
                log(3, "removed tween (reset: " + (reset ? "true" : "false") + ")");
            }
            return Scene;
        };

    });
}));
/*!
 * VERSION: 0.1.2
 * DATE: 2017-01-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
 * DrawSVGPlugin is a Club GreenSock membership benefit; You must have a valid membership to use
 * this code without violating the terms of use. Visit http://greensock.com/club/ to sign up or get more details.
 * This work is subject to the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
var _gsScope = "undefined" != typeof module && module.exports && "undefined" != typeof global ? global : this || window;
(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function() {
        "use strict";

        function a(a, b, c, d, e, f) {
            return c = (parseFloat(c) - parseFloat(a)) * e, d = (parseFloat(d) - parseFloat(b)) * f, Math.sqrt(c * c + d * d)
        }

        function b(a) {
            return "string" != typeof a && a.nodeType || (a = _gsScope.TweenLite.selector(a), a.length && (a = a[0])), a
        }

        function c(a, b, c) {
            var d, e, f = a.indexOf(" ");
            return -1 === f ? (d = void 0 !== c ? c + "" : a, e = a) : (d = a.substr(0, f), e = a.substr(f + 1)), d = -1 !== d.indexOf("%") ? parseFloat(d) / 100 * b : parseFloat(d), e = -1 !== e.indexOf("%") ? parseFloat(e) / 100 * b : parseFloat(e), d > e ? [e, d] : [d, e]
        }

        function d(c) {
            if (!c) return 0;
            c = b(c);
            var d, e, f, g, h, j, k, l = c.tagName.toLowerCase(),
                m = 1,
                n = 1;
            "non-scaling-stroke" === c.getAttribute("vector-effect") && (n = c.getScreenCTM(), m = n.a, n = n.d);
            try {
                e = c.getBBox()
            } catch (o) {}
            if (e && (e.width || e.height) || "rect" !== l && "circle" !== l && "ellipse" !== l || (e = {
                    width: parseFloat(c.getAttribute("rect" === l ? "width" : "circle" === l ? "r" : "rx")),
                    height: parseFloat(c.getAttribute("rect" === l ? "height" : "circle" === l ? "r" : "ry"))
                }, "rect" !== l && (e.width *= 2, e.height *= 2)), "path" === l) g = c.style.strokeDasharray, c.style.strokeDasharray = "none", d = c.getTotalLength() || 0, m !== n && console.log("Warning: <path> length cannot be measured accurately when vector-effect is non-scaling-stroke and the element isn't proportionally scaled."), d *= (m + n) / 2, c.style.strokeDasharray = g;
            else if ("rect" === l) d = 2 * e.width * m + 2 * e.height * n;
            else if ("line" === l) d = a(c.getAttribute("x1"), c.getAttribute("y1"), c.getAttribute("x2"), c.getAttribute("y2"), m, n);
            else if ("polyline" === l || "polygon" === l)
                for (f = c.getAttribute("points").match(i) || [], "polygon" === l && f.push(f[0], f[1]), d = 0, h = 2; h < f.length; h += 2) d += a(f[h - 2], f[h - 1], f[h], f[h + 1], m, n) || 0;
            else("circle" === l || "ellipse" === l) && (j = e.width / 2 * m, k = e.height / 2 * n, d = Math.PI * (3 * (j + k) - Math.sqrt((3 * j + k) * (j + 3 * k))));
            return d || 0
        }

        function e(a, c) {
            if (!a) return [0, 0];
            a = b(a), c = c || d(a) + 1;
            var e = h(a),
                f = e.strokeDasharray || "",
                g = parseFloat(e.strokeDashoffset),
                i = f.indexOf(",");
            return 0 > i && (i = f.indexOf(" ")), f = 0 > i ? c : parseFloat(f.substr(0, i)) || 1e-5, f > c && (f = c), [Math.max(0, -g), Math.max(0, f - g)]
        }
        var f, g = _gsScope.document,
            h = g.defaultView ? g.defaultView.getComputedStyle : function() {},
            i = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi;
        f = _gsScope._gsDefine.plugin({
            propName: "drawSVG",
            API: 2,
            version: "0.1.1",
            global: !0,
            overwriteProps: ["drawSVG"],
            init: function(a, b, f, g) {
                if (!a.getBBox) return !1;
                var h, i, j, k = d(a) + 1;
                return this._style = a.style, "function" == typeof b && (b = b(g, a)), b === !0 || "true" === b ? b = "0 100%" : b ? -1 === (b + "").indexOf(" ") && (b = "0 " + b) : b = "0 0", h = e(a, k), i = c(b, k, h[0]), this._length = k + 10, 0 === h[0] && 0 === i[0] ? (j = Math.max(1e-5, i[1] - k), this._dash = k + j, this._offset = k - h[1] + j, this._addTween(this, "_offset", this._offset, k - i[1] + j, "drawSVG")) : (this._dash = h[1] - h[0] || 1e-6, this._offset = -h[0], this._addTween(this, "_dash", this._dash, i[1] - i[0] || 1e-5, "drawSVG"), this._addTween(this, "_offset", this._offset, -i[0], "drawSVG")), !0
            },
            set: function(a) {
                this._firstPT && (this._super.setRatio.call(this, a), this._style.strokeDashoffset = this._offset, 1 === a || 0 === a ? this._style.strokeDasharray = this._offset < .001 && this._length - this._dash <= 10 ? "none" : this._offset === this._dash ? "0px, 999999px" : this._dash + "px," + this._length + "px" : this._style.strokeDasharray = this._dash + "px," + this._length + "px")
            }
        }), f.getLength = d, f.getPosition = e
    }), _gsScope._gsDefine && _gsScope._gsQueue.pop()(),
    function(a) {
        "use strict";
        var b = function() {
            return (_gsScope.GreenSockGlobals || _gsScope)[a]
        };
        "function" == typeof define && define.amd ? define(["TweenLite"], b) : "undefined" != typeof module && module.exports && (require("../TweenLite.js"), module.exports = b())
    }("DrawSVGPlugin");
jQuery(document).ready(function($) {

    // BROWSERS

    var safari = navigator.userAgent.indexOf("Safari") > -1;
    var chrome = navigator.userAgent.indexOf('Chrome') > -1;
    if ((chrome) && (safari)) safari = false;

    if (safari) {
        $('body').addClass('browser-safari');
    }


    //if(!!window.MSInputMethodContext && !!document.documentMode) {
    if (document.documentMode || /Edge/.test(navigator.userAgent)) {
        $('body').addClass('browser-oldie');
    }

    // CONSOLE

    var c = console.log.bind(console);

    // VIEWPORT

    var wh = $(window).height(),
        ww = $(window).width();
    //ch = $(document).height();

    // SCROLL

    var y;

    // ELEMENTS

    var $header = $('#header');
    var headerHeight = $header.height();

    // SLIDER VARs

    var swipers = [],
        args = '';

    // VIDEOS VARs

    var videos = [];

    // PHILOSOPHY CHAPTERS

    var navChildren;
    var aArray = [];
    var lastCat = '';
    var slider;


    // PHIL VARS

    var ch = $('.philosophy-content').outerHeight() - wh * 0.75 - wh,
        chFull = $('.philosophy-content').outerHeight(),
        progress, percent;

    var philtitles = [];


    // ANIME VARs

    var gflip = true;

    var anim;
    animOffset = 0;

    // ENGINE

    var Engine = {
        ui: {
            init: function() {

                animeselector();


                $("body").removeClass("overflow"); //change after presentation

                /// swiper methods
                Engine.ui.sliders();

                /// videos
                Engine.ui.video();

                // tooltip

                Engine.ui.tooltip();

                //Engine.ui.lottie(); 

                // IE tooltip

                Engine.ui.ie();

                // canvases

                if (Modernizr.mq('all and (min-width: 960px)')) {

                    Engine.ui.canvases();

                }

                // mobile

                if (Modernizr.mq('all and (max-width: 959px)')) {

                    Engine.ui.mobile();

                }

                if ($('#content').hasClass('page-philosophy') && Modernizr.mq('all and (min-width: 960px)')) {

                    $('#main').imagesLoaded(function() {

                        ch = $('.philosophy-content').outerHeight() - wh * 0.75 - wh;
                        chFull = $('.philosophy-content').outerHeight();

                        c(chFull);

                        /// setChapters
                        Engine.ui.setChapters();

                        /// philosophy - scroll
                        Engine.ui.scroll();

                        /// philosophy - functions
                        //Engine.ui.setPhilosophy();    

                        Engine.ui.setSlider();

                    });

                }

            },
            tooltip: function() {
                $('body').on('mouseenter', '.philosophy-intro > p strong', function() {


                    var posLeft = $(this).position().left,
                        wIntro = $('.philosophy-intro').outerWidth(),
                        wLegend = $('.philosophy-legend').outerWidth();

                    $('.legend-triangle').css('left', (wLegend - wIntro) / 2 + posLeft);

                    $('.philosophy-legend').addClass('opened');

                }).on('mouseleave', '.philosophy-intro > p strong', function() {

                    $('.philosophy-legend').removeClass('opened');

                });
            },
            ie: function() {

                $('.browser-tooltip .tooltip-closer').on('click', function(e) {
                    $(this).closest('.browser-tooltip-layer').fadeOut();
                    Cookies.set('kris-ie', true, {
                        expires: 365
                    });
                    e.preventDefault();
                });

            },
            pace: function() {

                window.paceOptions = {
                    restartOnRequestAfter: false,
                    restartOnPushState: false
                };

                Pace.on('update', function(percent) {
                    var floored = Math.floor(percent);
                    $(".percentbox").html(floored);
                });

                Pace.on('done', function() {
                    loadvar = true;
                    /// Removing page loader ui
                    Engine.ui.startanime();
                });

            },
            ajax: function() {
                var change = "white";
                var settings = {
                    anchors: 'a',
                    blacklist: '.no-ajax',
                    scroll: false,
                    //prefetch: true,
                    onBefore: function($currentTarget, $container) {
                        change = "white";
                        if ($currentTarget.parent().is(".black")) {
                            change = "black";
                        }
                        if ($currentTarget.is(".black")) {
                            change = "black";
                        }
                    },
                    onStart: {
                        duration: 3500,
                        render: function($container) {
                            loadin(change);
                        }
                    },
                    onReady: {
                        duration: 0,
                        render: function($container, $newContent) {
                            console.log("onready");
                            $('html, body').animate({
                                scrollTop: 0
                            }, 0);
                            $container.html($newContent);

                            //Page animes end
                            $('body').removeClass('opened-menu');
                            $('.menu-opener-main').removeClass('opened');

                        }
                    },
                    onAfter: function($container, $newContent) {
                        /// Removing page loader ui
                        console.log("onafter");
                        Engine.ui.startanime();
                        Engine.ui.init();
                        loadout();
                    }
                };

                $('#container').smoothState(settings);

            },
            menu: function() {

                // MENU

                $('body').on('click', '.menu-opener', function(e) {

                    if (!$('.menu-opener-main').hasClass('opened')) {
                        //$('.header .nav-wrap').fadeIn(400);
                        $('body').addClass('opened-menu');
                        $('.menu-opener-main').addClass('opened');
                    } else {
                        //$('.header .nav-wrap').fadeOut(400); 
                        $('body').removeClass('opened-menu');
                        $('.menu-opener-main').removeClass('opened');
                    }

                    e.preventDefault();
                });

            },
            scroll: function() {

                // SCROLLING EVENTS

                if ($('#content').hasClass('page-philosophy') && Modernizr.mq('all and (min-width: 960px)')) {

                    $(window).scroll(function() {
                        y = $(this).scrollTop();
                        Engine.ui.setPhilosophy();
                    });

                }

            },
            setChapters: function() {

                navChildren = $(".philosophy-floors").children();
                aArray = [];
                for (var i = 0; i < navChildren.length; i++) {
                    var aChild = navChildren[i];
                    var ahref = $(aChild).attr('data-count');
                    aArray.push(ahref);
                }

                //c(aArray);

                $leftPart = $('.hero-content');

                var leftWidth = $leftPart.width();
                $('.chapter-headers').css('width', ww / 2); //leftWidth

                if ($('#signature').length) {
                    animOffset = $('#signature').offset().top - wh;
                    Engine.ui.lottie();
                }

            },
            setPhilosophyTitles: function() {
                console.log("ahoi");
                $(".chapter-headers li span").each(function() {
                    var philtitle = new SplitText($(this), {
                        type: "words,lines, chars",
                        charsClass: 'chars'
                    });
                    TweenMax.to($(philtitles.chars), 0, {
                        opacity: "0"
                    });
                    philtitles.push(philtitle);
                });
            },
            setPhilosophy: function() {

                //c(y, animOffset);

                if (y > animOffset) {
                    if ($('#signature').length) {
                        anim.play();
                    }
                }

                //c('set ph');

                if ($('#content').hasClass('page-philosophy')) {

                    //c(ch, chFull);

                    if ((y < wh) && !$('.philosophy-header').hasClass('anim-done')) {
                        progress = (y / wh).toFixed(2);
                        percent = 1 - progress;

                        //c(percent, progress*100);
                        $('.philosophy-header-right').css('opacity', percent);
                        //$('.hero-mask').css('width', progress*100 + '%');
                        TweenMax.to($(".hero-mask"), 0.2, {
                            width: progress * 100 + '%'
                        });

                        TweenMax.to($(".headmask-wrap"), 0.2, {
                            width: progress / 2 * 100 + '%'
                        });

                    } else if ((y >= wh) && !$('.philosophy-header').hasClass('anim-done')) {
                        $('.philosophy-header').addClass('anim-done');
                    } else if (y < wh && $('.philosophy-header').hasClass('anim-done')) {
                        $('.philosophy-header').removeClass('anim-done');
                    } else if (y >= ch) {
                        $('.philosophy-header').addClass('anim-finale');
                        //$('.chapter-headers .active').removeClass('active');
                        var min = y - ch,
                            max = chFull - ch - wh;

                        percent = (min / max).toFixed(2);

                        // $('.hero-mask').css('width', 100 + percent*100 + '%');
                        // $('.headmask-wrap').css('width', 50 + percent/2*100 + '%');

                        TweenMax.to($(".hero-mask"), 0.2, {
                            width: 100 + percent * 100 + '%'
                        });
                        TweenMax.to($(".headmask-wrap"), 0.2, {
                            width: 50 + percent / 2 * 100 + '%'
                        });

                    } else if ($('.philosophy-header').hasClass('anim-finale')) {
                        $('.philosophy-header').removeClass('anim-finale');
                    }

                    // CHECKING CHAPTERS

                    for (var i = 0; i < aArray.length; i++) {

                        var theID = aArray[i];

                        var $current = $('.philosophy-floor[data-count="' + theID + '"]');

                        var divPos = $current.offset().top;
                        var divHeight = $current.outerHeight();

                        if (y >= (divPos - wh / 2) && y < (divPos + divHeight - wh / 2)) {
                            $('.chapter-headers li[data-count="' + theID + '"]').addClass("active");
                            var ptml = new TimelineMax();
                            ptml.staggerTo($(philtitles[i].chars), 0.4, {
                                opacity: "1",
                                top: "0"
                            }, 0.1, 0);


                            if (theID != lastCat) {
                                lastCat = theID;
                                var floorNum = theID.replace('floor-', '');

                                if (!$('body').hasClass('scrolling')) {
                                    slider.noUiSlider.set(floorNum);
                                }
                            }

                        } else {
                            var ptms = new TimelineMax();
                            ptms.staggerTo($(philtitles[i].chars), 0.4, {
                                opacity: "1",
                                top: "15vh"
                            }, 0.1, 0);
                            $('.chapter-headers li[data-count="' + theID + '"]').removeClass("active");
                            //var ptms = new TimelineMax();
                            //TweenMax.to($('.chapter-headers li[data-count="' + theID + '"]'),0.2,{opacity:"0"});
                        }
                    }

                }

            },
            setSlider: function() {

                slider = document.getElementById('slider');

                var sliderMax = parseInt(slider.dataset.max);

                noUiSlider.create(slider, {
                    start: 1,
                    step: 1,
                    //behaviour: 'tap',
                    //step: 0.05,
                    range: {
                        'min': 1,
                        'max': sliderMax
                    },
                });

                slider.noUiSlider.on('end', function(values, handle) {

                    $('body').addClass('scrolling');

                    var number = Math.ceil(values[handle]);

                    //c(number);

                    if ($('.philosophy-header').hasClass('anim-done')) {
                        var $target = $('.philosophy-floor[data-count="floor-' + number + '"]');

                        $('html, body').stop().animate({
                            scrollTop: $target.offset().top + 1
                        }, 400, function() {
                            $('body').removeClass('scrolling');
                        });
                    }



                });

            },
            lottie: function() {

                //anim;

                var elem = document.getElementById('signature');
                //elem.style.display = 'none';
                var animData = {
                    container: elem,
                    renderer: 'svg',
                    loop: false,
                    autoplay: false,
                    rendererSettings: {
                        progressiveLoad: false,
                    },
                    path: templateUrl + '/library/json/signature.json'
                };
                anim = lottie.loadAnimation(animData);

            },
            anchors: function() {

                // ANCHORS

                $('.anchor').on('click', function(e) {

                    var $target = $($(this).attr('href'));
                    $('html, body').stop().animate({
                        scrollTop: $target.offset().top - headerHeight
                    }, 400);

                    e.preventDefault();
                });
            },
            sliders: function() {

                // SLIDERS

                $('.swiper-container').each(function(i) {

                    var $this = $(this);
                    var spacer, centered;

                    if ($this.hasClass('type-projects')) {

                        // SLIDER - PROJECTS

                        if (Modernizr.mq('all and (max-width: 959px)')) {
                            centered = false;
                            spacer = 10;
                        } else {
                            centered = true;
                            spacer = ww / 9;
                        }

                        args = {
                            speed: 700,
                            effect: 'slide',
                            loop: false,
                            slidesPerView: 'auto',
                            mousewheel: true,
                            centeredSlides: centered,
                            scrollbar: {
                                el: '.swiper-scrollbar',
                                draggable: true,
                                dragSize: 44
                            },
                            spaceBetween: spacer,
                        };


                    } else if ($this.hasClass('type-inline')) {

                        // SLIDER - INLINE            

                        spacer = ww / 18;

                        args = {
                            speed: 700,
                            effect: 'slide',
                            loop: false,
                            slidesPerView: 'auto',
                            centeredSlides: true,
                            scrollbar: {
                                el: $this.find('.swiper-scrollbar'),
                                draggable: true,
                            },
                            navigation: {
                                nextEl: $this.find('.swiper-control').find('.swipe-next'),
                                prevEl: $this.find('.swiper-control').find('.swipe-prev'),
                            },
                            spaceBetween: spacer,
                        };

                    } else if ($this.hasClass('type-homepage')) {

                        args = {
                            speed: 700,
                            effect: 'slide',
                            loop: false,
                        };

                    }

                    // INIT

                    swipers[i] = new Swiper($this, args);


                });

            },
            video: function() {

                $('video').each(function(i) {

                    if (videos[i]) {
                        videos[i].dispose();
                    }

                    var id = $(this).attr('id');
                    videos[i] = videojs(id);

                    videos[i].ready(function() {

                        if (!this.controls_) {

                            //if(this.hasClass('desc-video')) {

                            c('desc');

                            this.on('loadedmetadata', function() {

                                var vidW = this.videoWidth(),
                                    vidH = this.videoHeight();

                                var ratio = (vidH / vidW * 100).toFixed(2);

                                c(vidW, vidH, ratio);

                                $('.thumb-video-wrap').css('max-width', vidW);
                                $('.thumb-video-wrap > div').css({
                                    'padding-bottom': ratio + '%'
                                });

                            });

                            this.trigger('loadedmetadata');

                            //}

                            this.play();
                        }

                    });


                });

                // $('.video-runner').on('click', function(e) {
                //   player.play();
                //   e.preventDefault();
                // });

                // player.on('play', function() {
                //   $('.video-runner').addClass('hidden');
                // });

                // player.on('pause', function() {
                //   $('.video-runner').removeClass('hidden');
                // });   

            },
            canvases: function() {
                var that = this;

                // CANVAS CODE

                registercavas();
                menuanime();
                //redpath();

                if ($('.maincanvas').length) {
                    $("body").addClass("overflow"); //remove the scroll overflow
                    mainanime(gflip);
                }
                gflip = false;

                if ($(".page-philosophy").length) {
                    that.setPhilosophyTitles();
                    sidepathcanvasContact();
                    // if($(".philosophy-floor .signature").length){
                    //   $(".philosophy-floor .signature").append("<span class='signaturebox'></div>");
                    // }
                } else if ($('.page-projects').length) {
                    sidepathcanvasProjects();
                } else if ($('.single-project').length) {
                    sidepathcanvasSingles();
                    sidepathcanvasContact();
                } else if ($('.page-founder').length) {
                    subcanvasteam();
                    sidepathcanvas();
                } else if ($('.page-press').length) {
                    subcanvasteam();
                    sidepathcanvas();

                } else if ($('.page-contact').length) {
                    sidepathcanvasContact();
                }


            },
            mobile: function() {

                mobileanimes();

            },
            startanime: function() {
                animations();
                //Page animes
                var ease1 = Power2.easeInOut;
                var pl = new TimelineMax();
                pl.to($(".transitionin"), 1, {
                    x: -ww,
                    ease: ease1
                }, 0);
            },
            animations: function() {

                // ANIMATIONS             

            },
            resize: function() {

                // WINDOW EVENTS

                $(window).smartresize(function() {

                    for (var i = 0; i < swipers.length; i++) {
                        swipers[i].update();
                    }

                });
            },
        }
    };


    // FUNCTIONS

    // ajax dependant funcions
    Engine.ui.init();

    // loader
    Engine.ui.pace();

    /// menu
    Engine.ui.menu();

    /// ajax
    Engine.ui.ajax();

    /// on-page anchors
    Engine.ui.anchors();

    /// resize methods
    Engine.ui.resize();

    // custom animations
    Engine.ui.animations();


});

(function($, sr) {

    // debouncing function from John Hann
    // http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/
    var debounce = function(func, threshold, execAsap) {
        var timeout;

        return function debounced() {
            var obj = this,
                args = arguments;

            function delayed() {
                if (!execAsap)
                    func.apply(obj, args);
                timeout = null;
            }

            if (timeout)
                clearTimeout(timeout);
            else if (execAsap)
                func.apply(obj, args);

            timeout = setTimeout(delayed, threshold || 100);
        };
    };
    // smartresize 
    jQuery.fn[sr] = function(fn) {
        return fn ? this.bind('resize', debounce(fn)) : this.trigger(sr);
    };

})(jQuery, 'smartresize');

// Anime
//
// (>ಠ_ಠ)>
//
// Launching up the big boys
//-----------------
//

function registercavas() {
    paper.install(window);
    var canvas1 = document.getElementById('maincanvas');
    var canvas2 = document.getElementById('menucanvas');
    var canvas3 = document.getElementById('redcanvas');
    var canvas4 = document.getElementById('subcanvas');
}

//global vars
var mypapers = [];

//global funk
var c = console.log.bind(console);

var bigS = 0;
var mouseflag = false;
var toolhelper = false;
var start = [];
var loadvar = false;


// (>ಠ_ಠ)>
//
// Frontpage mobile animations
//-----------------
//

function mobileanimes() {

    var charmenu = new SplitText('.primary-menu a', {
        type: 'words, chars, lines',
        charsClass: 'charmenu'
    });
    var cn = new SplitText('.creativenights', {
        type: 'words, chars'
    });

    jQuery(function($) {
        var width = $(window).width()
        var height = $(window).height();
        var t = new TimelineMax();
        t.to($(".nav-wrap"), 0.5, {
                zIndex: 99,
                x: width,
                pointerEvents: "all"
            }, 0)
            .to($(".nav-cover"), 0.5, {
                x: -width
            }, 0)
            .to($(".creativenights"), 0, {
                opacity: 0,
                pointerEvents: "all"
            }, 0)

        $(charmenu.lines).each(function(index) {
            t.staggerFrom($(this).find('.charmenu'), 0.7, {
                x: 5,
                opacity: 0
            }, 0.05, index * 0.1)
        });

        t.reversed(true);

        $('.menubutton').click(function(e) {
            t.reversed() ? t.play() : t.reverse();
        });

        function reverse() {
            t.reversed() ? t.play() : t.reverse();
        }
    }) // jq end
}




// (>ಠ_ಠ)>
//
// Frontpage animations
//-----------------
//


function mainanime(gflip) {
    jQuery(function($) {


        // (>ಠ_ಠ)>
        //
        // Scroll smoothing
        //-----------------
        //

        // Reasonable defaults
        var PIXEL_STEP = 10;
        var LINE_HEIGHT = 40;
        var PAGE_HEIGHT = 800;

        function normalizeWheel( /*object*/ event) /*object*/ {
            var sX = 0,
                sY = 0, // spinX, spinY
                pX = 0,
                pY = 0; // pixelX, pixelY

            // Legacy
            if ('detail' in event) {
                sY = event.detail;
            }
            if ('wheelDelta' in event) {
                sY = -event.wheelDelta / 120;
            }
            if ('wheelDeltaY' in event) {
                sY = -event.wheelDeltaY / 120;
            }
            if ('wheelDeltaX' in event) {
                sX = -event.wheelDeltaX / 120;
            }

            // side scrolling on FF with DOMMouseScroll
            if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
                sX = sY;
                sY = 0;
            }

            pX = sX * PIXEL_STEP;
            pY = sY * PIXEL_STEP;

            if ('deltaY' in event) {
                pY = event.deltaY;
            }
            if ('deltaX' in event) {
                pX = event.deltaX;
            }

            if ((pX || pY) && event.deltaMode) {
                if (event.deltaMode == 1) { // delta in LINE units
                    pX *= LINE_HEIGHT;
                    pY *= LINE_HEIGHT;
                } else { // delta in PAGE units
                    pX *= PAGE_HEIGHT;
                    pY *= PAGE_HEIGHT;
                }
            }

            // Fall-back if spin cannot be determined
            if (pX && !sX) {
                sX = (pX < 1) ? -1 : 1;
            }
            if (pY && !sY) {
                sY = (pY < 1) ? -1 : 1;
            }

            return {
                spinX: sX,
                spinY: sY,
                pixelX: pX,
                pixelY: pY
            };

        }

        var mousewheelevt = (/Firefox/i.test(navigator.userAgent)) ? "DOMMouseScroll" : "mousewheel" //FF doesn't recognize mousewheel as of FF3.x




        //Enable main paper
        mypapers[0] = new paper.PaperScope();
        mypapers[0].setup($("#maincanvas")[0]);
        paper = mypapers[0];

        //global vars
        var width = $(window).width()
        var height = $(window).height();
        var widthmid = $(window).width() / 2;
        var heightmid = $(window).height() / 2;
        var semi = height / 4;
        var plusOrMinus = Math.random() < 0.5 ? -1 : 1;

        //Registering onload-global paths, circles and everything for paper

        //Paths
        var path = new paper.Path({
            strokeColor: 'white',
            strokeWidth: 1
        });
        path.insertBelow(loadcircle);

        //testerpath
        // var test = new Path({
        //   strokeColor: 'blue',
        //   strokeWidth: 1,
        // });
        // //blue.strokeColor = 'blue';
        // test.add(new Point(200, 300));
        // test.add(new Point(300, 400));
        // test.add(new Point(400, 600));
        //end testerpath


        //Paths and rings for the intersection location
        var blue = new Path();
        //blue.strokeColor = 'blue';
        blue.add(new Point(0, heightmid));
        blue.add(new Point(width, heightmid));

        //Add wide group element for fixing hoverbugs
        var wideboy = new Path();
        //blue.strokeColor = 'orange';
        wideboy.add(new Point(0, heightmid));
        wideboy.add(new Point(width, heightmid));

        var highboy = new Path();
        highboy.add(new Point(0, 0));
        highboy.add(new Point(0, height));

        //Dashpathrun
        var dashpathrun = new paper.Path({
            strokeColor: 'white',
            strokeWidth: 1,
        });
        dashpathrun.dashArray = [3, 3];
        dashpathrun.add(new Point(widthmid, 0));
        dashpathrun.add(new Point(widthmid, 0));
        dashpathrun.add(new Point(widthmid, 0));
        //dashpathrun.pivot = new Point(dashpathrun.bounds.middle, dashpathrun.bounds.top);

        //Ring images
        var raster1 = new paper.Raster('ringimage1');
        var raster2 = new paper.Raster('ringimage2');
        var raster3 = new paper.Raster('ringimage3');
        var raster4 = new paper.Raster('ringimage4');
        var raster5 = new paper.Raster('ringimage5');



        raster1.insertBelow(dashpathrun);
        raster2.insertBelow(dashpathrun);
        raster3.insertBelow(dashpathrun);
        raster4.insertBelow(dashpathrun);
        raster5.insertBelow(dashpathrun);

        TweenMax.to($(raster1), 0, {
            opacity: 0,
            scaling: 0.1
        }, 0)
        TweenMax.to($(raster2), 0, {
            opacity: 0,
            scaling: 0.1
        }, 0)
        TweenMax.to($(raster3), 0, {
            opacity: 0,
            scaling: 0.1
        }, 0)
        TweenMax.to($(raster4), 0, {
            opacity: 0,
            scaling: 0.1
        }, 0)
        TweenMax.to($(raster5), 0, {
            opacity: 0,
            scaling: 0.1
        }, 0)


        //SECOND MASKING

        var rsize = Math.floor(width / 8);
        var rsize2 = Math.floor(width / 25);

        var lraster1 = new paper.Raster('ringimage1');
        var lraster2 = new paper.Raster('ringimage2');
        var lraster3 = new paper.Raster('ringimage3');
        var lraster4 = new paper.Raster('ringimage4');
        var lraster5 = new paper.Raster('ringimage5');

        lraster1.size = new Size(rsize, rsize);
        lraster2.size = new Size(rsize, rsize);
        lraster3.size = new Size(rsize, rsize);
        lraster4.size = new Size(rsize, rsize);
        lraster5.size = new Size(rsize, rsize);

        var lcircle1 = new Path.Circle({
            radius: rsize2,
        });
        var lcircle2 = new Path.Circle({
            radius: rsize2,
        });
        var lcircle3 = new Path.Circle({
            radius: rsize2,
        });
        var lcircle4 = new Path.Circle({
            radius: rsize2,
        });
        var lcircle5 = new Path.Circle({
            radius: rsize2,
        });

        var groupx1 = new Group(lcircle1, lraster1);
        var groupx2 = new Group(lcircle2, lraster2);
        var groupx3 = new Group(lcircle3, lraster3);
        var groupx4 = new Group(lcircle4, lraster4);
        var groupx5 = new Group(lcircle5, lraster5);

        groupx1.position = new Point(-300, -300);
        groupx2.position = new Point(-300, -300);
        groupx3.position = new Point(-300, -300);
        groupx4.position = new Point(-300, -300);
        groupx5.position = new Point(-300, -300);

        groupx1.clipped = true;
        groupx2.clipped = true;
        groupx3.clipped = true;
        groupx4.clipped = true;
        groupx5.clipped = true;

        lcircle1.applyMatrix = false;
        lcircle2.applyMatrix = false;
        lcircle3.applyMatrix = false;
        lcircle4.applyMatrix = false;
        lcircle5.applyMatrix = false;

        TweenMax.to($(lraster1), 0, {
            opacity: 0
        });
        TweenMax.to($(lraster2), 0, {
            opacity: 0
        });
        TweenMax.to($(lraster3), 0, {
            opacity: 0
        });
        TweenMax.to($(lraster4), 0, {
            opacity: 0
        });
        TweenMax.to($(lraster5), 0, {
            opacity: 0
        });

        //MASKING END

        //REDPATH

        var tool = new Tool();
        //Variables
        var width = $(window).width()
        var height = $(window).height();
        var widthmid = width / 2;
        var heightmid = height / 2;

        var red = new paper.Path({
            strokeColor: 'red',
            strokeWidth: 1,
        });
        red.add(new Point(widthmid - 1, -1));
        red.add(new Point(widthmid, -1));

        //REDPATH END


        //SMALL MAP
        var spx = $(".smallmap .flipper").offset().left + 17;
        var spy = height - 190;
        var smallmap = new paper.Path({
            strokeColor: '#575757',
            strokeWidth: 1,
        });

        var smallmapfill = new paper.Path({
            strokeColor: 'white',
            strokeWidth: 1,
        });
        smallmapfill.add(new Point(spx, spy - 1));
        smallmapfill.add(new Point(spx, spy));

        smallmap.add(new Point(spx, spy));
        smallmap.add(new Point(spx + 10, spy + 15));
        smallmap.add(new Point(spx + 3, spy + 30));
        smallmap.add(new Point(spx + 3, spy + 55));
        smallmap.add(new Point(spx - 7, spy + 65));
        smallmap.add(new Point(spx + 10, spy + 85));
        smallmap.add(new Point(spx, spy + 105));
        smallmap.add(new Point(spx, spy + 135));

        var smallcirclewhite = new paper.Path.Circle(new Point(smallmap.segments[0].point), 2.5);
        var smallcircle1 = new paper.Path.Circle(new Point(smallmap.segments[0].point), 4);
        var smallcircle2 = new paper.Path.Circle(new Point(smallmap.segments[7].point), 4);
        smallcircle1.strokeColor = 'white';
        smallcircle1.fillColor = '#080826';
        smallcircle2.strokeColor = 'rgb(87,87,87)';
        smallcircle2.fillColor = '#080826';

        var smallgroup = new Group({
            children: [smallmap, smallmapfill, smallcircle1, smallcircle2],
        })
        TweenMax.to($(smallgroup), 0, {
            opacity: 0
        }, 0)

        var offset = 0;
        //SMALLMAPEND

        //Circles
        var color1 = '#545454';
        var loadcircle = new paper.Path.Circle(new Point(widthmid, heightmid), 5);
        var loadcircle2 = new paper.Path.Circle(new Point(widthmid, heightmid), 5);
        var loadcircle3 = new paper.Path.Circle(new Point(widthmid, heightmid), 5);
        loadcircle.strokeColor = color1;
        loadcircle.fillColor = '#080826';
        loadcircle2.strokeColor = color1;
        loadcircle2.fillColor = '#080826';
        loadcircle3.strokeColor = color1;
        loadcircle3.fillColor = '#080826';

        //Splitters for gsap
        var splits = new SplitText('.explore', {
            type: 'words, chars, lines',
            charsClass: 'char',
            linesClass: 'line',
            wordsClass: 'word'
        });
        var startsplit = new SplitText('.startertext h2', {
            type: 'chars lines words',
            charsClass: 'ss'
        });
        var startsplit2 = new SplitText('.sidestartertext p', {
            type: 'chars lines words',
            charsClass: 'ss2'
        });
        var startsplit3 = new SplitText('.sidestartertext span', {
            type: 'chars lines words',
            charsClass: 'ss3'
        });

        var splitsp1 = new SplitText('.pt1 h1', {
            type: 'chars',
            charsClass: 'charx'
        });
        var splitsp2 = new SplitText('.pt2 h1', {
            type: 'chars',
            charsClass: 'charx'
        });
        var splitsp3 = new SplitText('.pt3 h1', {
            type: 'chars',
            charsClass: 'charx'
        });
        var splitsp4 = new SplitText('.pt4 h1', {
            type: 'chars',
            charsClass: 'charx'
        });
        var splitsp5 = new SplitText('.pt5 h1', {
            type: 'chars',
            charsClass: 'charx'
        });

        //Hoverstates
        var hov1 = new paper.Path.Circle(new Point(lcircle1.position), 50);
        var hov2 = new paper.Path.Circle(new Point(lcircle2.position), 50);
        var hov3 = new paper.Path.Circle(new Point(lcircle3.position), 50);
        var hov4 = new paper.Path.Circle(new Point(lcircle4.position), 50);
        var hov5 = new paper.Path.Circle(new Point(lcircle5.position), 50);

        //White hover rings
        var whr1 = new paper.Path.Circle(new Point(lcircle1.position), 10);
        var whr2 = new paper.Path.Circle(new Point(lcircle2.position), 10);
        var whr3 = new paper.Path.Circle(new Point(lcircle3.position), 10);
        var whr4 = new paper.Path.Circle(new Point(lcircle4.position), 10);
        var whr5 = new paper.Path.Circle(new Point(lcircle5.position), 10);

        hov1.fillColor = 'red';
        hov2.fillColor = 'red';
        hov3.fillColor = 'red';
        hov4.fillColor = 'red';
        hov5.fillColor = 'red';

        whr1.strokeColor = 'white';
        whr2.strokeColor = 'white';
        whr3.strokeColor = 'white';
        whr4.strokeColor = 'white';
        whr5.strokeColor = 'white';

        circlehover(".hr1", lcircle1, ".pt1", splitsp1, whr1);
        circlehover(".hr2", lcircle2, ".pt2", splitsp2, whr2);
        circlehover(".hr3", lcircle3, ".pt3", splitsp3, whr3);
        circlehover(".hr4", lcircle4, ".pt4", splitsp4, whr4);
        circlehover(".hr5", lcircle5, ".pt5", splitsp5, whr5);

        TweenMax.to(hov1, 0, {
            opacity: 0
        }, 0)
        TweenMax.to(hov2, 0, {
            opacity: 0
        }, 0)
        TweenMax.to(hov3, 0, {
            opacity: 0
        }, 0)
        TweenMax.to(hov4, 0, {
            opacity: 0
        }, 0)
        TweenMax.to(hov5, 0, {
            opacity: 0
        }, 0)

        TweenMax.to(whr1, 0, {
            opacity: 0
        }, 0)
        TweenMax.to(whr2, 0, {
            opacity: 0
        }, 0)
        TweenMax.to(whr3, 0, {
            opacity: 0
        }, 0)
        TweenMax.to(whr4, 0, {
            opacity: 0
        }, 0)
        TweenMax.to(whr5, 0, {
            opacity: 0
        }, 0)

        groupx1.insertAbove(group);
        groupx2.insertAbove(group);
        groupx3.insertAbove(group);
        groupx4.insertAbove(group);
        groupx5.insertAbove(group);


        var bighelp = new Rectangle([0, 0], [width, height]);
        var bighelps = new Path.Rectangle(bighelp);
        bighelps.style = {
            fillColor: 'red',
        };
        bighelps.pivot = new Point(bighelps.bounds.middle, bighelps.bounds.top);
        TweenMax.to($(bighelps), 0, {
            opacity: 0
        }, 0)


        //Startgroup
        var startg = new Group({
            children: [path, bighelps, red],
        });

        var big = new Group({
            children: [groupx1, groupx2, groupx3, groupx4, groupx5]
        })
        big.pivot = new Point(big.bounds.middle, big.bounds.top);
        big.applyMatrix = false;

        //Groups
        var group = new Group({
            children: [raster1, raster2, raster3, raster4, raster5,
                wideboy,
                highboy,
                hov1, hov2, hov3, hov4, hov5,
                whr1, whr2, whr3, whr4, whr5,
            ],
        });
        group.pivot = new Point(group.bounds.middle, group.bounds.top);

        var dashgroup = new Group({
            children: [dashpathrun]
        })
        dashgroup.pivot = new Point(big.bounds.middle, big.bounds.top);

        loadcircle.insertAbove(dashgroup);
        loadcircle2.insertAbove(dashgroup);
        loadcircle3.insertAbove(dashgroup);




        //Global vars end

        // (>ಠ_ಠ)>
        //
        // This is where the whole thing starts
        //-----------------
        //

        //gflip = false; //start - delete this to remove load
        if (gflip) {
            var bigS = 0;
            var mouseflag = false;
            var toolhelper = false;
            var start = [];
            startingAnime()
            $("#content").addClass("firsttimer");
            //afterAnime(); //for making frontpage load faster
        } else {
            var bigS = 0;
            var mouseflag = false;
            var toolhelper = false;
            var start = [];
            afterAnime();
        }

        //Starting animations - three circles appearing
        function startingAnime() {
            var tm = new TimelineMax();
            tm.to($(loadcircle.position), 0.3, {
                    x: widthmid - 16,
                    y: heightmid + 10
                }, 0)
                .to($(loadcircle2.position), 0.3, {
                    x: widthmid + 16,
                    y: heightmid + 10
                }, 0)
                .to($(loadcircle3.position), 0.3, {
                    y: heightmid - 15
                }, 0)
                .call(load)
        }

        function afterAnime() {
            TweenMax.to(loadcircle, 0, {
                opacity: 0
            }, 0)
            TweenMax.to(loadcircle2, 0, {
                opacity: 0,
            }, 0)
            TweenMax.to($(loadcircle3), 0, {
                strokeColor: 'white'
            }, 0)
            TweenMax.to($(".percentbox"), 0, {
                opacity: 0
            }, 0)

            path.add(new paper.Point(widthmid, 0));
            path.add(new paper.Point(widthmid, heightmid));
            path.add(new paper.Point(widthmid, heightmid));
            path.add(new paper.Point(widthmid, heightmid));
            path.add(new paper.Point(widthmid, height));
            expand();
        }

        //Spin the circles
        function load() {
            var tripple1 = loadcircle.position;
            var tripple2 = loadcircle2.position;
            var tripple3 = loadcircle3.position;

            i = 0;
            var tl = new TimelineMax({
                repeat: -1
            }); //repeat fasten
            tl.to($(loadcircle.position), 1, {
                    x: tripple3.x,
                    y: tripple3.y,
                    ease: Power2.easeInOut
                }, 0)
                .to($(loadcircle2.position), 1, {
                    x: tripple1.x,
                    y: tripple1.y,
                    ease: Power2.easeInOut
                }, 0)
                .to($(loadcircle3.position), 1, {
                    x: tripple2.x,
                    y: tripple2.y,
                    ease: Power2.easeInOut
                }, 0)
                .add(function() {
                    i++;
                    if (i > 0) {
                        if (loadvar) {
                            tl.stop();
                            loadExpand();
                        }
                    }
                })
                .delay(1)
        }

        //expand circles to position
        function loadExpand() {
            var percentsplit = new SplitText('.percentbox', {
                type: 'chars'
            });
            var tm = new TimelineMax({
                onComplete: loadLines
            });
            tm.to($(loadcircle.position), 1, {
                    x: widthmid,
                    y: heightmid - 65
                }, 0)
                .to($(loadcircle2.position), 1, {
                    x: widthmid,
                    y: heightmid - 5
                }, 0)
                .to($(loadcircle3.position), 1, {
                    x: widthmid,
                    y: heightmid + 25
                }, 0)
                .staggerTo($(percentsplit.chars), 1, {
                    y: -10,
                    opacity: 0
                }, 0.05, "-=1")
                .staggerTo($(".percentbox"), 1, {
                    opacity: 0
                }, 0.05, "-=1")

        }

        //Adding extra path elements
        function extrapath() {
            path.add(new paper.Point(path.lastSegment.point.x, path.lastSegment.point.y));
        }

        //Lines inbetween the three circles
        function loadLines() {
            path.add(new paper.Point(loadcircle.position.x, loadcircle.position.y));
            path.add(new paper.Point(loadcircle.position.x, loadcircle.position.y));

            var speed = .2; //that .3 to .1
            var tm = new TimelineMax();
            tm.to($(loadcircle), speed, {
                    strokeColor: 'white'
                }, 0)
                .to($(path.segments[1].point), speed, {
                    x: loadcircle.position.x - 13,
                    y: loadcircle.position.y + 25
                }, 0)
                .add(function() {
                    extrapath();
                    tm.to($(path.segments[2].point), speed, {
                            x: loadcircle2.position.x,
                            y: loadcircle2.position.y
                        })
                        .add(function() {
                            TweenMax.to($(loadcircle2), speed, {
                                strokeColor: 'white'
                            }, 0)
                            extrapath();
                            tm.to($(path.segments[3].point), speed, {
                                    x: loadcircle2.position.x - 5,
                                    y: loadcircle2.position.y + 13
                                })
                                .add(function() {
                                    extrapath();
                                    tm.to($(path.segments[4].point), speed, {
                                            x: loadcircle3.position.x,
                                            y: loadcircle3.position.y
                                        })
                                        .to($(loadcircle3), speed, {
                                            strokeColor: 'white'
                                        }, '-=0.1')
                                })
                        })
                })
            //Next function on the line
            scrolltext()
        }

        //Animating loading text
        function scrolltext() {
            var ts = new TimelineMax({
                onComplete: expand,
                onCompleteParams: [splits]
            })
            ts.to($('.explore'), 0, {
                opacity: 1
            })
            $(splits.lines).each(function(index) {
                ts.staggerFrom($(this).find('.char'), 0.7, {
                    y: 5,
                    opacity: 0
                }, 0.05, index * 0.3)
            });
        }

        //Expanding path
        function expand() {

            //Left startertext animation
            var ss = new TimelineMax();
            ss.to($(".startertext"), 0, {
                    opacity: 1
                }, 0)
                .to($(".sidestartertext"), 0, {
                    opacity: 1
                }, 0)

            $(startsplit.lines).each(function(index) {
                ss.staggerFrom($(this).find('.ss'), 0.7, {
                        y: 5,
                        opacity: 0
                    }, 0.02, index * 0.2 + 2)
                    .to($(".divideicon"), 1, {
                        opacity: 1
                    }, index * 0.2 + 2.5)
            });
            $(startsplit2.lines).each(function(index) {
                ss.staggerFrom($(this).find('.ss2'), 0.7, {
                    y: 5,
                    opacity: 0
                }, 0.02, index * 0.2 + 2)
            });
            $(startsplit3.lines).each(function(index) {
                ss.staggerFrom($(this).find('.ss3'), 0.7, {
                    y: 5,
                    opacity: 0
                }, 0.02, index * 0.2 + 0.3 + 2)
            });

            //Scoll text
            var tx = new TimelineMax({
                delay: 1
            });
            $(splits.lines).each(function(index) {
                tx.staggerTo($(this).find('.char'), 0.7, {
                    y: -5,
                    opacity: 0
                }, 0.05, index * 0.3)
            });

            //Function vars
            var e = Power1.easeInOut;
            var speed2 = 1;

            //Anime for segments
            var tx2 = new TimelineMax({
                delay: 0,
                onComplete: mainpathexpand
            }); //fasten 2.5 -> 0
            tx2.to($(path.segments[0].point), speed2, {
                    x: widthmid,
                    y: -10,
                    ease: e
                }, 0)
                .to($(loadcircle.position), speed2, {
                    x: widthmid,
                    y: -10,
                    ease: e
                }, 0)
                .delay(2)
                .add(function() {
                    logoMenuAnime();
                    TweenMax.to($('.innermap'), 8, {
                        opacity: 1
                    }, 0)
                    TweenMax.to($('.rastermap'), 8, {
                        opacity: 1
                    }, 0)
                })

            //moving exported path elements to viewport positions
            for (var i = 1; i < 4; i++) {
                var semiex = semi * i;
                var pos1 = widthmid + randomNumber(-100, 100);
                var pos2 = semiex + randomNumber(-10, 10);
                tx2.to($(path.segments[i].point), 1, {
                    x: pos1,
                    y: pos2,
                    ease: Power2.easeInOut
                }, i * 0.1)
                if (i == 1) {
                    tx2.to($(loadcircle2.position), 1, {
                        x: widthmid,
                        y: 0,
                        ease: Power2.easeInOut
                    }, 0.3)
                }
                if (i == 3) {
                    tx2.to($(loadcircle2.position), 1, {
                        x: pos1,
                        y: pos2,
                        ease: Power2.easeInOut
                    }, 0.3)
                }
            }
            tx2.to($(path.segments[4].point), 1, {
                x: pos1,
                y: height,
                ease: Power2.easeInOut
            }, 0.2)
            tx2.to($(loadcircle3.position), 1, {
                x: pos1,
                y: height,
                ease: Power2.easeInOut
            }, 0.2)
            redred(red);
        }


        //REDPATH

        function redred() {
            function redpath(red, eventpoint) {
                var currentpoint = eventpoint.y;
                var currentpointx = eventpoint.x;
                var lastpoint = red.lastSegment.previous.point.y;
                red.lastSegment.point = eventpoint;
                if (currentpoint > lastpoint + randomNumber(10, 100)) {
                    red.add(eventpoint);
                }
                rem()

                function rem() {
                    if (red.segments.length > 2) {
                        if (currentpoint < red.lastSegment.previous.point.y) {
                            if (red.lastSegment.previous.point.y > red.lastSegment.previous.previous.point.y) {
                                red.lastSegment.previous.point.y = red.lastSegment.previous.point.y - 15;
                            }
                            if (red.lastSegment.previous.point.y <= red.lastSegment.previous.previous.point.y) {
                                red.removeSegment(red.lastSegment.previous.index)
                            }
                            rem()
                        }
                    }
                }
            }

            setTimeout(explode, 4000);
            setTimeout(secondtool, 4001);


            function secondtool() {
                toolhelper = true;
            }

            // Master main Liquid
            function explode() {
                start = [];
                for (var i = 0; i < path.segments.length; i++) {
                    start.push(new Point(path.segments[i].point))
                }
            }
            explode()



            document.addEventListener(mousewheelevt, function(event) {
                if (toolhelper) {
                    for (var i = 0; i < path.segments.length; i++) {
                        //TweenMax.to(path.segments[i].point,0.5,{x:start[i].x, y:start[i].y+bigS},0)
                    }
                }
            });


            tool.onMouseMove = function(event) {
                mouseflag = true;
                if (toolhelper) {
                    for (var i = 1; i < path.segments.length - 1; i++) {
                        if (start[i].getDistance(event.point.x, event.point.y - bigS) < 50) {
                            //TweenMax.to(path.segments[i].point,0.5,{x:event.point.x, y:event.point.y},0)
                        } else {
                            //TweenMax.to(path.segments[i].point,0.5,{x:start[i].x, y:start[i].y+bigS},0)
                        }
                    }
                }

                redpath(red, event.point);
                //liquid end
            }
        }
        //Liquid end

        //REDPATH END

        function mainpathexpand() {

            //Add extra path length
            for (var i = 5; i < 19; i++) {
                var semiex = semi * i;
                path.add(new paper.Point(widthmid + randomNumber(-100, 100), semiex + randomNumber(-30, 30)));
            }

            //Put the ring images on place
            raster1.position = new Point(path.segments[3].point.x, path.segments[3].point.y);
            raster2.position = new Point(path.segments[6].point.x, path.segments[6].point.y);
            raster3.position = new Point(path.segments[9].point.x, path.segments[9].point.y);
            raster4.position = new Point(path.segments[12].point.x, path.segments[12].point.y);
            raster5.position = new Point(path.segments[15].point.x, path.segments[15].point.y);


            //here
            groupx1.position = new Point(path.segments[3].point.x, path.segments[3].point.y);
            groupx2.position = new Point(path.segments[6].point.x, path.segments[6].point.y);
            groupx3.position = new Point(path.segments[9].point.x, path.segments[9].point.y);
            groupx4.position = new Point(path.segments[12].point.x, path.segments[12].point.y);
            groupx5.position = new Point(path.segments[15].point.x, path.segments[15].point.y);

            TweenMax.to($(".w1"), 0, {
                x: path.segments[3].point.x,
                y: path.segments[3].point.y
            }, 0);
            TweenMax.to($(".w2"), 0, {
                x: path.segments[6].point.x,
                y: path.segments[6].point.y
            }, 0)
            TweenMax.to($(".w3"), 0, {
                x: path.segments[9].point.x,
                y: path.segments[9].point.y
            }, 0)
            TweenMax.to($(".w4"), 0, {
                x: path.segments[12].point.x,
                y: path.segments[12].point.y
            }, 0)
            TweenMax.to($(".w5"), 0, {
                x: path.segments[15].point.x,
                y: path.segments[15].point.y
            }, 0)

            TweenMax.to($(lraster1), 1, {
                opacity: 1
            }, 0)
            TweenMax.to($(lraster2), 1, {
                opacity: 1
            }, 0)
            TweenMax.to($(lraster3), 1, {
                opacity: 1
            }, 0)
            TweenMax.to($(lraster4), 1, {
                opacity: 1
            }, 0)
            TweenMax.to($(lraster5), 1, {
                opacity: 1
            }, 0)

            // TweenMax.to($(lcircle1),1,{scaling:2},0)
            // TweenMax.to($(lcircle2),1,{scaling:2},0)
            // TweenMax.to($(lcircle3),1,{scaling:2},0)
            // TweenMax.to($(lcircle4),1,{scaling:2},0)
            // TweenMax.to($(lcircle5),1,{scaling:2},0)

            hov1.position = new Point(path.segments[3].point.x, path.segments[3].point.y);
            hov2.position = new Point(path.segments[6].point.x, path.segments[6].point.y);
            hov3.position = new Point(path.segments[9].point.x, path.segments[9].point.y);
            hov4.position = new Point(path.segments[12].point.x, path.segments[12].point.y);
            hov5.position = new Point(path.segments[15].point.x, path.segments[15].point.y);

            whr1.position = new Point(path.segments[3].point.x, path.segments[3].point.y);
            whr2.position = new Point(path.segments[6].point.x, path.segments[6].point.y);
            whr3.position = new Point(path.segments[9].point.x, path.segments[9].point.y);
            whr4.position = new Point(path.segments[12].point.x, path.segments[12].point.y);
            whr5.position = new Point(path.segments[15].point.x, path.segments[15].point.y);

            TweenMax.to($(".hr1"), 0, {
                x: path.segments[3].point.x,
                y: path.segments[3].point.y
            }, 0);
            TweenMax.to($(".hr2"), 0, {
                x: path.segments[6].point.x,
                y: path.segments[6].point.y
            }, 0);
            TweenMax.to($(".hr3"), 0, {
                x: path.segments[9].point.x,
                y: path.segments[9].point.y
            }, 0);
            TweenMax.to($(".hr4"), 0, {
                x: path.segments[12].point.x,
                y: path.segments[12].point.y
            }, 0);
            TweenMax.to($(".hr5"), 0, {
                x: path.segments[15].point.x,
                y: path.segments[15].point.y
            }, 0);


            TweenMax.to($(loadcircle2), 1, {
                opacity: 0
            }, 0.5)

            //Make a copy for the scrolling dash path
            var dashpath = path.clone();
            dashpath.strokeColor = '#080826';
            dashpath.insertBelow(path);
            loadcircle2.insertAbove(raster5);
            //dashpath.dashArray = [3, 3];

            flip = 1;
            for (var i = 1; i < 18; i++) {
                var plusOrMinus = Math.random() < 0.5 ? -1 : 1;
                var flip = flip * -1;
                var ran = randomNumber(10, 20) * flip;
                var ran2 = randomNumber(10, 20) * plusOrMinus;
                if (i != 3 && i != 6 && i != 9 && i != 12 && i != 15) {
                    var ntl = new TimelineMax();
                    ntl.to($(dashpath.segments[i].point), 0, {
                        x: path.segments[i].point.x + ran,
                        y: path.segments[i].point.y + ran2,
                    }, 0)
                } else {

                }
            }

            var maxheight = path.lastSegment.previous.previous.previous.point.y;
            mousewheel(path, maxheight, group, big, startg, dashgroup, red);
            dashpathplace(dashpath);
        }

        //Pulling in all the html elements
        function logoMenuAnime() {
            var splits2 = new SplitText('.smallmap span', {
                type: 'chars'
            });
            var la = new TimelineMax();
            la.to($('.logo'), 1, {
                    opacity: 1
                }, 0)
                .to($('.menu-opener'), 1, {
                    opacity: 1
                }, 0)
                .from($('.menubutton'), 1, {
                    scale: 0.8
                }, 0)
                .to($('.smallmap'), 1, {
                    opacity: 1
                }, 0.3)
                .to($('.titles'), 0.1, {
                    display: "block"
                }, 0.3)
                .to($(smallgroup), 1, {
                    opacity: 1
                }, 0)
                .staggerFrom($(splits2.chars), 0.5, {
                    opacity: 0,
                    y: 10
                }, 0.05, 0.4)
                .staggerFrom($(".cls-2"), 1, {
                    opacity: 0,
                    y: 10,
                    ease: Power2.easeOut
                }, 0.05, 0)
        }

        //animate in the dashpath
        function dashpathplace(dashpath) {
            var cross = blue.getIntersections(dashpath);
            var cp = cross[0].point;
            var dpp = new TimelineMax();
            //for the little first corner
            var prespotx = dashpath.segments[1].point.x;
            var prespoty = dashpath.segments[1].point.y;
            dpp.to($(dashpathrun.lastSegment.previous.point), 0.25, {
                    x: prespotx,
                    y: prespoty
                }, 0)
                .to($(dashpathrun.lastSegment.point), 0.25, {
                    x: prespotx,
                    y: prespoty
                }, 0)
                .to($(dashpathrun.lastSegment.point), 0.25, {
                    x: cp.x,
                    y: cp.y
                }, 0.25)
                .to($(loadcircle3.position), 0, {
                    x: cp.x,
                    y: cp.y
                }, 0)
                .to($(loadcircle3.strokeColor), 0, {
                    alpha: 0
                }, 0)
                .to($(loadcircle3.strokeColor), 0.5, {
                    alpha: 1
                }, 0.5)
                .add(function() {
                    //Send dashpath to mousescroll
                    dashpathline(dashpath);
                })
        }

        function dashpathline(dashpath) {

            var flag = [];
            for (var i = 0; i < 5; i++) {
                flag.push(true);
            }
            paper = mypapers[0];

            paper.view.onFrame = function(event) {

                //Crosspoints // hiir

                var cross = blue.getIntersections(dashpath);
                var cp = cross[0].point;

                //Dashedpathrun line center movement
                TweenMax.to($(dashpathrun.lastSegment.point), 0, {
                    x: cp.x,
                    y: cp.y
                });
                TweenMax.to($(loadcircle3.position), 0, {
                    x: cp.x,
                    y: cp.y
                });


                //Making extra points happen
                var s_currentpoint = cross[0].point.y;
                var s_currentpointx = cross[0].point.x;
                var s_lastpoint = dashpathrun.lastSegment.previous.point.y;

                if (s_currentpoint > s_lastpoint + 50) {
                    dashpathrun.add(cp.x, cp.y);
                }
                //Removing extra points once scrolling back
                function remove() {
                    if (s_currentpoint < dashpathrun.lastSegment.previous.point.y) {
                        dashpathrun.removeSegment(dashpathrun.lastSegment.previous.index)
                        remove()
                    }
                }
                remove()

                //Calculation positions when the hover action starts rolling
                var point1 = dashpath.segments[3].point;
                var point2 = dashpath.segments[6].point;
                var point3 = dashpath.segments[9].point;
                var point4 = dashpath.segments[12].point;
                var point5 = dashpath.segments[15].point;
                var distances = [point1.getDistance(cp),
                    point2.getDistance(cp),
                    point3.getDistance(cp),
                    point4.getDistance(cp),
                    point5.getDistance(cp)
                ];

                var lcircles = [lcircle1, lcircle2, lcircle3, lcircle4, lcircle5];
                var elems = [".pt1", ".pt2", ".pt3", ".pt4", ".pt5"];
                var splitx = [splitsp1, splitsp2, splitsp3, splitsp4, splitsp5];


                for (var i = 0; i < 5; i++) {
                    if (distances[i] < 100) {
                        if (flag[i]) {
                            pathelementin(lcircles[i], elems[i], splitx[i])
                            flag[i] = false;
                            flipper(i + 1);
                        }
                    } else {
                        if (flag[i] == false) {
                            pathelementout(lcircles[i], elems[i], splitx[i])
                            flag[i] = true;
                        }
                    }
                }

            } // ONframre event end
        }

        //Functions for the ring hoverspt1
        function pathelementin(lcircle, elem, splitter) {
            var ease1 = Back.easeOut.config(2);
            var px1 = new TimelineMax();
            px1.to($(lcircle), 0.5, {
                    scaling: 1.50,
                    ease: ease1
                }, 0)
                .to($(elem), 0, {
                    opacity: 1,
                    className: "+=active"
                }, 0)
                .to($(elem).find('a'), 0, {
                    pointerEvents: 'all'
                }, 0)
                .to($(elem).find('.linkring'), 0.5, {
                    opacity: 1,
                    pointerEvents: 'all'
                }, 0)
                .to($(loadcircle3.bounds), 0.5, {
                    width: 20,
                    height: 20,
                    fillColor: "red"
                }, 0)
                .to($(loadcircle3.fillColor), 0.5, {
                    alpha: 0
                }, 0)
                .staggerTo(splitter.chars, 0, {
                    y: 0
                }, 0, 0)
                .staggerTo(splitter.chars, 0.5, {
                    opacity: 1,
                    y: -10
                }, 0.05, 0)
        }

        function pathelementout(lcircle, elem, splitter) {
            var ease1 = Power2.easeInOut;
            var px1 = new TimelineMax();
            px1.to($(lcircle), 0.5, {
                    scaling: 1,
                    ease: ease1
                }, 0)
                .to($(elem).find('a'), 0, {
                    pointerEvents: 'none'
                }, 0)
                .to($(elem).find('.linkring'), 0.5, {
                    opacity: 0,
                    pointerEvents: 'none'
                }, 0)
                .to($(loadcircle3.bounds), 0.5, {
                    width: 10,
                    height: 10
                }, 0)
                .to($(loadcircle3.fillColor), 0.5, {
                    alpha: 1
                }, 0)
                .staggerTo(splitter.chars, 0.5, {
                    opacity: 0,
                    y: -20
                }, 0.05, 0)
                .to($(elem), 3, {
                    opacity: 0,
                    className: "-=active"
                }, 0)

        }

        function flipper(nr) {
            $(".flipper").replaceWith("<span class='flipper'>" + nr + "</span>");
        }


        //LIL HELPERS
        TweenMax.to('.w1', 0, {
            rotation: -90
        }, 0)
        TweenMax.to('.w2', 0, {
            rotation: -90
        }, 0)
        TweenMax.to('.w3', 0, {
            rotation: -90
        }, 0)
        TweenMax.to('.w4', 0, {
            rotation: -90
        }, 0)
        TweenMax.to('.w5', 0, {
            rotation: -90
        }, 0)

        TweenMax.to('.w1 #Layer_1 circle', 0, {
            drawSVG: "0%"
        }, 0)
        TweenMax.to('.w2 #Layer_1 circle', 0, {
            drawSVG: "0%"
        }, 0)
        TweenMax.to('.w3 #Layer_1 circle', 0, {
            drawSVG: "0%"
        }, 0)
        TweenMax.to('.w4 #Layer_1 circle', 0, {
            drawSVG: "0%"
        }, 0)
        TweenMax.to('.w5 #Layer_1 circle', 0, {
            drawSVG: "0%"
        }, 0)
        console.log("oi")

        // (>ಠ_ಠ)>
        //
        // MASTER SCROLL
        //-----------------
        //

        function mousewheel(path, maxheight, group, big, startg, dashgroup, red) {

            //Mousewheel vars
            var point1 = path.segments[3].point.y;
            var point2 = path.segments[6].point.y;
            var point3 = path.segments[9].point.y;
            var point4 = path.segments[12].point.y;
            var point5 = path.segments[15].point.y;
            var o = 0;
            var p = (maxheight * -1) + heightmid;
            var pt = path.position.y;
            var posnull = bighelps.position.y;


            var hrs = [".hr1", ".hr2", ".hr3", ".hr4", ".hr5"];
            var hrst = [];

            var sflag = true;
            var sflip = true;
            var ex = [-1, -1, -1, -1, -1];
            var exel = [-1, -1, -1, -1, -1];
            var board = [true, true, true, true, true];

            var st = [true, true, true, true, true];

            for (var i = 0; i < 5; i++) {
                hrst.push($(hrs[i]).offset().top);
            }


            document.addEventListener(mousewheelevt, function(event) {
                const normalized = normalizeWheel(event);
                var midcalc = (heightmid - o);

                minuspagey = normalized.pixelY * -1;
                //Scroll distance calcualtions
                if (sflag) {
                    o = o + (minuspagey * 0.5);
                    console.log(o);
                }
                // if (midcalc > point1-80 && midcalc < point1+80 ||
                //     midcalc > point2-80 && midcalc < point2+80 ||
                //     midcalc > point3-80 && midcalc < point3+80 ||
                //     midcalc > point4-80 && midcalc < point4+80 ||
                //     midcalc > point5-80 && midcalc < point5+80 ) {
                //   //o=Math.round(o+(event.deltaY*0.1));
                //   $("body").removeClass("outhover")
                // }



                ringstops(".w1 #Layer_1 circle", '.w1', point1, 0);
                ringstops(".w2 #Layer_1 circle", '.w2', point2, 1);
                ringstops(".w3 #Layer_1 circle", '.w3', point3, 2);
                ringstops(".w4 #Layer_1 circle", '.w4', point4, 3);
                ringstops(".w5 #Layer_1 circle", '.w5', point5, 4);

                function ringstops(el1, el2, pointx, nr) {

                    if (midcalc > pointx - 1 && board[nr] == true || midcalc < pointx + 1 && board[nr] == false) {
                        if (exel[nr] >= -5 && exel[nr] <= 105 && st[nr] == true) {
                            sflag = false;
                            o = height / 2 - pointx;
                            ex[nr] = (ex[nr] + minuspagey);
                            exel[nr] = Math.round(ex[nr] / -10);

                            if (exel[nr] >= 0 && exel[nr] <= 100 && st[nr] == true) {
                                TweenMax.to(el1, 0.3, {
                                    drawSVG: exel[nr] + "%"
                                }, 0)
                                TweenMax.to(el2, 0.3, {
                                    opacity: 1
                                }, 0)
                            }
                            if (exel[nr] <= -5) {
                                ex[nr] = 0;
                                exel[nr] = -5;
                                TweenMax.to(el1, 0.3, {
                                    drawSVG: "0%"
                                }, 0)
                                TweenMax.to(el2, 0.3, {
                                    opacity: 0
                                }, 0)
                                sflag = true;
                                st[nr] = false;
                                board[nr] = true;
                            }
                            if (exel[nr] >= 105) {
                                ex[nr] = -1050;
                                exel[nr] = 105;
                                TweenMax.to(el1, 0.3, {
                                    drawSVG: "100%"
                                }, 0)
                                TweenMax.to(el2, 0.3, {
                                    opacity: 0
                                }, 0)
                                sflag = true;
                                st[nr] = false;
                                board[nr] = false;
                            }
                        }
                    }
                    if (midcalc > pointx) {
                        st[nr] = true;
                    }
                }

                // else if (event.deltaY < 0) {
                //   o = o+event.deltaY *0.5;
                //   $("body").addClass("outhover")
                // }else {
                //   $("body").addClass("outhover")
                // }


                if (o > 0) {
                    o = 0;
                    TweenMax.to($('.startertext'), 1, {
                        opacity: 1,
                        y: 0
                    });
                    TweenMax.to($('.sidestartertext'), 1, {
                        opacity: 1,
                        y: 0
                    });
                }
                if (o < 0) {
                    TweenMax.to($('.startertext'), 1, {
                        opacity: 0
                    });
                    TweenMax.to($('.sidestartertext'), 1, {
                        opacity: 0
                    });
                }
                if (o < p - 2) {
                    o = p - 2;
                }
                if (midcalc < point1 - 80) {
                    $(".flipper").replaceWith("<span class='flipper'>0</span>");
                }
                bigS = o;


                om = o * -1;

                //Animating everything based on scroll
                var mainease = Power1.easeOut;
                var mainspeed = 0.27;
                var mainspeed2 = 0.4;
                //Lines

                var tp = new TimelineMax();
                tp.to($('.innermap, .rastermap, .whiteringcover, .startertext, .sidestartertext'), mainspeed2, {
                        y: o
                    }, 0)
                    .to(dashgroup.position, mainspeed, {
                        y: o
                    }, 0)
                    .to(startg.position, mainspeed, {
                        y: o + pt
                    }, 0)
                    .to(group.position, mainspeed, {
                        y: o
                    }, 0)
                    .to(big.position, mainspeed, {
                        y: o + posnull
                    }, 0)



                //Make red path last point follow mouse position on scroll
                event = event || window.event;
                var pageY = event.pageY;
                if (mouseflag) {
                    if (pageY) {
                        TweenMax.to(red.lastSegment.point, mainspeed, {
                            y: pageY
                        });
                    }
                }



                for (var i = 0; i < 5; i++) {
                    TweenMax.to($(hrs[i]), mainspeed, {
                        y: hrst[i] + o + 50
                    });
                }

                //SMALLMAP
                var tehe = (smallmap.length / (maxheight - heightmid + 2)) * o;
                smallmapfill.lastSegment.point = smallmap.getPointAt(offset);
                offset = tehe * -1;

                smallcirclewhite.position = smallmap.getPointAt(offset);
                var tex = smallmap.getPointAt(offset);

                //SMALLMAP PATH FILL
                var dot = smallmap.getPointAt(offset);
                var lastfill = smallmapfill.lastSegment.previous.point.y;

                if (smallmap.lastSegment.point.y - 10 <= smallmapfill.lastSegment.point.y) {
                    TweenMax.to($(smallcircle2.strokeColor), 1, {
                        red: 255 / 255,
                        green: 255 / 255,
                        blue: 255 / 255
                    }, 0)
                    //smallcircle2.strokeColor = 'white';
                } else {
                    TweenMax.to($(smallcircle2.strokeColor), 1, {
                        red: 85 / 255,
                        green: 85 / 255,
                        blue: 85 / 255
                    }, 0)
                    //smallcircle2.strokeColor = '#575757';
                }

                if (Math.floor(tex.y) > Math.floor(lastfill)) {
                    smallmapfill.add(dot);
                }
                //Removing extra points once scrolling back
                function removex() {
                    if (Math.floor(tex.y) < Math.floor(smallmapfill.lastSegment.previous.point.y) && smallmapfill.segments.length > 2) {
                        smallmapfill.removeSegment(smallmapfill.lastSegment.previous.index)
                        removex()
                    }
                }
                removex()
                //SMALLMAP PATH FILL END
            });
        }
        //Scroll end

        $("body").addClass("outhover");

        function circlehover(hov, elem, cover, splitter, whr) {
            // When the mouse enters the item, set its fill color to red:
            $(hov).mouseenter(function() {
                if (document.body.className.match('outhover')) {
                    var ease1 = Back.easeOut.config(2);
                    var pj1 = new TimelineMax();
                    pj1.to($(elem), 0.5, {
                            scaling: 1.5,
                            ease: ease1
                        }, 0)
                        .to($(cover), 0, {
                            opacity: 1
                        }, 0)
                        .to($(cover).find('.linkring'), 0.5, {
                            opacity: 1,
                            pointerEvents: 'all'
                        }, 0)
                        .staggerTo(splitter.chars, 0, {
                            y: 0
                        }, 0, 0)
                        .staggerTo(splitter.chars, 0.5, {
                            opacity: 1,
                            y: -10
                        }, 0.05, 0)
                        .to($(whr), 0.5, {
                            opacity: 1,
                            ease: ease1
                        }, 0)
                }
            });

            // When the mouse leaves the item, set its fill color to black:
            $(hov).mouseleave(function() {
                if (document.body.className.match('outhover')) {
                    var ease1 = Power2.easeInOut;
                    var pj1 = new TimelineMax();
                    pj1.to($(elem), 0.5, {
                            scaling: 1,
                            ease: ease1
                        }, 0)
                        .to($(cover).find('.linkring'), 0.5, {
                            opacity: 0,
                            pointerEvents: 'none'
                        }, 0)
                        .staggerTo(splitter.chars, 0.5, {
                            opacity: 0,
                            y: -20
                        }, 0.05, 0)
                        .to($(cover), 3, {
                            opacity: 0
                        }, 0)
                        .to($(whr), 0.5, {
                            opacity: 0,
                            ease: ease1
                        }, 0)
                }
            });
        }


        hovertitle(".pt1", splitsp1)
        hovertitle(".pt2", splitsp2)
        hovertitle(".pt3", splitsp3)
        hovertitle(".pt4", splitsp4)
        hovertitle(".pt5", splitsp5)

        function hovertitle(elem, split) {
            $(elem).mouseenter(function() {
                if ($(this).hasClass("active")) {
                    var me = new TimelineMax();
                    me.staggerTo($(split.chars), 0.5, {
                            opacity: 0.4
                        }, 0.03, 0)
                        .staggerTo($(split.chars), 0.5, {
                            opacity: 0.8
                        }, 0.03, 0.3)
                        .to($(elem).find(".linkring"), 0.3, {
                            borderColor: "white"
                        }, 0)
                }
            });

            // When the mouse leaves the item, set its fill color to black:
            $(elem).mouseleave(function() {
                if ($(this).hasClass("active")) {
                    var me = new TimelineMax();
                    me.to($(elem).find(".linkring"), 0.3, {
                            borderColor: "#474758"
                        }, 0)
                        .staggerTo($(split.chars), 0.5, {
                            opacity: 1
                        }, 0.03, 0.3)
                }
            });
        }


    }); //jquery end
}


// (>ಠ_ಠ)>
//
// Subpage canvas animations
//-----------------
//

function subcanvas() {
    jQuery(function($) {

        //Enable main paper
        mypapers[4] = new paper.PaperScope();
        mypapers[4].setup($("#subcanvas")[0]);
        paper = mypapers[4];

        //global vars
        var width = $(window).width()
        var height = $(window).height();
        var widthmid = $(window).width() / 2;
        var heightmid = $(window).height() / 2;
        var semi = height / 4;
        var plusOrMinus = Math.random() < 0.5 ? -1 : 1;

        //Colors

        $lightGrey = "#d5d5da";
        $darkGrey = "#9999a5";

        //Registering onload-global paths, circles and everything for paper

        //Paths
        var path = new paper.Path({
            strokeColor: $lightGrey,
            strokeWidth: 1
        });
        var pathbottom = new paper.Path({
            strokeColor: $lightGrey,
            strokeWidth: 1
        });

        //circles
        var endcircle = new paper.Path.Circle(new Point(widthmid, heightmid), 4);
        endcircle.strokeColor = "#080826";
        endcircle.fillColor = 'white';

        var midcircle = new paper.Path.Circle(new Point(widthmid, heightmid), 5);
        midcircle.strokeColor = "white";
        TweenMax.to($(midcircle), 0, {
            opacity: 0
        }, 0)

        //Rasters
        var subraster = new paper.Raster('ringimage1');
        subraster.position = new Point(widthmid, heightmid);
        TweenMax.to($(subraster), 0, {
            scaling: 0.35
        }, 0)
        subraster.insertBelow(midcircle);




        var elem = ".next-page-inner .h2";
        if ($(elem).length) {
            var splitter = new SplitText(elem, {
                type: 'words, chars'
            });
        }
        var red = "#c02811";
        var black = "black";

        $(".midhover, .next-page-inner .h2").mouseenter(function() {
            var ease1 = Back.easeOut.config(2);
            var pj1 = new TimelineMax();
            pj1.to($(lcircle1), 0.5, {
                    scaling: 1.5,
                    ease: ease1
                }, 0)
                .to($(midcircle), 0.5, {
                    opacity: 1
                }, 0)
                .staggerTo($(splitter.chars), 0.5, {
                    color: red
                }, 0.05, 0)
        });
        $(".midhover, .next-page-inner .h2").mouseleave(function() {
            var ease1 = Back.easeOut.config(2);
            var pj1 = new TimelineMax();
            pj1.to($(lcircle1), 0.5, {
                    scaling: 1,
                    ease: ease1
                }, 0)
                .to($(midcircle), 0.5, {
                    opacity: 0
                }, 0)
                .staggerTo($(splitter.chars), 0.4, {
                    color: black
                }, 0.03, 0.3)
        });




        //Start things
        substart();

        function substart() {
            //to top
            path.add(new Point(widthmid, heightmid));
            var semi = heightmid / 5;
            for (var i = 0; i < 4; i++) {
                var semiex = semi * i;
                var pos1 = widthmid + randomNumber(-50, 50);
                var pos2 = semiex + randomNumber(-20, 20);
                path.add(new Point(pos1, heightmid - pos2 - semi));
            }
            path.add(new Point(widthmid + (randomNumber(50, 150) * plusOrMinus), 0));

            //to bottom
            pathbottom.add(new Point(widthmid, heightmid));
            var semi = heightmid / 6;
            for (var i = 0; i < 4; i++) {
                var semiex = semi * i;
                var pos1 = widthmid + randomNumber(-50, 50);
                var pos2 = semiex + randomNumber(-20, 20);
                pathbottom.add(new Point(pos1, heightmid + pos2 + semi));
            }
            endcircle.position = new Point(pathbottom.lastSegment.point);



            //Make a copy for the scrolling dash path
            var topclone = path.clone();
            topclone.strokeColor = $darkGrey;
            topclone.dashArray = [3, 3];

            flip = 1;
            for (var i = 1; i < 5; i++) {
                var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
                var flip = flip * -1;
                var ran = randomNumber(10, 30) * flip;
                var ran2 = randomNumber(10, 30) * plusOrMinus2;
                if (i != 0 && i != 5) {
                    var ntl = new TimelineMax();
                    ntl.to($(topclone.segments[i].point), 0, {
                        x: topclone.segments[i].point.x + ran,
                        y: topclone.segments[i].point.y + ran2,
                    }, 0)
                } else {}
            }

            //Make a copy for the scrolling dash path
            var bottomclone = pathbottom.clone();
            //bottomclone.add(new Point(widthmid+(randomNumber(50, 150)*plusOrMinus), height-100));

            bottomclone.strokeColor = $darkGrey;
            bottomclone.dashArray = [3, 3];

            flip = 1;
            for (var i = 1; i < 5; i++) {
                var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
                var flip = flip * -1;
                var ran = randomNumber(10, 30) * flip;
                var ran2 = randomNumber(10, 30) * plusOrMinus2;
                if (i != 0 && i != 4) {
                    var ntl = new TimelineMax();
                    ntl.to($(bottomclone.segments[i].point), 0, {
                        x: bottomclone.segments[i].point.x + ran,
                        y: bottomclone.segments[i].point.y + ran2,
                    }, 0)
                } else {}
            }



        } //substart end
    })
}

function subcanvasteam() {
    jQuery(function($) {
        //Enable main paper
        mypapers[4] = new paper.PaperScope();
        mypapers[4].setup($("#subcanvas")[0]);
        paper = mypapers[4];

        //global vars
        var width = $(window).width()
        var height = $(window).height();
        var widthmid = $(window).width() / 2;
        var heightmid = $(window).height() / 2;
        var semi = height / 4;
        var plusOrMinus = Math.random() < 0.5 ? -1 : 1;

        //Colors

        $lightGrey = "#d5d5da";
        $darkGrey = "#9999a5";

        //Registering onload-global paths, circles and everything for paper

        //Paths
        var path = new paper.Path({
            strokeColor: $lightGrey,
            strokeWidth: 1
        });
        var pathbottom = new paper.Path({
            strokeColor: $lightGrey,
            strokeWidth: 1
        });

        //circles
        var endcircle = new paper.Path.Circle(new Point(widthmid, heightmid * 1.7), 4);
        endcircle.strokeColor = "#080826";
        endcircle.fillColor = 'white';

        var midcircle = new paper.Path.Circle(new Point(widthmid, heightmid * 1.7), 5);
        midcircle.strokeColor = "white";
        TweenMax.to($(midcircle), 0, {
            opacity: 0
        }, 0)

        //Rasters

        var rsize = Math.floor(width / 2);
        var rsize2 = Math.floor(width / 10);

        var lraster1 = new paper.Raster('subimage'); //subimage
        lraster1.size = new Size(rsize, rsize);
        var lcircle1 = new Path.Circle({
            radius: rsize2,
        });
        var subraster = new Group(lcircle1, lraster1);
        subraster.position = new Point(widthmid, heightmid * 1.7);
        subraster.clipped = true;
        lcircle1.applyMatrix = false;
        subraster.insertBelow(midcircle);
        TweenMax.to($(subraster), 0, {
            scaling: 0.35
        }, 0);



        var elem = ".next-page-inner .h2";
        if ($(elem).length) {
            var splitter = new SplitText(elem, {
                type: 'words, chars'
            });
        }
        var red = "#c02811";
        var black = "black";

        $(".midhover, .next-page-inner .h2").mouseenter(function() {
            var ease1 = Back.easeOut.config(2);
            var pj1 = new TimelineMax();
            pj1.to($(lcircle1), 0.5, {
                    scaling: 1.5,
                    ease: ease1
                }, 0)
                .to($(midcircle), 0.5, {
                    opacity: 1
                }, 0)
                .staggerTo($(splitter.chars), 0.5, {
                    color: red
                }, 0.05, 0)
        });
        $(".midhover, .next-page-inner .h2").mouseleave(function() {
            var ease1 = Back.easeOut.config(2);
            var pj1 = new TimelineMax();
            pj1.to($(lcircle1), 0.5, {
                    scaling: 1,
                    ease: ease1
                }, 0)
                .to($(midcircle), 0.5, {
                    opacity: 0
                }, 0)
                .staggerTo($(splitter.chars), 0.4, {
                    color: black
                }, 0.03, 0.3)
        });


        //Start things
        substart();

        function substart() {
            //to top
            var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
            path.add(new Point(widthmid, heightmid * 1.7));
            var semi = heightmid / 5;
            var semi2 = widthmid / 6;
            for (var i = 1; i < 7; i++) {
                var semiex = semi * i;
                var semiex2 = semi2 * i;
                var pos1 = widthmid + randomNumber(-100, 100) + semiex2;;
                var pos2 = semiex + randomNumber(30, 100) * plusOrMinus2;
                path.add(new Point(pos1, heightmid * 1.7 - pos2 - semi));
            }
            path.add(new Point(width, 0));
            //path.add(new Point(widthmid+(randomNumber(50, 150)*plusOrMinus), 0));

            //to bottom
            pathbottom.add(new Point(widthmid, heightmid * 1.7));
            var semi = heightmid * 1.7 / 6;

            for (var i = 0; i < 3; i++) {
                var semiex = semi * i;
                var pos1 = widthmid + randomNumber(-50, 50)
                var pos2 = semiex + randomNumber(-20, 20);
                pathbottom.add(new Point(pos1, heightmid * 1.7 + pos2 + semi));
            }
            endcircle.position = new Point(pathbottom.lastSegment.point);

            //Make a copy for the scrolling dash path
            var topclone = path.clone();
            topclone.strokeColor = $darkGrey;
            topclone.dashArray = [3, 3];

            flip = 1;
            for (var i = 1; i < 7; i++) {
                var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
                var flip = flip * -1;
                var ran = randomNumber(10, 30) * flip;
                var ran2 = randomNumber(10, 30) * plusOrMinus2;
                if (i != 0 && i != 7) {
                    var ntl = new TimelineMax();
                    ntl.to($(topclone.segments[i].point), 0, {
                        x: topclone.segments[i].point.x + ran,
                        y: topclone.segments[i].point.y + ran2,
                    }, 0)
                } else {}
            }

            //Make a copy for the scrolling dash path
            var bottomclone = pathbottom.clone();
            //bottomclone.add(new Point(widthmid+(randomNumber(50, 150)*plusOrMinus), height-100));

            bottomclone.strokeColor = $darkGrey;
            bottomclone.dashArray = [3, 3];

            flip = 1;
            for (var i = 1; i < 3; i++) {
                var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
                var flip = flip * -1;
                var ran = randomNumber(10, 30) * flip;
                var ran2 = randomNumber(10, 30) * plusOrMinus2;
                if (i != 0 && i != 4) {
                    var ntl = new TimelineMax();
                    ntl.to($(bottomclone.segments[i].point), 0, {
                        x: bottomclone.segments[i].point.x + ran,
                        y: bottomclone.segments[i].point.y + ran2,
                    }, 0)
                } else {}
            }
            //Liquid
            var paths = [path, pathbottom, topclone, bottomclone];

            var ar1 = [];
            var ar2 = [];
            var ar3 = [];
            var ar4 = [];
            var start = [ar1, ar2, ar3, ar4];

            paths.forEach(function(element, index) {
                for (var x = 0; x < element.segments.length; x++) {
                    start[index].push(new Point(element.segments[x].point))
                }
            })

            var tool = new Tool();
            tool.onMouseMove = function(event) {
                paths.forEach(function(element, index) {
                    for (var i = 1; i < element.segments.length - 1; i++) {
                        var tl = new TimelineMax();
                        if (start[index][i].getDistance(event.point) < 70) {
                            tl.to(element.segments[i].point, 0.5, {
                                x: event.point.x,
                                y: event.point.y
                            }, 0)
                        } else {
                            tl.to(element.segments[i].point, 0.5, {
                                x: start[index][i].x,
                                y: start[index][i].y
                            }, 0)
                        }
                    }
                })
            }
            //Liquid end
        } //substart end
    })
}
// function reload()
// {
//     if (window.location.href.indexOf('reload')==-1) {
//         window.location.replace(window.location.href+'?reload');
//    }
// }
function sidepathcanvas() {
    jQuery(function($) {

        $lightGrey = "#d5d5da";
        $darkGrey = "#9999a5";

        mypapers[5] = new paper.PaperScope();
        mypapers[5].setup($("#sidecanvas")[0]);
        paper = mypapers[5];

        var path = new paper.Path({
            strokeColor: $lightGrey,
            strokeWidth: 1
        });

        //global vars
        var width = $(window).width()
        var height = $(window).height();
        var widthmid = $(window).width() / 2;
        var heightmid = $(window).height() / 2;
        var plusOrMinus = Math.random() < 0.5 ? -1 : 1;

        var semi = height / 10;
        var semi2 = width / 20;

        path.add(new Point(0, 100));
        for (var i = 1; i < 6; i++) {
            var semiex = semi * i;
            var semiex2 = semi2 * i;
            path.add(new Point(semiex2 + randomNumber(-50, 50), semiex + randomNumber(-50, 50)));
        }
        for (var i = 0; i < 5; i++) {
            x = 5 - i;
            y = 5;
            y++;
            var semiex = semi * y;
            var semiex2 = semi2 * x;
            path.add(new Point(semiex2 + randomNumber(-50, 50), semiex + randomNumber(-50, 50)));
        }
        path.add(new Point(0, height - 100));


        var topclone = path.clone();
        topclone.strokeColor = $darkGrey;
        topclone.dashArray = [3, 3];

        flip = 1;
        for (var i = 1; i < 12; i++) {
            var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
            var flip = flip * -1;
            var ran = randomNumber(10, 30) * flip;
            var ran2 = randomNumber(10, 30) * plusOrMinus2;
            if (i != 0 && i != 14) {
                var ntl = new TimelineMax();
                ntl.to($(topclone.segments[i].point), 0, {
                    x: topclone.segments[i].point.x + ran,
                    y: topclone.segments[i].point.y + ran2,
                }, 0)
            } else {}
        }

        //Liquid
        var paths = [path, topclone];

        var ar1 = [];
        var ar2 = [];
        var ar3 = [];
        var ar4 = [];
        var start = [ar1, ar2, ar3, ar4];

        paths.forEach(function(element, index) {
            for (var x = 0; x < element.segments.length; x++) {
                start[index].push(new Point(element.segments[x].point))
            }
        })

        var tool = new Tool();
        tool.onMouseMove = function(event) {
            paths.forEach(function(element, index) {
                for (var i = 1; i < element.segments.length - 1; i++) {
                    var tl = new TimelineMax();
                    if (start[index][i].getDistance(event.point) < 70) {
                        tl.to(element.segments[i].point, 0.5, {
                            x: event.point.x,
                            y: event.point.y
                        }, 0)
                    } else {
                        tl.to(element.segments[i].point, 0.5, {
                            x: start[index][i].x,
                            y: start[index][i].y
                        }, 0)
                    }
                }
            })
        }
        //Liquid end


    }) //jqeury end
}


function sidepathcanvasContact() {
    jQuery(function($) {

        //Enable main paper
        mypapers[4] = new paper.PaperScope();
        mypapers[4].setup($("#subcanvas")[0]);
        paper = mypapers[4];

        //global vars
        var width = $(window).width()
        var height = $(window).height();
        var widthmid = $(window).width() / 2;
        var heightmid = $(window).height() / 2;
        var semi = height / 4;
        var plusOrMinus = Math.random() < 0.5 ? -1 : 1;

        //Colors

        $lightGrey = "#d5d5da";
        $darkGrey = "#9999a5";

        //Registering onload-global paths, circles and everything for paper

        //Paths
        var path = new paper.Path({
            strokeColor: $lightGrey,
            strokeWidth: 1
        });
        var pathbottom = new paper.Path({
            strokeColor: $lightGrey,
            strokeWidth: 1
        });

        //circles
        var endcircle = new paper.Path.Circle(new Point(widthmid, heightmid * 1.7), 4);
        endcircle.strokeColor = "#080826";
        endcircle.fillColor = '#ffffff';

        var midcircle = new paper.Path.Circle(new Point(widthmid, heightmid * 1.7), 5);
        midcircle.strokeColor = "white";
        TweenMax.to($(midcircle), 0, {
            opacity: 0
        }, 0)

        //Rasters

        var rsize = Math.floor(width / 3);
        var rsize2 = Math.floor(width / 10);

        var lraster1 = new paper.Raster('subimage'); //subimage
        lraster1.size = new Size(rsize, rsize);
        var lcircle1 = new Path.Circle({
            radius: rsize2,
        });
        var subraster = new Group(lcircle1, lraster1);
        subraster.position = new Point(widthmid, heightmid * 1.7);
        subraster.clipped = true;
        lcircle1.applyMatrix = false;
        subraster.insertBelow(midcircle);
        TweenMax.to($(subraster), 0, {
            scaling: 0.35
        }, 0);

        var elem = ".next-page-inner .h2";
        if ($(elem).length) {
            var splitter = new SplitText(elem, {
                type: 'words, chars'
            });
        }
        var red = "#c02811";
        var black = "black";

        $(".midhover, .next-page-inner .h2").mouseenter(function() {
            var ease1 = Back.easeOut.config(2);
            var pj1 = new TimelineMax();
            pj1.to($(lcircle1), 0.5, {
                    scaling: 1.5,
                    ease: ease1
                }, 0)
                .to($(midcircle), 0.5, {
                    opacity: 1
                }, 0)
                .staggerTo($(splitter.chars), 0.5, {
                    color: red
                }, 0.05, 0)
        });
        $(".midhover, .next-page-inner .h2").mouseleave(function() {
            var ease1 = Back.easeOut.config(2);
            var pj1 = new TimelineMax();
            pj1.to($(lcircle1), 0.5, {
                    scaling: 1,
                    ease: ease1
                }, 0)
                .to($(midcircle), 0.5, {
                    opacity: 0
                }, 0)
                .staggerTo($(splitter.chars), 0.4, {
                    color: black
                }, 0.03, 0.3)
        });


        //Start things
        substart();

        function substart() {
            //to top
            var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
            path.add(new Point(widthmid, heightmid * 1.7));
            var semi = heightmid / 5;
            var semi2 = widthmid / 7;
            for (var i = 1; i < 7; i++) {
                var semiex = semi * i;
                var semiex2 = semi2 * i;
                var pos1 = widthmid + randomNumber(-70, 70) - semiex2;;
                var pos2 = semiex + randomNumber(30, 70) * plusOrMinus2;
                path.add(new Point(pos1, heightmid * 1.8 - pos2 - semi));
            }
            path.add(new Point(0, 200));
            //path.add(new Point(widthmid+(randomNumber(50, 150)*plusOrMinus), 0));

            //to bottom
            pathbottom.add(new Point(widthmid, heightmid * 1.7));
            var semi = heightmid * 1.7 / 6;

            for (var i = 0; i < 3; i++) {
                var semiex = semi * i;
                var pos1 = widthmid + randomNumber(-50, 50)
                var pos2 = semiex + randomNumber(-20, 20);
                pathbottom.add(new Point(pos1, heightmid * 1.65 + pos2 + semi));
            }
            endcircle.position = new Point(pathbottom.lastSegment.point);

            //Make a copy for the scrolling dash path
            var topclone = path.clone();
            topclone.strokeColor = $darkGrey;
            topclone.dashArray = [3, 3];

            flip = 1;
            for (var i = 1; i < 8; i++) {
                var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
                var flip = flip * -1;
                var ran = randomNumber(10, 30) * flip;
                var ran2 = randomNumber(10, 30) * plusOrMinus2;
                if (i != 0 && i != 7) {
                    var ntl = new TimelineMax();
                    ntl.to($(topclone.segments[i].point), 0, {
                        x: topclone.segments[i].point.x + ran,
                        y: topclone.segments[i].point.y + ran2,
                    }, 0)
                } else {}
            }

            //Make a copy for the scrolling dash path
            var bottomclone = pathbottom.clone();
            //bottomclone.add(new Point(widthmid+(randomNumber(50, 150)*plusOrMinus), height-100));

            bottomclone.strokeColor = $darkGrey;
            bottomclone.dashArray = [3, 3];

            flip = 1;
            for (var i = 1; i < 4; i++) {
                var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
                var flip = flip * -1;
                var ran = randomNumber(10, 30) * flip;
                var ran2 = randomNumber(10, 30) * plusOrMinus2;
                if (i != 0 && i != 3) {
                    var ntl = new TimelineMax();
                    ntl.to($(bottomclone.segments[i].point), 0, {
                        x: bottomclone.segments[i].point.x + ran,
                        y: bottomclone.segments[i].point.y + ran2,
                    }, 0)
                } else {}
            }

            //Liquid
            var paths = [path, pathbottom, topclone, bottomclone];

            var ar1 = [];
            var ar2 = [];
            var ar3 = [];
            var ar4 = [];
            var start = [ar1, ar2, ar3, ar4];

            paths.forEach(function(element, index) {
                for (var x = 0; x < element.segments.length; x++) {
                    start[index].push(new Point(element.segments[x].point))
                }
            })

            var tool = new Tool();
            tool.onMouseMove = function(event) {
                paths.forEach(function(element, index) {
                    for (var i = 1; i < element.segments.length - 1; i++) {
                        var tl = new TimelineMax();
                        if (start[index][i].getDistance(event.point) < 70) {
                            tl.to(element.segments[i].point, 0.5, {
                                x: event.point.x,
                                y: event.point.y
                            }, 0)
                        } else {
                            //console.log(start);
                            tl.to(element.segments[i].point, 0.5, {
                                x: start[index][i].x,
                                y: start[index][i].y
                            }, 0)
                        }
                    }
                })
            }
            //Liquid end

        } //substart end
    })
}


function sidepathcanvasProjects() {
    jQuery(function($) {

        $lightGrey = "#d5d5da";
        $darkGrey = "#9999a5";

        mypapers[5] = new paper.PaperScope();
        mypapers[5].setup($("#sidecanvas")[0]);
        paper = mypapers[5];

        var path = new paper.Path({
            strokeColor: $lightGrey,
            strokeWidth: 1
        });

        var path2 = new paper.Path({
            strokeColor: $lightGrey,
            strokeWidth: 1
        });

        //global vars
        var width = $(window).width()
        var height = $(window).height();
        var widthmid = $(window).width() / 2;
        var heightmid = $(window).height() / 2;
        var plusOrMinus = Math.random() < 0.5 ? -1 : 1;

        var semi = height / 6;
        var semi2 = width / 20;

        path.add(new Point(0, 150));
        for (var i = 2; i < 4; i++) {
            var semiex = semi * i;
            var semiex2 = semi2 * i;
            path.add(new Point(semiex2 + randomNumber(-30, 30), semiex + randomNumber(-30, 30)));
        }
        for (var i = 0; i < 3; i++) {
            x = 3 - i;
            y = 3;
            y++;
            var semiex = semi * y;
            var semiex2 = semi2 * x;
            path.add(new Point(semiex2 + randomNumber(-50, 50), semiex + randomNumber(-50, 50)));
        }
        path.add(new Point(0, height - 150));


        var topclone = path.clone();
        topclone.strokeColor = $darkGrey;
        topclone.dashArray = [3, 3];

        flip = 1;
        for (var i = 1; i < 6; i++) {
            var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
            var flip = flip * -1;
            var ran = randomNumber(10, 30) * flip;
            var ran2 = randomNumber(10, 30) * plusOrMinus2;
            if (i != 0 && i != 14) {
                var ntl = new TimelineMax();
                ntl.to($(topclone.segments[i].point), 0, {
                    x: topclone.segments[i].point.x + ran,
                    y: topclone.segments[i].point.y + ran2,
                }, 0)
            } else {}
        }

        //SECOND PATH
        path2.add(new Point(width * 0.7, height));
        for (var i = 1; i < 10; i++) {
            var semiex = height - (height * 0.1 * i);
            var semiex2 = (width * 0.05 * i) + width * 0.7;
            path2.add(new Point(semiex2 + randomNumber(-60, 60), semiex + randomNumber(-60, 60)));
        }

        var bottomclone = path2.clone();
        bottomclone.strokeColor = $darkGrey;
        bottomclone.dashArray = [3, 3];

        flip = 1;
        for (var i = 1; i < 10; i++) {
            var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
            var flip = flip * -1;
            var ran = randomNumber(10, 30) * flip;
            var ran2 = randomNumber(10, 30) * plusOrMinus2;
            if (i != 0 && i != 14) {
                var ntl = new TimelineMax();
                ntl.to($(bottomclone.segments[i].point), 0, {
                    x: bottomclone.segments[i].point.x + ran,
                    y: bottomclone.segments[i].point.y + ran2,
                }, 0)
            } else {}
        }

        //Liquid
        var paths = [path, topclone, path2, bottomclone];

        var ar1 = [];
        var ar2 = [];
        var ar3 = [];
        var ar4 = [];
        var start = [ar1, ar2, ar3, ar4];

        paths.forEach(function(element, index) {
            for (var x = 0; x < element.segments.length; x++) {
                start[index].push(new Point(element.segments[x].point))
            }
        })

        var tool = new Tool();
        tool.onMouseMove = function(event) {
            paths.forEach(function(element, index) {
                for (var i = 1; i < element.segments.length - 1; i++) {
                    var tl = new TimelineMax();
                    if (start[index][i].getDistance(event.point) < 70) {
                        tl.to(element.segments[i].point, 0.5, {
                            x: event.point.x,
                            y: event.point.y
                        }, 0)
                    } else {
                        //console.log(start);
                        tl.to(element.segments[i].point, 0.5, {
                            x: start[index][i].x,
                            y: start[index][i].y
                        }, 0)
                    }
                }
            })
        }
        //Liquid end

        //Hover

        $(".swiper-wrapper a").hover(over, out);

        function over() {
            TweenMax.staggerTo($(this).parent().find("h1 div"), 0.7, {
                color: "#c02811"
            }, 0.02, 0)
        }

        function out() {
            TweenMax.staggerTo($(this).parent().find("h1 div"), 0.7, {
                color: "black"
            }, 0.02, 0)
        }


    }) //jqeury end
}

function sidepathcanvasSingles() {
    jQuery(function($) {

        $lightGrey = "#d5d5da";
        $darkGrey = "#9999a5";

        mypapers[5] = new paper.PaperScope();
        mypapers[5].setup($("#sidecanvas")[0]);
        paper = mypapers[5];

        var path = new paper.Path({
            strokeColor: $lightGrey,
            strokeWidth: 1
        });

        var path2 = new paper.Path({
            strokeColor: $lightGrey,
            strokeWidth: 1
        });

        //global vars
        var width = $(window).width()
        var height = $(window).height();
        var widthmid = $(window).width() / 2;
        var heightmid = $(window).height() / 2;
        var plusOrMinus = Math.random() < 0.5 ? -1 : 1;

        var semi = height / 6;
        var semi2 = width / 20;

        path.add(new Point(0, 150));
        for (var i = 2; i < 4; i++) {
            var semiex = semi * i;
            var semiex2 = semi2 * i;
            path.add(new Point(semiex2 + randomNumber(-30, 30), semiex + randomNumber(-30, 30)));
        }
        for (var i = 0; i < 3; i++) {
            x = 3 - i;
            y = 3;
            y++;
            var semiex = semi * y;
            var semiex2 = semi2 * x;
            path.add(new Point(semiex2 + randomNumber(-50, 50), semiex + randomNumber(-50, 50)));
        }
        path.add(new Point(0, height - 150));


        var topclone = path.clone();
        topclone.strokeColor = $darkGrey;
        topclone.dashArray = [3, 3];

        flip = 1;
        for (var i = 1; i < 6; i++) {
            var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
            var flip = flip * -1;
            var ran = randomNumber(10, 30) * flip;
            var ran2 = randomNumber(10, 30) * plusOrMinus2;
            if (i != 0 && i != 14) {
                var ntl = new TimelineMax();
                ntl.to($(topclone.segments[i].point), 0, {
                    x: topclone.segments[i].point.x + ran,
                    y: topclone.segments[i].point.y + ran2,
                }, 0)
            } else {}
        }

        //SECOND PATH
        path2.add(new Point(width, 0));
        for (var i = 1; i < 4; i++) {
            var semiex = semi * i * 0.5;
            var semiex2 = semi2 * i;
            path2.add(new Point(width - semiex2 + randomNumber(-30, 30), semiex + randomNumber(-30, 30)));
        }
        for (var i = 0; i < 3; i++) {
            x = 3 - i;
            y = 3;
            y++;
            var semiex = semi * y * 0.5;
            var semiex2 = semi2 * x;
            path2.add(new Point(width - semiex2 + randomNumber(-50, 50), semiex + randomNumber(-50, 50)));
        }
        path2.add(new Point(width, height - 300));

        var bottomclone = path2.clone();
        bottomclone.strokeColor = $darkGrey;
        bottomclone.dashArray = [3, 3];

        flip = 1;
        for (var i = 1; i < 6; i++) {
            var plusOrMinus2 = Math.random() < 0.5 ? -1 : 1;
            var flip = flip * -1;
            var ran = randomNumber(10, 30) * flip;
            var ran2 = randomNumber(10, 30) * plusOrMinus2;
            if (i != 0 && i != 14) {
                var ntl = new TimelineMax();
                ntl.to($(bottomclone.segments[i].point), 0, {
                    x: bottomclone.segments[i].point.x + ran,
                    y: bottomclone.segments[i].point.y + ran2,
                }, 0)
            } else {}
        }

        //Liquid
        var paths = [path, topclone, path2, bottomclone];

        var ar1 = [];
        var ar2 = [];
        var ar3 = [];
        var ar4 = [];
        var start = [ar1, ar2, ar3, ar4];

        paths.forEach(function(element, index) {
            for (var x = 0; x < element.segments.length; x++) {
                start[index].push(new Point(element.segments[x].point))
            }
        })

        var tool = new Tool();
        tool.onMouseMove = function(event) {
            paths.forEach(function(element, index) {
                for (var i = 1; i < element.segments.length - 1; i++) {
                    var tl = new TimelineMax();
                    if (start[index][i].getDistance(event.point) < 70) {
                        tl.to(element.segments[i].point, 0.5, {
                            x: event.point.x,
                            y: event.point.y
                        }, 0)
                    } else {
                        //console.log(start);
                        tl.to(element.segments[i].point, 0.5, {
                            x: start[index][i].x,
                            y: start[index][i].y
                        }, 0)
                    }
                }
            })
        }
        //Liquid end



    }) //jqeury end
}


// (>ಠ_ಠ)>
//
// Menu registration & animations
//-----------------
//

function menuanime() {
    jQuery(function($) {

        var red = "#c02811";
        var black = "black";
        var white = "white";
        var gray = "#77758b";

        //Hovers for links
        hoverlinks("header .back-link", red, black)
        hoverlinks(".line-mask .back-link", red, white)
        hoverlinks(".project-intro-link a", gray, white)
        hoverlinks(".next-page-inner .back-link", black, red)
        hoverlinks(".project-next .link-wrap strong", gray, white)

        function hoverlinks(elem, c1, c2) {
            if ($(elem).length) {
                var splitter = new SplitText(elem, {
                    type: 'words, chars'
                });
                $(elem).mouseenter(function() {
                    var me = new TimelineMax();
                    me.staggerTo($(splitter.chars), 0.4, {
                        color: c1
                    }, 0.03, 0)
                });
                // When the mouse leaves the item, set its fill color to black:
                $(elem).mouseleave(function() {
                    var me = new TimelineMax();
                    me.staggerTo($(splitter.chars), 0.4, {
                        color: c2
                    }, 0.03, 0.3)
                })
            }
        }


        arrowhover(".swipe-next", 3)
        arrowhover(".swipe-prev", -3)

        function arrowhover(elem, value) {
            if ($(elem).length) {
                $(elem).parent().mouseenter(function() {
                    var me = new TimelineMax();
                    me.staggerTo($(elem), 0.1, {
                        x: value,
                        ease: Power1.EaseOut
                    }, 0)
                });
                // When the mouse leaves the item, set its fill color to black:
                $(elem).parent().mouseleave(function() {
                    var me = new TimelineMax();
                    me.staggerTo($(elem), 0.1, {
                        x: 0
                    }, 0)
                })
            }
        }



        mypapers[1] = new paper.PaperScope();
        mypapers[1].setup($("#menucanvas")[0]);
        paper = mypapers[1];

        //global vars
        var width = $(window).width()
        var height = $(window).height();
        var winwidth = $(window).width() / 2;
        var winheight = $(window).height() / 2;

        //Dark background for canvas fade in
        var rectangle = new Rectangle([0, 0], [width, height]);
        var rect = new Path.Rectangle(rectangle);
        rect.style = {
            fillColor: '#080826',
        };
        TweenMax.to($(rect), 0, {
            opacity: 0
        }, 0)

        //Splitting up menu elements
        var charmenu = new SplitText('.primary-menu a', {
            type: 'words, chars, lines',
            charsClass: 'charmenu'
        });
        var cn = new SplitText('.creativenights', {
            type: 'words, chars'
        });


        //Elements pre-anime
        TweenMax.to($(".i1,.i2,.i3,.i4,.i5"), 0, {
            x: winwidth,
            y: winheight
        }, 0)

        //Menubutton hover anime
        $(".menubutton").hover(over, out);

        function over() {
            TweenMax.to($(".buttonbg"), 1, {
                rotation: 25
            })
        }

        function out() {
            TweenMax.to($(".buttonbg"), 0.5, {
                rotation: 0
            })
        }



        //(>ಠ_ಠ)>
        //
        // Menu vars
        //-----------------
        //

        //circles
        var myCircle = new paper.Path.Circle(
            new Point(winwidth - 5, winheight - 5), 10);
        myCircle.strokeColor = 'white';
        myCircle.fillColor = '#080826';
        var myCircle2 = new paper.Path.Circle(
            new Point(winwidth - 5, winheight - 5), 10);
        myCircle2.strokeColor = 'white';
        myCircle2.fillColor = '#080826';

        var myCircle3 = new paper.Path.Circle(
            new Point(winwidth - 5, winheight - 5), 10);
        myCircle3.strokeColor = 'white';
        myCircle3.fillColor = '#080826';

        var myCircle4 = new paper.Path.Circle(
            new Point(winwidth - 5, winheight - 5), 10);
        myCircle4.strokeColor = 'white';
        myCircle4.fillColor = '#080826';

        var myCircle5 = new paper.Path.Circle(
            new Point(winwidth - 5, winheight - 5), 10);
        myCircle5.strokeColor = 'white';
        myCircle5.fillColor = '#080826';

        TweenMax.to($(myCircle), 0, {
            opacity: 0
        });
        TweenMax.to($(myCircle2), 0, {
            opacity: 0
        });
        TweenMax.to($(myCircle3), 0, {
            opacity: 0
        });
        TweenMax.to($(myCircle4), 0, {
            opacity: 0
        });
        TweenMax.to($(myCircle5), 0, {
            opacity: 0
        });

        //Paths
        var menupath = new paper.Path({
            strokeColor: 'white',
            strokeWidth: 1,
        });

        var backmenupath = new paper.Path({
            strokeColor: 'grey',
            strokeWidth: 1,
        });

        var menupath1 = new paper.Point(myCircle.position);
        for (var i = 0; i < 10; i++) {
            menupath.add(menupath1);
        }
        menupath.dashArray = [3, 3];
        menupath.closed = true;
        menupath.insertBelow(myCircle);

        var backmenupath1 = new paper.Point(myCircle.position);
        for (var i = 0; i < 10; i++) {
            backmenupath.add(menupath1);
        }
        backmenupath.closed = true;
        backmenupath.insertBelow(myCircle);


        //(>ಠ_ಠ)>
        //
        // Menu elements position
        //-----------------
        //

        var cirpos1x = myCircle.position.x - 160;
        var cirpos1y = myCircle.position.y - 210;

        var cirpos2x = myCircle2.position.x + 140;
        var cirpos2y = myCircle2.position.y - 220;

        var cirpos3x = myCircle3.position.x + 235;
        var cirpos3y = myCircle3.position.y + 75;

        var cirpos4x = myCircle4.position.x + 10;
        var cirpos4y = myCircle4.position.y + 250;

        var cirpos5x = myCircle5.position.x - 240;
        var cirpos5y = myCircle5.position.y + 80;


        //(>ಠ_ಠ)>
        //
        // Menu extra classes
        //-----------------
        //

        var current = $(".current-menu-item a").attr("data-link");
        if (current == "philosophy") {
            $(".i1").addClass("current-img-item");
        }
        if (current == "projects") {
            $(".i2").addClass("current-img-item");
        }
        if (current == "team") {
            $(".i3").addClass("current-img-item");
        }
        if (current == "@hi_sioul") {
            $(".i4").addClass("current-img-item");
        }
        if (current == "contact") {
            $(".i5").addClass("current-img-item");
        }


        //(>ಠ_ಠ)>
        //
        // Menu main animation
        //-----------------
        //
        ww = $(window).width()

        var t = new TimelineMax({
            onComplete: menuflag
        });
        t.to($(rect), 0.3, {
                opacity: 1
            }, 0)
            .to($(".canvaswrapper"), 0, {
                zIndex: 9
            }, 0)
            .to($(".nav-wrap"), 1, {
                zIndex: 99,
                x: ww,
                pointerEvents: "all"
            }, 0)
            .to($(".nav-cover"), 1, {
                x: -ww
            }, 0)
            .to($('.whitedot'), 0.5, {
                opacity: 0
            }, 0)
            .to($('.menuimage'), 0, {
                display: "block"
            }, 0)
            .to($('.sidearrows'), 0.5, {
                opacity: 0
            }, 0)
            .to($(".logo"), 0.1, {
                color: "white",
                zindex: 20
            }, 0)

            .to($(myCircle), 0.3, {
                opacity: 1
            }, 0)
            .to($(myCircle2), 0.3, {
                opacity: 1
            }, 0)
            .to($(myCircle3), 0.3, {
                opacity: 1
            }, 0)
            .to($(myCircle4), 0.3, {
                opacity: 1
            }, 0)
            .to($(myCircle5), 0.3, {
                opacity: 1
            }, 0)

            .to($(myCircle.position), 1, {
                x: cirpos1x,
                y: cirpos1y,
                ease: Back.easeOut
            }, 0)
            .to($(menupath.segments[0].point), 1, {
                x: cirpos1x,
                y: cirpos1y,
                ease: Back.easeOut
            }, 0)
            .to($(menupath.segments[1].point), 1, {
                x: cirpos1x + 200,
                y: cirpos1y - 30,
                ease: Back.easeOut
            }, 0.03)

            .to(myCircle2.position, 1, {
                x: cirpos2x,
                y: cirpos2y,
                ease: Back.easeOut
            }, 0.05)
            .to(menupath.segments[2].point, 1, {
                x: cirpos2x,
                y: cirpos2y,
                ease: Back.easeOut
            }, 0.05)
            .to(menupath.segments[3].point, 1, {
                x: cirpos2x + 80,
                y: cirpos2y + 110,
                ease: Back.easeOut
            }, 0.07)

            .to(myCircle3.position, 1, {
                x: cirpos3x,
                y: cirpos3y,
                ease: Back.easeOut
            }, 0.1)
            .to(menupath.segments[4].point, 1, {
                x: cirpos3x,
                y: cirpos3y,
                ease: Back.easeOut
            }, 0.1)
            .to(menupath.segments[5].point, 1, {
                x: cirpos3x - 50,
                y: cirpos3y + 60,
                ease: Back.easeOut
            }, 0.12)

            .to(myCircle4.position, 1, {
                x: cirpos4x,
                y: cirpos4y,
                ease: Back.easeOut
            }, 0.15)
            .to(menupath.segments[6].point, 1, {
                x: cirpos4x,
                y: cirpos4y,
                ease: Back.easeOut
            }, 0.15)
            .to(menupath.segments[7].point, 1, {
                x: cirpos4x - 180,
                y: cirpos4y - 50,
                ease: Back.easeOut
            }, 0.18)

            .to(myCircle5.position, 1, {
                x: cirpos5x,
                y: cirpos5y,
                ease: Back.easeOut
            }, 0.2)
            .to(menupath.segments[8].point, 1, {
                x: cirpos5x,
                y: cirpos5y,
                ease: Back.easeOut
            }, 0.2)
            .to(menupath.segments[9].point, 1, {
                x: cirpos5x + 5,
                y: cirpos5y - 180,
                ease: Back.easeOut
            }, 0.23)

            .to($(backmenupath.segments[0].point), 1, {
                x: cirpos1x,
                y: cirpos1y,
                ease: Back.easeOut
            }, 0.01)
            .to($(backmenupath.segments[1].point), 1, {
                x: cirpos1x + 90,
                y: cirpos1y - 35,
                ease: Back.easeOut
            }, 0.04)
            .to(backmenupath.segments[2].point, 1, {
                x: cirpos2x,
                y: cirpos2y,
                ease: Back.easeOut
            }, 0.06)
            .to(backmenupath.segments[3].point, 1, {
                x: cirpos2x + 100,
                y: cirpos2y + 160,
                ease: Back.easeOut
            }, 0.08)
            .to(backmenupath.segments[4].point, 1, {
                x: cirpos3x,
                y: cirpos3y,
                ease: Back.easeOut
            }, 0.11)
            .to(backmenupath.segments[5].point, 1, {
                x: cirpos3x - 25,
                y: cirpos3y + 80,
                ease: Back.easeOut
            }, 0.13)
            .to(backmenupath.segments[6].point, 1, {
                x: cirpos4x,
                y: cirpos4y,
                ease: Back.easeOut
            }, 0.16)
            .to(backmenupath.segments[7].point, 1, {
                x: cirpos4x - 190,
                y: cirpos4y - 40,
                ease: Back.easeOut
            }, 0.20)
            .to(backmenupath.segments[8].point, 1, {
                x: cirpos5x,
                y: cirpos5y,
                ease: Back.easeOut
            }, 0.22)
            .to(backmenupath.segments[9].point, 1, {
                x: cirpos5x + 10,
                y: cirpos5y - 160,
                ease: Back.easeOut
            }, 0.25)

            .to($(".i1"), 1, {
                x: cirpos1x,
                y: cirpos1y,
                ease: Back.easeOut
            }, 0)
            .to($(".i2"), 1, {
                x: cirpos2x,
                y: cirpos2y,
                ease: Back.easeOut
            }, 0.05)
            .to($(".i3"), 1, {
                x: cirpos3x,
                y: cirpos3y,
                ease: Back.easeOut
            }, 0.1)
            .to($(".i4"), 1, {
                x: cirpos4x,
                y: cirpos4y,
                ease: Back.easeOut
            }, 0.15)
            .to($(".i5"), 1, {
                x: cirpos5x,
                y: cirpos5y,
                ease: Back.easeOut
            }, 0.2)

            .to($(".current-img-item .centerimage"), 0.5, {
                width: "50%",
                height: "50%",
                opacity: 1,
                ease: Back.easeOut
            }, 0.2)
            .to($(".current-img-item .whitecenter"), 0.5, {
                width: 10,
                height: 10,
                opacity: 1,
                ease: Back.easeOut
            }, 0.2)
            .to($(".creativenights"), 0, {
                opacity: 1,
                pointerEvents: "all"
            }, 0)
            .staggerFrom($(cn.chars), 0.5, {
                x: 5,
                opacity: 0
            }, 0.04, 0)
            .to($(".blogcat"), 0, {
                className: "+=blogsvg"
            }, 0.2)
            .add(liquidmenu)

        $(charmenu.lines).each(function(index) {
            t.staggerFrom($(this).find('.charmenu'), 0.7, {
                x: 5,
                opacity: 0
            }, 0.05, index * 0.1)
        });

        t.reversed(true);


        //(>ಠ_ಠ)>
        //
        // Menu button click
        //-----------------
        //

        var menuflag = false;

        $('.menubutton').click(function(e) {
            t.reversed() ? t.play() : t.reverse();
            menuflag = false;
        });

        function reverse() {
            t.reversed() ? t.play() : t.reverse();
        }

        function menuflag() {
            menuflag = true;
        }

        function reversed() {
            console.log("reversed")
        }

        function liquidmenu() {
            paper = mypapers[1];

            var start = [];
            for (var i = 0; i < menupath.segments.length; i++) {
                start.push(new Point(menupath.segments[i].point))
            }

            var start2 = [];
            for (var i = 0; i < backmenupath.segments.length; i++) {
                start2.push(new Point(backmenupath.segments[i].point))
            }

            var cirs = [myCircle, myCircle2, myCircle3, myCircle4, myCircle5]
            var cirp = [];
            for (var i = 0; i < cirs.length; i++) {
                cirp.push(new Point(cirs[i].position))
            }

            var tool = new Tool();
            tool.onMouseMove = function(event) {
                if (menuflag) {
                    for (var i = 0; i < menupath.segments.length; i++) {
                        var tl = new TimelineMax();
                        if (start[i].getDistance(event.point) < 70) {
                            tl.to(menupath.segments[i].point, 0.5, {
                                x: event.point.x,
                                y: event.point.y
                            }, 0)
                        } else {
                            //console.log(start);
                            tl.to(menupath.segments[i].point, 0.5, {
                                x: start[i].x,
                                y: start[i].y
                            }, 0)
                        }
                    }

                    for (var i = 0; i < backmenupath.segments.length; i++) {
                        var tl = new TimelineMax();
                        if (start2[i].getDistance(event.point) < 70) {
                            tl.to(backmenupath.segments[i].point, 0.5, {
                                x: event.point.x,
                                y: event.point.y
                            }, 0)
                        } else {
                            //console.log(start);
                            tl.to(backmenupath.segments[i].point, 0.5, {
                                x: start2[i].x,
                                y: start2[i].y
                            }, 0)
                        }
                    }

                    for (var i = 0; i < 5; i++) {
                        var tl = new TimelineMax();
                        if (cirp[i].getDistance(event.point) < 70) {
                            tl.to(cirs[i].position, 0.5, {
                                x: event.point.x,
                                y: event.point.y
                            }, 0)
                        } else {
                            tl.to(cirs[i].position, 0.5, {
                                x: cirp[i].x,
                                y: cirp[i].y
                            }, 0)
                        }
                    }

                    paper.view.onFrame = function(event) {
                        TweenMax.to(".i1", 0, {
                            x: menupath.segments[0].point.x,
                            y: menupath.segments[0].point.y
                        });
                        TweenMax.to(".i2", 0, {
                            x: menupath.segments[2].point.x,
                            y: menupath.segments[2].point.y
                        });
                        TweenMax.to(".i3", 0, {
                            x: menupath.segments[4].point.x,
                            y: menupath.segments[4].point.y
                        });
                        TweenMax.to(".i4", 0, {
                            x: menupath.segments[6].point.x,
                            y: menupath.segments[6].point.y
                        });
                        TweenMax.to(".i5", 0, {
                            x: menupath.segments[8].point.x,
                            y: menupath.segments[8].point.y
                        });
                    }
                }
            }
        }


        //(>ಠ_ಠ)>
        //
        // Menu hovers
        //-----------------
        //

        //Menu text hovers
        hov("philosophy", ".i1");
        hov("projects", ".i2");
        hov("team", ".i3");
        hov("@hi_sioul", ".i4");
        hov("contact", ".i5");

        function hov(el1, el2) {
            $("[data-link='" + el1 + "']").hover(over, out);

            function over() {
                TweenMax.to($(el2).find(".centerimage"), 0.7, {
                    width: "100%",
                    height: "100%",
                    opacity: 1
                })
                TweenMax.to($(el2).find(".whitecenter"), 0.7, {
                    width: 21,
                    height: 21,
                    opacity: 1
                }, 0.2)
            }

            function out() {
                if ($(el2).hasClass("current-img-item")) {
                    TweenMax.to($(el2).find(".centerimage"), 0.7, {
                        width: "50%",
                        height: "50%",
                        opacity: 1
                    })
                    TweenMax.to($(el2).find(".whitecenter"), 0.7, {
                        width: 10,
                        height: 10,
                        opacity: 1
                    }, 0.2)
                } else {
                    TweenMax.to($(el2).find(".centerimage"), 0.7, {
                        width: "50%",
                        height: "50%",
                        opacity: 0
                    })
                    TweenMax.to($(el2).find(".whitecenter"), 0.7, {
                        width: 10,
                        height: 10,
                        opacity: 0
                    }, 0.2)
                }
            }
        }

        $("#menu-main-menu li").hover(overx, outx);

        function overx() {
            $(this).parent().find("li").each(function(index) {
                var tlx = new TimelineMax();
                tlx.staggerTo($(this).find('.charmenu'), 0.7, {
                    color: gray
                }, 0.05, 0)
            });
            var tlxx = new TimelineMax();
            tlxx.staggerTo($(this).find('.charmenu'), 0.7, {
                color: white
            }, 0.05, 0)

        }

        function outx() {
            $(this).parent().find("li").each(function(index) {
                var tlx = new TimelineMax();
                tlx.staggerTo($(this).find('.charmenu'), 0.7, {
                    color: white
                }, 0.05, 0)
            });
        }

        //Menu circle hovers
        innerhov("philosophy", ".i1");
        innerhov("projects", ".i2");
        innerhov("team", ".i3");
        innerhov("@hi_sioul", ".i4");
        innerhov("contact", ".i5");

        function innerhov(el1, el2) {
            $(el2).hover(over, out);

            function over() {

                $("[data-link='" + el1 + "']").parent().parent().find("li").each(function(index) {
                    var tlx = new TimelineMax();
                    tlx.staggerTo($(this).find('.charmenu'), 0.7, {
                        color: gray
                    }, 0.05, 0)
                });
                var tlxx = new TimelineMax();
                tlxx.staggerTo($("[data-link='" + el1 + "']").find('.charmenu'), 0.7, {
                    color: white
                }, 0.05, 0)



                $("#menu-main-menu").addClass("ringhov");
                $("[data-link='" + el1 + "']").parent().addClass("hov");
                $("[data-link='" + el1 + "']").addClass("hov");
                $(".menubox").addClass("hov");
                TweenMax.to($(el2).find(".centerimage"), 0.7, {
                    width: "100%",
                    height: "100%",
                    opacity: 1
                })
                TweenMax.to($(el2).find(".whitecenter"), 0.7, {
                    width: 21,
                    height: 21,
                    opacity: 1
                }, 0.2)
            }

            function out() {

                $(this).parent().parent().find("li").each(function(index) {
                    var tlx = new TimelineMax();
                    tlx.staggerTo($(this).find('.charmenu'), 0.7, {
                        color: white
                    }, 0.05, 0)
                });

                $("#menu-main-menu").removeClass("ringhov");
                $("[data-link='" + el1 + "']").removeClass("hov");
                $("[data-link='" + el1 + "']").parent().removeClass("hov");
                $(".menubox").removeClass("hov");
                if ($(el2).hasClass("current-img-item")) {
                    TweenMax.to($(el2).find(".centerimage"), 0.7, {
                        width: "50%",
                        height: "50%",
                        opacity: 1
                    })
                    TweenMax.to($(el2).find(".whitecenter"), 0.7, {
                        width: 10,
                        height: 10,
                        opacity: 1
                    }, 0.2)
                } else {
                    TweenMax.to($(el2).find(".centerimage"), 0.7, {
                        width: "50%",
                        height: "50%",
                        opacity: 0
                    })
                    TweenMax.to($(el2).find(".whitecenter"), 0.7, {
                        width: 10,
                        height: 10,
                        opacity: 0
                    }, 0.2)
                }
            }
        }

        //(/ಠ_ಠ)/
        //
        // Menu cursor animations // liquid effects
        //-----------------
        //


    }); //jQuery end
} //MENU END

// (>ಠ_ಠ)>
//
// Red path
//-----------------
//
function redpath() {
    jQuery(function($) {
        //Set up canvas + tool
        mypapers[3] = new paper.PaperScope();
        mypapers[3].setup($("#redcanvas")[0]);
        paper = mypapers[3];



    }); //jquery end
} //redpath end

//(/ಠ_ಠ)/
//
// Transition functions
//-----------------
//

transition()

function transition() {
    jQuery(function($) {




    });
}




//(/ಠ_ಠ)/
//
// Helper functions
//-----------------
//

function randomNumber(min, max) {
    return Math.floor(Math.random() * (1 + max - min) + min);
}


// (>'-')>
//
// Global 
//-----------------
//
function animations() {
    jQuery(function($) {

        function animateOver(element) {
            var tl = new TimelineLite();
            //tl.to(element, 0.25, {scale:1.1})
            //.to($(element).find(".menu-opener"), 0.25, {border:"1px solid red"},0)
            return tl;
        }

        $(".menubutton").hover(over, out);

        function over() {
            //check if this item has an animation
            if (!this.animation) {
                //if not, create one
                this.animation = animateOver(this);
            } else {
                //or else play it
                this.animation.play().timeScale(1);
            }
        }

        function out() {
            //reverse animation 4 times normal speed
            this.animation.reverse().timeScale(1);
        }

        var wh = $(window).height(),
            ww = $(window).width();


        var mX, mY, distance,
            $element = $('.menupoint');

        var xo = $('.menupoint').offset().left;
        var yo = $('.menupoint').offset().top - pageYOffset;

        TweenMax.to($('.menubutton'), 0, {
            x: xo,
            y: yo,
            position: "fixed"
        }, 0)
        TweenMax.to($('.menubutton'), 0.5, {
            opacity: 1
        }, 0)

        function calculateDistance(elem, mouseX, mouseY) {
            return Math.floor(Math.sqrt(Math.pow(mouseX - (elem.offset().left + (elem.width() / 2)), 2) + Math.pow(mouseY - (elem.offset().top + (elem.height() / 2)), 2)));
        }


        $(document).mousemove(function(e) {
            if (Modernizr.mq('all and (min-width: 960px)')) {
                mX = e.pageX;
                mY = e.pageY - pageYOffset;
                distance = calculateDistance($element, mX, mY + pageYOffset);
                if (distance < 100) {
                    TweenMax.to($('.menubutton'), 0.5, {
                        x: mX - 25,
                        y: mY - 25,
                        ease: Power1.easeOut
                    }, 0)
                } else {
                    TweenMax.to($('.menubutton'), 0.5, {
                        x: xo,
                        y: yo,
                        ease: Power1.easeOut
                    }, 0)
                }
            }
        });





    }); // jquery end
}


// (>'-')>
//
// Main launchers 
//-----------------
//

var xx;
var ease1 = Power2.easeIn;

function loadin(col) {
    jQuery(function($) {
        var ww = $(window).width();
        xx = randomNumber(1, 10);

        if (col == "black") {
            var color = "#080826";
        } else {
            var color = "#f9f9f9";
        }

        var tx = new TimelineMax();
        tx.to($('.transitioncover'), 1, {
                x: ww,
                ease: Power2.easeIn
            }, 0)
            .to($('.transitionbox'), 0, {
                backgroundColor: color
            }, 0)
            .to($('.transitionbox'), 1, {
                x: ww * -1,
                ease: Power2.easeIn
            }, 0)
            .to($('.l' + xx), 0, {
                display: "block"
            }, 0)
            .fromTo($('#Layer_1 path'), 3, {
                drawSVG: "0%"
            }, {
                drawSVG: "100%"
            }, 2)
    }) // jq end 
}

function loadout() {
    jQuery(function($) {
        var ww = $(window).width();
        var tx = new TimelineMax();
        // tx.to($('.transitioncover'), 1.5, {x:ww*2, ease:ease1},0)
        //   .to($('.transitioncover'), 0, {x:ww*-1},1.5)
        //   .to($('.transitionbox'), 1.5, {x:ww*-2, ease:ease1},0)
        //   .to($('.transitionbox'), 0, {x:ww},1)
        //   .to($('.l'+xx), 0, {display:"none"},1.5)
        tx.to($(".transitioncover"), 1.5, {
                opacity: "0"
            }, 0)
            .to($(".transitioncover"), 0, {
                opacity: "1",
                x: ww * -1
            }, 1.5)

            .to($('.transitionbox'), 0, {
                x: ww
            }, 1.5)
            .to($('.l' + xx), 0, {
                display: "none"
            }, 1.5)

    }); // jq end 
}

function animeselector() {
    jQuery(function($) {
        if ($('#content').hasClass('page-founder')) {
            contactHeader();
            nextPageType();
            // contactTextFirst();
            // contactTextSecond();
            // contactTextThird();
            //nextPageType()
        } else if ($('#content').hasClass('page-contact')) {
            contactHeader();
            nextPageType();
        } else if ($('#content').hasClass('page-projects')) {
            projectsHeader();
        } else if ($('#content').hasClass('page-philosophy')) {
            philoHeader();
        } else if ($('#content').hasClass('single-project')) {
            singleHeader();
            nextPageType();
        }
    }); // jq end 
}


// (>'-')>
//
// Page specific 
//-----------------
//

var ease1 = Power2.easeInOut;
var ease2 = Back.easeOut.config(2)

//Contact page


function contactHeader() {
    jQuery(function($) {

        var split_0 = new SplitText(".hero-content p", {
            type: "lines, words, chars",
            charsClass: 'words'
        });
        var split_01 = new SplitText(".hero-content h1", {
            type: "words,lines, chars"
        });
        $(".words").each(function() {
            $(this).wrapInner("<div class='hider'></div>")
        })

        var imglength = $(".hero-image").width();
        var c = new TimelineLite({
            delay: 1
        });
        c.to(".hero-content", 0, {
                opacity: 1
            }, 0)
            .staggerFrom($(split_01.chars), 1, {
                y: 5,
                opacity: 0,
                ease: ease1
            }, 0.1, 0)
            .to($(".hero-background"), 0, {
                opacity: 1
            }, 0)
            .from($(".hero-background"), 1, {
                width: 0,
                ease: ease1
            }, 0)
            .from($(".hero-image"), 1, {
                x: -50,
                ease: ease1
            }, 0.1)
            .to($(".hero-image .hero-inner"), 1, {
                x: imglength,
                ease: ease1
            }, 0.1)

        $(split_0.lines).each(function(i) {
            c.staggerFrom($(this).find(".words"), 1, {
                y: 15,
                opacity: 0,
                ease: ease1
            }, 0.05, 0)
        })


    }) // jq end 
}

function projectsHeader() {
    jQuery(function($) {
        var split_0 = new SplitText(".projects-header h1", {
            type: "lines, words, chars",
            charsClass: 'words'
        });
        var split_1 = new SplitText(".slide h1", {
            type: "words, chars"
        });

        var iw = $(".img-wrap").width();
        var ih = $(".img-wrap").height();
        $(".img-wrap .thumb-holder").css("width", iw);
        $(".img-wrap .thumb-holder").css("height", ih);
        var c = new TimelineLite({
            delay: 1
        });
        c.staggerTo($(".img-wrap"), 0, {
                opacity: 1
            }, 0.2, 0)
            .staggerFrom($(".img-wrap"), 1, {
                x: -200,
                width: 0
            }, 0.2, 0)
            .to($(".slide h1"), 0, {
                opacity: 1
            }, 0)
            .staggerFrom($(split_1.chars), 0.5, {
                y: 5,
                opacity: 0
            }, 0.05, 0)

        $(split_0.lines).each(function(i) {
            c.staggerFrom($(this).find(".words"), 1, {
                y: 15,
                opacity: 0,
                ease: ease1
            }, 0.05, 0)
        })

        $(".swiper-slide a").mouseenter(function() {
            var me = new TimelineMax();
            // me.staggerTo($(split_1.chars),0.4,{color:"#c02811"},0.03,0)
            //   .staggerTo($(split_1.chars),0.4,{color:"black"},0.03,0.3)
            me.to($(this).parent().find(".thumb-video-inner"), 0.5, {
                scale: 1.2
            }, 0)
        });
        $(".swiper-slide a").mouseleave(function() {
            var me = new TimelineMax();
            me.to($(this).parent().find(".thumb-video-inner"), 0.5, {
                scale: 1
            }, 0)
        })

    }) // jq end 
}

function philoHeader() {
    jQuery(function($) {

        var split_0 = new SplitText(".hero-content p", {
            type: "lines, words, chars",
            charsClass: 'words'
        });
        var split_01 = new SplitText(".hero-content h1", {
            type: "words,lines, chars"
        });
        var split_02 = new SplitText(".philosophy-intro > p", {
            tyle: "lines, words,chars "
        });
        var split_03 = new SplitText(".scroll-down", {
            tyle: "lines, words,chars "
        });

        var c = new TimelineLite({
            delay: 1
        });
        c.to(".hero-content", 0, {
                opacity: 1
            }, 0)
            .to(".philosophy-intro > p", 0, {
                opacity: 1
            }, 0)
            .to(".scroll-down", 0, {
                opacity: 1
            }, 0)
            .staggerFrom($(split_01.chars), 1, {
                y: 5,
                opacity: 0,
                ease: ease1
            }, 0.05, 0)
            .staggerFrom($(split_02.lines), 1, {
                y: 10,
                opacity: 0,
                ease: ease1
            }, 0.05, 0.5)
            .staggerFrom($(split_03.chars), 1, {
                y: 7,
                opacity: 0,
                ease: ease1
            }, 0.02, 0.7)

        $(split_0.lines).each(function(i) {
            c.staggerFrom($(this).find(".words"), 1, {
                y: 15,
                opacity: 0,
                ease: ease1
            }, 0.05, 0)
        })

    }) // jq end 
}

function singleHeader() {
    jQuery(function($) {


        var split_0 = new SplitText(".project-header h1", {
            type: "lines, words, chars",
            charsClass: 'words'
        });
        var split_01 = new SplitText(".principles p", {
            type: "words,lines, chars"
        });
        var split_02 = new SplitText(".project-header .case-study", {
            type: "words, chars"
        });

        var c = new TimelineLite({
            delay: 1
        });
        c.to(".project-header", 0, {
                opacity: 1
            }, 0)
            .staggerFrom($(split_02.chars), 1, {
                y: 5,
                opacity: 0,
                ease: ease1
            }, 0.05, 0)
            .staggerFrom($(split_01.lines), 1, {
                y: 15,
                opacity: 0,
                ease: ease1
            }, 0.05, 0)

        $(split_0.lines).each(function(i) {
            c.staggerFrom($(this).find(".words"), 1, {
                y: 15,
                opacity: 0,
                ease: ease1
            }, 0.05, 0)
        })

    }) // jq end 
}







function contactTextFirst() {
    jQuery(function($) {
        var split_1 = new SplitText(".intro-text p", {
            type: "lines, words, chars"
        });

        var controller = new ScrollMagic.Controller();

        var s = new TimelineLite();
        s.from($(".trigger1 .person-image"), 1, {
                scale: 0.8,
                ease: ease2
            }, 0)
            .staggerFrom($(split_1.lines), 0.5, {
                y: 10,
                ease: ease1
            }, 0.05, 0)
            .from($(".intro-text"), 1, {
                y: 30
            }, 0)

        var scene = new ScrollMagic.Scene({
                triggerElement: ".intro-text",
                reverse: false,
                offset: -400,
            })

            .setTween(s)
            .addTo(controller);
    }) // jq end 
}


function contactTextSecond() {
    jQuery(function($) {
        var split_2 = new SplitText(".trigger1 .person-bio p", {
            type: "lines, words"
        });
        var split_3 = new SplitText(".trigger1 .person-name", {
            type: "lines, words"
        });

        var controller = new ScrollMagic.Controller();

        var s2 = new TimelineLite();
        s2.from($(".trigger2 .person-image"), 1, {
                scale: 0.8,
                opacity: 0,
                ease: ease2
            }, 0)
            .staggerFrom($(split_3.lines), 0.5, {
                y: 10,
                ease: ease1
            }, 0.02, 0)
            .staggerFrom($(split_2.lines), 0.5, {
                y: 10,
                ease: ease1
            }, 0.02, 0.2)
            .from($(".trigger1 .person-description"), 1, {
                y: 30
            }, 0)

        var scene = new ScrollMagic.Scene({
                triggerElement: ".trigger1 .person-description",
                reverse: false,
                offset: -300,
            })

            .setTween(s2)
            .addTo(controller);
    }) // jq end 
}


function contactTextThird() {
    jQuery(function($) {
        var split_4 = new SplitText(".trigger2 .person-bio p", {
            type: "lines, words"
        });
        var split_5 = new SplitText(".trigger2 .person-name", {
            type: "lines, words"
        });

        var controller = new ScrollMagic.Controller();

        var s3 = new TimelineLite();
        s3.staggerFrom($(split_5.lines), 0.5, {
                y: 10,
                ease: ease1
            }, 0.02, 0)
            .staggerFrom($(split_4.lines), 0.5, {
                y: 10,
                ease: ease1
            }, 0.02, 0.2)

        var scene = new ScrollMagic.Scene({
                triggerElement: ".trigger2 .person-description",
                reverse: false,
                offset: -400,
            })

            .setTween(s3)
            .addTo(controller);
    }) // jq end 
}

//Bottom page things


function nextPageType() {
    jQuery(function($) {
        console.log("kk")
        var split_6 = new SplitText(".next-page .h2 a", {
            type: "words, chars"
        });

        var controller = new ScrollMagic.Controller();

        var s3 = new TimelineLite();
        s3.staggerTo($(split_6.chars), 0.3, {
                y: -7,
                ease: ease1
            }, 0.04, 0)
            .staggerTo($(split_6.chars), 0.3, {
                y: 0,
                ease: ease1
            }, 0.04, 0.3)

        var scene = new ScrollMagic.Scene({
                triggerElement: ".next-page .h2",
                reverse: false,
                offset: -100,
            })

            .setTween(s3)
            .addTo(controller);
    }) // jq end 


}